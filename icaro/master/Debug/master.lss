
master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00001a6e  00001b02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a6e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001bb  0080010e  0080010e  00001b10  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001b10  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001b6c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000238  00000000  00000000  00001bac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002687  00000000  00000000  00001de4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dcf  00000000  00000000  0000446b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014d1  00000000  00000000  0000523a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007e4  00000000  00000000  0000670c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a5a  00000000  00000000  00006ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002524  00000000  00000000  0000794a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000218  00000000  00000000  00009e6e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__ctors_end>
       4:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
       8:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
       c:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      10:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      14:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      18:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      1c:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      20:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      24:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      28:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      2c:	0c 94 b1 02 	jmp	0x562	; 0x562 <__vector_11>
      30:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      34:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      38:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      3c:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      40:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      44:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      48:	0c 94 1d 07 	jmp	0xe3a	; 0xe3a <__vector_18>
      4c:	0c 94 48 07 	jmp	0xe90	; 0xe90 <__vector_19>
      50:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      54:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      58:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      5c:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      60:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__vector_24>
      64:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      68:	08 07       	cpc	r16, r24
      6a:	0c 07       	cpc	r16, r28
      6c:	0c 07       	cpc	r16, r28
      6e:	0c 07       	cpc	r16, r28
      70:	0c 07       	cpc	r16, r28
      72:	0c 07       	cpc	r16, r28
      74:	0c 07       	cpc	r16, r28
      76:	0c 07       	cpc	r16, r28
      78:	1c 06       	cpc	r1, r28
      7a:	0c 07       	cpc	r16, r28
      7c:	0c 07       	cpc	r16, r28
      7e:	0c 07       	cpc	r16, r28
      80:	0c 07       	cpc	r16, r28
      82:	0c 07       	cpc	r16, r28
      84:	0c 07       	cpc	r16, r28
      86:	0c 07       	cpc	r16, r28
      88:	1c 06       	cpc	r1, r28
      8a:	0c 07       	cpc	r16, r28
      8c:	0c 07       	cpc	r16, r28
      8e:	0c 07       	cpc	r16, r28
      90:	0c 07       	cpc	r16, r28
      92:	0c 07       	cpc	r16, r28
      94:	0c 07       	cpc	r16, r28
      96:	0c 07       	cpc	r16, r28
      98:	24 06       	cpc	r2, r20
      9a:	0c 07       	cpc	r16, r28
      9c:	0c 07       	cpc	r16, r28
      9e:	0c 07       	cpc	r16, r28
      a0:	0c 07       	cpc	r16, r28
      a2:	0c 07       	cpc	r16, r28
      a4:	0c 07       	cpc	r16, r28
      a6:	0c 07       	cpc	r16, r28
      a8:	4a 06       	cpc	r4, r26
      aa:	0c 07       	cpc	r16, r28
      ac:	0c 07       	cpc	r16, r28
      ae:	0c 07       	cpc	r16, r28
      b0:	0c 07       	cpc	r16, r28
      b2:	0c 07       	cpc	r16, r28
      b4:	0c 07       	cpc	r16, r28
      b6:	0c 07       	cpc	r16, r28
      b8:	24 06       	cpc	r2, r20
      ba:	0c 07       	cpc	r16, r28
      bc:	0c 07       	cpc	r16, r28
      be:	0c 07       	cpc	r16, r28
      c0:	0c 07       	cpc	r16, r28
      c2:	0c 07       	cpc	r16, r28
      c4:	0c 07       	cpc	r16, r28
      c6:	0c 07       	cpc	r16, r28
      c8:	50 06       	cpc	r5, r16
      ca:	0c 07       	cpc	r16, r28
      cc:	0c 07       	cpc	r16, r28
      ce:	0c 07       	cpc	r16, r28
      d0:	0c 07       	cpc	r16, r28
      d2:	0c 07       	cpc	r16, r28
      d4:	0c 07       	cpc	r16, r28
      d6:	0c 07       	cpc	r16, r28
      d8:	56 06       	cpc	r5, r22
      da:	0c 07       	cpc	r16, r28
      dc:	0c 07       	cpc	r16, r28
      de:	0c 07       	cpc	r16, r28
      e0:	0c 07       	cpc	r16, r28
      e2:	0c 07       	cpc	r16, r28
      e4:	0c 07       	cpc	r16, r28
      e6:	0c 07       	cpc	r16, r28
      e8:	68 06       	cpc	r6, r24
      ea:	0c 07       	cpc	r16, r28
      ec:	0c 07       	cpc	r16, r28
      ee:	0c 07       	cpc	r16, r28
      f0:	0c 07       	cpc	r16, r28
      f2:	0c 07       	cpc	r16, r28
      f4:	0c 07       	cpc	r16, r28
      f6:	0c 07       	cpc	r16, r28
      f8:	92 06       	cpc	r9, r18
      fa:	0c 07       	cpc	r16, r28
      fc:	0c 07       	cpc	r16, r28
      fe:	0c 07       	cpc	r16, r28
     100:	0c 07       	cpc	r16, r28
     102:	0c 07       	cpc	r16, r28
     104:	0c 07       	cpc	r16, r28
     106:	0c 07       	cpc	r16, r28
     108:	5c 06       	cpc	r5, r28
     10a:	0c 07       	cpc	r16, r28
     10c:	0c 07       	cpc	r16, r28
     10e:	0c 07       	cpc	r16, r28
     110:	0c 07       	cpc	r16, r28
     112:	0c 07       	cpc	r16, r28
     114:	0c 07       	cpc	r16, r28
     116:	0c 07       	cpc	r16, r28
     118:	76 06       	cpc	r7, r22
     11a:	0c 07       	cpc	r16, r28
     11c:	0c 07       	cpc	r16, r28
     11e:	0c 07       	cpc	r16, r28
     120:	0c 07       	cpc	r16, r28
     122:	0c 07       	cpc	r16, r28
     124:	0c 07       	cpc	r16, r28
     126:	0c 07       	cpc	r16, r28
     128:	95 06       	cpc	r9, r21
     12a:	0c 07       	cpc	r16, r28
     12c:	0c 07       	cpc	r16, r28
     12e:	0c 07       	cpc	r16, r28
     130:	0c 07       	cpc	r16, r28
     132:	0c 07       	cpc	r16, r28
     134:	0c 07       	cpc	r16, r28
     136:	0c 07       	cpc	r16, r28
     138:	95 06       	cpc	r9, r21
     13a:	0c 07       	cpc	r16, r28
     13c:	0c 07       	cpc	r16, r28
     13e:	0c 07       	cpc	r16, r28
     140:	0c 07       	cpc	r16, r28
     142:	0c 07       	cpc	r16, r28
     144:	0c 07       	cpc	r16, r28
     146:	0c 07       	cpc	r16, r28
     148:	95 06       	cpc	r9, r21
     14a:	0c 07       	cpc	r16, r28
     14c:	0c 07       	cpc	r16, r28
     14e:	0c 07       	cpc	r16, r28
     150:	0c 07       	cpc	r16, r28
     152:	0c 07       	cpc	r16, r28
     154:	0c 07       	cpc	r16, r28
     156:	0c 07       	cpc	r16, r28
     158:	95 06       	cpc	r9, r21
     15a:	0c 07       	cpc	r16, r28
     15c:	0c 07       	cpc	r16, r28
     15e:	0c 07       	cpc	r16, r28
     160:	0c 07       	cpc	r16, r28
     162:	0c 07       	cpc	r16, r28
     164:	0c 07       	cpc	r16, r28
     166:	0c 07       	cpc	r16, r28
     168:	9e 06       	cpc	r9, r30
     16a:	0c 07       	cpc	r16, r28
     16c:	0c 07       	cpc	r16, r28
     16e:	0c 07       	cpc	r16, r28
     170:	0c 07       	cpc	r16, r28
     172:	0c 07       	cpc	r16, r28
     174:	0c 07       	cpc	r16, r28
     176:	0c 07       	cpc	r16, r28
     178:	cf 06       	cpc	r12, r31
     17a:	0c 07       	cpc	r16, r28
     17c:	0c 07       	cpc	r16, r28
     17e:	0c 07       	cpc	r16, r28
     180:	0c 07       	cpc	r16, r28
     182:	0c 07       	cpc	r16, r28
     184:	0c 07       	cpc	r16, r28
     186:	0c 07       	cpc	r16, r28
     188:	9e 06       	cpc	r9, r30
     18a:	0c 07       	cpc	r16, r28
     18c:	0c 07       	cpc	r16, r28
     18e:	0c 07       	cpc	r16, r28
     190:	0c 07       	cpc	r16, r28
     192:	0c 07       	cpc	r16, r28
     194:	0c 07       	cpc	r16, r28
     196:	0c 07       	cpc	r16, r28
     198:	cf 06       	cpc	r12, r31
     19a:	0c 07       	cpc	r16, r28
     19c:	0c 07       	cpc	r16, r28
     19e:	0c 07       	cpc	r16, r28
     1a0:	0c 07       	cpc	r16, r28
     1a2:	0c 07       	cpc	r16, r28
     1a4:	0c 07       	cpc	r16, r28
     1a6:	0c 07       	cpc	r16, r28
     1a8:	b6 06       	cpc	r11, r22
     1aa:	0c 07       	cpc	r16, r28
     1ac:	0c 07       	cpc	r16, r28
     1ae:	0c 07       	cpc	r16, r28
     1b0:	0c 07       	cpc	r16, r28
     1b2:	0c 07       	cpc	r16, r28
     1b4:	0c 07       	cpc	r16, r28
     1b6:	0c 07       	cpc	r16, r28
     1b8:	d3 06       	cpc	r13, r19
     1ba:	0c 07       	cpc	r16, r28
     1bc:	0c 07       	cpc	r16, r28
     1be:	0c 07       	cpc	r16, r28
     1c0:	0c 07       	cpc	r16, r28
     1c2:	0c 07       	cpc	r16, r28
     1c4:	0c 07       	cpc	r16, r28
     1c6:	0c 07       	cpc	r16, r28
     1c8:	d3 06       	cpc	r13, r19
     1ca:	0c 07       	cpc	r16, r28
     1cc:	0c 07       	cpc	r16, r28
     1ce:	0c 07       	cpc	r16, r28
     1d0:	0c 07       	cpc	r16, r28
     1d2:	0c 07       	cpc	r16, r28
     1d4:	0c 07       	cpc	r16, r28
     1d6:	0c 07       	cpc	r16, r28
     1d8:	e8 06       	cpc	r14, r24
     1da:	0c 07       	cpc	r16, r28
     1dc:	0c 07       	cpc	r16, r28
     1de:	0c 07       	cpc	r16, r28
     1e0:	0c 07       	cpc	r16, r28
     1e2:	0c 07       	cpc	r16, r28
     1e4:	0c 07       	cpc	r16, r28
     1e6:	0c 07       	cpc	r16, r28
     1e8:	02 07       	cpc	r16, r18
     1ea:	0c 07       	cpc	r16, r28
     1ec:	0c 07       	cpc	r16, r28
     1ee:	0c 07       	cpc	r16, r28
     1f0:	0c 07       	cpc	r16, r28
     1f2:	0c 07       	cpc	r16, r28
     1f4:	0c 07       	cpc	r16, r28
     1f6:	0c 07       	cpc	r16, r28
     1f8:	02 07       	cpc	r16, r18

000001fa <__trampolines_end>:
     1fa:	6e 61       	ori	r22, 0x1E	; 30
     1fc:	6e 00       	.word	0x006e	; ????

000001fe <__c.2332>:
     1fe:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     20e:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     21e:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     22e:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     23e:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     24e:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     25e:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     26e:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     27e:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     28e:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     29e:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     2ae:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     2be:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2ce:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2de:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     2ee:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000002fc <__ctors_end>:
     2fc:	11 24       	eor	r1, r1
     2fe:	1f be       	out	0x3f, r1	; 63
     300:	cf ef       	ldi	r28, 0xFF	; 255
     302:	d8 e0       	ldi	r29, 0x08	; 8
     304:	de bf       	out	0x3e, r29	; 62
     306:	cd bf       	out	0x3d, r28	; 61

00000308 <__do_copy_data>:
     308:	11 e0       	ldi	r17, 0x01	; 1
     30a:	a0 e0       	ldi	r26, 0x00	; 0
     30c:	b1 e0       	ldi	r27, 0x01	; 1
     30e:	ee e6       	ldi	r30, 0x6E	; 110
     310:	fa e1       	ldi	r31, 0x1A	; 26
     312:	02 c0       	rjmp	.+4      	; 0x318 <__do_copy_data+0x10>
     314:	05 90       	lpm	r0, Z+
     316:	0d 92       	st	X+, r0
     318:	ae 30       	cpi	r26, 0x0E	; 14
     31a:	b1 07       	cpc	r27, r17
     31c:	d9 f7       	brne	.-10     	; 0x314 <__do_copy_data+0xc>

0000031e <__do_clear_bss>:
     31e:	22 e0       	ldi	r18, 0x02	; 2
     320:	ae e0       	ldi	r26, 0x0E	; 14
     322:	b1 e0       	ldi	r27, 0x01	; 1
     324:	01 c0       	rjmp	.+2      	; 0x328 <.do_clear_bss_start>

00000326 <.do_clear_bss_loop>:
     326:	1d 92       	st	X+, r1

00000328 <.do_clear_bss_start>:
     328:	a9 3c       	cpi	r26, 0xC9	; 201
     32a:	b2 07       	cpc	r27, r18
     32c:	e1 f7       	brne	.-8      	; 0x326 <.do_clear_bss_loop>
     32e:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <main>
     332:	0c 94 35 0d 	jmp	0x1a6a	; 0x1a6a <_exit>

00000336 <__bad_interrupt>:
     336:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000033a <setup>:

union Float f;
uint8_t BUFFER[10] = {0};

void setup()
{
     33a:	cf 93       	push	r28
     33c:	df 93       	push	r29
     33e:	1f 92       	push	r1
     340:	cd b7       	in	r28, 0x3d	; 61
     342:	de b7       	in	r29, 0x3e	; 62
    DDRB |= (1 << PB5);
     344:	25 9a       	sbi	0x04, 5	; 4
    init_millis(F_CPU);
     346:	60 e0       	ldi	r22, 0x00	; 0
     348:	74 e2       	ldi	r23, 0x24	; 36
     34a:	84 ef       	ldi	r24, 0xF4	; 244
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	0e 94 d6 02 	call	0x5ac	; 0x5ac <init_millis>
    wire_init();
     352:	0e 94 32 03 	call	0x664	; 0x664 <wire_init>
    
    #ifdef DEBUG
    uart_init(UART_BAUD_SELECT(UART_BAUD_RATE, F_CPU));
     356:	80 e1       	ldi	r24, 0x10	; 16
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	0e 94 72 07 	call	0xee4	; 0xee4 <uart_init>
    #endif
    
    sei();
     35e:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     360:	2f ef       	ldi	r18, 0xFF	; 255
     362:	83 ed       	ldi	r24, 0xD3	; 211
     364:	90 e3       	ldi	r25, 0x30	; 48
     366:	21 50       	subi	r18, 0x01	; 1
     368:	80 40       	sbci	r24, 0x00	; 0
     36a:	90 40       	sbci	r25, 0x00	; 0
     36c:	e1 f7       	brne	.-8      	; 0x366 <setup+0x2c>
     36e:	00 c0       	rjmp	.+0      	; 0x370 <setup+0x36>
     370:	00 00       	nop
    
    _delay_ms(1000);
    
    i2c_write_byte(IMU_TWI_ADDRESS, IMU_STATUS_ADDRESS, IMU_STATUS_CALIBRATING);
     372:	42 e0       	ldi	r20, 0x02	; 2
     374:	60 e0       	ldi	r22, 0x00	; 0
     376:	81 e0       	ldi	r24, 0x01	; 1
     378:	0e 94 df 04 	call	0x9be	; 0x9be <i2c_write_byte>
    uint8_t result[1];
    do 
    {
        i2c_read_byte(IMU_TWI_ADDRESS, IMU_STATUS_ADDRESS, result, I2CDEV_DEFAULT_READ_TIMEOUT);
     37c:	28 ee       	ldi	r18, 0xE8	; 232
     37e:	33 e0       	ldi	r19, 0x03	; 3
     380:	ae 01       	movw	r20, r28
     382:	4f 5f       	subi	r20, 0xFF	; 255
     384:	5f 4f       	sbci	r21, 0xFF	; 255
     386:	60 e0       	ldi	r22, 0x00	; 0
     388:	81 e0       	ldi	r24, 0x01	; 1
     38a:	0e 94 a9 04 	call	0x952	; 0x952 <i2c_read_byte>
     38e:	2f ef       	ldi	r18, 0xFF	; 255
     390:	83 ed       	ldi	r24, 0xD3	; 211
     392:	90 e3       	ldi	r25, 0x30	; 48
     394:	21 50       	subi	r18, 0x01	; 1
     396:	80 40       	sbci	r24, 0x00	; 0
     398:	90 40       	sbci	r25, 0x00	; 0
     39a:	e1 f7       	brne	.-8      	; 0x394 <setup+0x5a>
     39c:	00 c0       	rjmp	.+0      	; 0x39e <setup+0x64>
     39e:	00 00       	nop
        _delay_ms(1000);
    } while (result[0] != IMU_STATUS_READY_TO_START);
     3a0:	89 81       	ldd	r24, Y+1	; 0x01
     3a2:	83 30       	cpi	r24, 0x03	; 3
     3a4:	59 f7       	brne	.-42     	; 0x37c <setup+0x42>
    i2c_write_byte(IMU_TWI_ADDRESS, IMU_STATUS_ADDRESS, IMU_STATUS_RUNNING);
     3a6:	4a e0       	ldi	r20, 0x0A	; 10
     3a8:	60 e0       	ldi	r22, 0x00	; 0
     3aa:	81 e0       	ldi	r24, 0x01	; 1
     3ac:	0e 94 df 04 	call	0x9be	; 0x9be <i2c_write_byte>
}
     3b0:	0f 90       	pop	r0
     3b2:	df 91       	pop	r29
     3b4:	cf 91       	pop	r28
     3b6:	08 95       	ret

000003b8 <main>:
float roll, pitch, yaw;
uint8_t imu_data[12] = {0};

int main(void)
{
    setup();
     3b8:	0e 94 9d 01 	call	0x33a	; 0x33a <setup>
    while(1)
    {
        long delta = millis() - last_time;
        if(delta > 1000)
        {
            PORTB ^= (1 << PB5);
     3bc:	68 94       	set
     3be:	66 24       	eor	r6, r6
     3c0:	65 f8       	bld	r6, 5
            
            #ifdef DEBUG
            sprintf(DEBUG_BUFFER, "rpy\t%f\t%f\t%f\n", roll, pitch, yaw);
     3c2:	0f 2e       	mov	r0, r31
     3c4:	f0 e0       	ldi	r31, 0x00	; 0
     3c6:	cf 2e       	mov	r12, r31
     3c8:	f1 e0       	ldi	r31, 0x01	; 1
     3ca:	df 2e       	mov	r13, r31
     3cc:	f0 2d       	mov	r31, r0
     3ce:	0f 2e       	mov	r0, r31
     3d0:	f2 e2       	ldi	r31, 0x22	; 34
     3d2:	ef 2e       	mov	r14, r31
     3d4:	f1 e0       	ldi	r31, 0x01	; 1
     3d6:	ff 2e       	mov	r15, r31
     3d8:	f0 2d       	mov	r31, r0
     3da:	7e 2c       	mov	r7, r14
     3dc:	df 2d       	mov	r29, r15
            for(int i = 0; i < 12; i++)
            { i2c_read_bytes(IMU_TWI_ADDRESS, IMU_ROLL_ADDRESS + i, 1, &imu_data[i], I2CDEV_DEFAULT_READ_TIMEOUT); }
            
            
            f.m_float = 0;
            memcpy(f.m_bytes, &imu_data[0], sizeof(float));
     3de:	0f 2e       	mov	r0, r31
     3e0:	fe e0       	ldi	r31, 0x0E	; 14
     3e2:	af 2e       	mov	r10, r31
     3e4:	f1 e0       	ldi	r31, 0x01	; 1
     3e6:	bf 2e       	mov	r11, r31
     3e8:	f0 2d       	mov	r31, r0
{
    setup();
    
    while(1)
    {
        long delta = millis() - last_time;
     3ea:	0e 94 ef 02 	call	0x5de	; 0x5de <millis>
        if(delta > 1000)
     3ee:	00 91 1e 01 	lds	r16, 0x011E	; 0x80011e <last_time>
     3f2:	10 91 1f 01 	lds	r17, 0x011F	; 0x80011f <last_time+0x1>
     3f6:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <last_time+0x2>
     3fa:	30 91 21 01 	lds	r19, 0x0121	; 0x800121 <last_time+0x3>
     3fe:	dc 01       	movw	r26, r24
     400:	cb 01       	movw	r24, r22
     402:	80 1b       	sub	r24, r16
     404:	91 0b       	sbc	r25, r17
     406:	a2 0b       	sbc	r26, r18
     408:	b3 0b       	sbc	r27, r19
     40a:	89 3e       	cpi	r24, 0xE9	; 233
     40c:	93 40       	sbci	r25, 0x03	; 3
     40e:	a1 05       	cpc	r26, r1
     410:	b1 05       	cpc	r27, r1
     412:	0c f4       	brge	.+2      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
     414:	43 c0       	rjmp	.+134    	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
        {
            PORTB ^= (1 << PB5);
     416:	85 b1       	in	r24, 0x05	; 5
     418:	86 25       	eor	r24, r6
     41a:	85 b9       	out	0x05, r24	; 5
            
            #ifdef DEBUG
            sprintf(DEBUG_BUFFER, "rpy\t%f\t%f\t%f\n", roll, pitch, yaw);
     41c:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <yaw+0x3>
     420:	8f 93       	push	r24
     422:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <yaw+0x2>
     426:	8f 93       	push	r24
     428:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <yaw+0x1>
     42c:	8f 93       	push	r24
     42e:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <yaw>
     432:	8f 93       	push	r24
     434:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <pitch+0x3>
     438:	8f 93       	push	r24
     43a:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <pitch+0x2>
     43e:	8f 93       	push	r24
     440:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <pitch+0x1>
     444:	8f 93       	push	r24
     446:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <pitch>
     44a:	8f 93       	push	r24
     44c:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <roll+0x3>
     450:	8f 93       	push	r24
     452:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <roll+0x2>
     456:	8f 93       	push	r24
     458:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <roll+0x1>
     45c:	8f 93       	push	r24
     45e:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <roll>
     462:	8f 93       	push	r24
     464:	df 92       	push	r13
     466:	cf 92       	push	r12
     468:	ff 92       	push	r15
     46a:	ef 92       	push	r14
     46c:	0e 94 b5 0c 	call	0x196a	; 0x196a <sprintf>
            uart_puts(DEBUG_BUFFER);
     470:	87 2d       	mov	r24, r7
     472:	9d 2f       	mov	r25, r29
     474:	0e 94 a0 07 	call	0xf40	; 0xf40 <uart_puts>
            #endif
            
            last_time = millis();
     478:	0e 94 ef 02 	call	0x5de	; 0x5de <millis>
     47c:	60 93 1e 01 	sts	0x011E, r22	; 0x80011e <last_time>
     480:	70 93 1f 01 	sts	0x011F, r23	; 0x80011f <last_time+0x1>
     484:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <last_time+0x2>
     488:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <last_time+0x3>
     48c:	8d b7       	in	r24, 0x3d	; 61
     48e:	9e b7       	in	r25, 0x3e	; 62
     490:	40 96       	adiw	r24, 0x10	; 16
     492:	0f b6       	in	r0, 0x3f	; 63
     494:	f8 94       	cli
     496:	9e bf       	out	0x3e, r25	; 62
     498:	0f be       	out	0x3f, r0	; 63
     49a:	8d bf       	out	0x3d, r24	; 61
        }
        
        delta = millis() - last_imu;
     49c:	0e 94 ef 02 	call	0x5de	; 0x5de <millis>
        if (delta > 1000)
     4a0:	00 91 1a 01 	lds	r16, 0x011A	; 0x80011a <last_imu>
     4a4:	10 91 1b 01 	lds	r17, 0x011B	; 0x80011b <last_imu+0x1>
     4a8:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <last_imu+0x2>
     4ac:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <last_imu+0x3>
     4b0:	dc 01       	movw	r26, r24
     4b2:	cb 01       	movw	r24, r22
     4b4:	80 1b       	sub	r24, r16
     4b6:	91 0b       	sbc	r25, r17
     4b8:	a2 0b       	sbc	r26, r18
     4ba:	b3 0b       	sbc	r27, r19
     4bc:	89 3e       	cpi	r24, 0xE9	; 233
     4be:	93 40       	sbci	r25, 0x03	; 3
     4c0:	a1 05       	cpc	r26, r1
     4c2:	b1 05       	cpc	r27, r1
     4c4:	0c f4       	brge	.+2      	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
     4c6:	91 cf       	rjmp	.-222    	; 0x3ea <main+0x32>
     4c8:	0f 2e       	mov	r0, r31
     4ca:	fe e0       	ldi	r31, 0x0E	; 14
     4cc:	8f 2e       	mov	r8, r31
     4ce:	f1 e0       	ldi	r31, 0x01	; 1
     4d0:	9f 2e       	mov	r9, r31
     4d2:	f0 2d       	mov	r31, r0
     4d4:	c1 e0       	ldi	r28, 0x01	; 1
        {
            for(int i = 0; i < 12; i++)
            { i2c_read_bytes(IMU_TWI_ADDRESS, IMU_ROLL_ADDRESS + i, 1, &imu_data[i], I2CDEV_DEFAULT_READ_TIMEOUT); }
     4d6:	08 ee       	ldi	r16, 0xE8	; 232
     4d8:	13 e0       	ldi	r17, 0x03	; 3
     4da:	94 01       	movw	r18, r8
     4dc:	41 e0       	ldi	r20, 0x01	; 1
     4de:	6c 2f       	mov	r22, r28
     4e0:	81 e0       	ldi	r24, 0x01	; 1
     4e2:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <i2c_read_bytes>
     4e6:	cf 5f       	subi	r28, 0xFF	; 255
     4e8:	ff ef       	ldi	r31, 0xFF	; 255
     4ea:	8f 1a       	sub	r8, r31
     4ec:	9f 0a       	sbc	r9, r31
        }
        
        delta = millis() - last_imu;
        if (delta > 1000)
        {
            for(int i = 0; i < 12; i++)
     4ee:	cd 30       	cpi	r28, 0x0D	; 13
     4f0:	91 f7       	brne	.-28     	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
            { i2c_read_bytes(IMU_TWI_ADDRESS, IMU_ROLL_ADDRESS + i, 1, &imu_data[i], I2CDEV_DEFAULT_READ_TIMEOUT); }
            
            
            f.m_float = 0;
            memcpy(f.m_bytes, &imu_data[0], sizeof(float));
            roll = f.m_float;
     4f2:	f5 01       	movw	r30, r10
     4f4:	80 81       	ld	r24, Z
     4f6:	91 81       	ldd	r25, Z+1	; 0x01
     4f8:	a2 81       	ldd	r26, Z+2	; 0x02
     4fa:	b3 81       	ldd	r27, Z+3	; 0x03
     4fc:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <roll>
     500:	90 93 82 02 	sts	0x0282, r25	; 0x800282 <roll+0x1>
     504:	a0 93 83 02 	sts	0x0283, r26	; 0x800283 <roll+0x2>
     508:	b0 93 84 02 	sts	0x0284, r27	; 0x800284 <roll+0x3>
                
            f.m_float = 0;
            memcpy(f.m_bytes, &imu_data[4], sizeof(float));
            pitch = f.m_float;
     50c:	84 81       	ldd	r24, Z+4	; 0x04
     50e:	95 81       	ldd	r25, Z+5	; 0x05
     510:	a6 81       	ldd	r26, Z+6	; 0x06
     512:	b7 81       	ldd	r27, Z+7	; 0x07
     514:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <pitch>
     518:	90 93 7e 02 	sts	0x027E, r25	; 0x80027e <pitch+0x1>
     51c:	a0 93 7f 02 	sts	0x027F, r26	; 0x80027f <pitch+0x2>
     520:	b0 93 80 02 	sts	0x0280, r27	; 0x800280 <pitch+0x3>
                
            f.m_float = 0;
            memcpy(f.m_bytes, &imu_data[8], sizeof(float));
     524:	80 85       	ldd	r24, Z+8	; 0x08
     526:	91 85       	ldd	r25, Z+9	; 0x09
     528:	a2 85       	ldd	r26, Z+10	; 0x0a
     52a:	b3 85       	ldd	r27, Z+11	; 0x0b
     52c:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <f>
     530:	90 93 76 02 	sts	0x0276, r25	; 0x800276 <f+0x1>
     534:	a0 93 77 02 	sts	0x0277, r26	; 0x800277 <f+0x2>
     538:	b0 93 78 02 	sts	0x0278, r27	; 0x800278 <f+0x3>
            yaw = f.m_float;
     53c:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <yaw>
     540:	90 93 7a 02 	sts	0x027A, r25	; 0x80027a <yaw+0x1>
     544:	a0 93 7b 02 	sts	0x027B, r26	; 0x80027b <yaw+0x2>
     548:	b0 93 7c 02 	sts	0x027C, r27	; 0x80027c <yaw+0x3>
            
            last_imu = millis();
     54c:	0e 94 ef 02 	call	0x5de	; 0x5de <millis>
     550:	60 93 1a 01 	sts	0x011A, r22	; 0x80011a <last_imu>
     554:	70 93 1b 01 	sts	0x011B, r23	; 0x80011b <last_imu+0x1>
     558:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <last_imu+0x2>
     55c:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <last_imu+0x3>
     560:	44 cf       	rjmp	.-376    	; 0x3ea <main+0x32>

00000562 <__vector_11>:

volatile unsigned long timer1_millis;
//NOTE: A unsigned long holds values from 0 to 4,294,967,295 (2^32 - 1). It will roll over to 0 after reaching its maximum value.

ISR(TIMER1_COMPA_vect)
{
     562:	1f 92       	push	r1
     564:	0f 92       	push	r0
     566:	0f b6       	in	r0, 0x3f	; 63
     568:	0f 92       	push	r0
     56a:	11 24       	eor	r1, r1
     56c:	8f 93       	push	r24
     56e:	9f 93       	push	r25
     570:	af 93       	push	r26
     572:	bf 93       	push	r27
	timer1_millis++;
     574:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <timer1_millis>
     578:	90 91 86 02 	lds	r25, 0x0286	; 0x800286 <timer1_millis+0x1>
     57c:	a0 91 87 02 	lds	r26, 0x0287	; 0x800287 <timer1_millis+0x2>
     580:	b0 91 88 02 	lds	r27, 0x0288	; 0x800288 <timer1_millis+0x3>
     584:	01 96       	adiw	r24, 0x01	; 1
     586:	a1 1d       	adc	r26, r1
     588:	b1 1d       	adc	r27, r1
     58a:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <timer1_millis>
     58e:	90 93 86 02 	sts	0x0286, r25	; 0x800286 <timer1_millis+0x1>
     592:	a0 93 87 02 	sts	0x0287, r26	; 0x800287 <timer1_millis+0x2>
     596:	b0 93 88 02 	sts	0x0288, r27	; 0x800288 <timer1_millis+0x3>
}
     59a:	bf 91       	pop	r27
     59c:	af 91       	pop	r26
     59e:	9f 91       	pop	r25
     5a0:	8f 91       	pop	r24
     5a2:	0f 90       	pop	r0
     5a4:	0f be       	out	0x3f, r0	; 63
     5a6:	0f 90       	pop	r0
     5a8:	1f 90       	pop	r1
     5aa:	18 95       	reti

000005ac <init_millis>:

void init_millis(unsigned long f_cpu)
{
	unsigned long ctc_match_overflow;
	
	ctc_match_overflow = ((f_cpu / 1000) / 8); //when timer1 is this value, 1ms has passed
     5ac:	20 e4       	ldi	r18, 0x40	; 64
     5ae:	3f e1       	ldi	r19, 0x1F	; 31
     5b0:	40 e0       	ldi	r20, 0x00	; 0
     5b2:	50 e0       	ldi	r21, 0x00	; 0
     5b4:	0e 94 2c 0b 	call	0x1658	; 0x1658 <__udivmodsi4>
	
	// (Set timer to clear when matching ctc_match_overflow) | (Set clock divisor to 8)
	TCCR1B |= (1 << WGM12) | (1 << CS11);
     5b8:	e1 e8       	ldi	r30, 0x81	; 129
     5ba:	f0 e0       	ldi	r31, 0x00	; 0
     5bc:	80 81       	ld	r24, Z
     5be:	8a 60       	ori	r24, 0x0A	; 10
     5c0:	80 83       	st	Z, r24
	
	// high byte first, then low byte
	OCR1AH = (ctc_match_overflow >> 8);
     5c2:	bb 27       	eor	r27, r27
     5c4:	a5 2f       	mov	r26, r21
     5c6:	94 2f       	mov	r25, r20
     5c8:	83 2f       	mov	r24, r19
     5ca:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
	OCR1AL = ctc_match_overflow;
     5ce:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	
	// Enable the compare match interrupt
	TIMSK1 |= (1 << OCIE1A);
     5d2:	ef e6       	ldi	r30, 0x6F	; 111
     5d4:	f0 e0       	ldi	r31, 0x00	; 0
     5d6:	80 81       	ld	r24, Z
     5d8:	82 60       	ori	r24, 0x02	; 2
     5da:	80 83       	st	Z, r24
     5dc:	08 95       	ret

000005de <millis>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     5de:	f8 94       	cli
{
	unsigned long millis_return;
	
	// Ensure this cannot be disrupted
	ATOMIC_BLOCK(ATOMIC_FORCEON) {
		millis_return = timer1_millis;
     5e0:	60 91 85 02 	lds	r22, 0x0285	; 0x800285 <timer1_millis>
     5e4:	70 91 86 02 	lds	r23, 0x0286	; 0x800286 <timer1_millis+0x1>
     5e8:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <timer1_millis+0x2>
     5ec:	90 91 88 02 	lds	r25, 0x0288	; 0x800288 <timer1_millis+0x3>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     5f0:	78 94       	sei
	}
	return millis_return;
     5f2:	08 95       	ret

000005f4 <wire_on_receive_service>:
        w &= mask;
        w >>= (bit_start - length + 1);
        *data = w;
    }
    return count;
}
     5f4:	cf 93       	push	r28
     5f6:	df 93       	push	r29
     5f8:	ec 01       	movw	r28, r24
     5fa:	e0 91 be 01 	lds	r30, 0x01BE	; 0x8001be <user_on_receive>
     5fe:	f0 91 bf 01 	lds	r31, 0x01BF	; 0x8001bf <user_on_receive+0x1>
     602:	30 97       	sbiw	r30, 0x00	; 0
     604:	01 f1       	breq	.+64     	; 0x646 <wire_on_receive_service+0x52>
     606:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <rx_buffer_index>
     60a:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <rx_buffer_length>
     60e:	98 17       	cp	r25, r24
     610:	d0 f0       	brcs	.+52     	; 0x646 <wire_on_receive_service+0x52>
     612:	16 16       	cp	r1, r22
     614:	17 06       	cpc	r1, r23
     616:	8c f4       	brge	.+34     	; 0x63a <wire_on_receive_service+0x46>
     618:	20 e0       	ldi	r18, 0x00	; 0
     61a:	30 e0       	ldi	r19, 0x00	; 0
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	de 01       	movw	r26, r28
     620:	a9 0f       	add	r26, r25
     622:	b1 1d       	adc	r27, r1
     624:	4c 91       	ld	r20, X
     626:	d9 01       	movw	r26, r18
     628:	a7 57       	subi	r26, 0x77	; 119
     62a:	bd 4f       	sbci	r27, 0xFD	; 253
     62c:	4c 93       	st	X, r20
     62e:	9f 5f       	subi	r25, 0xFF	; 255
     630:	29 2f       	mov	r18, r25
     632:	30 e0       	ldi	r19, 0x00	; 0
     634:	26 17       	cp	r18, r22
     636:	37 07       	cpc	r19, r23
     638:	94 f3       	brlt	.-28     	; 0x61e <wire_on_receive_service+0x2a>
     63a:	cb 01       	movw	r24, r22
     63c:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <rx_buffer_index>
     640:	60 93 bc 01 	sts	0x01BC, r22	; 0x8001bc <rx_buffer_length>
     644:	09 95       	icall
     646:	df 91       	pop	r29
     648:	cf 91       	pop	r28
     64a:	08 95       	ret

0000064c <wire_on_request_service>:
     64c:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <user_on_request>
     650:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <user_on_request+0x1>
     654:	30 97       	sbiw	r30, 0x00	; 0
     656:	29 f0       	breq	.+10     	; 0x662 <wire_on_request_service+0x16>
     658:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <tx_buffer_index>
     65c:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <tx_buffer_length>
     660:	09 95       	icall
     662:	08 95       	ret

00000664 <wire_init>:
     664:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <rx_buffer_index>
     668:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <rx_buffer_length>
     66c:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <tx_buffer_index>
     670:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <tx_buffer_length>
     674:	0e 94 ef 04 	call	0x9de	; 0x9de <twi_init>
     678:	86 e2       	ldi	r24, 0x26	; 38
     67a:	93 e0       	ldi	r25, 0x03	; 3
     67c:	0e 94 0a 05 	call	0xa14	; 0xa14 <twi_attach_slave_tx_event>
     680:	8a ef       	ldi	r24, 0xFA	; 250
     682:	92 e0       	ldi	r25, 0x02	; 2
     684:	0e 94 05 05 	call	0xa0a	; 0xa0a <twi_attach_slave_rx_event>
     688:	08 95       	ret

0000068a <wire_begin_transmission>:
     68a:	91 e0       	ldi	r25, 0x01	; 1
     68c:	90 93 b8 01 	sts	0x01B8, r25	; 0x8001b8 <transmitting>
     690:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <tx_address>
     694:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <tx_buffer_index>
     698:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <tx_buffer_length>
     69c:	08 95       	ret

0000069e <wire_end_transmission>:
     69e:	0f 93       	push	r16
     6a0:	08 2f       	mov	r16, r24
     6a2:	21 e0       	ldi	r18, 0x01	; 1
     6a4:	40 91 b9 01 	lds	r20, 0x01B9	; 0x8001b9 <tx_buffer_length>
     6a8:	69 ea       	ldi	r22, 0xA9	; 169
     6aa:	72 e0       	ldi	r23, 0x02	; 2
     6ac:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <tx_address>
     6b0:	0e 94 61 05 	call	0xac2	; 0xac2 <twi_write>
     6b4:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <tx_buffer_index>
     6b8:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <tx_buffer_length>
     6bc:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <transmitting>
     6c0:	0f 91       	pop	r16
     6c2:	08 95       	ret

000006c4 <wire_write>:
     6c4:	cf 93       	push	r28
     6c6:	df 93       	push	r29
     6c8:	1f 92       	push	r1
     6ca:	cd b7       	in	r28, 0x3d	; 61
     6cc:	de b7       	in	r29, 0x3e	; 62
     6ce:	89 83       	std	Y+1, r24	; 0x01
     6d0:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <transmitting>
     6d4:	88 23       	and	r24, r24
     6d6:	a1 f0       	breq	.+40     	; 0x700 <wire_write+0x3c>
     6d8:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <tx_buffer_length>
     6dc:	80 32       	cpi	r24, 0x20	; 32
     6de:	c0 f4       	brcc	.+48     	; 0x710 <wire_write+0x4c>
     6e0:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <tx_buffer_index>
     6e4:	e8 2f       	mov	r30, r24
     6e6:	f0 e0       	ldi	r31, 0x00	; 0
     6e8:	e7 55       	subi	r30, 0x57	; 87
     6ea:	fd 4f       	sbci	r31, 0xFD	; 253
     6ec:	99 81       	ldd	r25, Y+1	; 0x01
     6ee:	90 83       	st	Z, r25
     6f0:	8f 5f       	subi	r24, 0xFF	; 255
     6f2:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <tx_buffer_index>
     6f6:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <tx_buffer_length>
     6fa:	81 e0       	ldi	r24, 0x01	; 1
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	0a c0       	rjmp	.+20     	; 0x714 <wire_write+0x50>
     700:	61 e0       	ldi	r22, 0x01	; 1
     702:	ce 01       	movw	r24, r28
     704:	01 96       	adiw	r24, 0x01	; 1
     706:	0e 94 c1 05 	call	0xb82	; 0xb82 <twi_transmit>
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	02 c0       	rjmp	.+4      	; 0x714 <wire_write+0x50>
     710:	80 e0       	ldi	r24, 0x00	; 0
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	0f 90       	pop	r0
     716:	df 91       	pop	r29
     718:	cf 91       	pop	r28
     71a:	08 95       	ret

0000071c <wire_request_from>:
     71c:	8f 92       	push	r8
     71e:	9f 92       	push	r9
     720:	af 92       	push	r10
     722:	bf 92       	push	r11
     724:	ef 92       	push	r14
     726:	0f 93       	push	r16
     728:	1f 93       	push	r17
     72a:	cf 93       	push	r28
     72c:	df 93       	push	r29
     72e:	18 2f       	mov	r17, r24
     730:	d6 2f       	mov	r29, r22
     732:	49 01       	movw	r8, r18
     734:	5a 01       	movw	r10, r20
     736:	00 23       	and	r16, r16
     738:	09 f1       	breq	.+66     	; 0x77c <wire_request_from+0x60>
     73a:	0e 94 45 03 	call	0x68a	; 0x68a <wire_begin_transmission>
     73e:	04 30       	cpi	r16, 0x04	; 4
     740:	08 f0       	brcs	.+2      	; 0x744 <wire_request_from+0x28>
     742:	03 e0       	ldi	r16, 0x03	; 3
     744:	cf ef       	ldi	r28, 0xFF	; 255
     746:	c0 0f       	add	r28, r16
     748:	00 23       	and	r16, r16
     74a:	a9 f0       	breq	.+42     	; 0x776 <wire_request_from+0x5a>
     74c:	8c 2f       	mov	r24, r28
     74e:	88 0f       	add	r24, r24
     750:	88 0f       	add	r24, r24
     752:	88 0f       	add	r24, r24
     754:	a5 01       	movw	r20, r10
     756:	94 01       	movw	r18, r8
     758:	04 c0       	rjmp	.+8      	; 0x762 <wire_request_from+0x46>
     75a:	56 95       	lsr	r21
     75c:	47 95       	ror	r20
     75e:	37 95       	ror	r19
     760:	27 95       	ror	r18
     762:	8a 95       	dec	r24
     764:	d2 f7       	brpl	.-12     	; 0x75a <wire_request_from+0x3e>
     766:	da 01       	movw	r26, r20
     768:	c9 01       	movw	r24, r18
     76a:	0e 94 62 03 	call	0x6c4	; 0x6c4 <wire_write>
     76e:	8c 2f       	mov	r24, r28
     770:	c1 50       	subi	r28, 0x01	; 1
     772:	81 11       	cpse	r24, r1
     774:	eb cf       	rjmp	.-42     	; 0x74c <wire_request_from+0x30>
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	0e 94 4f 03 	call	0x69e	; 0x69e <wire_end_transmission>
     77c:	4d 2f       	mov	r20, r29
     77e:	d1 32       	cpi	r29, 0x21	; 33
     780:	08 f0       	brcs	.+2      	; 0x784 <wire_request_from+0x68>
     782:	40 e2       	ldi	r20, 0x20	; 32
     784:	2e 2d       	mov	r18, r14
     786:	69 e8       	ldi	r22, 0x89	; 137
     788:	72 e0       	ldi	r23, 0x02	; 2
     78a:	81 2f       	mov	r24, r17
     78c:	0e 94 0f 05 	call	0xa1e	; 0xa1e <twi_read>
     790:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <rx_buffer_index>
     794:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <rx_buffer_length>
     798:	df 91       	pop	r29
     79a:	cf 91       	pop	r28
     79c:	1f 91       	pop	r17
     79e:	0f 91       	pop	r16
     7a0:	ef 90       	pop	r14
     7a2:	bf 90       	pop	r11
     7a4:	af 90       	pop	r10
     7a6:	9f 90       	pop	r9
     7a8:	8f 90       	pop	r8
     7aa:	08 95       	ret

000007ac <wire_available>:
     7ac:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <rx_buffer_length>
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <rx_buffer_index>
     7b6:	82 1b       	sub	r24, r18
     7b8:	91 09       	sbc	r25, r1
     7ba:	08 95       	ret

000007bc <wire_read>:
     7bc:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <rx_buffer_index>
     7c0:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <rx_buffer_length>
     7c4:	98 17       	cp	r25, r24
     7c6:	50 f4       	brcc	.+20     	; 0x7dc <wire_read+0x20>
     7c8:	e9 2f       	mov	r30, r25
     7ca:	f0 e0       	ldi	r31, 0x00	; 0
     7cc:	e7 57       	subi	r30, 0x77	; 119
     7ce:	fd 4f       	sbci	r31, 0xFD	; 253
     7d0:	20 81       	ld	r18, Z
     7d2:	30 e0       	ldi	r19, 0x00	; 0
     7d4:	9f 5f       	subi	r25, 0xFF	; 255
     7d6:	90 93 bd 01 	sts	0x01BD, r25	; 0x8001bd <rx_buffer_index>
     7da:	02 c0       	rjmp	.+4      	; 0x7e0 <wire_read+0x24>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	c9 01       	movw	r24, r18
     7e2:	08 95       	ret

000007e4 <i2c_read_bytes>:
     7e4:	2f 92       	push	r2
     7e6:	3f 92       	push	r3
     7e8:	4f 92       	push	r4
     7ea:	5f 92       	push	r5
     7ec:	6f 92       	push	r6
     7ee:	7f 92       	push	r7
     7f0:	8f 92       	push	r8
     7f2:	9f 92       	push	r9
     7f4:	af 92       	push	r10
     7f6:	bf 92       	push	r11
     7f8:	cf 92       	push	r12
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	cf 93       	push	r28
     806:	df 93       	push	r29
     808:	cd b7       	in	r28, 0x3d	; 61
     80a:	de b7       	in	r29, 0x3e	; 62
     80c:	28 97       	sbiw	r28, 0x08	; 8
     80e:	0f b6       	in	r0, 0x3f	; 63
     810:	f8 94       	cli
     812:	de bf       	out	0x3e, r29	; 62
     814:	0f be       	out	0x3f, r0	; 63
     816:	cd bf       	out	0x3d, r28	; 61
     818:	f8 2e       	mov	r15, r24
     81a:	6d 83       	std	Y+5, r22	; 0x05
     81c:	84 2e       	mov	r8, r20
     81e:	59 01       	movw	r10, r18
     820:	68 01       	movw	r12, r16
     822:	0e 94 ef 02 	call	0x5de	; 0x5de <millis>
     826:	2b 01       	movw	r4, r22
     828:	3c 01       	movw	r6, r24
     82a:	88 20       	and	r8, r8
     82c:	09 f4       	brne	.+2      	; 0x830 <__DATA_REGION_LENGTH__+0x30>
     82e:	5a c0       	rjmp	.+180    	; 0x8e4 <__DATA_REGION_LENGTH__+0xe4>
     830:	91 2c       	mov	r9, r1
     832:	10 e0       	ldi	r17, 0x00	; 0
     834:	28 2c       	mov	r2, r8
     836:	31 2c       	mov	r3, r1
     838:	96 01       	movw	r18, r12
     83a:	40 e0       	ldi	r20, 0x00	; 0
     83c:	50 e0       	ldi	r21, 0x00	; 0
     83e:	29 83       	std	Y+1, r18	; 0x01
     840:	3a 83       	std	Y+2, r19	; 0x02
     842:	4b 83       	std	Y+3, r20	; 0x03
     844:	5c 83       	std	Y+4, r21	; 0x04
     846:	8e 82       	std	Y+6, r8	; 0x06
     848:	8f 2d       	mov	r24, r15
     84a:	0e 94 45 03 	call	0x68a	; 0x68a <wire_begin_transmission>
     84e:	8d 81       	ldd	r24, Y+5	; 0x05
     850:	0e 94 62 03 	call	0x6c4	; 0x6c4 <wire_write>
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	0e 94 4f 03 	call	0x69e	; 0x69e <wire_end_transmission>
     85a:	8f 2d       	mov	r24, r15
     85c:	0e 94 45 03 	call	0x68a	; 0x68a <wire_begin_transmission>
     860:	c1 01       	movw	r24, r2
     862:	89 19       	sub	r24, r9
     864:	91 09       	sbc	r25, r1
     866:	80 97       	sbiw	r24, 0x20	; 32
     868:	1c f4       	brge	.+6      	; 0x870 <__DATA_REGION_LENGTH__+0x70>
     86a:	68 2d       	mov	r22, r8
     86c:	69 19       	sub	r22, r9
     86e:	01 c0       	rjmp	.+2      	; 0x872 <__DATA_REGION_LENGTH__+0x72>
     870:	60 e2       	ldi	r22, 0x20	; 32
     872:	ee 24       	eor	r14, r14
     874:	e3 94       	inc	r14
     876:	00 e0       	ldi	r16, 0x00	; 0
     878:	20 e0       	ldi	r18, 0x00	; 0
     87a:	30 e0       	ldi	r19, 0x00	; 0
     87c:	a9 01       	movw	r20, r18
     87e:	8f 2d       	mov	r24, r15
     880:	0e 94 8e 03 	call	0x71c	; 0x71c <wire_request_from>
     884:	0d c0       	rjmp	.+26     	; 0x8a0 <__DATA_REGION_LENGTH__+0xa0>
     886:	a5 01       	movw	r20, r10
     888:	41 0f       	add	r20, r17
     88a:	51 1d       	adc	r21, r1
     88c:	17 fd       	sbrc	r17, 7
     88e:	5a 95       	dec	r21
     890:	58 87       	std	Y+8, r21	; 0x08
     892:	4f 83       	std	Y+7, r20	; 0x07
     894:	0e 94 de 03 	call	0x7bc	; 0x7bc <wire_read>
     898:	af 81       	ldd	r26, Y+7	; 0x07
     89a:	b8 85       	ldd	r27, Y+8	; 0x08
     89c:	8c 93       	st	X, r24
     89e:	1f 5f       	subi	r17, 0xFF	; 255
     8a0:	0e 94 d6 03 	call	0x7ac	; 0x7ac <wire_available>
     8a4:	89 2b       	or	r24, r25
     8a6:	a1 f0       	breq	.+40     	; 0x8d0 <__DATA_REGION_LENGTH__+0xd0>
     8a8:	c1 14       	cp	r12, r1
     8aa:	d1 04       	cpc	r13, r1
     8ac:	61 f3       	breq	.-40     	; 0x886 <__DATA_REGION_LENGTH__+0x86>
     8ae:	0e 94 ef 02 	call	0x5de	; 0x5de <millis>
     8b2:	dc 01       	movw	r26, r24
     8b4:	cb 01       	movw	r24, r22
     8b6:	84 19       	sub	r24, r4
     8b8:	95 09       	sbc	r25, r5
     8ba:	a6 09       	sbc	r26, r6
     8bc:	b7 09       	sbc	r27, r7
     8be:	29 81       	ldd	r18, Y+1	; 0x01
     8c0:	3a 81       	ldd	r19, Y+2	; 0x02
     8c2:	4b 81       	ldd	r20, Y+3	; 0x03
     8c4:	5c 81       	ldd	r21, Y+4	; 0x04
     8c6:	82 17       	cp	r24, r18
     8c8:	93 07       	cpc	r25, r19
     8ca:	a4 07       	cpc	r26, r20
     8cc:	b5 07       	cpc	r27, r21
     8ce:	d8 f2       	brcs	.-74     	; 0x886 <__DATA_REGION_LENGTH__+0x86>
     8d0:	8e 81       	ldd	r24, Y+6	; 0x06
     8d2:	30 e2       	ldi	r19, 0x20	; 32
     8d4:	38 15       	cp	r19, r8
     8d6:	08 f4       	brcc	.+2      	; 0x8da <__DATA_REGION_LENGTH__+0xda>
     8d8:	80 e2       	ldi	r24, 0x20	; 32
     8da:	98 0e       	add	r9, r24
     8dc:	98 14       	cp	r9, r8
     8de:	08 f4       	brcc	.+2      	; 0x8e2 <__DATA_REGION_LENGTH__+0xe2>
     8e0:	b3 cf       	rjmp	.-154    	; 0x848 <__DATA_REGION_LENGTH__+0x48>
     8e2:	01 c0       	rjmp	.+2      	; 0x8e6 <__DATA_REGION_LENGTH__+0xe6>
     8e4:	10 e0       	ldi	r17, 0x00	; 0
     8e6:	c1 14       	cp	r12, r1
     8e8:	d1 04       	cpc	r13, r1
     8ea:	c9 f0       	breq	.+50     	; 0x91e <__stack+0x1f>
     8ec:	0e 94 ef 02 	call	0x5de	; 0x5de <millis>
     8f0:	ab 01       	movw	r20, r22
     8f2:	bc 01       	movw	r22, r24
     8f4:	44 19       	sub	r20, r4
     8f6:	55 09       	sbc	r21, r5
     8f8:	66 09       	sbc	r22, r6
     8fa:	77 09       	sbc	r23, r7
     8fc:	c6 01       	movw	r24, r12
     8fe:	a0 e0       	ldi	r26, 0x00	; 0
     900:	b0 e0       	ldi	r27, 0x00	; 0
     902:	48 17       	cp	r20, r24
     904:	59 07       	cpc	r21, r25
     906:	6a 07       	cpc	r22, r26
     908:	7b 07       	cpc	r23, r27
     90a:	48 f0       	brcs	.+18     	; 0x91e <__stack+0x1f>
     90c:	91 2c       	mov	r9, r1
     90e:	81 2f       	mov	r24, r17
     910:	01 2e       	mov	r0, r17
     912:	00 0c       	add	r0, r0
     914:	99 0b       	sbc	r25, r25
     916:	88 15       	cp	r24, r8
     918:	99 05       	cpc	r25, r9
     91a:	0c f4       	brge	.+2      	; 0x91e <__stack+0x1f>
     91c:	1f ef       	ldi	r17, 0xFF	; 255
     91e:	81 2f       	mov	r24, r17
     920:	28 96       	adiw	r28, 0x08	; 8
     922:	0f b6       	in	r0, 0x3f	; 63
     924:	f8 94       	cli
     926:	de bf       	out	0x3e, r29	; 62
     928:	0f be       	out	0x3f, r0	; 63
     92a:	cd bf       	out	0x3d, r28	; 61
     92c:	df 91       	pop	r29
     92e:	cf 91       	pop	r28
     930:	1f 91       	pop	r17
     932:	0f 91       	pop	r16
     934:	ff 90       	pop	r15
     936:	ef 90       	pop	r14
     938:	df 90       	pop	r13
     93a:	cf 90       	pop	r12
     93c:	bf 90       	pop	r11
     93e:	af 90       	pop	r10
     940:	9f 90       	pop	r9
     942:	8f 90       	pop	r8
     944:	7f 90       	pop	r7
     946:	6f 90       	pop	r6
     948:	5f 90       	pop	r5
     94a:	4f 90       	pop	r4
     94c:	3f 90       	pop	r3
     94e:	2f 90       	pop	r2
     950:	08 95       	ret

00000952 <i2c_read_byte>:
     952:	0f 93       	push	r16
     954:	1f 93       	push	r17
     956:	89 01       	movw	r16, r18
     958:	9a 01       	movw	r18, r20
     95a:	41 e0       	ldi	r20, 0x01	; 1
     95c:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <i2c_read_bytes>
     960:	1f 91       	pop	r17
     962:	0f 91       	pop	r16
     964:	08 95       	ret

00000966 <i2c_write_bytes>:
* @param length Number of bytes to write
* @param data Buffer to copy new data from
* @return Status of operation (true = success)
*/
uint8_t i2c_write_bytes(uint8_t dev_address, uint8_t reg_address, uint8_t length, uint8_t* data)
{
     966:	ef 92       	push	r14
     968:	ff 92       	push	r15
     96a:	0f 93       	push	r16
     96c:	1f 93       	push	r17
     96e:	cf 93       	push	r28
     970:	df 93       	push	r29
     972:	c6 2f       	mov	r28, r22
     974:	14 2f       	mov	r17, r20
     976:	79 01       	movw	r14, r18
    
    uint8_t status = 0;
    wire_begin_transmission(dev_address);
     978:	0e 94 45 03 	call	0x68a	; 0x68a <wire_begin_transmission>
    wire_write((uint8_t) reg_address);
     97c:	8c 2f       	mov	r24, r28
     97e:	0e 94 62 03 	call	0x6c4	; 0x6c4 <wire_write>
    for (uint8_t i = 0; i < length; i++)
     982:	11 23       	and	r17, r17
     984:	71 f0       	breq	.+28     	; 0x9a2 <i2c_write_bytes+0x3c>
     986:	e7 01       	movw	r28, r14
     988:	11 50       	subi	r17, 0x01	; 1
     98a:	01 2f       	mov	r16, r17
     98c:	10 e0       	ldi	r17, 0x00	; 0
     98e:	0f 5f       	subi	r16, 0xFF	; 255
     990:	1f 4f       	sbci	r17, 0xFF	; 255
     992:	0e 0d       	add	r16, r14
     994:	1f 1d       	adc	r17, r15
    {
        wire_write((uint8_t) data[i]);
     996:	89 91       	ld	r24, Y+
     998:	0e 94 62 03 	call	0x6c4	; 0x6c4 <wire_write>
{
    
    uint8_t status = 0;
    wire_begin_transmission(dev_address);
    wire_write((uint8_t) reg_address);
    for (uint8_t i = 0; i < length; i++)
     99c:	c0 17       	cp	r28, r16
     99e:	d1 07       	cpc	r29, r17
     9a0:	d1 f7       	brne	.-12     	; 0x996 <i2c_write_bytes+0x30>
    {
        wire_write((uint8_t) data[i]);
    }
    status = wire_end_transmission(1);
     9a2:	81 e0       	ldi	r24, 0x01	; 1
     9a4:	0e 94 4f 03 	call	0x69e	; 0x69e <wire_end_transmission>
    return status == 0;
     9a8:	91 e0       	ldi	r25, 0x01	; 1
     9aa:	81 11       	cpse	r24, r1
     9ac:	90 e0       	ldi	r25, 0x00	; 0
}
     9ae:	89 2f       	mov	r24, r25
     9b0:	df 91       	pop	r29
     9b2:	cf 91       	pop	r28
     9b4:	1f 91       	pop	r17
     9b6:	0f 91       	pop	r16
     9b8:	ff 90       	pop	r15
     9ba:	ef 90       	pop	r14
     9bc:	08 95       	ret

000009be <i2c_write_byte>:
* @param reg_address Register address to write to
* @param data New byte value to write
* @return Status of operation (true = success)
*/
uint8_t i2c_write_byte(uint8_t dev_address, uint8_t reg_address, uint8_t data)
{
     9be:	cf 93       	push	r28
     9c0:	df 93       	push	r29
     9c2:	1f 92       	push	r1
     9c4:	cd b7       	in	r28, 0x3d	; 61
     9c6:	de b7       	in	r29, 0x3e	; 62
     9c8:	49 83       	std	Y+1, r20	; 0x01
    return i2c_write_bytes(dev_address, reg_address, 1, &data);
     9ca:	9e 01       	movw	r18, r28
     9cc:	2f 5f       	subi	r18, 0xFF	; 255
     9ce:	3f 4f       	sbci	r19, 0xFF	; 255
     9d0:	41 e0       	ldi	r20, 0x01	; 1
     9d2:	0e 94 b3 04 	call	0x966	; 0x966 <i2c_write_bytes>
}
     9d6:	0f 90       	pop	r0
     9d8:	df 91       	pop	r29
     9da:	cf 91       	pop	r28
     9dc:	08 95       	ret

000009de <twi_init>:
}

void twi_reply(uint8_t ack)
{
    if (ack) { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA); }
    else { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT); }
     9de:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <twi_state>
     9e2:	81 e0       	ldi	r24, 0x01	; 1
     9e4:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <twi_send_stop>
     9e8:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <twi_in_rep_start>
     9ec:	e9 eb       	ldi	r30, 0xB9	; 185
     9ee:	f0 e0       	ldi	r31, 0x00	; 0
     9f0:	80 81       	ld	r24, Z
     9f2:	8e 7f       	andi	r24, 0xFE	; 254
     9f4:	80 83       	st	Z, r24
     9f6:	80 81       	ld	r24, Z
     9f8:	8d 7f       	andi	r24, 0xFD	; 253
     9fa:	80 83       	st	Z, r24
     9fc:	88 e4       	ldi	r24, 0x48	; 72
     9fe:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
     a02:	85 e4       	ldi	r24, 0x45	; 69
     a04:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     a08:	08 95       	ret

00000a0a <twi_attach_slave_rx_event>:
     a0a:	90 93 28 02 	sts	0x0228, r25	; 0x800228 <twi_on_slave_receive+0x1>
     a0e:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <twi_on_slave_receive>
     a12:	08 95       	ret

00000a14 <twi_attach_slave_tx_event>:
     a14:	90 93 2a 02 	sts	0x022A, r25	; 0x80022a <twi_on_slave_transmit+0x1>
     a18:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <twi_on_slave_transmit>
     a1c:	08 95       	ret

00000a1e <twi_read>:
     a1e:	41 32       	cpi	r20, 0x21	; 33
     a20:	08 f0       	brcs	.+2      	; 0xa24 <twi_read+0x6>
     a22:	4c c0       	rjmp	.+152    	; 0xabc <twi_read+0x9e>
     a24:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <twi_state>
     a28:	91 11       	cpse	r25, r1
     a2a:	fc cf       	rjmp	.-8      	; 0xa24 <twi_read+0x6>
     a2c:	31 e0       	ldi	r19, 0x01	; 1
     a2e:	30 93 2f 02 	sts	0x022F, r19	; 0x80022f <twi_state>
     a32:	20 93 2e 02 	sts	0x022E, r18	; 0x80022e <twi_send_stop>
     a36:	2f ef       	ldi	r18, 0xFF	; 255
     a38:	20 93 2b 02 	sts	0x022B, r18	; 0x80022b <twi_error>
     a3c:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <twi_master_buffer_index>
     a40:	24 0f       	add	r18, r20
     a42:	20 93 05 02 	sts	0x0205, r18	; 0x800205 <twi_master_buffer_length>
     a46:	30 93 2c 02 	sts	0x022C, r19	; 0x80022c <twi_slarw>
     a4a:	20 91 2c 02 	lds	r18, 0x022C	; 0x80022c <twi_slarw>
     a4e:	88 0f       	add	r24, r24
     a50:	82 2b       	or	r24, r18
     a52:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <twi_slarw>
     a56:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <twi_in_rep_start>
     a5a:	81 30       	cpi	r24, 0x01	; 1
     a5c:	81 f4       	brne	.+32     	; 0xa7e <twi_read+0x60>
     a5e:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <twi_in_rep_start>
     a62:	ab eb       	ldi	r26, 0xBB	; 187
     a64:	b0 e0       	ldi	r27, 0x00	; 0
     a66:	ec eb       	ldi	r30, 0xBC	; 188
     a68:	f0 e0       	ldi	r31, 0x00	; 0
     a6a:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <twi_slarw>
     a6e:	8c 93       	st	X, r24
     a70:	80 81       	ld	r24, Z
     a72:	83 fd       	sbrc	r24, 3
     a74:	fa cf       	rjmp	.-12     	; 0xa6a <twi_read+0x4c>
     a76:	85 ec       	ldi	r24, 0xC5	; 197
     a78:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     a7c:	03 c0       	rjmp	.+6      	; 0xa84 <twi_read+0x66>
     a7e:	85 ee       	ldi	r24, 0xE5	; 229
     a80:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     a84:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <twi_state>
     a88:	81 30       	cpi	r24, 0x01	; 1
     a8a:	e1 f3       	breq	.-8      	; 0xa84 <twi_read+0x66>
     a8c:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <twi_master_buffer_index>
     a90:	84 17       	cp	r24, r20
     a92:	10 f4       	brcc	.+4      	; 0xa98 <twi_read+0x7a>
     a94:	40 91 06 02 	lds	r20, 0x0206	; 0x800206 <twi_master_buffer_index>
     a98:	44 23       	and	r20, r20
     a9a:	89 f0       	breq	.+34     	; 0xabe <twi_read+0xa0>
     a9c:	e7 e0       	ldi	r30, 0x07	; 7
     a9e:	f2 e0       	ldi	r31, 0x02	; 2
     aa0:	a6 2f       	mov	r26, r22
     aa2:	b7 2f       	mov	r27, r23
     aa4:	2f ef       	ldi	r18, 0xFF	; 255
     aa6:	24 0f       	add	r18, r20
     aa8:	30 e0       	ldi	r19, 0x00	; 0
     aaa:	28 5f       	subi	r18, 0xF8	; 248
     aac:	3d 4f       	sbci	r19, 0xFD	; 253
     aae:	81 91       	ld	r24, Z+
     ab0:	8d 93       	st	X+, r24
     ab2:	e2 17       	cp	r30, r18
     ab4:	f3 07       	cpc	r31, r19
     ab6:	d9 f7       	brne	.-10     	; 0xaae <twi_read+0x90>
     ab8:	94 2f       	mov	r25, r20
     aba:	01 c0       	rjmp	.+2      	; 0xabe <twi_read+0xa0>
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	89 2f       	mov	r24, r25
     ac0:	08 95       	ret

00000ac2 <twi_write>:
     ac2:	0f 93       	push	r16
     ac4:	41 32       	cpi	r20, 0x21	; 33
     ac6:	08 f0       	brcs	.+2      	; 0xaca <twi_write+0x8>
     ac8:	54 c0       	rjmp	.+168    	; 0xb72 <twi_write+0xb0>
     aca:	30 91 2f 02 	lds	r19, 0x022F	; 0x80022f <twi_state>
     ace:	31 11       	cpse	r19, r1
     ad0:	fc cf       	rjmp	.-8      	; 0xaca <twi_write+0x8>
     ad2:	92 e0       	ldi	r25, 0x02	; 2
     ad4:	90 93 2f 02 	sts	0x022F, r25	; 0x80022f <twi_state>
     ad8:	00 93 2e 02 	sts	0x022E, r16	; 0x80022e <twi_send_stop>
     adc:	9f ef       	ldi	r25, 0xFF	; 255
     ade:	90 93 2b 02 	sts	0x022B, r25	; 0x80022b <twi_error>
     ae2:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <twi_master_buffer_index>
     ae6:	40 93 05 02 	sts	0x0205, r20	; 0x800205 <twi_master_buffer_length>
     aea:	44 23       	and	r20, r20
     aec:	71 f0       	breq	.+28     	; 0xb0a <twi_write+0x48>
     aee:	fb 01       	movw	r30, r22
     af0:	a7 e0       	ldi	r26, 0x07	; 7
     af2:	b2 e0       	ldi	r27, 0x02	; 2
     af4:	41 50       	subi	r20, 0x01	; 1
     af6:	50 e0       	ldi	r21, 0x00	; 0
     af8:	4f 5f       	subi	r20, 0xFF	; 255
     afa:	5f 4f       	sbci	r21, 0xFF	; 255
     afc:	64 0f       	add	r22, r20
     afe:	75 1f       	adc	r23, r21
     b00:	91 91       	ld	r25, Z+
     b02:	9d 93       	st	X+, r25
     b04:	e6 17       	cp	r30, r22
     b06:	f7 07       	cpc	r31, r23
     b08:	d9 f7       	brne	.-10     	; 0xb00 <twi_write+0x3e>
     b0a:	10 92 2c 02 	sts	0x022C, r1	; 0x80022c <twi_slarw>
     b0e:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <twi_slarw>
     b12:	88 0f       	add	r24, r24
     b14:	89 2b       	or	r24, r25
     b16:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <twi_slarw>
     b1a:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <twi_in_rep_start>
     b1e:	88 23       	and	r24, r24
     b20:	69 f0       	breq	.+26     	; 0xb3c <twi_write+0x7a>
     b22:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <twi_in_rep_start>
     b26:	ab eb       	ldi	r26, 0xBB	; 187
     b28:	b0 e0       	ldi	r27, 0x00	; 0
     b2a:	ec eb       	ldi	r30, 0xBC	; 188
     b2c:	f0 e0       	ldi	r31, 0x00	; 0
     b2e:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <twi_slarw>
     b32:	9c 93       	st	X, r25
     b34:	90 81       	ld	r25, Z
     b36:	93 fd       	sbrc	r25, 3
     b38:	fa cf       	rjmp	.-12     	; 0xb2e <twi_write+0x6c>
     b3a:	03 c0       	rjmp	.+6      	; 0xb42 <twi_write+0x80>
     b3c:	85 ee       	ldi	r24, 0xE5	; 229
     b3e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     b42:	22 23       	and	r18, r18
     b44:	41 f0       	breq	.+16     	; 0xb56 <twi_write+0x94>
     b46:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <twi_state>
     b4a:	82 30       	cpi	r24, 0x02	; 2
     b4c:	21 f4       	brne	.+8      	; 0xb56 <twi_write+0x94>
     b4e:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <twi_state>
     b52:	82 30       	cpi	r24, 0x02	; 2
     b54:	e1 f3       	breq	.-8      	; 0xb4e <twi_write+0x8c>
     b56:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <twi_error>
     b5a:	8f 3f       	cpi	r24, 0xFF	; 255
     b5c:	79 f0       	breq	.+30     	; 0xb7c <twi_write+0xba>
     b5e:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <twi_error>
     b62:	80 32       	cpi	r24, 0x20	; 32
     b64:	41 f0       	breq	.+16     	; 0xb76 <twi_write+0xb4>
     b66:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <twi_error>
     b6a:	80 33       	cpi	r24, 0x30	; 48
     b6c:	31 f0       	breq	.+12     	; 0xb7a <twi_write+0xb8>
     b6e:	34 e0       	ldi	r19, 0x04	; 4
     b70:	05 c0       	rjmp	.+10     	; 0xb7c <twi_write+0xba>
     b72:	31 e0       	ldi	r19, 0x01	; 1
     b74:	03 c0       	rjmp	.+6      	; 0xb7c <twi_write+0xba>
     b76:	32 e0       	ldi	r19, 0x02	; 2
     b78:	01 c0       	rjmp	.+2      	; 0xb7c <twi_write+0xba>
     b7a:	33 e0       	ldi	r19, 0x03	; 3
     b7c:	83 2f       	mov	r24, r19
     b7e:	0f 91       	pop	r16
     b80:	08 95       	ret

00000b82 <twi_transmit>:
     b82:	40 91 e3 01 	lds	r20, 0x01E3	; 0x8001e3 <twi_tx_buffer_length>
     b86:	26 2f       	mov	r18, r22
     b88:	30 e0       	ldi	r19, 0x00	; 0
     b8a:	24 0f       	add	r18, r20
     b8c:	31 1d       	adc	r19, r1
     b8e:	21 32       	cpi	r18, 0x21	; 33
     b90:	31 05       	cpc	r19, r1
     b92:	ec f4       	brge	.+58     	; 0xbce <twi_transmit+0x4c>
     b94:	20 91 2f 02 	lds	r18, 0x022F	; 0x80022f <twi_state>
     b98:	24 30       	cpi	r18, 0x04	; 4
     b9a:	d9 f4       	brne	.+54     	; 0xbd2 <twi_transmit+0x50>
     b9c:	66 23       	and	r22, r22
     b9e:	81 f0       	breq	.+32     	; 0xbc0 <twi_transmit+0x3e>
     ba0:	a8 2f       	mov	r26, r24
     ba2:	b9 2f       	mov	r27, r25
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	30 91 e3 01 	lds	r19, 0x01E3	; 0x8001e3 <twi_tx_buffer_length>
     bac:	2d 91       	ld	r18, X+
     bae:	fc 01       	movw	r30, r24
     bb0:	eb 51       	subi	r30, 0x1B	; 27
     bb2:	fe 4f       	sbci	r31, 0xFE	; 254
     bb4:	e3 0f       	add	r30, r19
     bb6:	f1 1d       	adc	r31, r1
     bb8:	20 83       	st	Z, r18
     bba:	01 96       	adiw	r24, 0x01	; 1
     bbc:	86 17       	cp	r24, r22
     bbe:	a0 f3       	brcs	.-24     	; 0xba8 <twi_transmit+0x26>
     bc0:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <twi_tx_buffer_length>
     bc4:	68 0f       	add	r22, r24
     bc6:	60 93 e3 01 	sts	0x01E3, r22	; 0x8001e3 <twi_tx_buffer_length>
     bca:	80 e0       	ldi	r24, 0x00	; 0
     bcc:	08 95       	ret
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	08 95       	ret
     bd2:	82 e0       	ldi	r24, 0x02	; 2
     bd4:	08 95       	ret

00000bd6 <twi_stop>:
     bd6:	85 ed       	ldi	r24, 0xD5	; 213
     bd8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     bdc:	ec eb       	ldi	r30, 0xBC	; 188
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	80 81       	ld	r24, Z
     be2:	84 fd       	sbrc	r24, 4
     be4:	fd cf       	rjmp	.-6      	; 0xbe0 <twi_stop+0xa>
     be6:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <twi_state>
     bea:	08 95       	ret

00000bec <twi_release_bus>:
}

void twi_release_bus(void)
{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
     bec:	85 ec       	ldi	r24, 0xC5	; 197
     bee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    twi_state = TWI_READY;
     bf2:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <twi_state>
     bf6:	08 95       	ret

00000bf8 <__vector_24>:
}

ISR(TWI_vect)
{
     bf8:	1f 92       	push	r1
     bfa:	0f 92       	push	r0
     bfc:	0f b6       	in	r0, 0x3f	; 63
     bfe:	0f 92       	push	r0
     c00:	11 24       	eor	r1, r1
     c02:	2f 93       	push	r18
     c04:	3f 93       	push	r19
     c06:	4f 93       	push	r20
     c08:	5f 93       	push	r21
     c0a:	6f 93       	push	r22
     c0c:	7f 93       	push	r23
     c0e:	8f 93       	push	r24
     c10:	9f 93       	push	r25
     c12:	af 93       	push	r26
     c14:	bf 93       	push	r27
     c16:	ef 93       	push	r30
     c18:	ff 93       	push	r31
    switch(TW_STATUS)
     c1a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     c1e:	e8 2f       	mov	r30, r24
     c20:	e8 7f       	andi	r30, 0xF8	; 248
     c22:	8e 2f       	mov	r24, r30
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	89 3c       	cpi	r24, 0xC9	; 201
     c28:	91 05       	cpc	r25, r1
     c2a:	08 f0       	brcs	.+2      	; 0xc2e <__vector_24+0x36>
     c2c:	f5 c0       	rjmp	.+490    	; 0xe18 <__vector_24+0x220>
     c2e:	fc 01       	movw	r30, r24
     c30:	ec 5c       	subi	r30, 0xCC	; 204
     c32:	ff 4f       	sbci	r31, 0xFF	; 255
     c34:	0c 94 4e 0b 	jmp	0x169c	; 0x169c <__tablejump2__>
    {
        // MASTER
        case TW_START: // start condition transmitted
        case TW_REP_START: // repeated start condition transmitted
        {
            TWDR = twi_slarw;
     c38:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <twi_slarw>
     c3c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    twi_state = TWI_READY;
}

void twi_reply(uint8_t ack)
{
    if (ack) { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA); }
     c40:	85 ec       	ldi	r24, 0xC5	; 197
     c42:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     c46:	e8 c0       	rjmp	.+464    	; 0xe18 <__vector_24+0x220>
        
        // MASTER TRANSMITTER
        case TW_MT_SLA_ACK: // SLA+W transmitted, ACK received
        case TW_MT_DATA_ACK: // data transmitted, ACK received
        {
            if (twi_master_buffer_index < twi_master_buffer_length)
     c48:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <twi_master_buffer_index>
     c4c:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <twi_master_buffer_length>
     c50:	98 17       	cp	r25, r24
     c52:	80 f4       	brcc	.+32     	; 0xc74 <__vector_24+0x7c>
            {
                TWDR = twi_master_buffer[twi_master_buffer_index++];
     c54:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <twi_master_buffer_index>
     c58:	81 e0       	ldi	r24, 0x01	; 1
     c5a:	8e 0f       	add	r24, r30
     c5c:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <twi_master_buffer_index>
     c60:	f0 e0       	ldi	r31, 0x00	; 0
     c62:	e9 5f       	subi	r30, 0xF9	; 249
     c64:	fd 4f       	sbci	r31, 0xFD	; 253
     c66:	80 81       	ld	r24, Z
     c68:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    twi_state = TWI_READY;
}

void twi_reply(uint8_t ack)
{
    if (ack) { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA); }
     c6c:	85 ec       	ldi	r24, 0xC5	; 197
     c6e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     c72:	d2 c0       	rjmp	.+420    	; 0xe18 <__vector_24+0x220>
                TWDR = twi_master_buffer[twi_master_buffer_index++];
                twi_reply(1);
            }
            else
            {
                if (twi_send_stop) { twi_stop(); }
     c74:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <twi_send_stop>
     c78:	88 23       	and	r24, r24
     c7a:	19 f0       	breq	.+6      	; 0xc82 <__vector_24+0x8a>
     c7c:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <twi_stop>
     c80:	cb c0       	rjmp	.+406    	; 0xe18 <__vector_24+0x220>
                else
                {
                    twi_in_rep_start = 1;
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <twi_in_rep_start>
                    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
     c88:	84 ea       	ldi	r24, 0xA4	; 164
     c8a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
                    twi_state = TWI_READY;
     c8e:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <twi_state>
     c92:	c2 c0       	rjmp	.+388    	; 0xe18 <__vector_24+0x220>
            }
        }
        break;
        case TW_MT_SLA_NACK:  // SLA+W transmitted, NACK received
        {
            twi_error = TW_MT_SLA_NACK;
     c94:	80 e2       	ldi	r24, 0x20	; 32
     c96:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <twi_error>
            twi_stop();
     c9a:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <twi_stop>
        }
        break;
     c9e:	bc c0       	rjmp	.+376    	; 0xe18 <__vector_24+0x220>
        case TW_MT_DATA_NACK: // data transmitted, NACK received
        {
            twi_error = TW_MT_DATA_NACK;
     ca0:	80 e3       	ldi	r24, 0x30	; 48
     ca2:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <twi_error>
            twi_stop();
     ca6:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <twi_stop>
        }
        break;
     caa:	b6 c0       	rjmp	.+364    	; 0xe18 <__vector_24+0x220>
        case TW_MT_ARB_LOST: // arbitration lost in SLA+W or data
        {
            twi_error = TW_MT_ARB_LOST;
     cac:	88 e3       	ldi	r24, 0x38	; 56
     cae:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <twi_error>
            twi_release_bus();
     cb2:	0e 94 f6 05 	call	0xbec	; 0xbec <twi_release_bus>
        }
        break;
     cb6:	b0 c0       	rjmp	.+352    	; 0xe18 <__vector_24+0x220>
        
        // MASTER RECEIVER
        case TW_MR_DATA_ACK: // data received, ACK returned
        twi_master_buffer[twi_master_buffer_index++] = TWDR;
     cb8:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <twi_master_buffer_index>
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	8e 0f       	add	r24, r30
     cc0:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <twi_master_buffer_index>
     cc4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	e9 5f       	subi	r30, 0xF9	; 249
     ccc:	fd 4f       	sbci	r31, 0xFD	; 253
     cce:	80 83       	st	Z, r24
        /* fall through */
        case TW_MR_SLA_ACK:  // SLA+R transmitted, ACK received
        {
            if (twi_master_buffer_index < twi_master_buffer_length) { twi_reply(1); }
     cd0:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <twi_master_buffer_index>
     cd4:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <twi_master_buffer_length>
     cd8:	98 17       	cp	r25, r24
     cda:	20 f4       	brcc	.+8      	; 0xce4 <__vector_24+0xec>
    twi_state = TWI_READY;
}

void twi_reply(uint8_t ack)
{
    if (ack) { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA); }
     cdc:	85 ec       	ldi	r24, 0xC5	; 197
     cde:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     ce2:	9a c0       	rjmp	.+308    	; 0xe18 <__vector_24+0x220>
    else { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT); }
     ce4:	85 e8       	ldi	r24, 0x85	; 133
     ce6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     cea:	96 c0       	rjmp	.+300    	; 0xe18 <__vector_24+0x220>
            else { twi_reply(0); }
        }
        break;
        case TW_MR_DATA_NACK: // data received, NACK returned
        {
            twi_master_buffer[twi_master_buffer_index++] = TWDR;
     cec:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <twi_master_buffer_index>
     cf0:	81 e0       	ldi	r24, 0x01	; 1
     cf2:	8e 0f       	add	r24, r30
     cf4:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <twi_master_buffer_index>
     cf8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	e9 5f       	subi	r30, 0xF9	; 249
     d00:	fd 4f       	sbci	r31, 0xFD	; 253
     d02:	80 83       	st	Z, r24
            if (twi_send_stop) { twi_stop(); }
     d04:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <twi_send_stop>
     d08:	88 23       	and	r24, r24
     d0a:	19 f0       	breq	.+6      	; 0xd12 <__vector_24+0x11a>
     d0c:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <twi_stop>
     d10:	83 c0       	rjmp	.+262    	; 0xe18 <__vector_24+0x220>
            else {
                twi_in_rep_start = 1;
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <twi_in_rep_start>
                TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
     d18:	84 ea       	ldi	r24, 0xA4	; 164
     d1a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
                twi_state = TWI_READY;
     d1e:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <twi_state>
     d22:	7a c0       	rjmp	.+244    	; 0xe18 <__vector_24+0x220>
            }
        }
        break;
        case TW_MR_SLA_NACK: // SLA+R transmitted, NACK received
        {
            twi_stop();
     d24:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <twi_stop>
        }
        break;
     d28:	77 c0       	rjmp	.+238    	; 0xe18 <__vector_24+0x220>
        case TW_SR_SLA_ACK: // SLA+W received, ACK returned
        case TW_SR_GCALL_ACK: // general call received, ACK returned
        case TW_SR_ARB_LOST_SLA_ACK:   // arbitration lost in SLA+RW, SLA+W received, ACK returned
        case TW_SR_ARB_LOST_GCALL_ACK: // arbitration lost in SLA+RW, general call received, ACK returned
        {
            twi_state = TWI_SRX;
     d2a:	83 e0       	ldi	r24, 0x03	; 3
     d2c:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <twi_state>
            twi_rx_buffer_index = 0;
     d30:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <twi_rx_buffer_index>
    twi_state = TWI_READY;
}

void twi_reply(uint8_t ack)
{
    if (ack) { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA); }
     d34:	85 ec       	ldi	r24, 0xC5	; 197
     d36:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     d3a:	6e c0       	rjmp	.+220    	; 0xe18 <__vector_24+0x220>
        }
        break;
        case TW_SR_DATA_ACK: // data received, ACK returned
        case TW_SR_GCALL_DATA_ACK: // general call data received, ACK returned
        {
            if (twi_rx_buffer_index < TWI_BUFFER_LENGTH) {
     d3c:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <twi_rx_buffer_index>
     d40:	80 32       	cpi	r24, 0x20	; 32
     d42:	80 f4       	brcc	.+32     	; 0xd64 <__vector_24+0x16c>
                
                twi_rx_buffer[twi_rx_buffer_index++] = TWDR;
     d44:	e0 91 c2 01 	lds	r30, 0x01C2	; 0x8001c2 <twi_rx_buffer_index>
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	8e 0f       	add	r24, r30
     d4c:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <twi_rx_buffer_index>
     d50:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	ed 53       	subi	r30, 0x3D	; 61
     d58:	fe 4f       	sbci	r31, 0xFE	; 254
     d5a:	80 83       	st	Z, r24
    twi_state = TWI_READY;
}

void twi_reply(uint8_t ack)
{
    if (ack) { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA); }
     d5c:	85 ec       	ldi	r24, 0xC5	; 197
     d5e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     d62:	5a c0       	rjmp	.+180    	; 0xe18 <__vector_24+0x220>
    else { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT); }
     d64:	85 e8       	ldi	r24, 0x85	; 133
     d66:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     d6a:	56 c0       	rjmp	.+172    	; 0xe18 <__vector_24+0x220>
            
        }
        break;
        case TW_SR_STOP: // stop or repeated start condition received while selected
        {
            twi_release_bus();
     d6c:	0e 94 f6 05 	call	0xbec	; 0xbec <twi_release_bus>
            if(twi_rx_buffer_index < TWI_BUFFER_LENGTH) { twi_rx_buffer[twi_rx_buffer_index] = '\0'; }
     d70:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <twi_rx_buffer_index>
     d74:	80 32       	cpi	r24, 0x20	; 32
     d76:	30 f4       	brcc	.+12     	; 0xd84 <__vector_24+0x18c>
     d78:	e0 91 c2 01 	lds	r30, 0x01C2	; 0x8001c2 <twi_rx_buffer_index>
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	ed 53       	subi	r30, 0x3D	; 61
     d80:	fe 4f       	sbci	r31, 0xFE	; 254
     d82:	10 82       	st	Z, r1
            twi_on_slave_receive(twi_rx_buffer, twi_rx_buffer_index);
     d84:	60 91 c2 01 	lds	r22, 0x01C2	; 0x8001c2 <twi_rx_buffer_index>
     d88:	70 e0       	ldi	r23, 0x00	; 0
     d8a:	e0 91 27 02 	lds	r30, 0x0227	; 0x800227 <twi_on_slave_receive>
     d8e:	f0 91 28 02 	lds	r31, 0x0228	; 0x800228 <twi_on_slave_receive+0x1>
     d92:	83 ec       	ldi	r24, 0xC3	; 195
     d94:	91 e0       	ldi	r25, 0x01	; 1
     d96:	09 95       	icall
            twi_rx_buffer_index = 0;
     d98:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <twi_rx_buffer_index>
        }
        break;
     d9c:	3d c0       	rjmp	.+122    	; 0xe18 <__vector_24+0x220>
}

void twi_reply(uint8_t ack)
{
    if (ack) { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA); }
    else { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT); }
     d9e:	85 e8       	ldi	r24, 0x85	; 133
     da0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     da4:	39 c0       	rjmp	.+114    	; 0xe18 <__vector_24+0x220>
        // SLAVE TRANSMITTER
        case TW_ST_SLA_ACK: // SLA+R received, ACK returned
        case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost in SLA+RW, SLA+R received, ACK returned
        {
            
            twi_state = TWI_STX;
     da6:	84 e0       	ldi	r24, 0x04	; 4
     da8:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <twi_state>
            twi_tx_buffer_index = 0;
     dac:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <twi_tx_buffer_index>
            twi_tx_buffer_length = 0;
     db0:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <twi_tx_buffer_length>
            twi_on_slave_transmit();
     db4:	e0 91 29 02 	lds	r30, 0x0229	; 0x800229 <twi_on_slave_transmit>
     db8:	f0 91 2a 02 	lds	r31, 0x022A	; 0x80022a <twi_on_slave_transmit+0x1>
     dbc:	09 95       	icall
            if (0 == twi_tx_buffer_length) {
     dbe:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <twi_tx_buffer_length>
     dc2:	81 11       	cpse	r24, r1
     dc4:	05 c0       	rjmp	.+10     	; 0xdd0 <__vector_24+0x1d8>
                twi_tx_buffer_length = 1;
     dc6:	81 e0       	ldi	r24, 0x01	; 1
     dc8:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <twi_tx_buffer_length>
                twi_tx_buffer[0] = 0x00;
     dcc:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <twi_tx_buffer>
            }
        }
        /* fall through */
        case TW_ST_DATA_ACK: // data transmitted, ACK received
        {
            TWDR = twi_tx_buffer[twi_tx_buffer_index++];
     dd0:	e0 91 e4 01 	lds	r30, 0x01E4	; 0x8001e4 <twi_tx_buffer_index>
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	8e 0f       	add	r24, r30
     dd8:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <twi_tx_buffer_index>
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	eb 51       	subi	r30, 0x1B	; 27
     de0:	fe 4f       	sbci	r31, 0xFE	; 254
     de2:	80 81       	ld	r24, Z
     de4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
            if (twi_tx_buffer_index < twi_tx_buffer_length) { twi_reply(1); }
     de8:	90 91 e4 01 	lds	r25, 0x01E4	; 0x8001e4 <twi_tx_buffer_index>
     dec:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <twi_tx_buffer_length>
     df0:	98 17       	cp	r25, r24
     df2:	20 f4       	brcc	.+8      	; 0xdfc <__vector_24+0x204>
    twi_state = TWI_READY;
}

void twi_reply(uint8_t ack)
{
    if (ack) { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA); }
     df4:	85 ec       	ldi	r24, 0xC5	; 197
     df6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     dfa:	0e c0       	rjmp	.+28     	; 0xe18 <__vector_24+0x220>
    else { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT); }
     dfc:	85 e8       	ldi	r24, 0x85	; 133
     dfe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     e02:	0a c0       	rjmp	.+20     	; 0xe18 <__vector_24+0x220>
    twi_state = TWI_READY;
}

void twi_reply(uint8_t ack)
{
    if (ack) { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA); }
     e04:	85 ec       	ldi	r24, 0xC5	; 197
     e06:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
        break;
        case TW_ST_DATA_NACK: // data transmitted, NACK received
        case TW_ST_LAST_DATA: // last data byte transmitted, ACK received
        {
            twi_reply(1);
            twi_state = TWI_READY;
     e0a:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <twi_state>
        }
        break;
     e0e:	04 c0       	rjmp	.+8      	; 0xe18 <__vector_24+0x220>
        // MISC
        case TW_NO_INFO:   // no state information available
        break;
        case TW_BUS_ERROR: // illegal start or stop condition
        {
            twi_error = TW_BUS_ERROR;
     e10:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <twi_error>
            twi_stop();
     e14:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <twi_stop>
        }
        break;
    }
     e18:	ff 91       	pop	r31
     e1a:	ef 91       	pop	r30
     e1c:	bf 91       	pop	r27
     e1e:	af 91       	pop	r26
     e20:	9f 91       	pop	r25
     e22:	8f 91       	pop	r24
     e24:	7f 91       	pop	r23
     e26:	6f 91       	pop	r22
     e28:	5f 91       	pop	r21
     e2a:	4f 91       	pop	r20
     e2c:	3f 91       	pop	r19
     e2e:	2f 91       	pop	r18
     e30:	0f 90       	pop	r0
     e32:	0f be       	out	0x3f, r0	; 63
     e34:	0f 90       	pop	r0
     e36:	1f 90       	pop	r1
     e38:	18 95       	reti

00000e3a <__vector_18>:
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
    
    return (UART_LastRxError << 8) + data;

}/* uart_getc */
     e3a:	1f 92       	push	r1
     e3c:	0f 92       	push	r0
     e3e:	0f b6       	in	r0, 0x3f	; 63
     e40:	0f 92       	push	r0
     e42:	11 24       	eor	r1, r1
     e44:	2f 93       	push	r18
     e46:	8f 93       	push	r24
     e48:	9f 93       	push	r25
     e4a:	ef 93       	push	r30
     e4c:	ff 93       	push	r31
     e4e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     e52:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     e56:	88 71       	andi	r24, 0x18	; 24
     e58:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <UART_RxHead>
     e5c:	ef 5f       	subi	r30, 0xFF	; 255
     e5e:	ef 71       	andi	r30, 0x1F	; 31
     e60:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <UART_RxTail>
     e64:	e9 17       	cp	r30, r25
     e66:	39 f0       	breq	.+14     	; 0xe76 <__vector_18+0x3c>
     e68:	e0 93 32 02 	sts	0x0232, r30	; 0x800232 <UART_RxHead>
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	eb 5c       	subi	r30, 0xCB	; 203
     e70:	fd 4f       	sbci	r31, 0xFD	; 253
     e72:	20 83       	st	Z, r18
     e74:	01 c0       	rjmp	.+2      	; 0xe78 <__vector_18+0x3e>
     e76:	82 e0       	ldi	r24, 0x02	; 2
     e78:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <UART_LastRxError>
     e7c:	ff 91       	pop	r31
     e7e:	ef 91       	pop	r30
     e80:	9f 91       	pop	r25
     e82:	8f 91       	pop	r24
     e84:	2f 91       	pop	r18
     e86:	0f 90       	pop	r0
     e88:	0f be       	out	0x3f, r0	; 63
     e8a:	0f 90       	pop	r0
     e8c:	1f 90       	pop	r1
     e8e:	18 95       	reti

00000e90 <__vector_19>:
     e90:	1f 92       	push	r1
     e92:	0f 92       	push	r0
     e94:	0f b6       	in	r0, 0x3f	; 63
     e96:	0f 92       	push	r0
     e98:	11 24       	eor	r1, r1
     e9a:	8f 93       	push	r24
     e9c:	9f 93       	push	r25
     e9e:	ef 93       	push	r30
     ea0:	ff 93       	push	r31
     ea2:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <UART_TxHead>
     ea6:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <UART_TxTail>
     eaa:	98 17       	cp	r25, r24
     eac:	69 f0       	breq	.+26     	; 0xec8 <__vector_19+0x38>
     eae:	e0 91 33 02 	lds	r30, 0x0233	; 0x800233 <UART_TxTail>
     eb2:	ef 5f       	subi	r30, 0xFF	; 255
     eb4:	ef 71       	andi	r30, 0x1F	; 31
     eb6:	e0 93 33 02 	sts	0x0233, r30	; 0x800233 <UART_TxTail>
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	eb 5a       	subi	r30, 0xAB	; 171
     ebe:	fd 4f       	sbci	r31, 0xFD	; 253
     ec0:	80 81       	ld	r24, Z
     ec2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     ec6:	05 c0       	rjmp	.+10     	; 0xed2 <__vector_19+0x42>
     ec8:	e1 ec       	ldi	r30, 0xC1	; 193
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	8f 7d       	andi	r24, 0xDF	; 223
     ed0:	80 83       	st	Z, r24
     ed2:	ff 91       	pop	r31
     ed4:	ef 91       	pop	r30
     ed6:	9f 91       	pop	r25
     ed8:	8f 91       	pop	r24
     eda:	0f 90       	pop	r0
     edc:	0f be       	out	0x3f, r0	; 63
     ede:	0f 90       	pop	r0
     ee0:	1f 90       	pop	r1
     ee2:	18 95       	reti

00000ee4 <uart_init>:
     ee4:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <UART_TxHead>
     ee8:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <UART_TxTail>
     eec:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <UART_RxHead>
     ef0:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <UART_RxTail>
     ef4:	99 23       	and	r25, r25
     ef6:	24 f4       	brge	.+8      	; 0xf00 <uart_init+0x1c>
     ef8:	22 e0       	ldi	r18, 0x02	; 2
     efa:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     efe:	9f 77       	andi	r25, 0x7F	; 127
     f00:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     f04:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     f08:	88 e9       	ldi	r24, 0x98	; 152
     f0a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     f0e:	86 e0       	ldi	r24, 0x06	; 6
     f10:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     f14:	08 95       	ret

00000f16 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
     f16:	20 91 34 02 	lds	r18, 0x0234	; 0x800234 <UART_TxHead>
     f1a:	2f 5f       	subi	r18, 0xFF	; 255
     f1c:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
     f1e:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <UART_TxTail>
     f22:	29 17       	cp	r18, r25
     f24:	e1 f3       	breq	.-8      	; 0xf1e <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
     f26:	e2 2f       	mov	r30, r18
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	eb 5a       	subi	r30, 0xAB	; 171
     f2c:	fd 4f       	sbci	r31, 0xFD	; 253
     f2e:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
     f30:	20 93 34 02 	sts	0x0234, r18	; 0x800234 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
     f34:	e1 ec       	ldi	r30, 0xC1	; 193
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	80 62       	ori	r24, 0x20	; 32
     f3c:	80 83       	st	Z, r24
     f3e:	08 95       	ret

00000f40 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
     f40:	cf 93       	push	r28
     f42:	df 93       	push	r29
     f44:	ec 01       	movw	r28, r24
    while (*s) 
     f46:	88 81       	ld	r24, Y
     f48:	88 23       	and	r24, r24
     f4a:	31 f0       	breq	.+12     	; 0xf58 <uart_puts+0x18>
     f4c:	21 96       	adiw	r28, 0x01	; 1
      uart_putc(*s++);
     f4e:	0e 94 8b 07 	call	0xf16	; 0xf16 <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
     f52:	89 91       	ld	r24, Y+
     f54:	81 11       	cpse	r24, r1
     f56:	fb cf       	rjmp	.-10     	; 0xf4e <uart_puts+0xe>
      uart_putc(*s++);

}/* uart_puts */
     f58:	df 91       	pop	r29
     f5a:	cf 91       	pop	r28
     f5c:	08 95       	ret

00000f5e <vfprintf>:
     f5e:	a0 e1       	ldi	r26, 0x10	; 16
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	e5 eb       	ldi	r30, 0xB5	; 181
     f64:	f7 e0       	ldi	r31, 0x07	; 7
     f66:	0c 94 54 0b 	jmp	0x16a8	; 0x16a8 <__prologue_saves__>
     f6a:	7c 01       	movw	r14, r24
     f6c:	1b 01       	movw	r2, r22
     f6e:	6a 01       	movw	r12, r20
     f70:	fc 01       	movw	r30, r24
     f72:	17 82       	std	Z+7, r1	; 0x07
     f74:	16 82       	std	Z+6, r1	; 0x06
     f76:	83 81       	ldd	r24, Z+3	; 0x03
     f78:	81 ff       	sbrs	r24, 1
     f7a:	44 c3       	rjmp	.+1672   	; 0x1604 <vfprintf+0x6a6>
     f7c:	9e 01       	movw	r18, r28
     f7e:	2f 5f       	subi	r18, 0xFF	; 255
     f80:	3f 4f       	sbci	r19, 0xFF	; 255
     f82:	39 01       	movw	r6, r18
     f84:	f7 01       	movw	r30, r14
     f86:	93 81       	ldd	r25, Z+3	; 0x03
     f88:	f1 01       	movw	r30, r2
     f8a:	93 fd       	sbrc	r25, 3
     f8c:	85 91       	lpm	r24, Z+
     f8e:	93 ff       	sbrs	r25, 3
     f90:	81 91       	ld	r24, Z+
     f92:	1f 01       	movw	r2, r30
     f94:	88 23       	and	r24, r24
     f96:	09 f4       	brne	.+2      	; 0xf9a <vfprintf+0x3c>
     f98:	31 c3       	rjmp	.+1634   	; 0x15fc <vfprintf+0x69e>
     f9a:	85 32       	cpi	r24, 0x25	; 37
     f9c:	39 f4       	brne	.+14     	; 0xfac <vfprintf+0x4e>
     f9e:	93 fd       	sbrc	r25, 3
     fa0:	85 91       	lpm	r24, Z+
     fa2:	93 ff       	sbrs	r25, 3
     fa4:	81 91       	ld	r24, Z+
     fa6:	1f 01       	movw	r2, r30
     fa8:	85 32       	cpi	r24, 0x25	; 37
     faa:	39 f4       	brne	.+14     	; 0xfba <vfprintf+0x5c>
     fac:	b7 01       	movw	r22, r14
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <fputc>
     fb4:	56 01       	movw	r10, r12
     fb6:	65 01       	movw	r12, r10
     fb8:	e5 cf       	rjmp	.-54     	; 0xf84 <vfprintf+0x26>
     fba:	10 e0       	ldi	r17, 0x00	; 0
     fbc:	51 2c       	mov	r5, r1
     fbe:	91 2c       	mov	r9, r1
     fc0:	ff e1       	ldi	r31, 0x1F	; 31
     fc2:	f9 15       	cp	r31, r9
     fc4:	d8 f0       	brcs	.+54     	; 0xffc <vfprintf+0x9e>
     fc6:	8b 32       	cpi	r24, 0x2B	; 43
     fc8:	79 f0       	breq	.+30     	; 0xfe8 <vfprintf+0x8a>
     fca:	38 f4       	brcc	.+14     	; 0xfda <vfprintf+0x7c>
     fcc:	80 32       	cpi	r24, 0x20	; 32
     fce:	79 f0       	breq	.+30     	; 0xfee <vfprintf+0x90>
     fd0:	83 32       	cpi	r24, 0x23	; 35
     fd2:	a1 f4       	brne	.+40     	; 0xffc <vfprintf+0x9e>
     fd4:	f9 2d       	mov	r31, r9
     fd6:	f0 61       	ori	r31, 0x10	; 16
     fd8:	2e c0       	rjmp	.+92     	; 0x1036 <vfprintf+0xd8>
     fda:	8d 32       	cpi	r24, 0x2D	; 45
     fdc:	61 f0       	breq	.+24     	; 0xff6 <vfprintf+0x98>
     fde:	80 33       	cpi	r24, 0x30	; 48
     fe0:	69 f4       	brne	.+26     	; 0xffc <vfprintf+0x9e>
     fe2:	29 2d       	mov	r18, r9
     fe4:	21 60       	ori	r18, 0x01	; 1
     fe6:	2d c0       	rjmp	.+90     	; 0x1042 <vfprintf+0xe4>
     fe8:	39 2d       	mov	r19, r9
     fea:	32 60       	ori	r19, 0x02	; 2
     fec:	93 2e       	mov	r9, r19
     fee:	89 2d       	mov	r24, r9
     ff0:	84 60       	ori	r24, 0x04	; 4
     ff2:	98 2e       	mov	r9, r24
     ff4:	2a c0       	rjmp	.+84     	; 0x104a <vfprintf+0xec>
     ff6:	e9 2d       	mov	r30, r9
     ff8:	e8 60       	ori	r30, 0x08	; 8
     ffa:	15 c0       	rjmp	.+42     	; 0x1026 <vfprintf+0xc8>
     ffc:	97 fc       	sbrc	r9, 7
     ffe:	2d c0       	rjmp	.+90     	; 0x105a <vfprintf+0xfc>
    1000:	20 ed       	ldi	r18, 0xD0	; 208
    1002:	28 0f       	add	r18, r24
    1004:	2a 30       	cpi	r18, 0x0A	; 10
    1006:	88 f4       	brcc	.+34     	; 0x102a <vfprintf+0xcc>
    1008:	96 fe       	sbrs	r9, 6
    100a:	06 c0       	rjmp	.+12     	; 0x1018 <vfprintf+0xba>
    100c:	3a e0       	ldi	r19, 0x0A	; 10
    100e:	13 9f       	mul	r17, r19
    1010:	20 0d       	add	r18, r0
    1012:	11 24       	eor	r1, r1
    1014:	12 2f       	mov	r17, r18
    1016:	19 c0       	rjmp	.+50     	; 0x104a <vfprintf+0xec>
    1018:	8a e0       	ldi	r24, 0x0A	; 10
    101a:	58 9e       	mul	r5, r24
    101c:	20 0d       	add	r18, r0
    101e:	11 24       	eor	r1, r1
    1020:	52 2e       	mov	r5, r18
    1022:	e9 2d       	mov	r30, r9
    1024:	e0 62       	ori	r30, 0x20	; 32
    1026:	9e 2e       	mov	r9, r30
    1028:	10 c0       	rjmp	.+32     	; 0x104a <vfprintf+0xec>
    102a:	8e 32       	cpi	r24, 0x2E	; 46
    102c:	31 f4       	brne	.+12     	; 0x103a <vfprintf+0xdc>
    102e:	96 fc       	sbrc	r9, 6
    1030:	e5 c2       	rjmp	.+1482   	; 0x15fc <vfprintf+0x69e>
    1032:	f9 2d       	mov	r31, r9
    1034:	f0 64       	ori	r31, 0x40	; 64
    1036:	9f 2e       	mov	r9, r31
    1038:	08 c0       	rjmp	.+16     	; 0x104a <vfprintf+0xec>
    103a:	8c 36       	cpi	r24, 0x6C	; 108
    103c:	21 f4       	brne	.+8      	; 0x1046 <vfprintf+0xe8>
    103e:	29 2d       	mov	r18, r9
    1040:	20 68       	ori	r18, 0x80	; 128
    1042:	92 2e       	mov	r9, r18
    1044:	02 c0       	rjmp	.+4      	; 0x104a <vfprintf+0xec>
    1046:	88 36       	cpi	r24, 0x68	; 104
    1048:	41 f4       	brne	.+16     	; 0x105a <vfprintf+0xfc>
    104a:	f1 01       	movw	r30, r2
    104c:	93 fd       	sbrc	r25, 3
    104e:	85 91       	lpm	r24, Z+
    1050:	93 ff       	sbrs	r25, 3
    1052:	81 91       	ld	r24, Z+
    1054:	1f 01       	movw	r2, r30
    1056:	81 11       	cpse	r24, r1
    1058:	b3 cf       	rjmp	.-154    	; 0xfc0 <vfprintf+0x62>
    105a:	9b eb       	ldi	r25, 0xBB	; 187
    105c:	98 0f       	add	r25, r24
    105e:	93 30       	cpi	r25, 0x03	; 3
    1060:	20 f4       	brcc	.+8      	; 0x106a <vfprintf+0x10c>
    1062:	99 2d       	mov	r25, r9
    1064:	90 61       	ori	r25, 0x10	; 16
    1066:	80 5e       	subi	r24, 0xE0	; 224
    1068:	07 c0       	rjmp	.+14     	; 0x1078 <vfprintf+0x11a>
    106a:	9b e9       	ldi	r25, 0x9B	; 155
    106c:	98 0f       	add	r25, r24
    106e:	93 30       	cpi	r25, 0x03	; 3
    1070:	08 f0       	brcs	.+2      	; 0x1074 <vfprintf+0x116>
    1072:	66 c1       	rjmp	.+716    	; 0x1340 <vfprintf+0x3e2>
    1074:	99 2d       	mov	r25, r9
    1076:	9f 7e       	andi	r25, 0xEF	; 239
    1078:	96 ff       	sbrs	r25, 6
    107a:	16 e0       	ldi	r17, 0x06	; 6
    107c:	9f 73       	andi	r25, 0x3F	; 63
    107e:	99 2e       	mov	r9, r25
    1080:	85 36       	cpi	r24, 0x65	; 101
    1082:	19 f4       	brne	.+6      	; 0x108a <vfprintf+0x12c>
    1084:	90 64       	ori	r25, 0x40	; 64
    1086:	99 2e       	mov	r9, r25
    1088:	08 c0       	rjmp	.+16     	; 0x109a <vfprintf+0x13c>
    108a:	86 36       	cpi	r24, 0x66	; 102
    108c:	21 f4       	brne	.+8      	; 0x1096 <vfprintf+0x138>
    108e:	39 2f       	mov	r19, r25
    1090:	30 68       	ori	r19, 0x80	; 128
    1092:	93 2e       	mov	r9, r19
    1094:	02 c0       	rjmp	.+4      	; 0x109a <vfprintf+0x13c>
    1096:	11 11       	cpse	r17, r1
    1098:	11 50       	subi	r17, 0x01	; 1
    109a:	97 fe       	sbrs	r9, 7
    109c:	07 c0       	rjmp	.+14     	; 0x10ac <vfprintf+0x14e>
    109e:	1c 33       	cpi	r17, 0x3C	; 60
    10a0:	50 f4       	brcc	.+20     	; 0x10b6 <vfprintf+0x158>
    10a2:	44 24       	eor	r4, r4
    10a4:	43 94       	inc	r4
    10a6:	41 0e       	add	r4, r17
    10a8:	27 e0       	ldi	r18, 0x07	; 7
    10aa:	0b c0       	rjmp	.+22     	; 0x10c2 <vfprintf+0x164>
    10ac:	18 30       	cpi	r17, 0x08	; 8
    10ae:	38 f0       	brcs	.+14     	; 0x10be <vfprintf+0x160>
    10b0:	27 e0       	ldi	r18, 0x07	; 7
    10b2:	17 e0       	ldi	r17, 0x07	; 7
    10b4:	05 c0       	rjmp	.+10     	; 0x10c0 <vfprintf+0x162>
    10b6:	27 e0       	ldi	r18, 0x07	; 7
    10b8:	9c e3       	ldi	r25, 0x3C	; 60
    10ba:	49 2e       	mov	r4, r25
    10bc:	02 c0       	rjmp	.+4      	; 0x10c2 <vfprintf+0x164>
    10be:	21 2f       	mov	r18, r17
    10c0:	41 2c       	mov	r4, r1
    10c2:	56 01       	movw	r10, r12
    10c4:	84 e0       	ldi	r24, 0x04	; 4
    10c6:	a8 0e       	add	r10, r24
    10c8:	b1 1c       	adc	r11, r1
    10ca:	f6 01       	movw	r30, r12
    10cc:	60 81       	ld	r22, Z
    10ce:	71 81       	ldd	r23, Z+1	; 0x01
    10d0:	82 81       	ldd	r24, Z+2	; 0x02
    10d2:	93 81       	ldd	r25, Z+3	; 0x03
    10d4:	04 2d       	mov	r16, r4
    10d6:	a3 01       	movw	r20, r6
    10d8:	0e 94 8b 0b 	call	0x1716	; 0x1716 <__ftoa_engine>
    10dc:	6c 01       	movw	r12, r24
    10de:	f9 81       	ldd	r31, Y+1	; 0x01
    10e0:	fc 87       	std	Y+12, r31	; 0x0c
    10e2:	f0 ff       	sbrs	r31, 0
    10e4:	02 c0       	rjmp	.+4      	; 0x10ea <vfprintf+0x18c>
    10e6:	f3 ff       	sbrs	r31, 3
    10e8:	06 c0       	rjmp	.+12     	; 0x10f6 <vfprintf+0x198>
    10ea:	91 fc       	sbrc	r9, 1
    10ec:	06 c0       	rjmp	.+12     	; 0x10fa <vfprintf+0x19c>
    10ee:	92 fe       	sbrs	r9, 2
    10f0:	06 c0       	rjmp	.+12     	; 0x10fe <vfprintf+0x1a0>
    10f2:	00 e2       	ldi	r16, 0x20	; 32
    10f4:	05 c0       	rjmp	.+10     	; 0x1100 <vfprintf+0x1a2>
    10f6:	0d e2       	ldi	r16, 0x2D	; 45
    10f8:	03 c0       	rjmp	.+6      	; 0x1100 <vfprintf+0x1a2>
    10fa:	0b e2       	ldi	r16, 0x2B	; 43
    10fc:	01 c0       	rjmp	.+2      	; 0x1100 <vfprintf+0x1a2>
    10fe:	00 e0       	ldi	r16, 0x00	; 0
    1100:	8c 85       	ldd	r24, Y+12	; 0x0c
    1102:	8c 70       	andi	r24, 0x0C	; 12
    1104:	19 f0       	breq	.+6      	; 0x110c <vfprintf+0x1ae>
    1106:	01 11       	cpse	r16, r1
    1108:	5a c2       	rjmp	.+1204   	; 0x15be <vfprintf+0x660>
    110a:	9b c2       	rjmp	.+1334   	; 0x1642 <vfprintf+0x6e4>
    110c:	97 fe       	sbrs	r9, 7
    110e:	10 c0       	rjmp	.+32     	; 0x1130 <vfprintf+0x1d2>
    1110:	4c 0c       	add	r4, r12
    1112:	fc 85       	ldd	r31, Y+12	; 0x0c
    1114:	f4 ff       	sbrs	r31, 4
    1116:	04 c0       	rjmp	.+8      	; 0x1120 <vfprintf+0x1c2>
    1118:	8a 81       	ldd	r24, Y+2	; 0x02
    111a:	81 33       	cpi	r24, 0x31	; 49
    111c:	09 f4       	brne	.+2      	; 0x1120 <vfprintf+0x1c2>
    111e:	4a 94       	dec	r4
    1120:	14 14       	cp	r1, r4
    1122:	74 f5       	brge	.+92     	; 0x1180 <vfprintf+0x222>
    1124:	28 e0       	ldi	r18, 0x08	; 8
    1126:	24 15       	cp	r18, r4
    1128:	78 f5       	brcc	.+94     	; 0x1188 <vfprintf+0x22a>
    112a:	88 e0       	ldi	r24, 0x08	; 8
    112c:	48 2e       	mov	r4, r24
    112e:	2c c0       	rjmp	.+88     	; 0x1188 <vfprintf+0x22a>
    1130:	96 fc       	sbrc	r9, 6
    1132:	2a c0       	rjmp	.+84     	; 0x1188 <vfprintf+0x22a>
    1134:	81 2f       	mov	r24, r17
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	8c 15       	cp	r24, r12
    113a:	9d 05       	cpc	r25, r13
    113c:	9c f0       	brlt	.+38     	; 0x1164 <vfprintf+0x206>
    113e:	3c ef       	ldi	r19, 0xFC	; 252
    1140:	c3 16       	cp	r12, r19
    1142:	3f ef       	ldi	r19, 0xFF	; 255
    1144:	d3 06       	cpc	r13, r19
    1146:	74 f0       	brlt	.+28     	; 0x1164 <vfprintf+0x206>
    1148:	89 2d       	mov	r24, r9
    114a:	80 68       	ori	r24, 0x80	; 128
    114c:	98 2e       	mov	r9, r24
    114e:	0a c0       	rjmp	.+20     	; 0x1164 <vfprintf+0x206>
    1150:	e2 e0       	ldi	r30, 0x02	; 2
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	ec 0f       	add	r30, r28
    1156:	fd 1f       	adc	r31, r29
    1158:	e1 0f       	add	r30, r17
    115a:	f1 1d       	adc	r31, r1
    115c:	80 81       	ld	r24, Z
    115e:	80 33       	cpi	r24, 0x30	; 48
    1160:	19 f4       	brne	.+6      	; 0x1168 <vfprintf+0x20a>
    1162:	11 50       	subi	r17, 0x01	; 1
    1164:	11 11       	cpse	r17, r1
    1166:	f4 cf       	rjmp	.-24     	; 0x1150 <vfprintf+0x1f2>
    1168:	97 fe       	sbrs	r9, 7
    116a:	0e c0       	rjmp	.+28     	; 0x1188 <vfprintf+0x22a>
    116c:	44 24       	eor	r4, r4
    116e:	43 94       	inc	r4
    1170:	41 0e       	add	r4, r17
    1172:	81 2f       	mov	r24, r17
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	c8 16       	cp	r12, r24
    1178:	d9 06       	cpc	r13, r25
    117a:	2c f4       	brge	.+10     	; 0x1186 <vfprintf+0x228>
    117c:	1c 19       	sub	r17, r12
    117e:	04 c0       	rjmp	.+8      	; 0x1188 <vfprintf+0x22a>
    1180:	44 24       	eor	r4, r4
    1182:	43 94       	inc	r4
    1184:	01 c0       	rjmp	.+2      	; 0x1188 <vfprintf+0x22a>
    1186:	10 e0       	ldi	r17, 0x00	; 0
    1188:	97 fe       	sbrs	r9, 7
    118a:	06 c0       	rjmp	.+12     	; 0x1198 <vfprintf+0x23a>
    118c:	1c 14       	cp	r1, r12
    118e:	1d 04       	cpc	r1, r13
    1190:	34 f4       	brge	.+12     	; 0x119e <vfprintf+0x240>
    1192:	c6 01       	movw	r24, r12
    1194:	01 96       	adiw	r24, 0x01	; 1
    1196:	05 c0       	rjmp	.+10     	; 0x11a2 <vfprintf+0x244>
    1198:	85 e0       	ldi	r24, 0x05	; 5
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	02 c0       	rjmp	.+4      	; 0x11a2 <vfprintf+0x244>
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	01 11       	cpse	r16, r1
    11a4:	01 96       	adiw	r24, 0x01	; 1
    11a6:	11 23       	and	r17, r17
    11a8:	31 f0       	breq	.+12     	; 0x11b6 <vfprintf+0x258>
    11aa:	21 2f       	mov	r18, r17
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	2f 5f       	subi	r18, 0xFF	; 255
    11b0:	3f 4f       	sbci	r19, 0xFF	; 255
    11b2:	82 0f       	add	r24, r18
    11b4:	93 1f       	adc	r25, r19
    11b6:	25 2d       	mov	r18, r5
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	82 17       	cp	r24, r18
    11bc:	93 07       	cpc	r25, r19
    11be:	14 f4       	brge	.+4      	; 0x11c4 <vfprintf+0x266>
    11c0:	58 1a       	sub	r5, r24
    11c2:	01 c0       	rjmp	.+2      	; 0x11c6 <vfprintf+0x268>
    11c4:	51 2c       	mov	r5, r1
    11c6:	89 2d       	mov	r24, r9
    11c8:	89 70       	andi	r24, 0x09	; 9
    11ca:	49 f4       	brne	.+18     	; 0x11de <vfprintf+0x280>
    11cc:	55 20       	and	r5, r5
    11ce:	39 f0       	breq	.+14     	; 0x11de <vfprintf+0x280>
    11d0:	b7 01       	movw	r22, r14
    11d2:	80 e2       	ldi	r24, 0x20	; 32
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <fputc>
    11da:	5a 94       	dec	r5
    11dc:	f7 cf       	rjmp	.-18     	; 0x11cc <vfprintf+0x26e>
    11de:	00 23       	and	r16, r16
    11e0:	29 f0       	breq	.+10     	; 0x11ec <vfprintf+0x28e>
    11e2:	b7 01       	movw	r22, r14
    11e4:	80 2f       	mov	r24, r16
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <fputc>
    11ec:	93 fc       	sbrc	r9, 3
    11ee:	09 c0       	rjmp	.+18     	; 0x1202 <vfprintf+0x2a4>
    11f0:	55 20       	and	r5, r5
    11f2:	39 f0       	breq	.+14     	; 0x1202 <vfprintf+0x2a4>
    11f4:	b7 01       	movw	r22, r14
    11f6:	80 e3       	ldi	r24, 0x30	; 48
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <fputc>
    11fe:	5a 94       	dec	r5
    1200:	f7 cf       	rjmp	.-18     	; 0x11f0 <vfprintf+0x292>
    1202:	97 fe       	sbrs	r9, 7
    1204:	4c c0       	rjmp	.+152    	; 0x129e <vfprintf+0x340>
    1206:	46 01       	movw	r8, r12
    1208:	d7 fe       	sbrs	r13, 7
    120a:	02 c0       	rjmp	.+4      	; 0x1210 <vfprintf+0x2b2>
    120c:	81 2c       	mov	r8, r1
    120e:	91 2c       	mov	r9, r1
    1210:	c6 01       	movw	r24, r12
    1212:	88 19       	sub	r24, r8
    1214:	99 09       	sbc	r25, r9
    1216:	f3 01       	movw	r30, r6
    1218:	e8 0f       	add	r30, r24
    121a:	f9 1f       	adc	r31, r25
    121c:	fe 87       	std	Y+14, r31	; 0x0e
    121e:	ed 87       	std	Y+13, r30	; 0x0d
    1220:	96 01       	movw	r18, r12
    1222:	24 19       	sub	r18, r4
    1224:	31 09       	sbc	r19, r1
    1226:	38 8b       	std	Y+16, r19	; 0x10
    1228:	2f 87       	std	Y+15, r18	; 0x0f
    122a:	01 2f       	mov	r16, r17
    122c:	10 e0       	ldi	r17, 0x00	; 0
    122e:	11 95       	neg	r17
    1230:	01 95       	neg	r16
    1232:	11 09       	sbc	r17, r1
    1234:	3f ef       	ldi	r19, 0xFF	; 255
    1236:	83 16       	cp	r8, r19
    1238:	93 06       	cpc	r9, r19
    123a:	29 f4       	brne	.+10     	; 0x1246 <vfprintf+0x2e8>
    123c:	b7 01       	movw	r22, r14
    123e:	8e e2       	ldi	r24, 0x2E	; 46
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <fputc>
    1246:	c8 14       	cp	r12, r8
    1248:	d9 04       	cpc	r13, r9
    124a:	4c f0       	brlt	.+18     	; 0x125e <vfprintf+0x300>
    124c:	8f 85       	ldd	r24, Y+15	; 0x0f
    124e:	98 89       	ldd	r25, Y+16	; 0x10
    1250:	88 15       	cp	r24, r8
    1252:	99 05       	cpc	r25, r9
    1254:	24 f4       	brge	.+8      	; 0x125e <vfprintf+0x300>
    1256:	ed 85       	ldd	r30, Y+13	; 0x0d
    1258:	fe 85       	ldd	r31, Y+14	; 0x0e
    125a:	81 81       	ldd	r24, Z+1	; 0x01
    125c:	01 c0       	rjmp	.+2      	; 0x1260 <vfprintf+0x302>
    125e:	80 e3       	ldi	r24, 0x30	; 48
    1260:	f1 e0       	ldi	r31, 0x01	; 1
    1262:	8f 1a       	sub	r8, r31
    1264:	91 08       	sbc	r9, r1
    1266:	2d 85       	ldd	r18, Y+13	; 0x0d
    1268:	3e 85       	ldd	r19, Y+14	; 0x0e
    126a:	2f 5f       	subi	r18, 0xFF	; 255
    126c:	3f 4f       	sbci	r19, 0xFF	; 255
    126e:	3e 87       	std	Y+14, r19	; 0x0e
    1270:	2d 87       	std	Y+13, r18	; 0x0d
    1272:	80 16       	cp	r8, r16
    1274:	91 06       	cpc	r9, r17
    1276:	2c f0       	brlt	.+10     	; 0x1282 <vfprintf+0x324>
    1278:	b7 01       	movw	r22, r14
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <fputc>
    1280:	d9 cf       	rjmp	.-78     	; 0x1234 <vfprintf+0x2d6>
    1282:	c8 14       	cp	r12, r8
    1284:	d9 04       	cpc	r13, r9
    1286:	41 f4       	brne	.+16     	; 0x1298 <vfprintf+0x33a>
    1288:	9a 81       	ldd	r25, Y+2	; 0x02
    128a:	96 33       	cpi	r25, 0x36	; 54
    128c:	20 f4       	brcc	.+8      	; 0x1296 <vfprintf+0x338>
    128e:	95 33       	cpi	r25, 0x35	; 53
    1290:	19 f4       	brne	.+6      	; 0x1298 <vfprintf+0x33a>
    1292:	3c 85       	ldd	r19, Y+12	; 0x0c
    1294:	34 ff       	sbrs	r19, 4
    1296:	81 e3       	ldi	r24, 0x31	; 49
    1298:	b7 01       	movw	r22, r14
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	4e c0       	rjmp	.+156    	; 0x133a <vfprintf+0x3dc>
    129e:	8a 81       	ldd	r24, Y+2	; 0x02
    12a0:	81 33       	cpi	r24, 0x31	; 49
    12a2:	19 f0       	breq	.+6      	; 0x12aa <vfprintf+0x34c>
    12a4:	9c 85       	ldd	r25, Y+12	; 0x0c
    12a6:	9f 7e       	andi	r25, 0xEF	; 239
    12a8:	9c 87       	std	Y+12, r25	; 0x0c
    12aa:	b7 01       	movw	r22, r14
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <fputc>
    12b2:	11 11       	cpse	r17, r1
    12b4:	05 c0       	rjmp	.+10     	; 0x12c0 <vfprintf+0x362>
    12b6:	94 fc       	sbrc	r9, 4
    12b8:	18 c0       	rjmp	.+48     	; 0x12ea <vfprintf+0x38c>
    12ba:	85 e6       	ldi	r24, 0x65	; 101
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	17 c0       	rjmp	.+46     	; 0x12ee <vfprintf+0x390>
    12c0:	b7 01       	movw	r22, r14
    12c2:	8e e2       	ldi	r24, 0x2E	; 46
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <fputc>
    12ca:	1e 5f       	subi	r17, 0xFE	; 254
    12cc:	82 e0       	ldi	r24, 0x02	; 2
    12ce:	01 e0       	ldi	r16, 0x01	; 1
    12d0:	08 0f       	add	r16, r24
    12d2:	f3 01       	movw	r30, r6
    12d4:	e8 0f       	add	r30, r24
    12d6:	f1 1d       	adc	r31, r1
    12d8:	80 81       	ld	r24, Z
    12da:	b7 01       	movw	r22, r14
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <fputc>
    12e2:	80 2f       	mov	r24, r16
    12e4:	01 13       	cpse	r16, r17
    12e6:	f3 cf       	rjmp	.-26     	; 0x12ce <vfprintf+0x370>
    12e8:	e6 cf       	rjmp	.-52     	; 0x12b6 <vfprintf+0x358>
    12ea:	85 e4       	ldi	r24, 0x45	; 69
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	b7 01       	movw	r22, r14
    12f0:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <fputc>
    12f4:	d7 fc       	sbrc	r13, 7
    12f6:	06 c0       	rjmp	.+12     	; 0x1304 <vfprintf+0x3a6>
    12f8:	c1 14       	cp	r12, r1
    12fa:	d1 04       	cpc	r13, r1
    12fc:	41 f4       	brne	.+16     	; 0x130e <vfprintf+0x3b0>
    12fe:	ec 85       	ldd	r30, Y+12	; 0x0c
    1300:	e4 ff       	sbrs	r30, 4
    1302:	05 c0       	rjmp	.+10     	; 0x130e <vfprintf+0x3b0>
    1304:	d1 94       	neg	r13
    1306:	c1 94       	neg	r12
    1308:	d1 08       	sbc	r13, r1
    130a:	8d e2       	ldi	r24, 0x2D	; 45
    130c:	01 c0       	rjmp	.+2      	; 0x1310 <vfprintf+0x3b2>
    130e:	8b e2       	ldi	r24, 0x2B	; 43
    1310:	b7 01       	movw	r22, r14
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <fputc>
    1318:	80 e3       	ldi	r24, 0x30	; 48
    131a:	2a e0       	ldi	r18, 0x0A	; 10
    131c:	c2 16       	cp	r12, r18
    131e:	d1 04       	cpc	r13, r1
    1320:	2c f0       	brlt	.+10     	; 0x132c <vfprintf+0x3ce>
    1322:	8f 5f       	subi	r24, 0xFF	; 255
    1324:	fa e0       	ldi	r31, 0x0A	; 10
    1326:	cf 1a       	sub	r12, r31
    1328:	d1 08       	sbc	r13, r1
    132a:	f7 cf       	rjmp	.-18     	; 0x131a <vfprintf+0x3bc>
    132c:	b7 01       	movw	r22, r14
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <fputc>
    1334:	b7 01       	movw	r22, r14
    1336:	c6 01       	movw	r24, r12
    1338:	c0 96       	adiw	r24, 0x30	; 48
    133a:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <fputc>
    133e:	54 c1       	rjmp	.+680    	; 0x15e8 <vfprintf+0x68a>
    1340:	83 36       	cpi	r24, 0x63	; 99
    1342:	31 f0       	breq	.+12     	; 0x1350 <vfprintf+0x3f2>
    1344:	83 37       	cpi	r24, 0x73	; 115
    1346:	79 f0       	breq	.+30     	; 0x1366 <vfprintf+0x408>
    1348:	83 35       	cpi	r24, 0x53	; 83
    134a:	09 f0       	breq	.+2      	; 0x134e <vfprintf+0x3f0>
    134c:	56 c0       	rjmp	.+172    	; 0x13fa <vfprintf+0x49c>
    134e:	20 c0       	rjmp	.+64     	; 0x1390 <vfprintf+0x432>
    1350:	56 01       	movw	r10, r12
    1352:	32 e0       	ldi	r19, 0x02	; 2
    1354:	a3 0e       	add	r10, r19
    1356:	b1 1c       	adc	r11, r1
    1358:	f6 01       	movw	r30, r12
    135a:	80 81       	ld	r24, Z
    135c:	89 83       	std	Y+1, r24	; 0x01
    135e:	01 e0       	ldi	r16, 0x01	; 1
    1360:	10 e0       	ldi	r17, 0x00	; 0
    1362:	63 01       	movw	r12, r6
    1364:	12 c0       	rjmp	.+36     	; 0x138a <vfprintf+0x42c>
    1366:	56 01       	movw	r10, r12
    1368:	f2 e0       	ldi	r31, 0x02	; 2
    136a:	af 0e       	add	r10, r31
    136c:	b1 1c       	adc	r11, r1
    136e:	f6 01       	movw	r30, r12
    1370:	c0 80       	ld	r12, Z
    1372:	d1 80       	ldd	r13, Z+1	; 0x01
    1374:	96 fe       	sbrs	r9, 6
    1376:	03 c0       	rjmp	.+6      	; 0x137e <vfprintf+0x420>
    1378:	61 2f       	mov	r22, r17
    137a:	70 e0       	ldi	r23, 0x00	; 0
    137c:	02 c0       	rjmp	.+4      	; 0x1382 <vfprintf+0x424>
    137e:	6f ef       	ldi	r22, 0xFF	; 255
    1380:	7f ef       	ldi	r23, 0xFF	; 255
    1382:	c6 01       	movw	r24, r12
    1384:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <strnlen>
    1388:	8c 01       	movw	r16, r24
    138a:	f9 2d       	mov	r31, r9
    138c:	ff 77       	andi	r31, 0x7F	; 127
    138e:	14 c0       	rjmp	.+40     	; 0x13b8 <vfprintf+0x45a>
    1390:	56 01       	movw	r10, r12
    1392:	22 e0       	ldi	r18, 0x02	; 2
    1394:	a2 0e       	add	r10, r18
    1396:	b1 1c       	adc	r11, r1
    1398:	f6 01       	movw	r30, r12
    139a:	c0 80       	ld	r12, Z
    139c:	d1 80       	ldd	r13, Z+1	; 0x01
    139e:	96 fe       	sbrs	r9, 6
    13a0:	03 c0       	rjmp	.+6      	; 0x13a8 <vfprintf+0x44a>
    13a2:	61 2f       	mov	r22, r17
    13a4:	70 e0       	ldi	r23, 0x00	; 0
    13a6:	02 c0       	rjmp	.+4      	; 0x13ac <vfprintf+0x44e>
    13a8:	6f ef       	ldi	r22, 0xFF	; 255
    13aa:	7f ef       	ldi	r23, 0xFF	; 255
    13ac:	c6 01       	movw	r24, r12
    13ae:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <strnlen_P>
    13b2:	8c 01       	movw	r16, r24
    13b4:	f9 2d       	mov	r31, r9
    13b6:	f0 68       	ori	r31, 0x80	; 128
    13b8:	9f 2e       	mov	r9, r31
    13ba:	f3 fd       	sbrc	r31, 3
    13bc:	1a c0       	rjmp	.+52     	; 0x13f2 <vfprintf+0x494>
    13be:	85 2d       	mov	r24, r5
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	08 17       	cp	r16, r24
    13c4:	19 07       	cpc	r17, r25
    13c6:	a8 f4       	brcc	.+42     	; 0x13f2 <vfprintf+0x494>
    13c8:	b7 01       	movw	r22, r14
    13ca:	80 e2       	ldi	r24, 0x20	; 32
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <fputc>
    13d2:	5a 94       	dec	r5
    13d4:	f4 cf       	rjmp	.-24     	; 0x13be <vfprintf+0x460>
    13d6:	f6 01       	movw	r30, r12
    13d8:	97 fc       	sbrc	r9, 7
    13da:	85 91       	lpm	r24, Z+
    13dc:	97 fe       	sbrs	r9, 7
    13de:	81 91       	ld	r24, Z+
    13e0:	6f 01       	movw	r12, r30
    13e2:	b7 01       	movw	r22, r14
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <fputc>
    13ea:	51 10       	cpse	r5, r1
    13ec:	5a 94       	dec	r5
    13ee:	01 50       	subi	r16, 0x01	; 1
    13f0:	11 09       	sbc	r17, r1
    13f2:	01 15       	cp	r16, r1
    13f4:	11 05       	cpc	r17, r1
    13f6:	79 f7       	brne	.-34     	; 0x13d6 <vfprintf+0x478>
    13f8:	f7 c0       	rjmp	.+494    	; 0x15e8 <vfprintf+0x68a>
    13fa:	84 36       	cpi	r24, 0x64	; 100
    13fc:	11 f0       	breq	.+4      	; 0x1402 <vfprintf+0x4a4>
    13fe:	89 36       	cpi	r24, 0x69	; 105
    1400:	61 f5       	brne	.+88     	; 0x145a <vfprintf+0x4fc>
    1402:	56 01       	movw	r10, r12
    1404:	97 fe       	sbrs	r9, 7
    1406:	09 c0       	rjmp	.+18     	; 0x141a <vfprintf+0x4bc>
    1408:	24 e0       	ldi	r18, 0x04	; 4
    140a:	a2 0e       	add	r10, r18
    140c:	b1 1c       	adc	r11, r1
    140e:	f6 01       	movw	r30, r12
    1410:	60 81       	ld	r22, Z
    1412:	71 81       	ldd	r23, Z+1	; 0x01
    1414:	82 81       	ldd	r24, Z+2	; 0x02
    1416:	93 81       	ldd	r25, Z+3	; 0x03
    1418:	0a c0       	rjmp	.+20     	; 0x142e <vfprintf+0x4d0>
    141a:	f2 e0       	ldi	r31, 0x02	; 2
    141c:	af 0e       	add	r10, r31
    141e:	b1 1c       	adc	r11, r1
    1420:	f6 01       	movw	r30, r12
    1422:	60 81       	ld	r22, Z
    1424:	71 81       	ldd	r23, Z+1	; 0x01
    1426:	07 2e       	mov	r0, r23
    1428:	00 0c       	add	r0, r0
    142a:	88 0b       	sbc	r24, r24
    142c:	99 0b       	sbc	r25, r25
    142e:	f9 2d       	mov	r31, r9
    1430:	ff 76       	andi	r31, 0x6F	; 111
    1432:	9f 2e       	mov	r9, r31
    1434:	97 ff       	sbrs	r25, 7
    1436:	09 c0       	rjmp	.+18     	; 0x144a <vfprintf+0x4ec>
    1438:	90 95       	com	r25
    143a:	80 95       	com	r24
    143c:	70 95       	com	r23
    143e:	61 95       	neg	r22
    1440:	7f 4f       	sbci	r23, 0xFF	; 255
    1442:	8f 4f       	sbci	r24, 0xFF	; 255
    1444:	9f 4f       	sbci	r25, 0xFF	; 255
    1446:	f0 68       	ori	r31, 0x80	; 128
    1448:	9f 2e       	mov	r9, r31
    144a:	2a e0       	ldi	r18, 0x0A	; 10
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	a3 01       	movw	r20, r6
    1450:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <__ultoa_invert>
    1454:	c8 2e       	mov	r12, r24
    1456:	c6 18       	sub	r12, r6
    1458:	3f c0       	rjmp	.+126    	; 0x14d8 <vfprintf+0x57a>
    145a:	09 2d       	mov	r16, r9
    145c:	85 37       	cpi	r24, 0x75	; 117
    145e:	21 f4       	brne	.+8      	; 0x1468 <vfprintf+0x50a>
    1460:	0f 7e       	andi	r16, 0xEF	; 239
    1462:	2a e0       	ldi	r18, 0x0A	; 10
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	1d c0       	rjmp	.+58     	; 0x14a2 <vfprintf+0x544>
    1468:	09 7f       	andi	r16, 0xF9	; 249
    146a:	8f 36       	cpi	r24, 0x6F	; 111
    146c:	91 f0       	breq	.+36     	; 0x1492 <vfprintf+0x534>
    146e:	18 f4       	brcc	.+6      	; 0x1476 <vfprintf+0x518>
    1470:	88 35       	cpi	r24, 0x58	; 88
    1472:	59 f0       	breq	.+22     	; 0x148a <vfprintf+0x52c>
    1474:	c3 c0       	rjmp	.+390    	; 0x15fc <vfprintf+0x69e>
    1476:	80 37       	cpi	r24, 0x70	; 112
    1478:	19 f0       	breq	.+6      	; 0x1480 <vfprintf+0x522>
    147a:	88 37       	cpi	r24, 0x78	; 120
    147c:	11 f0       	breq	.+4      	; 0x1482 <vfprintf+0x524>
    147e:	be c0       	rjmp	.+380    	; 0x15fc <vfprintf+0x69e>
    1480:	00 61       	ori	r16, 0x10	; 16
    1482:	04 ff       	sbrs	r16, 4
    1484:	09 c0       	rjmp	.+18     	; 0x1498 <vfprintf+0x53a>
    1486:	04 60       	ori	r16, 0x04	; 4
    1488:	07 c0       	rjmp	.+14     	; 0x1498 <vfprintf+0x53a>
    148a:	94 fe       	sbrs	r9, 4
    148c:	08 c0       	rjmp	.+16     	; 0x149e <vfprintf+0x540>
    148e:	06 60       	ori	r16, 0x06	; 6
    1490:	06 c0       	rjmp	.+12     	; 0x149e <vfprintf+0x540>
    1492:	28 e0       	ldi	r18, 0x08	; 8
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	05 c0       	rjmp	.+10     	; 0x14a2 <vfprintf+0x544>
    1498:	20 e1       	ldi	r18, 0x10	; 16
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	02 c0       	rjmp	.+4      	; 0x14a2 <vfprintf+0x544>
    149e:	20 e1       	ldi	r18, 0x10	; 16
    14a0:	32 e0       	ldi	r19, 0x02	; 2
    14a2:	56 01       	movw	r10, r12
    14a4:	07 ff       	sbrs	r16, 7
    14a6:	09 c0       	rjmp	.+18     	; 0x14ba <vfprintf+0x55c>
    14a8:	84 e0       	ldi	r24, 0x04	; 4
    14aa:	a8 0e       	add	r10, r24
    14ac:	b1 1c       	adc	r11, r1
    14ae:	f6 01       	movw	r30, r12
    14b0:	60 81       	ld	r22, Z
    14b2:	71 81       	ldd	r23, Z+1	; 0x01
    14b4:	82 81       	ldd	r24, Z+2	; 0x02
    14b6:	93 81       	ldd	r25, Z+3	; 0x03
    14b8:	08 c0       	rjmp	.+16     	; 0x14ca <vfprintf+0x56c>
    14ba:	f2 e0       	ldi	r31, 0x02	; 2
    14bc:	af 0e       	add	r10, r31
    14be:	b1 1c       	adc	r11, r1
    14c0:	f6 01       	movw	r30, r12
    14c2:	60 81       	ld	r22, Z
    14c4:	71 81       	ldd	r23, Z+1	; 0x01
    14c6:	80 e0       	ldi	r24, 0x00	; 0
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	a3 01       	movw	r20, r6
    14cc:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <__ultoa_invert>
    14d0:	c8 2e       	mov	r12, r24
    14d2:	c6 18       	sub	r12, r6
    14d4:	0f 77       	andi	r16, 0x7F	; 127
    14d6:	90 2e       	mov	r9, r16
    14d8:	96 fe       	sbrs	r9, 6
    14da:	0b c0       	rjmp	.+22     	; 0x14f2 <vfprintf+0x594>
    14dc:	09 2d       	mov	r16, r9
    14de:	0e 7f       	andi	r16, 0xFE	; 254
    14e0:	c1 16       	cp	r12, r17
    14e2:	50 f4       	brcc	.+20     	; 0x14f8 <vfprintf+0x59a>
    14e4:	94 fe       	sbrs	r9, 4
    14e6:	0a c0       	rjmp	.+20     	; 0x14fc <vfprintf+0x59e>
    14e8:	92 fc       	sbrc	r9, 2
    14ea:	08 c0       	rjmp	.+16     	; 0x14fc <vfprintf+0x59e>
    14ec:	09 2d       	mov	r16, r9
    14ee:	0e 7e       	andi	r16, 0xEE	; 238
    14f0:	05 c0       	rjmp	.+10     	; 0x14fc <vfprintf+0x59e>
    14f2:	dc 2c       	mov	r13, r12
    14f4:	09 2d       	mov	r16, r9
    14f6:	03 c0       	rjmp	.+6      	; 0x14fe <vfprintf+0x5a0>
    14f8:	dc 2c       	mov	r13, r12
    14fa:	01 c0       	rjmp	.+2      	; 0x14fe <vfprintf+0x5a0>
    14fc:	d1 2e       	mov	r13, r17
    14fe:	04 ff       	sbrs	r16, 4
    1500:	0d c0       	rjmp	.+26     	; 0x151c <vfprintf+0x5be>
    1502:	fe 01       	movw	r30, r28
    1504:	ec 0d       	add	r30, r12
    1506:	f1 1d       	adc	r31, r1
    1508:	80 81       	ld	r24, Z
    150a:	80 33       	cpi	r24, 0x30	; 48
    150c:	11 f4       	brne	.+4      	; 0x1512 <vfprintf+0x5b4>
    150e:	09 7e       	andi	r16, 0xE9	; 233
    1510:	09 c0       	rjmp	.+18     	; 0x1524 <vfprintf+0x5c6>
    1512:	02 ff       	sbrs	r16, 2
    1514:	06 c0       	rjmp	.+12     	; 0x1522 <vfprintf+0x5c4>
    1516:	d3 94       	inc	r13
    1518:	d3 94       	inc	r13
    151a:	04 c0       	rjmp	.+8      	; 0x1524 <vfprintf+0x5c6>
    151c:	80 2f       	mov	r24, r16
    151e:	86 78       	andi	r24, 0x86	; 134
    1520:	09 f0       	breq	.+2      	; 0x1524 <vfprintf+0x5c6>
    1522:	d3 94       	inc	r13
    1524:	03 fd       	sbrc	r16, 3
    1526:	11 c0       	rjmp	.+34     	; 0x154a <vfprintf+0x5ec>
    1528:	00 ff       	sbrs	r16, 0
    152a:	06 c0       	rjmp	.+12     	; 0x1538 <vfprintf+0x5da>
    152c:	1c 2d       	mov	r17, r12
    152e:	d5 14       	cp	r13, r5
    1530:	80 f4       	brcc	.+32     	; 0x1552 <vfprintf+0x5f4>
    1532:	15 0d       	add	r17, r5
    1534:	1d 19       	sub	r17, r13
    1536:	0d c0       	rjmp	.+26     	; 0x1552 <vfprintf+0x5f4>
    1538:	d5 14       	cp	r13, r5
    153a:	58 f4       	brcc	.+22     	; 0x1552 <vfprintf+0x5f4>
    153c:	b7 01       	movw	r22, r14
    153e:	80 e2       	ldi	r24, 0x20	; 32
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <fputc>
    1546:	d3 94       	inc	r13
    1548:	f7 cf       	rjmp	.-18     	; 0x1538 <vfprintf+0x5da>
    154a:	d5 14       	cp	r13, r5
    154c:	10 f4       	brcc	.+4      	; 0x1552 <vfprintf+0x5f4>
    154e:	5d 18       	sub	r5, r13
    1550:	01 c0       	rjmp	.+2      	; 0x1554 <vfprintf+0x5f6>
    1552:	51 2c       	mov	r5, r1
    1554:	04 ff       	sbrs	r16, 4
    1556:	10 c0       	rjmp	.+32     	; 0x1578 <vfprintf+0x61a>
    1558:	b7 01       	movw	r22, r14
    155a:	80 e3       	ldi	r24, 0x30	; 48
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <fputc>
    1562:	02 ff       	sbrs	r16, 2
    1564:	17 c0       	rjmp	.+46     	; 0x1594 <vfprintf+0x636>
    1566:	01 fd       	sbrc	r16, 1
    1568:	03 c0       	rjmp	.+6      	; 0x1570 <vfprintf+0x612>
    156a:	88 e7       	ldi	r24, 0x78	; 120
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	02 c0       	rjmp	.+4      	; 0x1574 <vfprintf+0x616>
    1570:	88 e5       	ldi	r24, 0x58	; 88
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	b7 01       	movw	r22, r14
    1576:	0c c0       	rjmp	.+24     	; 0x1590 <vfprintf+0x632>
    1578:	80 2f       	mov	r24, r16
    157a:	86 78       	andi	r24, 0x86	; 134
    157c:	59 f0       	breq	.+22     	; 0x1594 <vfprintf+0x636>
    157e:	01 ff       	sbrs	r16, 1
    1580:	02 c0       	rjmp	.+4      	; 0x1586 <vfprintf+0x628>
    1582:	8b e2       	ldi	r24, 0x2B	; 43
    1584:	01 c0       	rjmp	.+2      	; 0x1588 <vfprintf+0x62a>
    1586:	80 e2       	ldi	r24, 0x20	; 32
    1588:	07 fd       	sbrc	r16, 7
    158a:	8d e2       	ldi	r24, 0x2D	; 45
    158c:	b7 01       	movw	r22, r14
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <fputc>
    1594:	c1 16       	cp	r12, r17
    1596:	38 f4       	brcc	.+14     	; 0x15a6 <vfprintf+0x648>
    1598:	b7 01       	movw	r22, r14
    159a:	80 e3       	ldi	r24, 0x30	; 48
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <fputc>
    15a2:	11 50       	subi	r17, 0x01	; 1
    15a4:	f7 cf       	rjmp	.-18     	; 0x1594 <vfprintf+0x636>
    15a6:	ca 94       	dec	r12
    15a8:	f3 01       	movw	r30, r6
    15aa:	ec 0d       	add	r30, r12
    15ac:	f1 1d       	adc	r31, r1
    15ae:	80 81       	ld	r24, Z
    15b0:	b7 01       	movw	r22, r14
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <fputc>
    15b8:	c1 10       	cpse	r12, r1
    15ba:	f5 cf       	rjmp	.-22     	; 0x15a6 <vfprintf+0x648>
    15bc:	15 c0       	rjmp	.+42     	; 0x15e8 <vfprintf+0x68a>
    15be:	f4 e0       	ldi	r31, 0x04	; 4
    15c0:	f5 15       	cp	r31, r5
    15c2:	60 f5       	brcc	.+88     	; 0x161c <vfprintf+0x6be>
    15c4:	84 e0       	ldi	r24, 0x04	; 4
    15c6:	58 1a       	sub	r5, r24
    15c8:	93 fe       	sbrs	r9, 3
    15ca:	1f c0       	rjmp	.+62     	; 0x160a <vfprintf+0x6ac>
    15cc:	01 11       	cpse	r16, r1
    15ce:	27 c0       	rjmp	.+78     	; 0x161e <vfprintf+0x6c0>
    15d0:	2c 85       	ldd	r18, Y+12	; 0x0c
    15d2:	23 ff       	sbrs	r18, 3
    15d4:	2a c0       	rjmp	.+84     	; 0x162a <vfprintf+0x6cc>
    15d6:	0a ef       	ldi	r16, 0xFA	; 250
    15d8:	11 e0       	ldi	r17, 0x01	; 1
    15da:	39 2d       	mov	r19, r9
    15dc:	30 71       	andi	r19, 0x10	; 16
    15de:	93 2e       	mov	r9, r19
    15e0:	f8 01       	movw	r30, r16
    15e2:	84 91       	lpm	r24, Z
    15e4:	81 11       	cpse	r24, r1
    15e6:	24 c0       	rjmp	.+72     	; 0x1630 <vfprintf+0x6d2>
    15e8:	55 20       	and	r5, r5
    15ea:	09 f4       	brne	.+2      	; 0x15ee <vfprintf+0x690>
    15ec:	e4 cc       	rjmp	.-1592   	; 0xfb6 <vfprintf+0x58>
    15ee:	b7 01       	movw	r22, r14
    15f0:	80 e2       	ldi	r24, 0x20	; 32
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <fputc>
    15f8:	5a 94       	dec	r5
    15fa:	f6 cf       	rjmp	.-20     	; 0x15e8 <vfprintf+0x68a>
    15fc:	f7 01       	movw	r30, r14
    15fe:	86 81       	ldd	r24, Z+6	; 0x06
    1600:	97 81       	ldd	r25, Z+7	; 0x07
    1602:	26 c0       	rjmp	.+76     	; 0x1650 <vfprintf+0x6f2>
    1604:	8f ef       	ldi	r24, 0xFF	; 255
    1606:	9f ef       	ldi	r25, 0xFF	; 255
    1608:	23 c0       	rjmp	.+70     	; 0x1650 <vfprintf+0x6f2>
    160a:	b7 01       	movw	r22, r14
    160c:	80 e2       	ldi	r24, 0x20	; 32
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <fputc>
    1614:	5a 94       	dec	r5
    1616:	51 10       	cpse	r5, r1
    1618:	f8 cf       	rjmp	.-16     	; 0x160a <vfprintf+0x6ac>
    161a:	d8 cf       	rjmp	.-80     	; 0x15cc <vfprintf+0x66e>
    161c:	51 2c       	mov	r5, r1
    161e:	b7 01       	movw	r22, r14
    1620:	80 2f       	mov	r24, r16
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <fputc>
    1628:	d3 cf       	rjmp	.-90     	; 0x15d0 <vfprintf+0x672>
    162a:	0e ef       	ldi	r16, 0xFE	; 254
    162c:	11 e0       	ldi	r17, 0x01	; 1
    162e:	d5 cf       	rjmp	.-86     	; 0x15da <vfprintf+0x67c>
    1630:	91 10       	cpse	r9, r1
    1632:	80 52       	subi	r24, 0x20	; 32
    1634:	b7 01       	movw	r22, r14
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <fputc>
    163c:	0f 5f       	subi	r16, 0xFF	; 255
    163e:	1f 4f       	sbci	r17, 0xFF	; 255
    1640:	cf cf       	rjmp	.-98     	; 0x15e0 <vfprintf+0x682>
    1642:	23 e0       	ldi	r18, 0x03	; 3
    1644:	25 15       	cp	r18, r5
    1646:	10 f4       	brcc	.+4      	; 0x164c <vfprintf+0x6ee>
    1648:	83 e0       	ldi	r24, 0x03	; 3
    164a:	bd cf       	rjmp	.-134    	; 0x15c6 <vfprintf+0x668>
    164c:	51 2c       	mov	r5, r1
    164e:	c0 cf       	rjmp	.-128    	; 0x15d0 <vfprintf+0x672>
    1650:	60 96       	adiw	r28, 0x10	; 16
    1652:	e2 e1       	ldi	r30, 0x12	; 18
    1654:	0c 94 70 0b 	jmp	0x16e0	; 0x16e0 <__epilogue_restores__>

00001658 <__udivmodsi4>:
    1658:	a1 e2       	ldi	r26, 0x21	; 33
    165a:	1a 2e       	mov	r1, r26
    165c:	aa 1b       	sub	r26, r26
    165e:	bb 1b       	sub	r27, r27
    1660:	fd 01       	movw	r30, r26
    1662:	0d c0       	rjmp	.+26     	; 0x167e <__udivmodsi4_ep>

00001664 <__udivmodsi4_loop>:
    1664:	aa 1f       	adc	r26, r26
    1666:	bb 1f       	adc	r27, r27
    1668:	ee 1f       	adc	r30, r30
    166a:	ff 1f       	adc	r31, r31
    166c:	a2 17       	cp	r26, r18
    166e:	b3 07       	cpc	r27, r19
    1670:	e4 07       	cpc	r30, r20
    1672:	f5 07       	cpc	r31, r21
    1674:	20 f0       	brcs	.+8      	; 0x167e <__udivmodsi4_ep>
    1676:	a2 1b       	sub	r26, r18
    1678:	b3 0b       	sbc	r27, r19
    167a:	e4 0b       	sbc	r30, r20
    167c:	f5 0b       	sbc	r31, r21

0000167e <__udivmodsi4_ep>:
    167e:	66 1f       	adc	r22, r22
    1680:	77 1f       	adc	r23, r23
    1682:	88 1f       	adc	r24, r24
    1684:	99 1f       	adc	r25, r25
    1686:	1a 94       	dec	r1
    1688:	69 f7       	brne	.-38     	; 0x1664 <__udivmodsi4_loop>
    168a:	60 95       	com	r22
    168c:	70 95       	com	r23
    168e:	80 95       	com	r24
    1690:	90 95       	com	r25
    1692:	9b 01       	movw	r18, r22
    1694:	ac 01       	movw	r20, r24
    1696:	bd 01       	movw	r22, r26
    1698:	cf 01       	movw	r24, r30
    169a:	08 95       	ret

0000169c <__tablejump2__>:
    169c:	ee 0f       	add	r30, r30
    169e:	ff 1f       	adc	r31, r31
    16a0:	05 90       	lpm	r0, Z+
    16a2:	f4 91       	lpm	r31, Z
    16a4:	e0 2d       	mov	r30, r0
    16a6:	09 94       	ijmp

000016a8 <__prologue_saves__>:
    16a8:	2f 92       	push	r2
    16aa:	3f 92       	push	r3
    16ac:	4f 92       	push	r4
    16ae:	5f 92       	push	r5
    16b0:	6f 92       	push	r6
    16b2:	7f 92       	push	r7
    16b4:	8f 92       	push	r8
    16b6:	9f 92       	push	r9
    16b8:	af 92       	push	r10
    16ba:	bf 92       	push	r11
    16bc:	cf 92       	push	r12
    16be:	df 92       	push	r13
    16c0:	ef 92       	push	r14
    16c2:	ff 92       	push	r15
    16c4:	0f 93       	push	r16
    16c6:	1f 93       	push	r17
    16c8:	cf 93       	push	r28
    16ca:	df 93       	push	r29
    16cc:	cd b7       	in	r28, 0x3d	; 61
    16ce:	de b7       	in	r29, 0x3e	; 62
    16d0:	ca 1b       	sub	r28, r26
    16d2:	db 0b       	sbc	r29, r27
    16d4:	0f b6       	in	r0, 0x3f	; 63
    16d6:	f8 94       	cli
    16d8:	de bf       	out	0x3e, r29	; 62
    16da:	0f be       	out	0x3f, r0	; 63
    16dc:	cd bf       	out	0x3d, r28	; 61
    16de:	09 94       	ijmp

000016e0 <__epilogue_restores__>:
    16e0:	2a 88       	ldd	r2, Y+18	; 0x12
    16e2:	39 88       	ldd	r3, Y+17	; 0x11
    16e4:	48 88       	ldd	r4, Y+16	; 0x10
    16e6:	5f 84       	ldd	r5, Y+15	; 0x0f
    16e8:	6e 84       	ldd	r6, Y+14	; 0x0e
    16ea:	7d 84       	ldd	r7, Y+13	; 0x0d
    16ec:	8c 84       	ldd	r8, Y+12	; 0x0c
    16ee:	9b 84       	ldd	r9, Y+11	; 0x0b
    16f0:	aa 84       	ldd	r10, Y+10	; 0x0a
    16f2:	b9 84       	ldd	r11, Y+9	; 0x09
    16f4:	c8 84       	ldd	r12, Y+8	; 0x08
    16f6:	df 80       	ldd	r13, Y+7	; 0x07
    16f8:	ee 80       	ldd	r14, Y+6	; 0x06
    16fa:	fd 80       	ldd	r15, Y+5	; 0x05
    16fc:	0c 81       	ldd	r16, Y+4	; 0x04
    16fe:	1b 81       	ldd	r17, Y+3	; 0x03
    1700:	aa 81       	ldd	r26, Y+2	; 0x02
    1702:	b9 81       	ldd	r27, Y+1	; 0x01
    1704:	ce 0f       	add	r28, r30
    1706:	d1 1d       	adc	r29, r1
    1708:	0f b6       	in	r0, 0x3f	; 63
    170a:	f8 94       	cli
    170c:	de bf       	out	0x3e, r29	; 62
    170e:	0f be       	out	0x3f, r0	; 63
    1710:	cd bf       	out	0x3d, r28	; 61
    1712:	ed 01       	movw	r28, r26
    1714:	08 95       	ret

00001716 <__ftoa_engine>:
    1716:	28 30       	cpi	r18, 0x08	; 8
    1718:	08 f0       	brcs	.+2      	; 0x171c <__ftoa_engine+0x6>
    171a:	27 e0       	ldi	r18, 0x07	; 7
    171c:	33 27       	eor	r19, r19
    171e:	da 01       	movw	r26, r20
    1720:	99 0f       	add	r25, r25
    1722:	31 1d       	adc	r19, r1
    1724:	87 fd       	sbrc	r24, 7
    1726:	91 60       	ori	r25, 0x01	; 1
    1728:	00 96       	adiw	r24, 0x00	; 0
    172a:	61 05       	cpc	r22, r1
    172c:	71 05       	cpc	r23, r1
    172e:	39 f4       	brne	.+14     	; 0x173e <__ftoa_engine+0x28>
    1730:	32 60       	ori	r19, 0x02	; 2
    1732:	2e 5f       	subi	r18, 0xFE	; 254
    1734:	3d 93       	st	X+, r19
    1736:	30 e3       	ldi	r19, 0x30	; 48
    1738:	2a 95       	dec	r18
    173a:	e1 f7       	brne	.-8      	; 0x1734 <__ftoa_engine+0x1e>
    173c:	08 95       	ret
    173e:	9f 3f       	cpi	r25, 0xFF	; 255
    1740:	30 f0       	brcs	.+12     	; 0x174e <__ftoa_engine+0x38>
    1742:	80 38       	cpi	r24, 0x80	; 128
    1744:	71 05       	cpc	r23, r1
    1746:	61 05       	cpc	r22, r1
    1748:	09 f0       	breq	.+2      	; 0x174c <__ftoa_engine+0x36>
    174a:	3c 5f       	subi	r19, 0xFC	; 252
    174c:	3c 5f       	subi	r19, 0xFC	; 252
    174e:	3d 93       	st	X+, r19
    1750:	91 30       	cpi	r25, 0x01	; 1
    1752:	08 f0       	brcs	.+2      	; 0x1756 <__ftoa_engine+0x40>
    1754:	80 68       	ori	r24, 0x80	; 128
    1756:	91 1d       	adc	r25, r1
    1758:	df 93       	push	r29
    175a:	cf 93       	push	r28
    175c:	1f 93       	push	r17
    175e:	0f 93       	push	r16
    1760:	ff 92       	push	r15
    1762:	ef 92       	push	r14
    1764:	19 2f       	mov	r17, r25
    1766:	98 7f       	andi	r25, 0xF8	; 248
    1768:	96 95       	lsr	r25
    176a:	e9 2f       	mov	r30, r25
    176c:	96 95       	lsr	r25
    176e:	96 95       	lsr	r25
    1770:	e9 0f       	add	r30, r25
    1772:	ff 27       	eor	r31, r31
    1774:	e4 5a       	subi	r30, 0xA4	; 164
    1776:	fd 4f       	sbci	r31, 0xFD	; 253
    1778:	99 27       	eor	r25, r25
    177a:	33 27       	eor	r19, r19
    177c:	ee 24       	eor	r14, r14
    177e:	ff 24       	eor	r15, r15
    1780:	a7 01       	movw	r20, r14
    1782:	e7 01       	movw	r28, r14
    1784:	05 90       	lpm	r0, Z+
    1786:	08 94       	sec
    1788:	07 94       	ror	r0
    178a:	28 f4       	brcc	.+10     	; 0x1796 <__ftoa_engine+0x80>
    178c:	36 0f       	add	r19, r22
    178e:	e7 1e       	adc	r14, r23
    1790:	f8 1e       	adc	r15, r24
    1792:	49 1f       	adc	r20, r25
    1794:	51 1d       	adc	r21, r1
    1796:	66 0f       	add	r22, r22
    1798:	77 1f       	adc	r23, r23
    179a:	88 1f       	adc	r24, r24
    179c:	99 1f       	adc	r25, r25
    179e:	06 94       	lsr	r0
    17a0:	a1 f7       	brne	.-24     	; 0x178a <__ftoa_engine+0x74>
    17a2:	05 90       	lpm	r0, Z+
    17a4:	07 94       	ror	r0
    17a6:	28 f4       	brcc	.+10     	; 0x17b2 <__ftoa_engine+0x9c>
    17a8:	e7 0e       	add	r14, r23
    17aa:	f8 1e       	adc	r15, r24
    17ac:	49 1f       	adc	r20, r25
    17ae:	56 1f       	adc	r21, r22
    17b0:	c1 1d       	adc	r28, r1
    17b2:	77 0f       	add	r23, r23
    17b4:	88 1f       	adc	r24, r24
    17b6:	99 1f       	adc	r25, r25
    17b8:	66 1f       	adc	r22, r22
    17ba:	06 94       	lsr	r0
    17bc:	a1 f7       	brne	.-24     	; 0x17a6 <__ftoa_engine+0x90>
    17be:	05 90       	lpm	r0, Z+
    17c0:	07 94       	ror	r0
    17c2:	28 f4       	brcc	.+10     	; 0x17ce <__ftoa_engine+0xb8>
    17c4:	f8 0e       	add	r15, r24
    17c6:	49 1f       	adc	r20, r25
    17c8:	56 1f       	adc	r21, r22
    17ca:	c7 1f       	adc	r28, r23
    17cc:	d1 1d       	adc	r29, r1
    17ce:	88 0f       	add	r24, r24
    17d0:	99 1f       	adc	r25, r25
    17d2:	66 1f       	adc	r22, r22
    17d4:	77 1f       	adc	r23, r23
    17d6:	06 94       	lsr	r0
    17d8:	a1 f7       	brne	.-24     	; 0x17c2 <__ftoa_engine+0xac>
    17da:	05 90       	lpm	r0, Z+
    17dc:	07 94       	ror	r0
    17de:	20 f4       	brcc	.+8      	; 0x17e8 <__ftoa_engine+0xd2>
    17e0:	49 0f       	add	r20, r25
    17e2:	56 1f       	adc	r21, r22
    17e4:	c7 1f       	adc	r28, r23
    17e6:	d8 1f       	adc	r29, r24
    17e8:	99 0f       	add	r25, r25
    17ea:	66 1f       	adc	r22, r22
    17ec:	77 1f       	adc	r23, r23
    17ee:	88 1f       	adc	r24, r24
    17f0:	06 94       	lsr	r0
    17f2:	a9 f7       	brne	.-22     	; 0x17de <__ftoa_engine+0xc8>
    17f4:	84 91       	lpm	r24, Z
    17f6:	10 95       	com	r17
    17f8:	17 70       	andi	r17, 0x07	; 7
    17fa:	41 f0       	breq	.+16     	; 0x180c <__ftoa_engine+0xf6>
    17fc:	d6 95       	lsr	r29
    17fe:	c7 95       	ror	r28
    1800:	57 95       	ror	r21
    1802:	47 95       	ror	r20
    1804:	f7 94       	ror	r15
    1806:	e7 94       	ror	r14
    1808:	1a 95       	dec	r17
    180a:	c1 f7       	brne	.-16     	; 0x17fc <__ftoa_engine+0xe6>
    180c:	e2 e0       	ldi	r30, 0x02	; 2
    180e:	f2 e0       	ldi	r31, 0x02	; 2
    1810:	68 94       	set
    1812:	15 90       	lpm	r1, Z+
    1814:	15 91       	lpm	r17, Z+
    1816:	35 91       	lpm	r19, Z+
    1818:	65 91       	lpm	r22, Z+
    181a:	95 91       	lpm	r25, Z+
    181c:	05 90       	lpm	r0, Z+
    181e:	7f e2       	ldi	r23, 0x2F	; 47
    1820:	73 95       	inc	r23
    1822:	e1 18       	sub	r14, r1
    1824:	f1 0a       	sbc	r15, r17
    1826:	43 0b       	sbc	r20, r19
    1828:	56 0b       	sbc	r21, r22
    182a:	c9 0b       	sbc	r28, r25
    182c:	d0 09       	sbc	r29, r0
    182e:	c0 f7       	brcc	.-16     	; 0x1820 <__ftoa_engine+0x10a>
    1830:	e1 0c       	add	r14, r1
    1832:	f1 1e       	adc	r15, r17
    1834:	43 1f       	adc	r20, r19
    1836:	56 1f       	adc	r21, r22
    1838:	c9 1f       	adc	r28, r25
    183a:	d0 1d       	adc	r29, r0
    183c:	7e f4       	brtc	.+30     	; 0x185c <__ftoa_engine+0x146>
    183e:	70 33       	cpi	r23, 0x30	; 48
    1840:	11 f4       	brne	.+4      	; 0x1846 <__ftoa_engine+0x130>
    1842:	8a 95       	dec	r24
    1844:	e6 cf       	rjmp	.-52     	; 0x1812 <__ftoa_engine+0xfc>
    1846:	e8 94       	clt
    1848:	01 50       	subi	r16, 0x01	; 1
    184a:	30 f0       	brcs	.+12     	; 0x1858 <__ftoa_engine+0x142>
    184c:	08 0f       	add	r16, r24
    184e:	0a f4       	brpl	.+2      	; 0x1852 <__ftoa_engine+0x13c>
    1850:	00 27       	eor	r16, r16
    1852:	02 17       	cp	r16, r18
    1854:	08 f4       	brcc	.+2      	; 0x1858 <__ftoa_engine+0x142>
    1856:	20 2f       	mov	r18, r16
    1858:	23 95       	inc	r18
    185a:	02 2f       	mov	r16, r18
    185c:	7a 33       	cpi	r23, 0x3A	; 58
    185e:	28 f0       	brcs	.+10     	; 0x186a <__ftoa_engine+0x154>
    1860:	79 e3       	ldi	r23, 0x39	; 57
    1862:	7d 93       	st	X+, r23
    1864:	2a 95       	dec	r18
    1866:	e9 f7       	brne	.-6      	; 0x1862 <__ftoa_engine+0x14c>
    1868:	10 c0       	rjmp	.+32     	; 0x188a <__ftoa_engine+0x174>
    186a:	7d 93       	st	X+, r23
    186c:	2a 95       	dec	r18
    186e:	89 f6       	brne	.-94     	; 0x1812 <__ftoa_engine+0xfc>
    1870:	06 94       	lsr	r0
    1872:	97 95       	ror	r25
    1874:	67 95       	ror	r22
    1876:	37 95       	ror	r19
    1878:	17 95       	ror	r17
    187a:	17 94       	ror	r1
    187c:	e1 18       	sub	r14, r1
    187e:	f1 0a       	sbc	r15, r17
    1880:	43 0b       	sbc	r20, r19
    1882:	56 0b       	sbc	r21, r22
    1884:	c9 0b       	sbc	r28, r25
    1886:	d0 09       	sbc	r29, r0
    1888:	98 f0       	brcs	.+38     	; 0x18b0 <__ftoa_engine+0x19a>
    188a:	23 95       	inc	r18
    188c:	7e 91       	ld	r23, -X
    188e:	73 95       	inc	r23
    1890:	7a 33       	cpi	r23, 0x3A	; 58
    1892:	08 f0       	brcs	.+2      	; 0x1896 <__ftoa_engine+0x180>
    1894:	70 e3       	ldi	r23, 0x30	; 48
    1896:	7c 93       	st	X, r23
    1898:	20 13       	cpse	r18, r16
    189a:	b8 f7       	brcc	.-18     	; 0x188a <__ftoa_engine+0x174>
    189c:	7e 91       	ld	r23, -X
    189e:	70 61       	ori	r23, 0x10	; 16
    18a0:	7d 93       	st	X+, r23
    18a2:	30 f0       	brcs	.+12     	; 0x18b0 <__ftoa_engine+0x19a>
    18a4:	83 95       	inc	r24
    18a6:	71 e3       	ldi	r23, 0x31	; 49
    18a8:	7d 93       	st	X+, r23
    18aa:	70 e3       	ldi	r23, 0x30	; 48
    18ac:	2a 95       	dec	r18
    18ae:	e1 f7       	brne	.-8      	; 0x18a8 <__ftoa_engine+0x192>
    18b0:	11 24       	eor	r1, r1
    18b2:	ef 90       	pop	r14
    18b4:	ff 90       	pop	r15
    18b6:	0f 91       	pop	r16
    18b8:	1f 91       	pop	r17
    18ba:	cf 91       	pop	r28
    18bc:	df 91       	pop	r29
    18be:	99 27       	eor	r25, r25
    18c0:	87 fd       	sbrc	r24, 7
    18c2:	90 95       	com	r25
    18c4:	08 95       	ret

000018c6 <strnlen_P>:
    18c6:	fc 01       	movw	r30, r24
    18c8:	05 90       	lpm	r0, Z+
    18ca:	61 50       	subi	r22, 0x01	; 1
    18cc:	70 40       	sbci	r23, 0x00	; 0
    18ce:	01 10       	cpse	r0, r1
    18d0:	d8 f7       	brcc	.-10     	; 0x18c8 <strnlen_P+0x2>
    18d2:	80 95       	com	r24
    18d4:	90 95       	com	r25
    18d6:	8e 0f       	add	r24, r30
    18d8:	9f 1f       	adc	r25, r31
    18da:	08 95       	ret

000018dc <strnlen>:
    18dc:	fc 01       	movw	r30, r24
    18de:	61 50       	subi	r22, 0x01	; 1
    18e0:	70 40       	sbci	r23, 0x00	; 0
    18e2:	01 90       	ld	r0, Z+
    18e4:	01 10       	cpse	r0, r1
    18e6:	d8 f7       	brcc	.-10     	; 0x18de <strnlen+0x2>
    18e8:	80 95       	com	r24
    18ea:	90 95       	com	r25
    18ec:	8e 0f       	add	r24, r30
    18ee:	9f 1f       	adc	r25, r31
    18f0:	08 95       	ret

000018f2 <fputc>:
    18f2:	0f 93       	push	r16
    18f4:	1f 93       	push	r17
    18f6:	cf 93       	push	r28
    18f8:	df 93       	push	r29
    18fa:	fb 01       	movw	r30, r22
    18fc:	23 81       	ldd	r18, Z+3	; 0x03
    18fe:	21 fd       	sbrc	r18, 1
    1900:	03 c0       	rjmp	.+6      	; 0x1908 <fputc+0x16>
    1902:	8f ef       	ldi	r24, 0xFF	; 255
    1904:	9f ef       	ldi	r25, 0xFF	; 255
    1906:	2c c0       	rjmp	.+88     	; 0x1960 <fputc+0x6e>
    1908:	22 ff       	sbrs	r18, 2
    190a:	16 c0       	rjmp	.+44     	; 0x1938 <fputc+0x46>
    190c:	46 81       	ldd	r20, Z+6	; 0x06
    190e:	57 81       	ldd	r21, Z+7	; 0x07
    1910:	24 81       	ldd	r18, Z+4	; 0x04
    1912:	35 81       	ldd	r19, Z+5	; 0x05
    1914:	42 17       	cp	r20, r18
    1916:	53 07       	cpc	r21, r19
    1918:	44 f4       	brge	.+16     	; 0x192a <fputc+0x38>
    191a:	a0 81       	ld	r26, Z
    191c:	b1 81       	ldd	r27, Z+1	; 0x01
    191e:	9d 01       	movw	r18, r26
    1920:	2f 5f       	subi	r18, 0xFF	; 255
    1922:	3f 4f       	sbci	r19, 0xFF	; 255
    1924:	31 83       	std	Z+1, r19	; 0x01
    1926:	20 83       	st	Z, r18
    1928:	8c 93       	st	X, r24
    192a:	26 81       	ldd	r18, Z+6	; 0x06
    192c:	37 81       	ldd	r19, Z+7	; 0x07
    192e:	2f 5f       	subi	r18, 0xFF	; 255
    1930:	3f 4f       	sbci	r19, 0xFF	; 255
    1932:	37 83       	std	Z+7, r19	; 0x07
    1934:	26 83       	std	Z+6, r18	; 0x06
    1936:	14 c0       	rjmp	.+40     	; 0x1960 <fputc+0x6e>
    1938:	8b 01       	movw	r16, r22
    193a:	ec 01       	movw	r28, r24
    193c:	fb 01       	movw	r30, r22
    193e:	00 84       	ldd	r0, Z+8	; 0x08
    1940:	f1 85       	ldd	r31, Z+9	; 0x09
    1942:	e0 2d       	mov	r30, r0
    1944:	09 95       	icall
    1946:	89 2b       	or	r24, r25
    1948:	e1 f6       	brne	.-72     	; 0x1902 <fputc+0x10>
    194a:	d8 01       	movw	r26, r16
    194c:	16 96       	adiw	r26, 0x06	; 6
    194e:	8d 91       	ld	r24, X+
    1950:	9c 91       	ld	r25, X
    1952:	17 97       	sbiw	r26, 0x07	; 7
    1954:	01 96       	adiw	r24, 0x01	; 1
    1956:	17 96       	adiw	r26, 0x07	; 7
    1958:	9c 93       	st	X, r25
    195a:	8e 93       	st	-X, r24
    195c:	16 97       	sbiw	r26, 0x06	; 6
    195e:	ce 01       	movw	r24, r28
    1960:	df 91       	pop	r29
    1962:	cf 91       	pop	r28
    1964:	1f 91       	pop	r17
    1966:	0f 91       	pop	r16
    1968:	08 95       	ret

0000196a <sprintf>:
    196a:	ae e0       	ldi	r26, 0x0E	; 14
    196c:	b0 e0       	ldi	r27, 0x00	; 0
    196e:	eb eb       	ldi	r30, 0xBB	; 187
    1970:	fc e0       	ldi	r31, 0x0C	; 12
    1972:	0c 94 62 0b 	jmp	0x16c4	; 0x16c4 <__prologue_saves__+0x1c>
    1976:	0d 89       	ldd	r16, Y+21	; 0x15
    1978:	1e 89       	ldd	r17, Y+22	; 0x16
    197a:	86 e0       	ldi	r24, 0x06	; 6
    197c:	8c 83       	std	Y+4, r24	; 0x04
    197e:	1a 83       	std	Y+2, r17	; 0x02
    1980:	09 83       	std	Y+1, r16	; 0x01
    1982:	8f ef       	ldi	r24, 0xFF	; 255
    1984:	9f e7       	ldi	r25, 0x7F	; 127
    1986:	9e 83       	std	Y+6, r25	; 0x06
    1988:	8d 83       	std	Y+5, r24	; 0x05
    198a:	ae 01       	movw	r20, r28
    198c:	47 5e       	subi	r20, 0xE7	; 231
    198e:	5f 4f       	sbci	r21, 0xFF	; 255
    1990:	6f 89       	ldd	r22, Y+23	; 0x17
    1992:	78 8d       	ldd	r23, Y+24	; 0x18
    1994:	ce 01       	movw	r24, r28
    1996:	01 96       	adiw	r24, 0x01	; 1
    1998:	0e 94 af 07 	call	0xf5e	; 0xf5e <vfprintf>
    199c:	ef 81       	ldd	r30, Y+7	; 0x07
    199e:	f8 85       	ldd	r31, Y+8	; 0x08
    19a0:	e0 0f       	add	r30, r16
    19a2:	f1 1f       	adc	r31, r17
    19a4:	10 82       	st	Z, r1
    19a6:	2e 96       	adiw	r28, 0x0e	; 14
    19a8:	e4 e0       	ldi	r30, 0x04	; 4
    19aa:	0c 94 7e 0b 	jmp	0x16fc	; 0x16fc <__epilogue_restores__+0x1c>

000019ae <__ultoa_invert>:
    19ae:	fa 01       	movw	r30, r20
    19b0:	aa 27       	eor	r26, r26
    19b2:	28 30       	cpi	r18, 0x08	; 8
    19b4:	51 f1       	breq	.+84     	; 0x1a0a <__ultoa_invert+0x5c>
    19b6:	20 31       	cpi	r18, 0x10	; 16
    19b8:	81 f1       	breq	.+96     	; 0x1a1a <__ultoa_invert+0x6c>
    19ba:	e8 94       	clt
    19bc:	6f 93       	push	r22
    19be:	6e 7f       	andi	r22, 0xFE	; 254
    19c0:	6e 5f       	subi	r22, 0xFE	; 254
    19c2:	7f 4f       	sbci	r23, 0xFF	; 255
    19c4:	8f 4f       	sbci	r24, 0xFF	; 255
    19c6:	9f 4f       	sbci	r25, 0xFF	; 255
    19c8:	af 4f       	sbci	r26, 0xFF	; 255
    19ca:	b1 e0       	ldi	r27, 0x01	; 1
    19cc:	3e d0       	rcall	.+124    	; 0x1a4a <__ultoa_invert+0x9c>
    19ce:	b4 e0       	ldi	r27, 0x04	; 4
    19d0:	3c d0       	rcall	.+120    	; 0x1a4a <__ultoa_invert+0x9c>
    19d2:	67 0f       	add	r22, r23
    19d4:	78 1f       	adc	r23, r24
    19d6:	89 1f       	adc	r24, r25
    19d8:	9a 1f       	adc	r25, r26
    19da:	a1 1d       	adc	r26, r1
    19dc:	68 0f       	add	r22, r24
    19de:	79 1f       	adc	r23, r25
    19e0:	8a 1f       	adc	r24, r26
    19e2:	91 1d       	adc	r25, r1
    19e4:	a1 1d       	adc	r26, r1
    19e6:	6a 0f       	add	r22, r26
    19e8:	71 1d       	adc	r23, r1
    19ea:	81 1d       	adc	r24, r1
    19ec:	91 1d       	adc	r25, r1
    19ee:	a1 1d       	adc	r26, r1
    19f0:	20 d0       	rcall	.+64     	; 0x1a32 <__ultoa_invert+0x84>
    19f2:	09 f4       	brne	.+2      	; 0x19f6 <__ultoa_invert+0x48>
    19f4:	68 94       	set
    19f6:	3f 91       	pop	r19
    19f8:	2a e0       	ldi	r18, 0x0A	; 10
    19fa:	26 9f       	mul	r18, r22
    19fc:	11 24       	eor	r1, r1
    19fe:	30 19       	sub	r19, r0
    1a00:	30 5d       	subi	r19, 0xD0	; 208
    1a02:	31 93       	st	Z+, r19
    1a04:	de f6       	brtc	.-74     	; 0x19bc <__ultoa_invert+0xe>
    1a06:	cf 01       	movw	r24, r30
    1a08:	08 95       	ret
    1a0a:	46 2f       	mov	r20, r22
    1a0c:	47 70       	andi	r20, 0x07	; 7
    1a0e:	40 5d       	subi	r20, 0xD0	; 208
    1a10:	41 93       	st	Z+, r20
    1a12:	b3 e0       	ldi	r27, 0x03	; 3
    1a14:	0f d0       	rcall	.+30     	; 0x1a34 <__ultoa_invert+0x86>
    1a16:	c9 f7       	brne	.-14     	; 0x1a0a <__ultoa_invert+0x5c>
    1a18:	f6 cf       	rjmp	.-20     	; 0x1a06 <__ultoa_invert+0x58>
    1a1a:	46 2f       	mov	r20, r22
    1a1c:	4f 70       	andi	r20, 0x0F	; 15
    1a1e:	40 5d       	subi	r20, 0xD0	; 208
    1a20:	4a 33       	cpi	r20, 0x3A	; 58
    1a22:	18 f0       	brcs	.+6      	; 0x1a2a <__ultoa_invert+0x7c>
    1a24:	49 5d       	subi	r20, 0xD9	; 217
    1a26:	31 fd       	sbrc	r19, 1
    1a28:	40 52       	subi	r20, 0x20	; 32
    1a2a:	41 93       	st	Z+, r20
    1a2c:	02 d0       	rcall	.+4      	; 0x1a32 <__ultoa_invert+0x84>
    1a2e:	a9 f7       	brne	.-22     	; 0x1a1a <__ultoa_invert+0x6c>
    1a30:	ea cf       	rjmp	.-44     	; 0x1a06 <__ultoa_invert+0x58>
    1a32:	b4 e0       	ldi	r27, 0x04	; 4
    1a34:	a6 95       	lsr	r26
    1a36:	97 95       	ror	r25
    1a38:	87 95       	ror	r24
    1a3a:	77 95       	ror	r23
    1a3c:	67 95       	ror	r22
    1a3e:	ba 95       	dec	r27
    1a40:	c9 f7       	brne	.-14     	; 0x1a34 <__ultoa_invert+0x86>
    1a42:	00 97       	sbiw	r24, 0x00	; 0
    1a44:	61 05       	cpc	r22, r1
    1a46:	71 05       	cpc	r23, r1
    1a48:	08 95       	ret
    1a4a:	9b 01       	movw	r18, r22
    1a4c:	ac 01       	movw	r20, r24
    1a4e:	0a 2e       	mov	r0, r26
    1a50:	06 94       	lsr	r0
    1a52:	57 95       	ror	r21
    1a54:	47 95       	ror	r20
    1a56:	37 95       	ror	r19
    1a58:	27 95       	ror	r18
    1a5a:	ba 95       	dec	r27
    1a5c:	c9 f7       	brne	.-14     	; 0x1a50 <__ultoa_invert+0xa2>
    1a5e:	62 0f       	add	r22, r18
    1a60:	73 1f       	adc	r23, r19
    1a62:	84 1f       	adc	r24, r20
    1a64:	95 1f       	adc	r25, r21
    1a66:	a0 1d       	adc	r26, r0
    1a68:	08 95       	ret

00001a6a <_exit>:
    1a6a:	f8 94       	cli

00001a6c <__stop_program>:
    1a6c:	ff cf       	rjmp	.-2      	; 0x1a6c <__stop_program>
