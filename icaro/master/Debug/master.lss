
master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000011a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001130  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b7  00800100  00800100  000011a4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000011a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001200  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00001240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001135  00000000  00000000  00001370  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a54  00000000  00000000  000024a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ae8  00000000  00000000  00002ef9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002bc  00000000  00000000  000039e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006bb  00000000  00000000  00003ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000917  00000000  00000000  0000435b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00004c72  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__ctors_end>
       4:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
       8:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
       c:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      10:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      14:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      18:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      1c:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      20:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      24:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      28:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      2c:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__vector_11>
      30:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      34:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      38:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      3c:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      40:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      44:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      48:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__vector_18>
      4c:	0c 94 1f 03 	jmp	0x63e	; 0x63e <__vector_19>
      50:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      54:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      58:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      5c:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      60:	0c 94 d3 01 	jmp	0x3a6	; 0x3a6 <__vector_24>
      64:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      68:	df 02       	muls	r29, r31
      6a:	e3 02       	muls	r30, r19
      6c:	e3 02       	muls	r30, r19
      6e:	e3 02       	muls	r30, r19
      70:	e3 02       	muls	r30, r19
      72:	e3 02       	muls	r30, r19
      74:	e3 02       	muls	r30, r19
      76:	e3 02       	muls	r30, r19
      78:	f3 01       	movw	r30, r6
      7a:	e3 02       	muls	r30, r19
      7c:	e3 02       	muls	r30, r19
      7e:	e3 02       	muls	r30, r19
      80:	e3 02       	muls	r30, r19
      82:	e3 02       	muls	r30, r19
      84:	e3 02       	muls	r30, r19
      86:	e3 02       	muls	r30, r19
      88:	f3 01       	movw	r30, r6
      8a:	e3 02       	muls	r30, r19
      8c:	e3 02       	muls	r30, r19
      8e:	e3 02       	muls	r30, r19
      90:	e3 02       	muls	r30, r19
      92:	e3 02       	muls	r30, r19
      94:	e3 02       	muls	r30, r19
      96:	e3 02       	muls	r30, r19
      98:	fb 01       	movw	r30, r22
      9a:	e3 02       	muls	r30, r19
      9c:	e3 02       	muls	r30, r19
      9e:	e3 02       	muls	r30, r19
      a0:	e3 02       	muls	r30, r19
      a2:	e3 02       	muls	r30, r19
      a4:	e3 02       	muls	r30, r19
      a6:	e3 02       	muls	r30, r19
      a8:	21 02       	muls	r18, r17
      aa:	e3 02       	muls	r30, r19
      ac:	e3 02       	muls	r30, r19
      ae:	e3 02       	muls	r30, r19
      b0:	e3 02       	muls	r30, r19
      b2:	e3 02       	muls	r30, r19
      b4:	e3 02       	muls	r30, r19
      b6:	e3 02       	muls	r30, r19
      b8:	fb 01       	movw	r30, r22
      ba:	e3 02       	muls	r30, r19
      bc:	e3 02       	muls	r30, r19
      be:	e3 02       	muls	r30, r19
      c0:	e3 02       	muls	r30, r19
      c2:	e3 02       	muls	r30, r19
      c4:	e3 02       	muls	r30, r19
      c6:	e3 02       	muls	r30, r19
      c8:	27 02       	muls	r18, r23
      ca:	e3 02       	muls	r30, r19
      cc:	e3 02       	muls	r30, r19
      ce:	e3 02       	muls	r30, r19
      d0:	e3 02       	muls	r30, r19
      d2:	e3 02       	muls	r30, r19
      d4:	e3 02       	muls	r30, r19
      d6:	e3 02       	muls	r30, r19
      d8:	2d 02       	muls	r18, r29
      da:	e3 02       	muls	r30, r19
      dc:	e3 02       	muls	r30, r19
      de:	e3 02       	muls	r30, r19
      e0:	e3 02       	muls	r30, r19
      e2:	e3 02       	muls	r30, r19
      e4:	e3 02       	muls	r30, r19
      e6:	e3 02       	muls	r30, r19
      e8:	3f 02       	muls	r19, r31
      ea:	e3 02       	muls	r30, r19
      ec:	e3 02       	muls	r30, r19
      ee:	e3 02       	muls	r30, r19
      f0:	e3 02       	muls	r30, r19
      f2:	e3 02       	muls	r30, r19
      f4:	e3 02       	muls	r30, r19
      f6:	e3 02       	muls	r30, r19
      f8:	69 02       	muls	r22, r25
      fa:	e3 02       	muls	r30, r19
      fc:	e3 02       	muls	r30, r19
      fe:	e3 02       	muls	r30, r19
     100:	e3 02       	muls	r30, r19
     102:	e3 02       	muls	r30, r19
     104:	e3 02       	muls	r30, r19
     106:	e3 02       	muls	r30, r19
     108:	33 02       	muls	r19, r19
     10a:	e3 02       	muls	r30, r19
     10c:	e3 02       	muls	r30, r19
     10e:	e3 02       	muls	r30, r19
     110:	e3 02       	muls	r30, r19
     112:	e3 02       	muls	r30, r19
     114:	e3 02       	muls	r30, r19
     116:	e3 02       	muls	r30, r19
     118:	4d 02       	muls	r20, r29
     11a:	e3 02       	muls	r30, r19
     11c:	e3 02       	muls	r30, r19
     11e:	e3 02       	muls	r30, r19
     120:	e3 02       	muls	r30, r19
     122:	e3 02       	muls	r30, r19
     124:	e3 02       	muls	r30, r19
     126:	e3 02       	muls	r30, r19
     128:	6c 02       	muls	r22, r28
     12a:	e3 02       	muls	r30, r19
     12c:	e3 02       	muls	r30, r19
     12e:	e3 02       	muls	r30, r19
     130:	e3 02       	muls	r30, r19
     132:	e3 02       	muls	r30, r19
     134:	e3 02       	muls	r30, r19
     136:	e3 02       	muls	r30, r19
     138:	6c 02       	muls	r22, r28
     13a:	e3 02       	muls	r30, r19
     13c:	e3 02       	muls	r30, r19
     13e:	e3 02       	muls	r30, r19
     140:	e3 02       	muls	r30, r19
     142:	e3 02       	muls	r30, r19
     144:	e3 02       	muls	r30, r19
     146:	e3 02       	muls	r30, r19
     148:	6c 02       	muls	r22, r28
     14a:	e3 02       	muls	r30, r19
     14c:	e3 02       	muls	r30, r19
     14e:	e3 02       	muls	r30, r19
     150:	e3 02       	muls	r30, r19
     152:	e3 02       	muls	r30, r19
     154:	e3 02       	muls	r30, r19
     156:	e3 02       	muls	r30, r19
     158:	6c 02       	muls	r22, r28
     15a:	e3 02       	muls	r30, r19
     15c:	e3 02       	muls	r30, r19
     15e:	e3 02       	muls	r30, r19
     160:	e3 02       	muls	r30, r19
     162:	e3 02       	muls	r30, r19
     164:	e3 02       	muls	r30, r19
     166:	e3 02       	muls	r30, r19
     168:	75 02       	muls	r23, r21
     16a:	e3 02       	muls	r30, r19
     16c:	e3 02       	muls	r30, r19
     16e:	e3 02       	muls	r30, r19
     170:	e3 02       	muls	r30, r19
     172:	e3 02       	muls	r30, r19
     174:	e3 02       	muls	r30, r19
     176:	e3 02       	muls	r30, r19
     178:	a6 02       	muls	r26, r22
     17a:	e3 02       	muls	r30, r19
     17c:	e3 02       	muls	r30, r19
     17e:	e3 02       	muls	r30, r19
     180:	e3 02       	muls	r30, r19
     182:	e3 02       	muls	r30, r19
     184:	e3 02       	muls	r30, r19
     186:	e3 02       	muls	r30, r19
     188:	75 02       	muls	r23, r21
     18a:	e3 02       	muls	r30, r19
     18c:	e3 02       	muls	r30, r19
     18e:	e3 02       	muls	r30, r19
     190:	e3 02       	muls	r30, r19
     192:	e3 02       	muls	r30, r19
     194:	e3 02       	muls	r30, r19
     196:	e3 02       	muls	r30, r19
     198:	a6 02       	muls	r26, r22
     19a:	e3 02       	muls	r30, r19
     19c:	e3 02       	muls	r30, r19
     19e:	e3 02       	muls	r30, r19
     1a0:	e3 02       	muls	r30, r19
     1a2:	e3 02       	muls	r30, r19
     1a4:	e3 02       	muls	r30, r19
     1a6:	e3 02       	muls	r30, r19
     1a8:	8d 02       	muls	r24, r29
     1aa:	e3 02       	muls	r30, r19
     1ac:	e3 02       	muls	r30, r19
     1ae:	e3 02       	muls	r30, r19
     1b0:	e3 02       	muls	r30, r19
     1b2:	e3 02       	muls	r30, r19
     1b4:	e3 02       	muls	r30, r19
     1b6:	e3 02       	muls	r30, r19
     1b8:	aa 02       	muls	r26, r26
     1ba:	e3 02       	muls	r30, r19
     1bc:	e3 02       	muls	r30, r19
     1be:	e3 02       	muls	r30, r19
     1c0:	e3 02       	muls	r30, r19
     1c2:	e3 02       	muls	r30, r19
     1c4:	e3 02       	muls	r30, r19
     1c6:	e3 02       	muls	r30, r19
     1c8:	aa 02       	muls	r26, r26
     1ca:	e3 02       	muls	r30, r19
     1cc:	e3 02       	muls	r30, r19
     1ce:	e3 02       	muls	r30, r19
     1d0:	e3 02       	muls	r30, r19
     1d2:	e3 02       	muls	r30, r19
     1d4:	e3 02       	muls	r30, r19
     1d6:	e3 02       	muls	r30, r19
     1d8:	bf 02       	muls	r27, r31
     1da:	e3 02       	muls	r30, r19
     1dc:	e3 02       	muls	r30, r19
     1de:	e3 02       	muls	r30, r19
     1e0:	e3 02       	muls	r30, r19
     1e2:	e3 02       	muls	r30, r19
     1e4:	e3 02       	muls	r30, r19
     1e6:	e3 02       	muls	r30, r19
     1e8:	d9 02       	muls	r29, r25
     1ea:	e3 02       	muls	r30, r19
     1ec:	e3 02       	muls	r30, r19
     1ee:	e3 02       	muls	r30, r19
     1f0:	e3 02       	muls	r30, r19
     1f2:	e3 02       	muls	r30, r19
     1f4:	e3 02       	muls	r30, r19
     1f6:	e3 02       	muls	r30, r19
     1f8:	d9 02       	muls	r29, r25

000001fa <__trampolines_end>:
     1fa:	6e 61       	ori	r22, 0x1E	; 30
     1fc:	6e 00       	.word	0x006e	; ????

000001fe <__c.2332>:
     1fe:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     20e:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     21e:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     22e:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     23e:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     24e:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     25e:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     26e:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     27e:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     28e:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     29e:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     2ae:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     2be:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2ce:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2de:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     2ee:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000002fc <__ctors_end>:
     2fc:	11 24       	eor	r1, r1
     2fe:	1f be       	out	0x3f, r1	; 63
     300:	cf ef       	ldi	r28, 0xFF	; 255
     302:	d8 e0       	ldi	r29, 0x08	; 8
     304:	de bf       	out	0x3e, r29	; 62
     306:	cd bf       	out	0x3d, r28	; 61

00000308 <__do_copy_data>:
     308:	11 e0       	ldi	r17, 0x01	; 1
     30a:	a0 e0       	ldi	r26, 0x00	; 0
     30c:	b1 e0       	ldi	r27, 0x01	; 1
     30e:	e0 e3       	ldi	r30, 0x30	; 48
     310:	f1 e1       	ldi	r31, 0x11	; 17
     312:	02 c0       	rjmp	.+4      	; 0x318 <__do_copy_data+0x10>
     314:	05 90       	lpm	r0, Z+
     316:	0d 92       	st	X+, r0
     318:	a0 30       	cpi	r26, 0x00	; 0
     31a:	b1 07       	cpc	r27, r17
     31c:	d9 f7       	brne	.-10     	; 0x314 <__do_copy_data+0xc>

0000031e <__do_clear_bss>:
     31e:	21 e0       	ldi	r18, 0x01	; 1
     320:	a0 e0       	ldi	r26, 0x00	; 0
     322:	b1 e0       	ldi	r27, 0x01	; 1
     324:	01 c0       	rjmp	.+2      	; 0x328 <.do_clear_bss_start>

00000326 <.do_clear_bss_loop>:
     326:	1d 92       	st	X+, r1

00000328 <.do_clear_bss_start>:
     328:	a7 3b       	cpi	r26, 0xB7	; 183
     32a:	b2 07       	cpc	r27, r18
     32c:	e1 f7       	brne	.-8      	; 0x326 <.do_clear_bss_loop>
     32e:	0e 94 4b 03 	call	0x696	; 0x696 <main>
     332:	0c 94 96 08 	jmp	0x112c	; 0x112c <_exit>

00000336 <__bad_interrupt>:
     336:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000033a <__vector_11>:

volatile unsigned long timer1_millis;
//NOTE: A unsigned long holds values from 0 to 4,294,967,295 (2^32 - 1). It will roll over to 0 after reaching its maximum value.

ISR(TIMER1_COMPA_vect)
{
     33a:	1f 92       	push	r1
     33c:	0f 92       	push	r0
     33e:	0f b6       	in	r0, 0x3f	; 63
     340:	0f 92       	push	r0
     342:	11 24       	eor	r1, r1
     344:	8f 93       	push	r24
     346:	9f 93       	push	r25
     348:	af 93       	push	r26
     34a:	bf 93       	push	r27
	timer1_millis++;
     34c:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <timer1_millis>
     350:	90 91 b4 01 	lds	r25, 0x01B4	; 0x8001b4 <timer1_millis+0x1>
     354:	a0 91 b5 01 	lds	r26, 0x01B5	; 0x8001b5 <timer1_millis+0x2>
     358:	b0 91 b6 01 	lds	r27, 0x01B6	; 0x8001b6 <timer1_millis+0x3>
     35c:	01 96       	adiw	r24, 0x01	; 1
     35e:	a1 1d       	adc	r26, r1
     360:	b1 1d       	adc	r27, r1
     362:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <timer1_millis>
     366:	90 93 b4 01 	sts	0x01B4, r25	; 0x8001b4 <timer1_millis+0x1>
     36a:	a0 93 b5 01 	sts	0x01B5, r26	; 0x8001b5 <timer1_millis+0x2>
     36e:	b0 93 b6 01 	sts	0x01B6, r27	; 0x8001b6 <timer1_millis+0x3>
}
     372:	bf 91       	pop	r27
     374:	af 91       	pop	r26
     376:	9f 91       	pop	r25
     378:	8f 91       	pop	r24
     37a:	0f 90       	pop	r0
     37c:	0f be       	out	0x3f, r0	; 63
     37e:	0f 90       	pop	r0
     380:	1f 90       	pop	r1
     382:	18 95       	reti

00000384 <twi_stop>:
}

void twi_reply(uint8_t ack)
{
    if (ack) { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA); }
    else { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT); }
     384:	85 ed       	ldi	r24, 0xD5	; 213
     386:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     38a:	ec eb       	ldi	r30, 0xBC	; 188
     38c:	f0 e0       	ldi	r31, 0x00	; 0
     38e:	80 81       	ld	r24, Z
     390:	84 fd       	sbrc	r24, 4
     392:	fd cf       	rjmp	.-6      	; 0x38e <twi_stop+0xa>
     394:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <twi_state>
     398:	08 95       	ret

0000039a <twi_release_bus>:
}

void twi_release_bus(void)
{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
     39a:	85 ec       	ldi	r24, 0xC5	; 197
     39c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    twi_state = TWI_READY;
     3a0:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <twi_state>
     3a4:	08 95       	ret

000003a6 <__vector_24>:
}

ISR(TWI_vect)
{
     3a6:	1f 92       	push	r1
     3a8:	0f 92       	push	r0
     3aa:	0f b6       	in	r0, 0x3f	; 63
     3ac:	0f 92       	push	r0
     3ae:	11 24       	eor	r1, r1
     3b0:	2f 93       	push	r18
     3b2:	3f 93       	push	r19
     3b4:	4f 93       	push	r20
     3b6:	5f 93       	push	r21
     3b8:	6f 93       	push	r22
     3ba:	7f 93       	push	r23
     3bc:	8f 93       	push	r24
     3be:	9f 93       	push	r25
     3c0:	af 93       	push	r26
     3c2:	bf 93       	push	r27
     3c4:	ef 93       	push	r30
     3c6:	ff 93       	push	r31
    switch(TW_STATUS)
     3c8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     3cc:	e8 2f       	mov	r30, r24
     3ce:	e8 7f       	andi	r30, 0xF8	; 248
     3d0:	8e 2f       	mov	r24, r30
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	89 3c       	cpi	r24, 0xC9	; 201
     3d6:	91 05       	cpc	r25, r1
     3d8:	08 f0       	brcs	.+2      	; 0x3dc <__vector_24+0x36>
     3da:	f5 c0       	rjmp	.+490    	; 0x5c6 <__EEPROM_REGION_LENGTH__+0x1c6>
     3dc:	fc 01       	movw	r30, r24
     3de:	ec 5c       	subi	r30, 0xCC	; 204
     3e0:	ff 4f       	sbci	r31, 0xFF	; 255
     3e2:	0c 94 d1 06 	jmp	0xda2	; 0xda2 <__tablejump2__>
    {
        // MASTER
        case TW_START: // start condition transmitted
        case TW_REP_START: // repeated start condition transmitted
        {
            TWDR = twi_slarw;
     3e6:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <twi_slarw>
     3ea:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    twi_state = TWI_READY;
}

void twi_reply(uint8_t ack)
{
    if (ack) { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA); }
     3ee:	85 ec       	ldi	r24, 0xC5	; 197
     3f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     3f4:	e8 c0       	rjmp	.+464    	; 0x5c6 <__EEPROM_REGION_LENGTH__+0x1c6>
        
        // MASTER TRANSMITTER
        case TW_MT_SLA_ACK: // SLA+W transmitted, ACK received
        case TW_MT_DATA_ACK: // data transmitted, ACK received
        {
            if (twi_master_buffer_index < twi_master_buffer_length)
     3f6:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <twi_master_buffer_index>
     3fa:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <twi_master_buffer_length>
     3fe:	98 17       	cp	r25, r24
     400:	80 f4       	brcc	.+32     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
            {
                TWDR = twi_master_buffer[twi_master_buffer_index++];
     402:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <twi_master_buffer_index>
     406:	81 e0       	ldi	r24, 0x01	; 1
     408:	8e 0f       	add	r24, r30
     40a:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <twi_master_buffer_index>
     40e:	f0 e0       	ldi	r31, 0x00	; 0
     410:	eb 5b       	subi	r30, 0xBB	; 187
     412:	fe 4f       	sbci	r31, 0xFE	; 254
     414:	80 81       	ld	r24, Z
     416:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    twi_state = TWI_READY;
}

void twi_reply(uint8_t ack)
{
    if (ack) { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA); }
     41a:	85 ec       	ldi	r24, 0xC5	; 197
     41c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     420:	d2 c0       	rjmp	.+420    	; 0x5c6 <__EEPROM_REGION_LENGTH__+0x1c6>
                TWDR = twi_master_buffer[twi_master_buffer_index++];
                twi_reply(1);
            }
            else
            {
                if (twi_send_stop) { twi_stop(); }
     422:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <twi_send_stop>
     426:	88 23       	and	r24, r24
     428:	19 f0       	breq	.+6      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
     42a:	0e 94 c2 01 	call	0x384	; 0x384 <twi_stop>
     42e:	cb c0       	rjmp	.+406    	; 0x5c6 <__EEPROM_REGION_LENGTH__+0x1c6>
                else
                {
                    twi_in_rep_start = 1;
     430:	81 e0       	ldi	r24, 0x01	; 1
     432:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <twi_in_rep_start>
                    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
     436:	84 ea       	ldi	r24, 0xA4	; 164
     438:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
                    twi_state = TWI_READY;
     43c:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <twi_state>
     440:	c2 c0       	rjmp	.+388    	; 0x5c6 <__EEPROM_REGION_LENGTH__+0x1c6>
            }
        }
        break;
        case TW_MT_SLA_NACK:  // SLA+W transmitted, NACK received
        {
            twi_error = TW_MT_SLA_NACK;
     442:	80 e2       	ldi	r24, 0x20	; 32
     444:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <twi_error>
            twi_stop();
     448:	0e 94 c2 01 	call	0x384	; 0x384 <twi_stop>
        }
        break;
     44c:	bc c0       	rjmp	.+376    	; 0x5c6 <__EEPROM_REGION_LENGTH__+0x1c6>
        case TW_MT_DATA_NACK: // data transmitted, NACK received
        {
            twi_error = TW_MT_DATA_NACK;
     44e:	80 e3       	ldi	r24, 0x30	; 48
     450:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <twi_error>
            twi_stop();
     454:	0e 94 c2 01 	call	0x384	; 0x384 <twi_stop>
        }
        break;
     458:	b6 c0       	rjmp	.+364    	; 0x5c6 <__EEPROM_REGION_LENGTH__+0x1c6>
        case TW_MT_ARB_LOST: // arbitration lost in SLA+W or data
        {
            twi_error = TW_MT_ARB_LOST;
     45a:	88 e3       	ldi	r24, 0x38	; 56
     45c:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <twi_error>
            twi_release_bus();
     460:	0e 94 cd 01 	call	0x39a	; 0x39a <twi_release_bus>
        }
        break;
     464:	b0 c0       	rjmp	.+352    	; 0x5c6 <__EEPROM_REGION_LENGTH__+0x1c6>
        
        // MASTER RECEIVER
        case TW_MR_DATA_ACK: // data received, ACK returned
        twi_master_buffer[twi_master_buffer_index++] = TWDR;
     466:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <twi_master_buffer_index>
     46a:	81 e0       	ldi	r24, 0x01	; 1
     46c:	8e 0f       	add	r24, r30
     46e:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <twi_master_buffer_index>
     472:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     476:	f0 e0       	ldi	r31, 0x00	; 0
     478:	eb 5b       	subi	r30, 0xBB	; 187
     47a:	fe 4f       	sbci	r31, 0xFE	; 254
     47c:	80 83       	st	Z, r24
        /* fall through */
        case TW_MR_SLA_ACK:  // SLA+R transmitted, ACK received
        {
            if (twi_master_buffer_index < twi_master_buffer_length) { twi_reply(1); }
     47e:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <twi_master_buffer_index>
     482:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <twi_master_buffer_length>
     486:	98 17       	cp	r25, r24
     488:	20 f4       	brcc	.+8      	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
    twi_state = TWI_READY;
}

void twi_reply(uint8_t ack)
{
    if (ack) { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA); }
     48a:	85 ec       	ldi	r24, 0xC5	; 197
     48c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     490:	9a c0       	rjmp	.+308    	; 0x5c6 <__EEPROM_REGION_LENGTH__+0x1c6>
    else { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT); }
     492:	85 e8       	ldi	r24, 0x85	; 133
     494:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     498:	96 c0       	rjmp	.+300    	; 0x5c6 <__EEPROM_REGION_LENGTH__+0x1c6>
            else { twi_reply(0); }
        }
        break;
        case TW_MR_DATA_NACK: // data received, NACK returned
        {
            twi_master_buffer[twi_master_buffer_index++] = TWDR;
     49a:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <twi_master_buffer_index>
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	8e 0f       	add	r24, r30
     4a2:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <twi_master_buffer_index>
     4a6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     4aa:	f0 e0       	ldi	r31, 0x00	; 0
     4ac:	eb 5b       	subi	r30, 0xBB	; 187
     4ae:	fe 4f       	sbci	r31, 0xFE	; 254
     4b0:	80 83       	st	Z, r24
            if (twi_send_stop) { twi_stop(); }
     4b2:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <twi_send_stop>
     4b6:	88 23       	and	r24, r24
     4b8:	19 f0       	breq	.+6      	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
     4ba:	0e 94 c2 01 	call	0x384	; 0x384 <twi_stop>
     4be:	83 c0       	rjmp	.+262    	; 0x5c6 <__EEPROM_REGION_LENGTH__+0x1c6>
            else {
                twi_in_rep_start = 1;
     4c0:	81 e0       	ldi	r24, 0x01	; 1
     4c2:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <twi_in_rep_start>
                TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
     4c6:	84 ea       	ldi	r24, 0xA4	; 164
     4c8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
                twi_state = TWI_READY;
     4cc:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <twi_state>
     4d0:	7a c0       	rjmp	.+244    	; 0x5c6 <__EEPROM_REGION_LENGTH__+0x1c6>
            }
        }
        break;
        case TW_MR_SLA_NACK: // SLA+R transmitted, NACK received
        {
            twi_stop();
     4d2:	0e 94 c2 01 	call	0x384	; 0x384 <twi_stop>
        }
        break;
     4d6:	77 c0       	rjmp	.+238    	; 0x5c6 <__EEPROM_REGION_LENGTH__+0x1c6>
        case TW_SR_SLA_ACK: // SLA+W received, ACK returned
        case TW_SR_GCALL_ACK: // general call received, ACK returned
        case TW_SR_ARB_LOST_SLA_ACK:   // arbitration lost in SLA+RW, SLA+W received, ACK returned
        case TW_SR_ARB_LOST_GCALL_ACK: // arbitration lost in SLA+RW, general call received, ACK returned
        {
            twi_state = TWI_SRX;
     4d8:	83 e0       	ldi	r24, 0x03	; 3
     4da:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <twi_state>
            twi_rx_buffer_index = 0;
     4de:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
    twi_state = TWI_READY;
}

void twi_reply(uint8_t ack)
{
    if (ack) { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA); }
     4e2:	85 ec       	ldi	r24, 0xC5	; 197
     4e4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     4e8:	6e c0       	rjmp	.+220    	; 0x5c6 <__EEPROM_REGION_LENGTH__+0x1c6>
        }
        break;
        case TW_SR_DATA_ACK: // data received, ACK returned
        case TW_SR_GCALL_DATA_ACK: // general call data received, ACK returned
        {
            if (twi_rx_buffer_index < TWI_BUFFER_LENGTH) {
     4ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     4ee:	80 32       	cpi	r24, 0x20	; 32
     4f0:	80 f4       	brcc	.+32     	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
                
                twi_rx_buffer[twi_rx_buffer_index++] = TWDR;
     4f2:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	8e 0f       	add	r24, r30
     4fa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     4fe:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     502:	f0 e0       	ldi	r31, 0x00	; 0
     504:	ef 5f       	subi	r30, 0xFF	; 255
     506:	fe 4f       	sbci	r31, 0xFE	; 254
     508:	80 83       	st	Z, r24
    twi_state = TWI_READY;
}

void twi_reply(uint8_t ack)
{
    if (ack) { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA); }
     50a:	85 ec       	ldi	r24, 0xC5	; 197
     50c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     510:	5a c0       	rjmp	.+180    	; 0x5c6 <__EEPROM_REGION_LENGTH__+0x1c6>
    else { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT); }
     512:	85 e8       	ldi	r24, 0x85	; 133
     514:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     518:	56 c0       	rjmp	.+172    	; 0x5c6 <__EEPROM_REGION_LENGTH__+0x1c6>
            
        }
        break;
        case TW_SR_STOP: // stop or repeated start condition received while selected
        {
            twi_release_bus();
     51a:	0e 94 cd 01 	call	0x39a	; 0x39a <twi_release_bus>
            if(twi_rx_buffer_index < TWI_BUFFER_LENGTH) { twi_rx_buffer[twi_rx_buffer_index] = '\0'; }
     51e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     522:	80 32       	cpi	r24, 0x20	; 32
     524:	30 f4       	brcc	.+12     	; 0x532 <__EEPROM_REGION_LENGTH__+0x132>
     526:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     52a:	f0 e0       	ldi	r31, 0x00	; 0
     52c:	ef 5f       	subi	r30, 0xFF	; 255
     52e:	fe 4f       	sbci	r31, 0xFE	; 254
     530:	10 82       	st	Z, r1
            twi_on_slave_receive(twi_rx_buffer, twi_rx_buffer_index);
     532:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     536:	70 e0       	ldi	r23, 0x00	; 0
     538:	e0 91 65 01 	lds	r30, 0x0165	; 0x800165 <twi_on_slave_receive>
     53c:	f0 91 66 01 	lds	r31, 0x0166	; 0x800166 <twi_on_slave_receive+0x1>
     540:	81 e0       	ldi	r24, 0x01	; 1
     542:	91 e0       	ldi	r25, 0x01	; 1
     544:	09 95       	icall
            twi_rx_buffer_index = 0;
     546:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
        }
        break;
     54a:	3d c0       	rjmp	.+122    	; 0x5c6 <__EEPROM_REGION_LENGTH__+0x1c6>
}

void twi_reply(uint8_t ack)
{
    if (ack) { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA); }
    else { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT); }
     54c:	85 e8       	ldi	r24, 0x85	; 133
     54e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     552:	39 c0       	rjmp	.+114    	; 0x5c6 <__EEPROM_REGION_LENGTH__+0x1c6>
        // SLAVE TRANSMITTER
        case TW_ST_SLA_ACK: // SLA+R received, ACK returned
        case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost in SLA+RW, SLA+R received, ACK returned
        {
            
            twi_state = TWI_STX;
     554:	84 e0       	ldi	r24, 0x04	; 4
     556:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <twi_state>
            twi_tx_buffer_index = 0;
     55a:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <twi_tx_buffer_index>
            twi_tx_buffer_length = 0;
     55e:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <twi_tx_buffer_length>
            twi_on_slave_transmit();
     562:	e0 91 67 01 	lds	r30, 0x0167	; 0x800167 <twi_on_slave_transmit>
     566:	f0 91 68 01 	lds	r31, 0x0168	; 0x800168 <twi_on_slave_transmit+0x1>
     56a:	09 95       	icall
            if (0 == twi_tx_buffer_length) {
     56c:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <twi_tx_buffer_length>
     570:	81 11       	cpse	r24, r1
     572:	05 c0       	rjmp	.+10     	; 0x57e <__EEPROM_REGION_LENGTH__+0x17e>
                twi_tx_buffer_length = 1;
     574:	81 e0       	ldi	r24, 0x01	; 1
     576:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <twi_tx_buffer_length>
                twi_tx_buffer[0] = 0x00;
     57a:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <twi_tx_buffer>
            }
        }
        /* fall through */
        case TW_ST_DATA_ACK: // data transmitted, ACK received
        {
            TWDR = twi_tx_buffer[twi_tx_buffer_index++];
     57e:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <twi_tx_buffer_index>
     582:	81 e0       	ldi	r24, 0x01	; 1
     584:	8e 0f       	add	r24, r30
     586:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <twi_tx_buffer_index>
     58a:	f0 e0       	ldi	r31, 0x00	; 0
     58c:	ed 5d       	subi	r30, 0xDD	; 221
     58e:	fe 4f       	sbci	r31, 0xFE	; 254
     590:	80 81       	ld	r24, Z
     592:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
            if (twi_tx_buffer_index < twi_tx_buffer_length) { twi_reply(1); }
     596:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <twi_tx_buffer_index>
     59a:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <twi_tx_buffer_length>
     59e:	98 17       	cp	r25, r24
     5a0:	20 f4       	brcc	.+8      	; 0x5aa <__EEPROM_REGION_LENGTH__+0x1aa>
    twi_state = TWI_READY;
}

void twi_reply(uint8_t ack)
{
    if (ack) { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA); }
     5a2:	85 ec       	ldi	r24, 0xC5	; 197
     5a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     5a8:	0e c0       	rjmp	.+28     	; 0x5c6 <__EEPROM_REGION_LENGTH__+0x1c6>
    else { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT); }
     5aa:	85 e8       	ldi	r24, 0x85	; 133
     5ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     5b0:	0a c0       	rjmp	.+20     	; 0x5c6 <__EEPROM_REGION_LENGTH__+0x1c6>
    twi_state = TWI_READY;
}

void twi_reply(uint8_t ack)
{
    if (ack) { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA); }
     5b2:	85 ec       	ldi	r24, 0xC5	; 197
     5b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
        break;
        case TW_ST_DATA_NACK: // data transmitted, NACK received
        case TW_ST_LAST_DATA: // last data byte transmitted, ACK received
        {
            twi_reply(1);
            twi_state = TWI_READY;
     5b8:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <twi_state>
        }
        break;
     5bc:	04 c0       	rjmp	.+8      	; 0x5c6 <__EEPROM_REGION_LENGTH__+0x1c6>
        // MISC
        case TW_NO_INFO:   // no state information available
        break;
        case TW_BUS_ERROR: // illegal start or stop condition
        {
            twi_error = TW_BUS_ERROR;
     5be:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <twi_error>
            twi_stop();
     5c2:	0e 94 c2 01 	call	0x384	; 0x384 <twi_stop>
        }
        break;
    }
     5c6:	ff 91       	pop	r31
     5c8:	ef 91       	pop	r30
     5ca:	bf 91       	pop	r27
     5cc:	af 91       	pop	r26
     5ce:	9f 91       	pop	r25
     5d0:	8f 91       	pop	r24
     5d2:	7f 91       	pop	r23
     5d4:	6f 91       	pop	r22
     5d6:	5f 91       	pop	r21
     5d8:	4f 91       	pop	r20
     5da:	3f 91       	pop	r19
     5dc:	2f 91       	pop	r18
     5de:	0f 90       	pop	r0
     5e0:	0f be       	out	0x3f, r0	; 63
     5e2:	0f 90       	pop	r0
     5e4:	1f 90       	pop	r1
     5e6:	18 95       	reti

000005e8 <__vector_18>:
ISR(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
     5e8:	1f 92       	push	r1
     5ea:	0f 92       	push	r0
     5ec:	0f b6       	in	r0, 0x3f	; 63
     5ee:	0f 92       	push	r0
     5f0:	11 24       	eor	r1, r1
     5f2:	2f 93       	push	r18
     5f4:	8f 93       	push	r24
     5f6:	9f 93       	push	r25
     5f8:	ef 93       	push	r30
     5fa:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
     5fc:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    data = UART0_DATA;
     600:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART0 )
    lastRxError = (usr & (_BV(FE0)|_BV(DOR0)) );
     604:	88 71       	andi	r24, 0x18	; 24
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
     606:	e0 91 70 01 	lds	r30, 0x0170	; 0x800170 <UART_RxHead>
     60a:	ef 5f       	subi	r30, 0xFF	; 255
     60c:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
     60e:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <UART_RxTail>
     612:	e9 17       	cp	r30, r25
     614:	39 f0       	breq	.+14     	; 0x624 <__vector_18+0x3c>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
     616:	e0 93 70 01 	sts	0x0170, r30	; 0x800170 <UART_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
     61a:	f0 e0       	ldi	r31, 0x00	; 0
     61c:	ed 58       	subi	r30, 0x8D	; 141
     61e:	fe 4f       	sbci	r31, 0xFE	; 254
     620:	20 83       	st	Z, r18
     622:	01 c0       	rjmp	.+2      	; 0x626 <__vector_18+0x3e>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
     624:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError = lastRxError;   
     626:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <UART_LastRxError>
}
     62a:	ff 91       	pop	r31
     62c:	ef 91       	pop	r30
     62e:	9f 91       	pop	r25
     630:	8f 91       	pop	r24
     632:	2f 91       	pop	r18
     634:	0f 90       	pop	r0
     636:	0f be       	out	0x3f, r0	; 63
     638:	0f 90       	pop	r0
     63a:	1f 90       	pop	r1
     63c:	18 95       	reti

0000063e <__vector_19>:
ISR(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
     63e:	1f 92       	push	r1
     640:	0f 92       	push	r0
     642:	0f b6       	in	r0, 0x3f	; 63
     644:	0f 92       	push	r0
     646:	11 24       	eor	r1, r1
     648:	8f 93       	push	r24
     64a:	9f 93       	push	r25
     64c:	ef 93       	push	r30
     64e:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
     650:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <UART_TxHead>
     654:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <UART_TxTail>
     658:	98 17       	cp	r25, r24
     65a:	69 f0       	breq	.+26     	; 0x676 <__vector_19+0x38>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
     65c:	e0 91 71 01 	lds	r30, 0x0171	; 0x800171 <UART_TxTail>
     660:	ef 5f       	subi	r30, 0xFF	; 255
     662:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
     664:	e0 93 71 01 	sts	0x0171, r30	; 0x800171 <UART_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
     668:	f0 e0       	ldi	r31, 0x00	; 0
     66a:	ed 56       	subi	r30, 0x6D	; 109
     66c:	fe 4f       	sbci	r31, 0xFE	; 254
     66e:	80 81       	ld	r24, Z
     670:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     674:	05 c0       	rjmp	.+10     	; 0x680 <__vector_19+0x42>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
     676:	e1 ec       	ldi	r30, 0xC1	; 193
     678:	f0 e0       	ldi	r31, 0x00	; 0
     67a:	80 81       	ld	r24, Z
     67c:	8f 7d       	andi	r24, 0xDF	; 223
     67e:	80 83       	st	Z, r24
    }
}
     680:	ff 91       	pop	r31
     682:	ef 91       	pop	r30
     684:	9f 91       	pop	r25
     686:	8f 91       	pop	r24
     688:	0f 90       	pop	r0
     68a:	0f be       	out	0x3f, r0	; 63
     68c:	0f 90       	pop	r0
     68e:	1f 90       	pop	r1
     690:	18 95       	reti

00000692 <pwm_init>:
//     }
// }

void pwm_init()
{
    DDRB |= (1<<DDB1);
     692:	21 9a       	sbi	0x04, 1	; 4
     694:	08 95       	ret

00000696 <main>:



void main(void)
{
    cli();
     696:	f8 94       	cli
    pwm_init(100, 10);
     698:	6a e0       	ldi	r22, 0x0A	; 10
     69a:	70 e0       	ldi	r23, 0x00	; 0
     69c:	84 e6       	ldi	r24, 0x64	; 100
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	0e 94 49 03 	call	0x692	; 0x692 <pwm_init>
    sei();
     6a4:	78 94       	sei
     6a6:	08 95       	ret

000006a8 <vfprintf>:
     6a8:	a0 e1       	ldi	r26, 0x10	; 16
     6aa:	b0 e0       	ldi	r27, 0x00	; 0
     6ac:	ea e5       	ldi	r30, 0x5A	; 90
     6ae:	f3 e0       	ldi	r31, 0x03	; 3
     6b0:	0c 94 d7 06 	jmp	0xdae	; 0xdae <__prologue_saves__>
     6b4:	7c 01       	movw	r14, r24
     6b6:	1b 01       	movw	r2, r22
     6b8:	6a 01       	movw	r12, r20
     6ba:	fc 01       	movw	r30, r24
     6bc:	17 82       	std	Z+7, r1	; 0x07
     6be:	16 82       	std	Z+6, r1	; 0x06
     6c0:	83 81       	ldd	r24, Z+3	; 0x03
     6c2:	81 ff       	sbrs	r24, 1
     6c4:	44 c3       	rjmp	.+1672   	; 0xd4e <__stack+0x44f>
     6c6:	9e 01       	movw	r18, r28
     6c8:	2f 5f       	subi	r18, 0xFF	; 255
     6ca:	3f 4f       	sbci	r19, 0xFF	; 255
     6cc:	39 01       	movw	r6, r18
     6ce:	f7 01       	movw	r30, r14
     6d0:	93 81       	ldd	r25, Z+3	; 0x03
     6d2:	f1 01       	movw	r30, r2
     6d4:	93 fd       	sbrc	r25, 3
     6d6:	85 91       	lpm	r24, Z+
     6d8:	93 ff       	sbrs	r25, 3
     6da:	81 91       	ld	r24, Z+
     6dc:	1f 01       	movw	r2, r30
     6de:	88 23       	and	r24, r24
     6e0:	09 f4       	brne	.+2      	; 0x6e4 <vfprintf+0x3c>
     6e2:	31 c3       	rjmp	.+1634   	; 0xd46 <__stack+0x447>
     6e4:	85 32       	cpi	r24, 0x25	; 37
     6e6:	39 f4       	brne	.+14     	; 0x6f6 <vfprintf+0x4e>
     6e8:	93 fd       	sbrc	r25, 3
     6ea:	85 91       	lpm	r24, Z+
     6ec:	93 ff       	sbrs	r25, 3
     6ee:	81 91       	ld	r24, Z+
     6f0:	1f 01       	movw	r2, r30
     6f2:	85 32       	cpi	r24, 0x25	; 37
     6f4:	39 f4       	brne	.+14     	; 0x704 <vfprintf+0x5c>
     6f6:	b7 01       	movw	r22, r14
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	0e 94 fc 07 	call	0xff8	; 0xff8 <fputc>
     6fe:	56 01       	movw	r10, r12
     700:	65 01       	movw	r12, r10
     702:	e5 cf       	rjmp	.-54     	; 0x6ce <vfprintf+0x26>
     704:	10 e0       	ldi	r17, 0x00	; 0
     706:	51 2c       	mov	r5, r1
     708:	91 2c       	mov	r9, r1
     70a:	ff e1       	ldi	r31, 0x1F	; 31
     70c:	f9 15       	cp	r31, r9
     70e:	d8 f0       	brcs	.+54     	; 0x746 <vfprintf+0x9e>
     710:	8b 32       	cpi	r24, 0x2B	; 43
     712:	79 f0       	breq	.+30     	; 0x732 <vfprintf+0x8a>
     714:	38 f4       	brcc	.+14     	; 0x724 <vfprintf+0x7c>
     716:	80 32       	cpi	r24, 0x20	; 32
     718:	79 f0       	breq	.+30     	; 0x738 <vfprintf+0x90>
     71a:	83 32       	cpi	r24, 0x23	; 35
     71c:	a1 f4       	brne	.+40     	; 0x746 <vfprintf+0x9e>
     71e:	f9 2d       	mov	r31, r9
     720:	f0 61       	ori	r31, 0x10	; 16
     722:	2e c0       	rjmp	.+92     	; 0x780 <vfprintf+0xd8>
     724:	8d 32       	cpi	r24, 0x2D	; 45
     726:	61 f0       	breq	.+24     	; 0x740 <vfprintf+0x98>
     728:	80 33       	cpi	r24, 0x30	; 48
     72a:	69 f4       	brne	.+26     	; 0x746 <vfprintf+0x9e>
     72c:	29 2d       	mov	r18, r9
     72e:	21 60       	ori	r18, 0x01	; 1
     730:	2d c0       	rjmp	.+90     	; 0x78c <vfprintf+0xe4>
     732:	39 2d       	mov	r19, r9
     734:	32 60       	ori	r19, 0x02	; 2
     736:	93 2e       	mov	r9, r19
     738:	89 2d       	mov	r24, r9
     73a:	84 60       	ori	r24, 0x04	; 4
     73c:	98 2e       	mov	r9, r24
     73e:	2a c0       	rjmp	.+84     	; 0x794 <vfprintf+0xec>
     740:	e9 2d       	mov	r30, r9
     742:	e8 60       	ori	r30, 0x08	; 8
     744:	15 c0       	rjmp	.+42     	; 0x770 <vfprintf+0xc8>
     746:	97 fc       	sbrc	r9, 7
     748:	2d c0       	rjmp	.+90     	; 0x7a4 <vfprintf+0xfc>
     74a:	20 ed       	ldi	r18, 0xD0	; 208
     74c:	28 0f       	add	r18, r24
     74e:	2a 30       	cpi	r18, 0x0A	; 10
     750:	88 f4       	brcc	.+34     	; 0x774 <vfprintf+0xcc>
     752:	96 fe       	sbrs	r9, 6
     754:	06 c0       	rjmp	.+12     	; 0x762 <vfprintf+0xba>
     756:	3a e0       	ldi	r19, 0x0A	; 10
     758:	13 9f       	mul	r17, r19
     75a:	20 0d       	add	r18, r0
     75c:	11 24       	eor	r1, r1
     75e:	12 2f       	mov	r17, r18
     760:	19 c0       	rjmp	.+50     	; 0x794 <vfprintf+0xec>
     762:	8a e0       	ldi	r24, 0x0A	; 10
     764:	58 9e       	mul	r5, r24
     766:	20 0d       	add	r18, r0
     768:	11 24       	eor	r1, r1
     76a:	52 2e       	mov	r5, r18
     76c:	e9 2d       	mov	r30, r9
     76e:	e0 62       	ori	r30, 0x20	; 32
     770:	9e 2e       	mov	r9, r30
     772:	10 c0       	rjmp	.+32     	; 0x794 <vfprintf+0xec>
     774:	8e 32       	cpi	r24, 0x2E	; 46
     776:	31 f4       	brne	.+12     	; 0x784 <vfprintf+0xdc>
     778:	96 fc       	sbrc	r9, 6
     77a:	e5 c2       	rjmp	.+1482   	; 0xd46 <__stack+0x447>
     77c:	f9 2d       	mov	r31, r9
     77e:	f0 64       	ori	r31, 0x40	; 64
     780:	9f 2e       	mov	r9, r31
     782:	08 c0       	rjmp	.+16     	; 0x794 <vfprintf+0xec>
     784:	8c 36       	cpi	r24, 0x6C	; 108
     786:	21 f4       	brne	.+8      	; 0x790 <vfprintf+0xe8>
     788:	29 2d       	mov	r18, r9
     78a:	20 68       	ori	r18, 0x80	; 128
     78c:	92 2e       	mov	r9, r18
     78e:	02 c0       	rjmp	.+4      	; 0x794 <vfprintf+0xec>
     790:	88 36       	cpi	r24, 0x68	; 104
     792:	41 f4       	brne	.+16     	; 0x7a4 <vfprintf+0xfc>
     794:	f1 01       	movw	r30, r2
     796:	93 fd       	sbrc	r25, 3
     798:	85 91       	lpm	r24, Z+
     79a:	93 ff       	sbrs	r25, 3
     79c:	81 91       	ld	r24, Z+
     79e:	1f 01       	movw	r2, r30
     7a0:	81 11       	cpse	r24, r1
     7a2:	b3 cf       	rjmp	.-154    	; 0x70a <vfprintf+0x62>
     7a4:	9b eb       	ldi	r25, 0xBB	; 187
     7a6:	98 0f       	add	r25, r24
     7a8:	93 30       	cpi	r25, 0x03	; 3
     7aa:	20 f4       	brcc	.+8      	; 0x7b4 <vfprintf+0x10c>
     7ac:	99 2d       	mov	r25, r9
     7ae:	90 61       	ori	r25, 0x10	; 16
     7b0:	80 5e       	subi	r24, 0xE0	; 224
     7b2:	07 c0       	rjmp	.+14     	; 0x7c2 <vfprintf+0x11a>
     7b4:	9b e9       	ldi	r25, 0x9B	; 155
     7b6:	98 0f       	add	r25, r24
     7b8:	93 30       	cpi	r25, 0x03	; 3
     7ba:	08 f0       	brcs	.+2      	; 0x7be <vfprintf+0x116>
     7bc:	66 c1       	rjmp	.+716    	; 0xa8a <__stack+0x18b>
     7be:	99 2d       	mov	r25, r9
     7c0:	9f 7e       	andi	r25, 0xEF	; 239
     7c2:	96 ff       	sbrs	r25, 6
     7c4:	16 e0       	ldi	r17, 0x06	; 6
     7c6:	9f 73       	andi	r25, 0x3F	; 63
     7c8:	99 2e       	mov	r9, r25
     7ca:	85 36       	cpi	r24, 0x65	; 101
     7cc:	19 f4       	brne	.+6      	; 0x7d4 <vfprintf+0x12c>
     7ce:	90 64       	ori	r25, 0x40	; 64
     7d0:	99 2e       	mov	r9, r25
     7d2:	08 c0       	rjmp	.+16     	; 0x7e4 <vfprintf+0x13c>
     7d4:	86 36       	cpi	r24, 0x66	; 102
     7d6:	21 f4       	brne	.+8      	; 0x7e0 <vfprintf+0x138>
     7d8:	39 2f       	mov	r19, r25
     7da:	30 68       	ori	r19, 0x80	; 128
     7dc:	93 2e       	mov	r9, r19
     7de:	02 c0       	rjmp	.+4      	; 0x7e4 <vfprintf+0x13c>
     7e0:	11 11       	cpse	r17, r1
     7e2:	11 50       	subi	r17, 0x01	; 1
     7e4:	97 fe       	sbrs	r9, 7
     7e6:	07 c0       	rjmp	.+14     	; 0x7f6 <vfprintf+0x14e>
     7e8:	1c 33       	cpi	r17, 0x3C	; 60
     7ea:	50 f4       	brcc	.+20     	; 0x800 <__DATA_REGION_LENGTH__>
     7ec:	44 24       	eor	r4, r4
     7ee:	43 94       	inc	r4
     7f0:	41 0e       	add	r4, r17
     7f2:	27 e0       	ldi	r18, 0x07	; 7
     7f4:	0b c0       	rjmp	.+22     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     7f6:	18 30       	cpi	r17, 0x08	; 8
     7f8:	38 f0       	brcs	.+14     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
     7fa:	27 e0       	ldi	r18, 0x07	; 7
     7fc:	17 e0       	ldi	r17, 0x07	; 7
     7fe:	05 c0       	rjmp	.+10     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
     800:	27 e0       	ldi	r18, 0x07	; 7
     802:	9c e3       	ldi	r25, 0x3C	; 60
     804:	49 2e       	mov	r4, r25
     806:	02 c0       	rjmp	.+4      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     808:	21 2f       	mov	r18, r17
     80a:	41 2c       	mov	r4, r1
     80c:	56 01       	movw	r10, r12
     80e:	84 e0       	ldi	r24, 0x04	; 4
     810:	a8 0e       	add	r10, r24
     812:	b1 1c       	adc	r11, r1
     814:	f6 01       	movw	r30, r12
     816:	60 81       	ld	r22, Z
     818:	71 81       	ldd	r23, Z+1	; 0x01
     81a:	82 81       	ldd	r24, Z+2	; 0x02
     81c:	93 81       	ldd	r25, Z+3	; 0x03
     81e:	04 2d       	mov	r16, r4
     820:	a3 01       	movw	r20, r6
     822:	0e 94 0e 07 	call	0xe1c	; 0xe1c <__ftoa_engine>
     826:	6c 01       	movw	r12, r24
     828:	f9 81       	ldd	r31, Y+1	; 0x01
     82a:	fc 87       	std	Y+12, r31	; 0x0c
     82c:	f0 ff       	sbrs	r31, 0
     82e:	02 c0       	rjmp	.+4      	; 0x834 <__DATA_REGION_LENGTH__+0x34>
     830:	f3 ff       	sbrs	r31, 3
     832:	06 c0       	rjmp	.+12     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
     834:	91 fc       	sbrc	r9, 1
     836:	06 c0       	rjmp	.+12     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
     838:	92 fe       	sbrs	r9, 2
     83a:	06 c0       	rjmp	.+12     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
     83c:	00 e2       	ldi	r16, 0x20	; 32
     83e:	05 c0       	rjmp	.+10     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
     840:	0d e2       	ldi	r16, 0x2D	; 45
     842:	03 c0       	rjmp	.+6      	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
     844:	0b e2       	ldi	r16, 0x2B	; 43
     846:	01 c0       	rjmp	.+2      	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
     848:	00 e0       	ldi	r16, 0x00	; 0
     84a:	8c 85       	ldd	r24, Y+12	; 0x0c
     84c:	8c 70       	andi	r24, 0x0C	; 12
     84e:	19 f0       	breq	.+6      	; 0x856 <__DATA_REGION_LENGTH__+0x56>
     850:	01 11       	cpse	r16, r1
     852:	5a c2       	rjmp	.+1204   	; 0xd08 <__stack+0x409>
     854:	9b c2       	rjmp	.+1334   	; 0xd8c <__stack+0x48d>
     856:	97 fe       	sbrs	r9, 7
     858:	10 c0       	rjmp	.+32     	; 0x87a <__DATA_REGION_LENGTH__+0x7a>
     85a:	4c 0c       	add	r4, r12
     85c:	fc 85       	ldd	r31, Y+12	; 0x0c
     85e:	f4 ff       	sbrs	r31, 4
     860:	04 c0       	rjmp	.+8      	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
     862:	8a 81       	ldd	r24, Y+2	; 0x02
     864:	81 33       	cpi	r24, 0x31	; 49
     866:	09 f4       	brne	.+2      	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
     868:	4a 94       	dec	r4
     86a:	14 14       	cp	r1, r4
     86c:	74 f5       	brge	.+92     	; 0x8ca <__DATA_REGION_LENGTH__+0xca>
     86e:	28 e0       	ldi	r18, 0x08	; 8
     870:	24 15       	cp	r18, r4
     872:	78 f5       	brcc	.+94     	; 0x8d2 <__DATA_REGION_LENGTH__+0xd2>
     874:	88 e0       	ldi	r24, 0x08	; 8
     876:	48 2e       	mov	r4, r24
     878:	2c c0       	rjmp	.+88     	; 0x8d2 <__DATA_REGION_LENGTH__+0xd2>
     87a:	96 fc       	sbrc	r9, 6
     87c:	2a c0       	rjmp	.+84     	; 0x8d2 <__DATA_REGION_LENGTH__+0xd2>
     87e:	81 2f       	mov	r24, r17
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	8c 15       	cp	r24, r12
     884:	9d 05       	cpc	r25, r13
     886:	9c f0       	brlt	.+38     	; 0x8ae <__DATA_REGION_LENGTH__+0xae>
     888:	3c ef       	ldi	r19, 0xFC	; 252
     88a:	c3 16       	cp	r12, r19
     88c:	3f ef       	ldi	r19, 0xFF	; 255
     88e:	d3 06       	cpc	r13, r19
     890:	74 f0       	brlt	.+28     	; 0x8ae <__DATA_REGION_LENGTH__+0xae>
     892:	89 2d       	mov	r24, r9
     894:	80 68       	ori	r24, 0x80	; 128
     896:	98 2e       	mov	r9, r24
     898:	0a c0       	rjmp	.+20     	; 0x8ae <__DATA_REGION_LENGTH__+0xae>
     89a:	e2 e0       	ldi	r30, 0x02	; 2
     89c:	f0 e0       	ldi	r31, 0x00	; 0
     89e:	ec 0f       	add	r30, r28
     8a0:	fd 1f       	adc	r31, r29
     8a2:	e1 0f       	add	r30, r17
     8a4:	f1 1d       	adc	r31, r1
     8a6:	80 81       	ld	r24, Z
     8a8:	80 33       	cpi	r24, 0x30	; 48
     8aa:	19 f4       	brne	.+6      	; 0x8b2 <__DATA_REGION_LENGTH__+0xb2>
     8ac:	11 50       	subi	r17, 0x01	; 1
     8ae:	11 11       	cpse	r17, r1
     8b0:	f4 cf       	rjmp	.-24     	; 0x89a <__DATA_REGION_LENGTH__+0x9a>
     8b2:	97 fe       	sbrs	r9, 7
     8b4:	0e c0       	rjmp	.+28     	; 0x8d2 <__DATA_REGION_LENGTH__+0xd2>
     8b6:	44 24       	eor	r4, r4
     8b8:	43 94       	inc	r4
     8ba:	41 0e       	add	r4, r17
     8bc:	81 2f       	mov	r24, r17
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	c8 16       	cp	r12, r24
     8c2:	d9 06       	cpc	r13, r25
     8c4:	2c f4       	brge	.+10     	; 0x8d0 <__DATA_REGION_LENGTH__+0xd0>
     8c6:	1c 19       	sub	r17, r12
     8c8:	04 c0       	rjmp	.+8      	; 0x8d2 <__DATA_REGION_LENGTH__+0xd2>
     8ca:	44 24       	eor	r4, r4
     8cc:	43 94       	inc	r4
     8ce:	01 c0       	rjmp	.+2      	; 0x8d2 <__DATA_REGION_LENGTH__+0xd2>
     8d0:	10 e0       	ldi	r17, 0x00	; 0
     8d2:	97 fe       	sbrs	r9, 7
     8d4:	06 c0       	rjmp	.+12     	; 0x8e2 <__DATA_REGION_LENGTH__+0xe2>
     8d6:	1c 14       	cp	r1, r12
     8d8:	1d 04       	cpc	r1, r13
     8da:	34 f4       	brge	.+12     	; 0x8e8 <__DATA_REGION_LENGTH__+0xe8>
     8dc:	c6 01       	movw	r24, r12
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	05 c0       	rjmp	.+10     	; 0x8ec <__DATA_REGION_LENGTH__+0xec>
     8e2:	85 e0       	ldi	r24, 0x05	; 5
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	02 c0       	rjmp	.+4      	; 0x8ec <__DATA_REGION_LENGTH__+0xec>
     8e8:	81 e0       	ldi	r24, 0x01	; 1
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	01 11       	cpse	r16, r1
     8ee:	01 96       	adiw	r24, 0x01	; 1
     8f0:	11 23       	and	r17, r17
     8f2:	31 f0       	breq	.+12     	; 0x900 <__stack+0x1>
     8f4:	21 2f       	mov	r18, r17
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	2f 5f       	subi	r18, 0xFF	; 255
     8fa:	3f 4f       	sbci	r19, 0xFF	; 255
     8fc:	82 0f       	add	r24, r18
     8fe:	93 1f       	adc	r25, r19
     900:	25 2d       	mov	r18, r5
     902:	30 e0       	ldi	r19, 0x00	; 0
     904:	82 17       	cp	r24, r18
     906:	93 07       	cpc	r25, r19
     908:	14 f4       	brge	.+4      	; 0x90e <__stack+0xf>
     90a:	58 1a       	sub	r5, r24
     90c:	01 c0       	rjmp	.+2      	; 0x910 <__stack+0x11>
     90e:	51 2c       	mov	r5, r1
     910:	89 2d       	mov	r24, r9
     912:	89 70       	andi	r24, 0x09	; 9
     914:	49 f4       	brne	.+18     	; 0x928 <__stack+0x29>
     916:	55 20       	and	r5, r5
     918:	39 f0       	breq	.+14     	; 0x928 <__stack+0x29>
     91a:	b7 01       	movw	r22, r14
     91c:	80 e2       	ldi	r24, 0x20	; 32
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	0e 94 fc 07 	call	0xff8	; 0xff8 <fputc>
     924:	5a 94       	dec	r5
     926:	f7 cf       	rjmp	.-18     	; 0x916 <__stack+0x17>
     928:	00 23       	and	r16, r16
     92a:	29 f0       	breq	.+10     	; 0x936 <__stack+0x37>
     92c:	b7 01       	movw	r22, r14
     92e:	80 2f       	mov	r24, r16
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	0e 94 fc 07 	call	0xff8	; 0xff8 <fputc>
     936:	93 fc       	sbrc	r9, 3
     938:	09 c0       	rjmp	.+18     	; 0x94c <__stack+0x4d>
     93a:	55 20       	and	r5, r5
     93c:	39 f0       	breq	.+14     	; 0x94c <__stack+0x4d>
     93e:	b7 01       	movw	r22, r14
     940:	80 e3       	ldi	r24, 0x30	; 48
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	0e 94 fc 07 	call	0xff8	; 0xff8 <fputc>
     948:	5a 94       	dec	r5
     94a:	f7 cf       	rjmp	.-18     	; 0x93a <__stack+0x3b>
     94c:	97 fe       	sbrs	r9, 7
     94e:	4c c0       	rjmp	.+152    	; 0x9e8 <__stack+0xe9>
     950:	46 01       	movw	r8, r12
     952:	d7 fe       	sbrs	r13, 7
     954:	02 c0       	rjmp	.+4      	; 0x95a <__stack+0x5b>
     956:	81 2c       	mov	r8, r1
     958:	91 2c       	mov	r9, r1
     95a:	c6 01       	movw	r24, r12
     95c:	88 19       	sub	r24, r8
     95e:	99 09       	sbc	r25, r9
     960:	f3 01       	movw	r30, r6
     962:	e8 0f       	add	r30, r24
     964:	f9 1f       	adc	r31, r25
     966:	fe 87       	std	Y+14, r31	; 0x0e
     968:	ed 87       	std	Y+13, r30	; 0x0d
     96a:	96 01       	movw	r18, r12
     96c:	24 19       	sub	r18, r4
     96e:	31 09       	sbc	r19, r1
     970:	38 8b       	std	Y+16, r19	; 0x10
     972:	2f 87       	std	Y+15, r18	; 0x0f
     974:	01 2f       	mov	r16, r17
     976:	10 e0       	ldi	r17, 0x00	; 0
     978:	11 95       	neg	r17
     97a:	01 95       	neg	r16
     97c:	11 09       	sbc	r17, r1
     97e:	3f ef       	ldi	r19, 0xFF	; 255
     980:	83 16       	cp	r8, r19
     982:	93 06       	cpc	r9, r19
     984:	29 f4       	brne	.+10     	; 0x990 <__stack+0x91>
     986:	b7 01       	movw	r22, r14
     988:	8e e2       	ldi	r24, 0x2E	; 46
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	0e 94 fc 07 	call	0xff8	; 0xff8 <fputc>
     990:	c8 14       	cp	r12, r8
     992:	d9 04       	cpc	r13, r9
     994:	4c f0       	brlt	.+18     	; 0x9a8 <__stack+0xa9>
     996:	8f 85       	ldd	r24, Y+15	; 0x0f
     998:	98 89       	ldd	r25, Y+16	; 0x10
     99a:	88 15       	cp	r24, r8
     99c:	99 05       	cpc	r25, r9
     99e:	24 f4       	brge	.+8      	; 0x9a8 <__stack+0xa9>
     9a0:	ed 85       	ldd	r30, Y+13	; 0x0d
     9a2:	fe 85       	ldd	r31, Y+14	; 0x0e
     9a4:	81 81       	ldd	r24, Z+1	; 0x01
     9a6:	01 c0       	rjmp	.+2      	; 0x9aa <__stack+0xab>
     9a8:	80 e3       	ldi	r24, 0x30	; 48
     9aa:	f1 e0       	ldi	r31, 0x01	; 1
     9ac:	8f 1a       	sub	r8, r31
     9ae:	91 08       	sbc	r9, r1
     9b0:	2d 85       	ldd	r18, Y+13	; 0x0d
     9b2:	3e 85       	ldd	r19, Y+14	; 0x0e
     9b4:	2f 5f       	subi	r18, 0xFF	; 255
     9b6:	3f 4f       	sbci	r19, 0xFF	; 255
     9b8:	3e 87       	std	Y+14, r19	; 0x0e
     9ba:	2d 87       	std	Y+13, r18	; 0x0d
     9bc:	80 16       	cp	r8, r16
     9be:	91 06       	cpc	r9, r17
     9c0:	2c f0       	brlt	.+10     	; 0x9cc <__stack+0xcd>
     9c2:	b7 01       	movw	r22, r14
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	0e 94 fc 07 	call	0xff8	; 0xff8 <fputc>
     9ca:	d9 cf       	rjmp	.-78     	; 0x97e <__stack+0x7f>
     9cc:	c8 14       	cp	r12, r8
     9ce:	d9 04       	cpc	r13, r9
     9d0:	41 f4       	brne	.+16     	; 0x9e2 <__stack+0xe3>
     9d2:	9a 81       	ldd	r25, Y+2	; 0x02
     9d4:	96 33       	cpi	r25, 0x36	; 54
     9d6:	20 f4       	brcc	.+8      	; 0x9e0 <__stack+0xe1>
     9d8:	95 33       	cpi	r25, 0x35	; 53
     9da:	19 f4       	brne	.+6      	; 0x9e2 <__stack+0xe3>
     9dc:	3c 85       	ldd	r19, Y+12	; 0x0c
     9de:	34 ff       	sbrs	r19, 4
     9e0:	81 e3       	ldi	r24, 0x31	; 49
     9e2:	b7 01       	movw	r22, r14
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	4e c0       	rjmp	.+156    	; 0xa84 <__stack+0x185>
     9e8:	8a 81       	ldd	r24, Y+2	; 0x02
     9ea:	81 33       	cpi	r24, 0x31	; 49
     9ec:	19 f0       	breq	.+6      	; 0x9f4 <__stack+0xf5>
     9ee:	9c 85       	ldd	r25, Y+12	; 0x0c
     9f0:	9f 7e       	andi	r25, 0xEF	; 239
     9f2:	9c 87       	std	Y+12, r25	; 0x0c
     9f4:	b7 01       	movw	r22, r14
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	0e 94 fc 07 	call	0xff8	; 0xff8 <fputc>
     9fc:	11 11       	cpse	r17, r1
     9fe:	05 c0       	rjmp	.+10     	; 0xa0a <__stack+0x10b>
     a00:	94 fc       	sbrc	r9, 4
     a02:	18 c0       	rjmp	.+48     	; 0xa34 <__stack+0x135>
     a04:	85 e6       	ldi	r24, 0x65	; 101
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	17 c0       	rjmp	.+46     	; 0xa38 <__stack+0x139>
     a0a:	b7 01       	movw	r22, r14
     a0c:	8e e2       	ldi	r24, 0x2E	; 46
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	0e 94 fc 07 	call	0xff8	; 0xff8 <fputc>
     a14:	1e 5f       	subi	r17, 0xFE	; 254
     a16:	82 e0       	ldi	r24, 0x02	; 2
     a18:	01 e0       	ldi	r16, 0x01	; 1
     a1a:	08 0f       	add	r16, r24
     a1c:	f3 01       	movw	r30, r6
     a1e:	e8 0f       	add	r30, r24
     a20:	f1 1d       	adc	r31, r1
     a22:	80 81       	ld	r24, Z
     a24:	b7 01       	movw	r22, r14
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	0e 94 fc 07 	call	0xff8	; 0xff8 <fputc>
     a2c:	80 2f       	mov	r24, r16
     a2e:	01 13       	cpse	r16, r17
     a30:	f3 cf       	rjmp	.-26     	; 0xa18 <__stack+0x119>
     a32:	e6 cf       	rjmp	.-52     	; 0xa00 <__stack+0x101>
     a34:	85 e4       	ldi	r24, 0x45	; 69
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	b7 01       	movw	r22, r14
     a3a:	0e 94 fc 07 	call	0xff8	; 0xff8 <fputc>
     a3e:	d7 fc       	sbrc	r13, 7
     a40:	06 c0       	rjmp	.+12     	; 0xa4e <__stack+0x14f>
     a42:	c1 14       	cp	r12, r1
     a44:	d1 04       	cpc	r13, r1
     a46:	41 f4       	brne	.+16     	; 0xa58 <__stack+0x159>
     a48:	ec 85       	ldd	r30, Y+12	; 0x0c
     a4a:	e4 ff       	sbrs	r30, 4
     a4c:	05 c0       	rjmp	.+10     	; 0xa58 <__stack+0x159>
     a4e:	d1 94       	neg	r13
     a50:	c1 94       	neg	r12
     a52:	d1 08       	sbc	r13, r1
     a54:	8d e2       	ldi	r24, 0x2D	; 45
     a56:	01 c0       	rjmp	.+2      	; 0xa5a <__stack+0x15b>
     a58:	8b e2       	ldi	r24, 0x2B	; 43
     a5a:	b7 01       	movw	r22, r14
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	0e 94 fc 07 	call	0xff8	; 0xff8 <fputc>
     a62:	80 e3       	ldi	r24, 0x30	; 48
     a64:	2a e0       	ldi	r18, 0x0A	; 10
     a66:	c2 16       	cp	r12, r18
     a68:	d1 04       	cpc	r13, r1
     a6a:	2c f0       	brlt	.+10     	; 0xa76 <__stack+0x177>
     a6c:	8f 5f       	subi	r24, 0xFF	; 255
     a6e:	fa e0       	ldi	r31, 0x0A	; 10
     a70:	cf 1a       	sub	r12, r31
     a72:	d1 08       	sbc	r13, r1
     a74:	f7 cf       	rjmp	.-18     	; 0xa64 <__stack+0x165>
     a76:	b7 01       	movw	r22, r14
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	0e 94 fc 07 	call	0xff8	; 0xff8 <fputc>
     a7e:	b7 01       	movw	r22, r14
     a80:	c6 01       	movw	r24, r12
     a82:	c0 96       	adiw	r24, 0x30	; 48
     a84:	0e 94 fc 07 	call	0xff8	; 0xff8 <fputc>
     a88:	54 c1       	rjmp	.+680    	; 0xd32 <__stack+0x433>
     a8a:	83 36       	cpi	r24, 0x63	; 99
     a8c:	31 f0       	breq	.+12     	; 0xa9a <__stack+0x19b>
     a8e:	83 37       	cpi	r24, 0x73	; 115
     a90:	79 f0       	breq	.+30     	; 0xab0 <__stack+0x1b1>
     a92:	83 35       	cpi	r24, 0x53	; 83
     a94:	09 f0       	breq	.+2      	; 0xa98 <__stack+0x199>
     a96:	56 c0       	rjmp	.+172    	; 0xb44 <__stack+0x245>
     a98:	20 c0       	rjmp	.+64     	; 0xada <__stack+0x1db>
     a9a:	56 01       	movw	r10, r12
     a9c:	32 e0       	ldi	r19, 0x02	; 2
     a9e:	a3 0e       	add	r10, r19
     aa0:	b1 1c       	adc	r11, r1
     aa2:	f6 01       	movw	r30, r12
     aa4:	80 81       	ld	r24, Z
     aa6:	89 83       	std	Y+1, r24	; 0x01
     aa8:	01 e0       	ldi	r16, 0x01	; 1
     aaa:	10 e0       	ldi	r17, 0x00	; 0
     aac:	63 01       	movw	r12, r6
     aae:	12 c0       	rjmp	.+36     	; 0xad4 <__stack+0x1d5>
     ab0:	56 01       	movw	r10, r12
     ab2:	f2 e0       	ldi	r31, 0x02	; 2
     ab4:	af 0e       	add	r10, r31
     ab6:	b1 1c       	adc	r11, r1
     ab8:	f6 01       	movw	r30, r12
     aba:	c0 80       	ld	r12, Z
     abc:	d1 80       	ldd	r13, Z+1	; 0x01
     abe:	96 fe       	sbrs	r9, 6
     ac0:	03 c0       	rjmp	.+6      	; 0xac8 <__stack+0x1c9>
     ac2:	61 2f       	mov	r22, r17
     ac4:	70 e0       	ldi	r23, 0x00	; 0
     ac6:	02 c0       	rjmp	.+4      	; 0xacc <__stack+0x1cd>
     ac8:	6f ef       	ldi	r22, 0xFF	; 255
     aca:	7f ef       	ldi	r23, 0xFF	; 255
     acc:	c6 01       	movw	r24, r12
     ace:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <strnlen>
     ad2:	8c 01       	movw	r16, r24
     ad4:	f9 2d       	mov	r31, r9
     ad6:	ff 77       	andi	r31, 0x7F	; 127
     ad8:	14 c0       	rjmp	.+40     	; 0xb02 <__stack+0x203>
     ada:	56 01       	movw	r10, r12
     adc:	22 e0       	ldi	r18, 0x02	; 2
     ade:	a2 0e       	add	r10, r18
     ae0:	b1 1c       	adc	r11, r1
     ae2:	f6 01       	movw	r30, r12
     ae4:	c0 80       	ld	r12, Z
     ae6:	d1 80       	ldd	r13, Z+1	; 0x01
     ae8:	96 fe       	sbrs	r9, 6
     aea:	03 c0       	rjmp	.+6      	; 0xaf2 <__stack+0x1f3>
     aec:	61 2f       	mov	r22, r17
     aee:	70 e0       	ldi	r23, 0x00	; 0
     af0:	02 c0       	rjmp	.+4      	; 0xaf6 <__stack+0x1f7>
     af2:	6f ef       	ldi	r22, 0xFF	; 255
     af4:	7f ef       	ldi	r23, 0xFF	; 255
     af6:	c6 01       	movw	r24, r12
     af8:	0e 94 e6 07 	call	0xfcc	; 0xfcc <strnlen_P>
     afc:	8c 01       	movw	r16, r24
     afe:	f9 2d       	mov	r31, r9
     b00:	f0 68       	ori	r31, 0x80	; 128
     b02:	9f 2e       	mov	r9, r31
     b04:	f3 fd       	sbrc	r31, 3
     b06:	1a c0       	rjmp	.+52     	; 0xb3c <__stack+0x23d>
     b08:	85 2d       	mov	r24, r5
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	08 17       	cp	r16, r24
     b0e:	19 07       	cpc	r17, r25
     b10:	a8 f4       	brcc	.+42     	; 0xb3c <__stack+0x23d>
     b12:	b7 01       	movw	r22, r14
     b14:	80 e2       	ldi	r24, 0x20	; 32
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	0e 94 fc 07 	call	0xff8	; 0xff8 <fputc>
     b1c:	5a 94       	dec	r5
     b1e:	f4 cf       	rjmp	.-24     	; 0xb08 <__stack+0x209>
     b20:	f6 01       	movw	r30, r12
     b22:	97 fc       	sbrc	r9, 7
     b24:	85 91       	lpm	r24, Z+
     b26:	97 fe       	sbrs	r9, 7
     b28:	81 91       	ld	r24, Z+
     b2a:	6f 01       	movw	r12, r30
     b2c:	b7 01       	movw	r22, r14
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	0e 94 fc 07 	call	0xff8	; 0xff8 <fputc>
     b34:	51 10       	cpse	r5, r1
     b36:	5a 94       	dec	r5
     b38:	01 50       	subi	r16, 0x01	; 1
     b3a:	11 09       	sbc	r17, r1
     b3c:	01 15       	cp	r16, r1
     b3e:	11 05       	cpc	r17, r1
     b40:	79 f7       	brne	.-34     	; 0xb20 <__stack+0x221>
     b42:	f7 c0       	rjmp	.+494    	; 0xd32 <__stack+0x433>
     b44:	84 36       	cpi	r24, 0x64	; 100
     b46:	11 f0       	breq	.+4      	; 0xb4c <__stack+0x24d>
     b48:	89 36       	cpi	r24, 0x69	; 105
     b4a:	61 f5       	brne	.+88     	; 0xba4 <__stack+0x2a5>
     b4c:	56 01       	movw	r10, r12
     b4e:	97 fe       	sbrs	r9, 7
     b50:	09 c0       	rjmp	.+18     	; 0xb64 <__stack+0x265>
     b52:	24 e0       	ldi	r18, 0x04	; 4
     b54:	a2 0e       	add	r10, r18
     b56:	b1 1c       	adc	r11, r1
     b58:	f6 01       	movw	r30, r12
     b5a:	60 81       	ld	r22, Z
     b5c:	71 81       	ldd	r23, Z+1	; 0x01
     b5e:	82 81       	ldd	r24, Z+2	; 0x02
     b60:	93 81       	ldd	r25, Z+3	; 0x03
     b62:	0a c0       	rjmp	.+20     	; 0xb78 <__stack+0x279>
     b64:	f2 e0       	ldi	r31, 0x02	; 2
     b66:	af 0e       	add	r10, r31
     b68:	b1 1c       	adc	r11, r1
     b6a:	f6 01       	movw	r30, r12
     b6c:	60 81       	ld	r22, Z
     b6e:	71 81       	ldd	r23, Z+1	; 0x01
     b70:	07 2e       	mov	r0, r23
     b72:	00 0c       	add	r0, r0
     b74:	88 0b       	sbc	r24, r24
     b76:	99 0b       	sbc	r25, r25
     b78:	f9 2d       	mov	r31, r9
     b7a:	ff 76       	andi	r31, 0x6F	; 111
     b7c:	9f 2e       	mov	r9, r31
     b7e:	97 ff       	sbrs	r25, 7
     b80:	09 c0       	rjmp	.+18     	; 0xb94 <__stack+0x295>
     b82:	90 95       	com	r25
     b84:	80 95       	com	r24
     b86:	70 95       	com	r23
     b88:	61 95       	neg	r22
     b8a:	7f 4f       	sbci	r23, 0xFF	; 255
     b8c:	8f 4f       	sbci	r24, 0xFF	; 255
     b8e:	9f 4f       	sbci	r25, 0xFF	; 255
     b90:	f0 68       	ori	r31, 0x80	; 128
     b92:	9f 2e       	mov	r9, r31
     b94:	2a e0       	ldi	r18, 0x0A	; 10
     b96:	30 e0       	ldi	r19, 0x00	; 0
     b98:	a3 01       	movw	r20, r6
     b9a:	0e 94 38 08 	call	0x1070	; 0x1070 <__ultoa_invert>
     b9e:	c8 2e       	mov	r12, r24
     ba0:	c6 18       	sub	r12, r6
     ba2:	3f c0       	rjmp	.+126    	; 0xc22 <__stack+0x323>
     ba4:	09 2d       	mov	r16, r9
     ba6:	85 37       	cpi	r24, 0x75	; 117
     ba8:	21 f4       	brne	.+8      	; 0xbb2 <__stack+0x2b3>
     baa:	0f 7e       	andi	r16, 0xEF	; 239
     bac:	2a e0       	ldi	r18, 0x0A	; 10
     bae:	30 e0       	ldi	r19, 0x00	; 0
     bb0:	1d c0       	rjmp	.+58     	; 0xbec <__stack+0x2ed>
     bb2:	09 7f       	andi	r16, 0xF9	; 249
     bb4:	8f 36       	cpi	r24, 0x6F	; 111
     bb6:	91 f0       	breq	.+36     	; 0xbdc <__stack+0x2dd>
     bb8:	18 f4       	brcc	.+6      	; 0xbc0 <__stack+0x2c1>
     bba:	88 35       	cpi	r24, 0x58	; 88
     bbc:	59 f0       	breq	.+22     	; 0xbd4 <__stack+0x2d5>
     bbe:	c3 c0       	rjmp	.+390    	; 0xd46 <__stack+0x447>
     bc0:	80 37       	cpi	r24, 0x70	; 112
     bc2:	19 f0       	breq	.+6      	; 0xbca <__stack+0x2cb>
     bc4:	88 37       	cpi	r24, 0x78	; 120
     bc6:	11 f0       	breq	.+4      	; 0xbcc <__stack+0x2cd>
     bc8:	be c0       	rjmp	.+380    	; 0xd46 <__stack+0x447>
     bca:	00 61       	ori	r16, 0x10	; 16
     bcc:	04 ff       	sbrs	r16, 4
     bce:	09 c0       	rjmp	.+18     	; 0xbe2 <__stack+0x2e3>
     bd0:	04 60       	ori	r16, 0x04	; 4
     bd2:	07 c0       	rjmp	.+14     	; 0xbe2 <__stack+0x2e3>
     bd4:	94 fe       	sbrs	r9, 4
     bd6:	08 c0       	rjmp	.+16     	; 0xbe8 <__stack+0x2e9>
     bd8:	06 60       	ori	r16, 0x06	; 6
     bda:	06 c0       	rjmp	.+12     	; 0xbe8 <__stack+0x2e9>
     bdc:	28 e0       	ldi	r18, 0x08	; 8
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	05 c0       	rjmp	.+10     	; 0xbec <__stack+0x2ed>
     be2:	20 e1       	ldi	r18, 0x10	; 16
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	02 c0       	rjmp	.+4      	; 0xbec <__stack+0x2ed>
     be8:	20 e1       	ldi	r18, 0x10	; 16
     bea:	32 e0       	ldi	r19, 0x02	; 2
     bec:	56 01       	movw	r10, r12
     bee:	07 ff       	sbrs	r16, 7
     bf0:	09 c0       	rjmp	.+18     	; 0xc04 <__stack+0x305>
     bf2:	84 e0       	ldi	r24, 0x04	; 4
     bf4:	a8 0e       	add	r10, r24
     bf6:	b1 1c       	adc	r11, r1
     bf8:	f6 01       	movw	r30, r12
     bfa:	60 81       	ld	r22, Z
     bfc:	71 81       	ldd	r23, Z+1	; 0x01
     bfe:	82 81       	ldd	r24, Z+2	; 0x02
     c00:	93 81       	ldd	r25, Z+3	; 0x03
     c02:	08 c0       	rjmp	.+16     	; 0xc14 <__stack+0x315>
     c04:	f2 e0       	ldi	r31, 0x02	; 2
     c06:	af 0e       	add	r10, r31
     c08:	b1 1c       	adc	r11, r1
     c0a:	f6 01       	movw	r30, r12
     c0c:	60 81       	ld	r22, Z
     c0e:	71 81       	ldd	r23, Z+1	; 0x01
     c10:	80 e0       	ldi	r24, 0x00	; 0
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	a3 01       	movw	r20, r6
     c16:	0e 94 38 08 	call	0x1070	; 0x1070 <__ultoa_invert>
     c1a:	c8 2e       	mov	r12, r24
     c1c:	c6 18       	sub	r12, r6
     c1e:	0f 77       	andi	r16, 0x7F	; 127
     c20:	90 2e       	mov	r9, r16
     c22:	96 fe       	sbrs	r9, 6
     c24:	0b c0       	rjmp	.+22     	; 0xc3c <__stack+0x33d>
     c26:	09 2d       	mov	r16, r9
     c28:	0e 7f       	andi	r16, 0xFE	; 254
     c2a:	c1 16       	cp	r12, r17
     c2c:	50 f4       	brcc	.+20     	; 0xc42 <__stack+0x343>
     c2e:	94 fe       	sbrs	r9, 4
     c30:	0a c0       	rjmp	.+20     	; 0xc46 <__stack+0x347>
     c32:	92 fc       	sbrc	r9, 2
     c34:	08 c0       	rjmp	.+16     	; 0xc46 <__stack+0x347>
     c36:	09 2d       	mov	r16, r9
     c38:	0e 7e       	andi	r16, 0xEE	; 238
     c3a:	05 c0       	rjmp	.+10     	; 0xc46 <__stack+0x347>
     c3c:	dc 2c       	mov	r13, r12
     c3e:	09 2d       	mov	r16, r9
     c40:	03 c0       	rjmp	.+6      	; 0xc48 <__stack+0x349>
     c42:	dc 2c       	mov	r13, r12
     c44:	01 c0       	rjmp	.+2      	; 0xc48 <__stack+0x349>
     c46:	d1 2e       	mov	r13, r17
     c48:	04 ff       	sbrs	r16, 4
     c4a:	0d c0       	rjmp	.+26     	; 0xc66 <__stack+0x367>
     c4c:	fe 01       	movw	r30, r28
     c4e:	ec 0d       	add	r30, r12
     c50:	f1 1d       	adc	r31, r1
     c52:	80 81       	ld	r24, Z
     c54:	80 33       	cpi	r24, 0x30	; 48
     c56:	11 f4       	brne	.+4      	; 0xc5c <__stack+0x35d>
     c58:	09 7e       	andi	r16, 0xE9	; 233
     c5a:	09 c0       	rjmp	.+18     	; 0xc6e <__stack+0x36f>
     c5c:	02 ff       	sbrs	r16, 2
     c5e:	06 c0       	rjmp	.+12     	; 0xc6c <__stack+0x36d>
     c60:	d3 94       	inc	r13
     c62:	d3 94       	inc	r13
     c64:	04 c0       	rjmp	.+8      	; 0xc6e <__stack+0x36f>
     c66:	80 2f       	mov	r24, r16
     c68:	86 78       	andi	r24, 0x86	; 134
     c6a:	09 f0       	breq	.+2      	; 0xc6e <__stack+0x36f>
     c6c:	d3 94       	inc	r13
     c6e:	03 fd       	sbrc	r16, 3
     c70:	11 c0       	rjmp	.+34     	; 0xc94 <__stack+0x395>
     c72:	00 ff       	sbrs	r16, 0
     c74:	06 c0       	rjmp	.+12     	; 0xc82 <__stack+0x383>
     c76:	1c 2d       	mov	r17, r12
     c78:	d5 14       	cp	r13, r5
     c7a:	80 f4       	brcc	.+32     	; 0xc9c <__stack+0x39d>
     c7c:	15 0d       	add	r17, r5
     c7e:	1d 19       	sub	r17, r13
     c80:	0d c0       	rjmp	.+26     	; 0xc9c <__stack+0x39d>
     c82:	d5 14       	cp	r13, r5
     c84:	58 f4       	brcc	.+22     	; 0xc9c <__stack+0x39d>
     c86:	b7 01       	movw	r22, r14
     c88:	80 e2       	ldi	r24, 0x20	; 32
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	0e 94 fc 07 	call	0xff8	; 0xff8 <fputc>
     c90:	d3 94       	inc	r13
     c92:	f7 cf       	rjmp	.-18     	; 0xc82 <__stack+0x383>
     c94:	d5 14       	cp	r13, r5
     c96:	10 f4       	brcc	.+4      	; 0xc9c <__stack+0x39d>
     c98:	5d 18       	sub	r5, r13
     c9a:	01 c0       	rjmp	.+2      	; 0xc9e <__stack+0x39f>
     c9c:	51 2c       	mov	r5, r1
     c9e:	04 ff       	sbrs	r16, 4
     ca0:	10 c0       	rjmp	.+32     	; 0xcc2 <__stack+0x3c3>
     ca2:	b7 01       	movw	r22, r14
     ca4:	80 e3       	ldi	r24, 0x30	; 48
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	0e 94 fc 07 	call	0xff8	; 0xff8 <fputc>
     cac:	02 ff       	sbrs	r16, 2
     cae:	17 c0       	rjmp	.+46     	; 0xcde <__stack+0x3df>
     cb0:	01 fd       	sbrc	r16, 1
     cb2:	03 c0       	rjmp	.+6      	; 0xcba <__stack+0x3bb>
     cb4:	88 e7       	ldi	r24, 0x78	; 120
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	02 c0       	rjmp	.+4      	; 0xcbe <__stack+0x3bf>
     cba:	88 e5       	ldi	r24, 0x58	; 88
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	b7 01       	movw	r22, r14
     cc0:	0c c0       	rjmp	.+24     	; 0xcda <__stack+0x3db>
     cc2:	80 2f       	mov	r24, r16
     cc4:	86 78       	andi	r24, 0x86	; 134
     cc6:	59 f0       	breq	.+22     	; 0xcde <__stack+0x3df>
     cc8:	01 ff       	sbrs	r16, 1
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__stack+0x3d1>
     ccc:	8b e2       	ldi	r24, 0x2B	; 43
     cce:	01 c0       	rjmp	.+2      	; 0xcd2 <__stack+0x3d3>
     cd0:	80 e2       	ldi	r24, 0x20	; 32
     cd2:	07 fd       	sbrc	r16, 7
     cd4:	8d e2       	ldi	r24, 0x2D	; 45
     cd6:	b7 01       	movw	r22, r14
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	0e 94 fc 07 	call	0xff8	; 0xff8 <fputc>
     cde:	c1 16       	cp	r12, r17
     ce0:	38 f4       	brcc	.+14     	; 0xcf0 <__stack+0x3f1>
     ce2:	b7 01       	movw	r22, r14
     ce4:	80 e3       	ldi	r24, 0x30	; 48
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	0e 94 fc 07 	call	0xff8	; 0xff8 <fputc>
     cec:	11 50       	subi	r17, 0x01	; 1
     cee:	f7 cf       	rjmp	.-18     	; 0xcde <__stack+0x3df>
     cf0:	ca 94       	dec	r12
     cf2:	f3 01       	movw	r30, r6
     cf4:	ec 0d       	add	r30, r12
     cf6:	f1 1d       	adc	r31, r1
     cf8:	80 81       	ld	r24, Z
     cfa:	b7 01       	movw	r22, r14
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	0e 94 fc 07 	call	0xff8	; 0xff8 <fputc>
     d02:	c1 10       	cpse	r12, r1
     d04:	f5 cf       	rjmp	.-22     	; 0xcf0 <__stack+0x3f1>
     d06:	15 c0       	rjmp	.+42     	; 0xd32 <__stack+0x433>
     d08:	f4 e0       	ldi	r31, 0x04	; 4
     d0a:	f5 15       	cp	r31, r5
     d0c:	60 f5       	brcc	.+88     	; 0xd66 <__stack+0x467>
     d0e:	84 e0       	ldi	r24, 0x04	; 4
     d10:	58 1a       	sub	r5, r24
     d12:	93 fe       	sbrs	r9, 3
     d14:	1f c0       	rjmp	.+62     	; 0xd54 <__stack+0x455>
     d16:	01 11       	cpse	r16, r1
     d18:	27 c0       	rjmp	.+78     	; 0xd68 <__stack+0x469>
     d1a:	2c 85       	ldd	r18, Y+12	; 0x0c
     d1c:	23 ff       	sbrs	r18, 3
     d1e:	2a c0       	rjmp	.+84     	; 0xd74 <__stack+0x475>
     d20:	0a ef       	ldi	r16, 0xFA	; 250
     d22:	11 e0       	ldi	r17, 0x01	; 1
     d24:	39 2d       	mov	r19, r9
     d26:	30 71       	andi	r19, 0x10	; 16
     d28:	93 2e       	mov	r9, r19
     d2a:	f8 01       	movw	r30, r16
     d2c:	84 91       	lpm	r24, Z
     d2e:	81 11       	cpse	r24, r1
     d30:	24 c0       	rjmp	.+72     	; 0xd7a <__stack+0x47b>
     d32:	55 20       	and	r5, r5
     d34:	09 f4       	brne	.+2      	; 0xd38 <__stack+0x439>
     d36:	e4 cc       	rjmp	.-1592   	; 0x700 <vfprintf+0x58>
     d38:	b7 01       	movw	r22, r14
     d3a:	80 e2       	ldi	r24, 0x20	; 32
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	0e 94 fc 07 	call	0xff8	; 0xff8 <fputc>
     d42:	5a 94       	dec	r5
     d44:	f6 cf       	rjmp	.-20     	; 0xd32 <__stack+0x433>
     d46:	f7 01       	movw	r30, r14
     d48:	86 81       	ldd	r24, Z+6	; 0x06
     d4a:	97 81       	ldd	r25, Z+7	; 0x07
     d4c:	26 c0       	rjmp	.+76     	; 0xd9a <__stack+0x49b>
     d4e:	8f ef       	ldi	r24, 0xFF	; 255
     d50:	9f ef       	ldi	r25, 0xFF	; 255
     d52:	23 c0       	rjmp	.+70     	; 0xd9a <__stack+0x49b>
     d54:	b7 01       	movw	r22, r14
     d56:	80 e2       	ldi	r24, 0x20	; 32
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	0e 94 fc 07 	call	0xff8	; 0xff8 <fputc>
     d5e:	5a 94       	dec	r5
     d60:	51 10       	cpse	r5, r1
     d62:	f8 cf       	rjmp	.-16     	; 0xd54 <__stack+0x455>
     d64:	d8 cf       	rjmp	.-80     	; 0xd16 <__stack+0x417>
     d66:	51 2c       	mov	r5, r1
     d68:	b7 01       	movw	r22, r14
     d6a:	80 2f       	mov	r24, r16
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	0e 94 fc 07 	call	0xff8	; 0xff8 <fputc>
     d72:	d3 cf       	rjmp	.-90     	; 0xd1a <__stack+0x41b>
     d74:	0e ef       	ldi	r16, 0xFE	; 254
     d76:	11 e0       	ldi	r17, 0x01	; 1
     d78:	d5 cf       	rjmp	.-86     	; 0xd24 <__stack+0x425>
     d7a:	91 10       	cpse	r9, r1
     d7c:	80 52       	subi	r24, 0x20	; 32
     d7e:	b7 01       	movw	r22, r14
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	0e 94 fc 07 	call	0xff8	; 0xff8 <fputc>
     d86:	0f 5f       	subi	r16, 0xFF	; 255
     d88:	1f 4f       	sbci	r17, 0xFF	; 255
     d8a:	cf cf       	rjmp	.-98     	; 0xd2a <__stack+0x42b>
     d8c:	23 e0       	ldi	r18, 0x03	; 3
     d8e:	25 15       	cp	r18, r5
     d90:	10 f4       	brcc	.+4      	; 0xd96 <__stack+0x497>
     d92:	83 e0       	ldi	r24, 0x03	; 3
     d94:	bd cf       	rjmp	.-134    	; 0xd10 <__stack+0x411>
     d96:	51 2c       	mov	r5, r1
     d98:	c0 cf       	rjmp	.-128    	; 0xd1a <__stack+0x41b>
     d9a:	60 96       	adiw	r28, 0x10	; 16
     d9c:	e2 e1       	ldi	r30, 0x12	; 18
     d9e:	0c 94 f3 06 	jmp	0xde6	; 0xde6 <__epilogue_restores__>

00000da2 <__tablejump2__>:
     da2:	ee 0f       	add	r30, r30
     da4:	ff 1f       	adc	r31, r31
     da6:	05 90       	lpm	r0, Z+
     da8:	f4 91       	lpm	r31, Z
     daa:	e0 2d       	mov	r30, r0
     dac:	09 94       	ijmp

00000dae <__prologue_saves__>:
     dae:	2f 92       	push	r2
     db0:	3f 92       	push	r3
     db2:	4f 92       	push	r4
     db4:	5f 92       	push	r5
     db6:	6f 92       	push	r6
     db8:	7f 92       	push	r7
     dba:	8f 92       	push	r8
     dbc:	9f 92       	push	r9
     dbe:	af 92       	push	r10
     dc0:	bf 92       	push	r11
     dc2:	cf 92       	push	r12
     dc4:	df 92       	push	r13
     dc6:	ef 92       	push	r14
     dc8:	ff 92       	push	r15
     dca:	0f 93       	push	r16
     dcc:	1f 93       	push	r17
     dce:	cf 93       	push	r28
     dd0:	df 93       	push	r29
     dd2:	cd b7       	in	r28, 0x3d	; 61
     dd4:	de b7       	in	r29, 0x3e	; 62
     dd6:	ca 1b       	sub	r28, r26
     dd8:	db 0b       	sbc	r29, r27
     dda:	0f b6       	in	r0, 0x3f	; 63
     ddc:	f8 94       	cli
     dde:	de bf       	out	0x3e, r29	; 62
     de0:	0f be       	out	0x3f, r0	; 63
     de2:	cd bf       	out	0x3d, r28	; 61
     de4:	09 94       	ijmp

00000de6 <__epilogue_restores__>:
     de6:	2a 88       	ldd	r2, Y+18	; 0x12
     de8:	39 88       	ldd	r3, Y+17	; 0x11
     dea:	48 88       	ldd	r4, Y+16	; 0x10
     dec:	5f 84       	ldd	r5, Y+15	; 0x0f
     dee:	6e 84       	ldd	r6, Y+14	; 0x0e
     df0:	7d 84       	ldd	r7, Y+13	; 0x0d
     df2:	8c 84       	ldd	r8, Y+12	; 0x0c
     df4:	9b 84       	ldd	r9, Y+11	; 0x0b
     df6:	aa 84       	ldd	r10, Y+10	; 0x0a
     df8:	b9 84       	ldd	r11, Y+9	; 0x09
     dfa:	c8 84       	ldd	r12, Y+8	; 0x08
     dfc:	df 80       	ldd	r13, Y+7	; 0x07
     dfe:	ee 80       	ldd	r14, Y+6	; 0x06
     e00:	fd 80       	ldd	r15, Y+5	; 0x05
     e02:	0c 81       	ldd	r16, Y+4	; 0x04
     e04:	1b 81       	ldd	r17, Y+3	; 0x03
     e06:	aa 81       	ldd	r26, Y+2	; 0x02
     e08:	b9 81       	ldd	r27, Y+1	; 0x01
     e0a:	ce 0f       	add	r28, r30
     e0c:	d1 1d       	adc	r29, r1
     e0e:	0f b6       	in	r0, 0x3f	; 63
     e10:	f8 94       	cli
     e12:	de bf       	out	0x3e, r29	; 62
     e14:	0f be       	out	0x3f, r0	; 63
     e16:	cd bf       	out	0x3d, r28	; 61
     e18:	ed 01       	movw	r28, r26
     e1a:	08 95       	ret

00000e1c <__ftoa_engine>:
     e1c:	28 30       	cpi	r18, 0x08	; 8
     e1e:	08 f0       	brcs	.+2      	; 0xe22 <__ftoa_engine+0x6>
     e20:	27 e0       	ldi	r18, 0x07	; 7
     e22:	33 27       	eor	r19, r19
     e24:	da 01       	movw	r26, r20
     e26:	99 0f       	add	r25, r25
     e28:	31 1d       	adc	r19, r1
     e2a:	87 fd       	sbrc	r24, 7
     e2c:	91 60       	ori	r25, 0x01	; 1
     e2e:	00 96       	adiw	r24, 0x00	; 0
     e30:	61 05       	cpc	r22, r1
     e32:	71 05       	cpc	r23, r1
     e34:	39 f4       	brne	.+14     	; 0xe44 <__ftoa_engine+0x28>
     e36:	32 60       	ori	r19, 0x02	; 2
     e38:	2e 5f       	subi	r18, 0xFE	; 254
     e3a:	3d 93       	st	X+, r19
     e3c:	30 e3       	ldi	r19, 0x30	; 48
     e3e:	2a 95       	dec	r18
     e40:	e1 f7       	brne	.-8      	; 0xe3a <__ftoa_engine+0x1e>
     e42:	08 95       	ret
     e44:	9f 3f       	cpi	r25, 0xFF	; 255
     e46:	30 f0       	brcs	.+12     	; 0xe54 <__ftoa_engine+0x38>
     e48:	80 38       	cpi	r24, 0x80	; 128
     e4a:	71 05       	cpc	r23, r1
     e4c:	61 05       	cpc	r22, r1
     e4e:	09 f0       	breq	.+2      	; 0xe52 <__ftoa_engine+0x36>
     e50:	3c 5f       	subi	r19, 0xFC	; 252
     e52:	3c 5f       	subi	r19, 0xFC	; 252
     e54:	3d 93       	st	X+, r19
     e56:	91 30       	cpi	r25, 0x01	; 1
     e58:	08 f0       	brcs	.+2      	; 0xe5c <__ftoa_engine+0x40>
     e5a:	80 68       	ori	r24, 0x80	; 128
     e5c:	91 1d       	adc	r25, r1
     e5e:	df 93       	push	r29
     e60:	cf 93       	push	r28
     e62:	1f 93       	push	r17
     e64:	0f 93       	push	r16
     e66:	ff 92       	push	r15
     e68:	ef 92       	push	r14
     e6a:	19 2f       	mov	r17, r25
     e6c:	98 7f       	andi	r25, 0xF8	; 248
     e6e:	96 95       	lsr	r25
     e70:	e9 2f       	mov	r30, r25
     e72:	96 95       	lsr	r25
     e74:	96 95       	lsr	r25
     e76:	e9 0f       	add	r30, r25
     e78:	ff 27       	eor	r31, r31
     e7a:	e4 5a       	subi	r30, 0xA4	; 164
     e7c:	fd 4f       	sbci	r31, 0xFD	; 253
     e7e:	99 27       	eor	r25, r25
     e80:	33 27       	eor	r19, r19
     e82:	ee 24       	eor	r14, r14
     e84:	ff 24       	eor	r15, r15
     e86:	a7 01       	movw	r20, r14
     e88:	e7 01       	movw	r28, r14
     e8a:	05 90       	lpm	r0, Z+
     e8c:	08 94       	sec
     e8e:	07 94       	ror	r0
     e90:	28 f4       	brcc	.+10     	; 0xe9c <__ftoa_engine+0x80>
     e92:	36 0f       	add	r19, r22
     e94:	e7 1e       	adc	r14, r23
     e96:	f8 1e       	adc	r15, r24
     e98:	49 1f       	adc	r20, r25
     e9a:	51 1d       	adc	r21, r1
     e9c:	66 0f       	add	r22, r22
     e9e:	77 1f       	adc	r23, r23
     ea0:	88 1f       	adc	r24, r24
     ea2:	99 1f       	adc	r25, r25
     ea4:	06 94       	lsr	r0
     ea6:	a1 f7       	brne	.-24     	; 0xe90 <__ftoa_engine+0x74>
     ea8:	05 90       	lpm	r0, Z+
     eaa:	07 94       	ror	r0
     eac:	28 f4       	brcc	.+10     	; 0xeb8 <__ftoa_engine+0x9c>
     eae:	e7 0e       	add	r14, r23
     eb0:	f8 1e       	adc	r15, r24
     eb2:	49 1f       	adc	r20, r25
     eb4:	56 1f       	adc	r21, r22
     eb6:	c1 1d       	adc	r28, r1
     eb8:	77 0f       	add	r23, r23
     eba:	88 1f       	adc	r24, r24
     ebc:	99 1f       	adc	r25, r25
     ebe:	66 1f       	adc	r22, r22
     ec0:	06 94       	lsr	r0
     ec2:	a1 f7       	brne	.-24     	; 0xeac <__ftoa_engine+0x90>
     ec4:	05 90       	lpm	r0, Z+
     ec6:	07 94       	ror	r0
     ec8:	28 f4       	brcc	.+10     	; 0xed4 <__ftoa_engine+0xb8>
     eca:	f8 0e       	add	r15, r24
     ecc:	49 1f       	adc	r20, r25
     ece:	56 1f       	adc	r21, r22
     ed0:	c7 1f       	adc	r28, r23
     ed2:	d1 1d       	adc	r29, r1
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	66 1f       	adc	r22, r22
     eda:	77 1f       	adc	r23, r23
     edc:	06 94       	lsr	r0
     ede:	a1 f7       	brne	.-24     	; 0xec8 <__ftoa_engine+0xac>
     ee0:	05 90       	lpm	r0, Z+
     ee2:	07 94       	ror	r0
     ee4:	20 f4       	brcc	.+8      	; 0xeee <__ftoa_engine+0xd2>
     ee6:	49 0f       	add	r20, r25
     ee8:	56 1f       	adc	r21, r22
     eea:	c7 1f       	adc	r28, r23
     eec:	d8 1f       	adc	r29, r24
     eee:	99 0f       	add	r25, r25
     ef0:	66 1f       	adc	r22, r22
     ef2:	77 1f       	adc	r23, r23
     ef4:	88 1f       	adc	r24, r24
     ef6:	06 94       	lsr	r0
     ef8:	a9 f7       	brne	.-22     	; 0xee4 <__ftoa_engine+0xc8>
     efa:	84 91       	lpm	r24, Z
     efc:	10 95       	com	r17
     efe:	17 70       	andi	r17, 0x07	; 7
     f00:	41 f0       	breq	.+16     	; 0xf12 <__ftoa_engine+0xf6>
     f02:	d6 95       	lsr	r29
     f04:	c7 95       	ror	r28
     f06:	57 95       	ror	r21
     f08:	47 95       	ror	r20
     f0a:	f7 94       	ror	r15
     f0c:	e7 94       	ror	r14
     f0e:	1a 95       	dec	r17
     f10:	c1 f7       	brne	.-16     	; 0xf02 <__ftoa_engine+0xe6>
     f12:	e2 e0       	ldi	r30, 0x02	; 2
     f14:	f2 e0       	ldi	r31, 0x02	; 2
     f16:	68 94       	set
     f18:	15 90       	lpm	r1, Z+
     f1a:	15 91       	lpm	r17, Z+
     f1c:	35 91       	lpm	r19, Z+
     f1e:	65 91       	lpm	r22, Z+
     f20:	95 91       	lpm	r25, Z+
     f22:	05 90       	lpm	r0, Z+
     f24:	7f e2       	ldi	r23, 0x2F	; 47
     f26:	73 95       	inc	r23
     f28:	e1 18       	sub	r14, r1
     f2a:	f1 0a       	sbc	r15, r17
     f2c:	43 0b       	sbc	r20, r19
     f2e:	56 0b       	sbc	r21, r22
     f30:	c9 0b       	sbc	r28, r25
     f32:	d0 09       	sbc	r29, r0
     f34:	c0 f7       	brcc	.-16     	; 0xf26 <__ftoa_engine+0x10a>
     f36:	e1 0c       	add	r14, r1
     f38:	f1 1e       	adc	r15, r17
     f3a:	43 1f       	adc	r20, r19
     f3c:	56 1f       	adc	r21, r22
     f3e:	c9 1f       	adc	r28, r25
     f40:	d0 1d       	adc	r29, r0
     f42:	7e f4       	brtc	.+30     	; 0xf62 <__ftoa_engine+0x146>
     f44:	70 33       	cpi	r23, 0x30	; 48
     f46:	11 f4       	brne	.+4      	; 0xf4c <__ftoa_engine+0x130>
     f48:	8a 95       	dec	r24
     f4a:	e6 cf       	rjmp	.-52     	; 0xf18 <__ftoa_engine+0xfc>
     f4c:	e8 94       	clt
     f4e:	01 50       	subi	r16, 0x01	; 1
     f50:	30 f0       	brcs	.+12     	; 0xf5e <__ftoa_engine+0x142>
     f52:	08 0f       	add	r16, r24
     f54:	0a f4       	brpl	.+2      	; 0xf58 <__ftoa_engine+0x13c>
     f56:	00 27       	eor	r16, r16
     f58:	02 17       	cp	r16, r18
     f5a:	08 f4       	brcc	.+2      	; 0xf5e <__ftoa_engine+0x142>
     f5c:	20 2f       	mov	r18, r16
     f5e:	23 95       	inc	r18
     f60:	02 2f       	mov	r16, r18
     f62:	7a 33       	cpi	r23, 0x3A	; 58
     f64:	28 f0       	brcs	.+10     	; 0xf70 <__ftoa_engine+0x154>
     f66:	79 e3       	ldi	r23, 0x39	; 57
     f68:	7d 93       	st	X+, r23
     f6a:	2a 95       	dec	r18
     f6c:	e9 f7       	brne	.-6      	; 0xf68 <__ftoa_engine+0x14c>
     f6e:	10 c0       	rjmp	.+32     	; 0xf90 <__ftoa_engine+0x174>
     f70:	7d 93       	st	X+, r23
     f72:	2a 95       	dec	r18
     f74:	89 f6       	brne	.-94     	; 0xf18 <__ftoa_engine+0xfc>
     f76:	06 94       	lsr	r0
     f78:	97 95       	ror	r25
     f7a:	67 95       	ror	r22
     f7c:	37 95       	ror	r19
     f7e:	17 95       	ror	r17
     f80:	17 94       	ror	r1
     f82:	e1 18       	sub	r14, r1
     f84:	f1 0a       	sbc	r15, r17
     f86:	43 0b       	sbc	r20, r19
     f88:	56 0b       	sbc	r21, r22
     f8a:	c9 0b       	sbc	r28, r25
     f8c:	d0 09       	sbc	r29, r0
     f8e:	98 f0       	brcs	.+38     	; 0xfb6 <__ftoa_engine+0x19a>
     f90:	23 95       	inc	r18
     f92:	7e 91       	ld	r23, -X
     f94:	73 95       	inc	r23
     f96:	7a 33       	cpi	r23, 0x3A	; 58
     f98:	08 f0       	brcs	.+2      	; 0xf9c <__ftoa_engine+0x180>
     f9a:	70 e3       	ldi	r23, 0x30	; 48
     f9c:	7c 93       	st	X, r23
     f9e:	20 13       	cpse	r18, r16
     fa0:	b8 f7       	brcc	.-18     	; 0xf90 <__ftoa_engine+0x174>
     fa2:	7e 91       	ld	r23, -X
     fa4:	70 61       	ori	r23, 0x10	; 16
     fa6:	7d 93       	st	X+, r23
     fa8:	30 f0       	brcs	.+12     	; 0xfb6 <__ftoa_engine+0x19a>
     faa:	83 95       	inc	r24
     fac:	71 e3       	ldi	r23, 0x31	; 49
     fae:	7d 93       	st	X+, r23
     fb0:	70 e3       	ldi	r23, 0x30	; 48
     fb2:	2a 95       	dec	r18
     fb4:	e1 f7       	brne	.-8      	; 0xfae <__ftoa_engine+0x192>
     fb6:	11 24       	eor	r1, r1
     fb8:	ef 90       	pop	r14
     fba:	ff 90       	pop	r15
     fbc:	0f 91       	pop	r16
     fbe:	1f 91       	pop	r17
     fc0:	cf 91       	pop	r28
     fc2:	df 91       	pop	r29
     fc4:	99 27       	eor	r25, r25
     fc6:	87 fd       	sbrc	r24, 7
     fc8:	90 95       	com	r25
     fca:	08 95       	ret

00000fcc <strnlen_P>:
     fcc:	fc 01       	movw	r30, r24
     fce:	05 90       	lpm	r0, Z+
     fd0:	61 50       	subi	r22, 0x01	; 1
     fd2:	70 40       	sbci	r23, 0x00	; 0
     fd4:	01 10       	cpse	r0, r1
     fd6:	d8 f7       	brcc	.-10     	; 0xfce <strnlen_P+0x2>
     fd8:	80 95       	com	r24
     fda:	90 95       	com	r25
     fdc:	8e 0f       	add	r24, r30
     fde:	9f 1f       	adc	r25, r31
     fe0:	08 95       	ret

00000fe2 <strnlen>:
     fe2:	fc 01       	movw	r30, r24
     fe4:	61 50       	subi	r22, 0x01	; 1
     fe6:	70 40       	sbci	r23, 0x00	; 0
     fe8:	01 90       	ld	r0, Z+
     fea:	01 10       	cpse	r0, r1
     fec:	d8 f7       	brcc	.-10     	; 0xfe4 <strnlen+0x2>
     fee:	80 95       	com	r24
     ff0:	90 95       	com	r25
     ff2:	8e 0f       	add	r24, r30
     ff4:	9f 1f       	adc	r25, r31
     ff6:	08 95       	ret

00000ff8 <fputc>:
     ff8:	0f 93       	push	r16
     ffa:	1f 93       	push	r17
     ffc:	cf 93       	push	r28
     ffe:	df 93       	push	r29
    1000:	fb 01       	movw	r30, r22
    1002:	23 81       	ldd	r18, Z+3	; 0x03
    1004:	21 fd       	sbrc	r18, 1
    1006:	03 c0       	rjmp	.+6      	; 0x100e <fputc+0x16>
    1008:	8f ef       	ldi	r24, 0xFF	; 255
    100a:	9f ef       	ldi	r25, 0xFF	; 255
    100c:	2c c0       	rjmp	.+88     	; 0x1066 <fputc+0x6e>
    100e:	22 ff       	sbrs	r18, 2
    1010:	16 c0       	rjmp	.+44     	; 0x103e <fputc+0x46>
    1012:	46 81       	ldd	r20, Z+6	; 0x06
    1014:	57 81       	ldd	r21, Z+7	; 0x07
    1016:	24 81       	ldd	r18, Z+4	; 0x04
    1018:	35 81       	ldd	r19, Z+5	; 0x05
    101a:	42 17       	cp	r20, r18
    101c:	53 07       	cpc	r21, r19
    101e:	44 f4       	brge	.+16     	; 0x1030 <fputc+0x38>
    1020:	a0 81       	ld	r26, Z
    1022:	b1 81       	ldd	r27, Z+1	; 0x01
    1024:	9d 01       	movw	r18, r26
    1026:	2f 5f       	subi	r18, 0xFF	; 255
    1028:	3f 4f       	sbci	r19, 0xFF	; 255
    102a:	31 83       	std	Z+1, r19	; 0x01
    102c:	20 83       	st	Z, r18
    102e:	8c 93       	st	X, r24
    1030:	26 81       	ldd	r18, Z+6	; 0x06
    1032:	37 81       	ldd	r19, Z+7	; 0x07
    1034:	2f 5f       	subi	r18, 0xFF	; 255
    1036:	3f 4f       	sbci	r19, 0xFF	; 255
    1038:	37 83       	std	Z+7, r19	; 0x07
    103a:	26 83       	std	Z+6, r18	; 0x06
    103c:	14 c0       	rjmp	.+40     	; 0x1066 <fputc+0x6e>
    103e:	8b 01       	movw	r16, r22
    1040:	ec 01       	movw	r28, r24
    1042:	fb 01       	movw	r30, r22
    1044:	00 84       	ldd	r0, Z+8	; 0x08
    1046:	f1 85       	ldd	r31, Z+9	; 0x09
    1048:	e0 2d       	mov	r30, r0
    104a:	09 95       	icall
    104c:	89 2b       	or	r24, r25
    104e:	e1 f6       	brne	.-72     	; 0x1008 <fputc+0x10>
    1050:	d8 01       	movw	r26, r16
    1052:	16 96       	adiw	r26, 0x06	; 6
    1054:	8d 91       	ld	r24, X+
    1056:	9c 91       	ld	r25, X
    1058:	17 97       	sbiw	r26, 0x07	; 7
    105a:	01 96       	adiw	r24, 0x01	; 1
    105c:	17 96       	adiw	r26, 0x07	; 7
    105e:	9c 93       	st	X, r25
    1060:	8e 93       	st	-X, r24
    1062:	16 97       	sbiw	r26, 0x06	; 6
    1064:	ce 01       	movw	r24, r28
    1066:	df 91       	pop	r29
    1068:	cf 91       	pop	r28
    106a:	1f 91       	pop	r17
    106c:	0f 91       	pop	r16
    106e:	08 95       	ret

00001070 <__ultoa_invert>:
    1070:	fa 01       	movw	r30, r20
    1072:	aa 27       	eor	r26, r26
    1074:	28 30       	cpi	r18, 0x08	; 8
    1076:	51 f1       	breq	.+84     	; 0x10cc <__ultoa_invert+0x5c>
    1078:	20 31       	cpi	r18, 0x10	; 16
    107a:	81 f1       	breq	.+96     	; 0x10dc <__ultoa_invert+0x6c>
    107c:	e8 94       	clt
    107e:	6f 93       	push	r22
    1080:	6e 7f       	andi	r22, 0xFE	; 254
    1082:	6e 5f       	subi	r22, 0xFE	; 254
    1084:	7f 4f       	sbci	r23, 0xFF	; 255
    1086:	8f 4f       	sbci	r24, 0xFF	; 255
    1088:	9f 4f       	sbci	r25, 0xFF	; 255
    108a:	af 4f       	sbci	r26, 0xFF	; 255
    108c:	b1 e0       	ldi	r27, 0x01	; 1
    108e:	3e d0       	rcall	.+124    	; 0x110c <__ultoa_invert+0x9c>
    1090:	b4 e0       	ldi	r27, 0x04	; 4
    1092:	3c d0       	rcall	.+120    	; 0x110c <__ultoa_invert+0x9c>
    1094:	67 0f       	add	r22, r23
    1096:	78 1f       	adc	r23, r24
    1098:	89 1f       	adc	r24, r25
    109a:	9a 1f       	adc	r25, r26
    109c:	a1 1d       	adc	r26, r1
    109e:	68 0f       	add	r22, r24
    10a0:	79 1f       	adc	r23, r25
    10a2:	8a 1f       	adc	r24, r26
    10a4:	91 1d       	adc	r25, r1
    10a6:	a1 1d       	adc	r26, r1
    10a8:	6a 0f       	add	r22, r26
    10aa:	71 1d       	adc	r23, r1
    10ac:	81 1d       	adc	r24, r1
    10ae:	91 1d       	adc	r25, r1
    10b0:	a1 1d       	adc	r26, r1
    10b2:	20 d0       	rcall	.+64     	; 0x10f4 <__ultoa_invert+0x84>
    10b4:	09 f4       	brne	.+2      	; 0x10b8 <__ultoa_invert+0x48>
    10b6:	68 94       	set
    10b8:	3f 91       	pop	r19
    10ba:	2a e0       	ldi	r18, 0x0A	; 10
    10bc:	26 9f       	mul	r18, r22
    10be:	11 24       	eor	r1, r1
    10c0:	30 19       	sub	r19, r0
    10c2:	30 5d       	subi	r19, 0xD0	; 208
    10c4:	31 93       	st	Z+, r19
    10c6:	de f6       	brtc	.-74     	; 0x107e <__ultoa_invert+0xe>
    10c8:	cf 01       	movw	r24, r30
    10ca:	08 95       	ret
    10cc:	46 2f       	mov	r20, r22
    10ce:	47 70       	andi	r20, 0x07	; 7
    10d0:	40 5d       	subi	r20, 0xD0	; 208
    10d2:	41 93       	st	Z+, r20
    10d4:	b3 e0       	ldi	r27, 0x03	; 3
    10d6:	0f d0       	rcall	.+30     	; 0x10f6 <__ultoa_invert+0x86>
    10d8:	c9 f7       	brne	.-14     	; 0x10cc <__ultoa_invert+0x5c>
    10da:	f6 cf       	rjmp	.-20     	; 0x10c8 <__ultoa_invert+0x58>
    10dc:	46 2f       	mov	r20, r22
    10de:	4f 70       	andi	r20, 0x0F	; 15
    10e0:	40 5d       	subi	r20, 0xD0	; 208
    10e2:	4a 33       	cpi	r20, 0x3A	; 58
    10e4:	18 f0       	brcs	.+6      	; 0x10ec <__ultoa_invert+0x7c>
    10e6:	49 5d       	subi	r20, 0xD9	; 217
    10e8:	31 fd       	sbrc	r19, 1
    10ea:	40 52       	subi	r20, 0x20	; 32
    10ec:	41 93       	st	Z+, r20
    10ee:	02 d0       	rcall	.+4      	; 0x10f4 <__ultoa_invert+0x84>
    10f0:	a9 f7       	brne	.-22     	; 0x10dc <__ultoa_invert+0x6c>
    10f2:	ea cf       	rjmp	.-44     	; 0x10c8 <__ultoa_invert+0x58>
    10f4:	b4 e0       	ldi	r27, 0x04	; 4
    10f6:	a6 95       	lsr	r26
    10f8:	97 95       	ror	r25
    10fa:	87 95       	ror	r24
    10fc:	77 95       	ror	r23
    10fe:	67 95       	ror	r22
    1100:	ba 95       	dec	r27
    1102:	c9 f7       	brne	.-14     	; 0x10f6 <__ultoa_invert+0x86>
    1104:	00 97       	sbiw	r24, 0x00	; 0
    1106:	61 05       	cpc	r22, r1
    1108:	71 05       	cpc	r23, r1
    110a:	08 95       	ret
    110c:	9b 01       	movw	r18, r22
    110e:	ac 01       	movw	r20, r24
    1110:	0a 2e       	mov	r0, r26
    1112:	06 94       	lsr	r0
    1114:	57 95       	ror	r21
    1116:	47 95       	ror	r20
    1118:	37 95       	ror	r19
    111a:	27 95       	ror	r18
    111c:	ba 95       	dec	r27
    111e:	c9 f7       	brne	.-14     	; 0x1112 <__ultoa_invert+0xa2>
    1120:	62 0f       	add	r22, r18
    1122:	73 1f       	adc	r23, r19
    1124:	84 1f       	adc	r24, r20
    1126:	95 1f       	adc	r25, r21
    1128:	a0 1d       	adc	r26, r0
    112a:	08 95       	ret

0000112c <_exit>:
    112c:	f8 94       	cli

0000112e <__stop_program>:
    112e:	ff cf       	rjmp	.-2      	; 0x112e <__stop_program>
