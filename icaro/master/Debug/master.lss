
master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000018e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001870  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000105  00800100  00800100  000018e4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000018e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001940  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000238  00000000  00000000  00001980  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002501  00000000  00000000  00001bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d47  00000000  00000000  000040b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013cd  00000000  00000000  00004e00  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007bc  00000000  00000000  000061d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009ec  00000000  00000000  0000698c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002411  00000000  00000000  00007378  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000218  00000000  00000000  00009789  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__ctors_end>
       4:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
       8:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
       c:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      10:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      14:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      18:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      1c:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      20:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      24:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      28:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      2c:	0c 94 f8 01 	jmp	0x3f0	; 0x3f0 <__vector_11>
      30:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      34:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      38:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      3c:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      40:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      44:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      48:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <__vector_18>
      4c:	0c 94 8f 06 	jmp	0xd1e	; 0xd1e <__vector_19>
      50:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      54:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      58:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      5c:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      60:	0c 94 43 05 	jmp	0xa86	; 0xa86 <__vector_24>
      64:	0c 94 90 01 	jmp	0x320	; 0x320 <__bad_interrupt>
      68:	4f 06       	cpc	r4, r31
      6a:	53 06       	cpc	r5, r19
      6c:	53 06       	cpc	r5, r19
      6e:	53 06       	cpc	r5, r19
      70:	53 06       	cpc	r5, r19
      72:	53 06       	cpc	r5, r19
      74:	53 06       	cpc	r5, r19
      76:	53 06       	cpc	r5, r19
      78:	63 05       	cpc	r22, r3
      7a:	53 06       	cpc	r5, r19
      7c:	53 06       	cpc	r5, r19
      7e:	53 06       	cpc	r5, r19
      80:	53 06       	cpc	r5, r19
      82:	53 06       	cpc	r5, r19
      84:	53 06       	cpc	r5, r19
      86:	53 06       	cpc	r5, r19
      88:	63 05       	cpc	r22, r3
      8a:	53 06       	cpc	r5, r19
      8c:	53 06       	cpc	r5, r19
      8e:	53 06       	cpc	r5, r19
      90:	53 06       	cpc	r5, r19
      92:	53 06       	cpc	r5, r19
      94:	53 06       	cpc	r5, r19
      96:	53 06       	cpc	r5, r19
      98:	6b 05       	cpc	r22, r11
      9a:	53 06       	cpc	r5, r19
      9c:	53 06       	cpc	r5, r19
      9e:	53 06       	cpc	r5, r19
      a0:	53 06       	cpc	r5, r19
      a2:	53 06       	cpc	r5, r19
      a4:	53 06       	cpc	r5, r19
      a6:	53 06       	cpc	r5, r19
      a8:	91 05       	cpc	r25, r1
      aa:	53 06       	cpc	r5, r19
      ac:	53 06       	cpc	r5, r19
      ae:	53 06       	cpc	r5, r19
      b0:	53 06       	cpc	r5, r19
      b2:	53 06       	cpc	r5, r19
      b4:	53 06       	cpc	r5, r19
      b6:	53 06       	cpc	r5, r19
      b8:	6b 05       	cpc	r22, r11
      ba:	53 06       	cpc	r5, r19
      bc:	53 06       	cpc	r5, r19
      be:	53 06       	cpc	r5, r19
      c0:	53 06       	cpc	r5, r19
      c2:	53 06       	cpc	r5, r19
      c4:	53 06       	cpc	r5, r19
      c6:	53 06       	cpc	r5, r19
      c8:	97 05       	cpc	r25, r7
      ca:	53 06       	cpc	r5, r19
      cc:	53 06       	cpc	r5, r19
      ce:	53 06       	cpc	r5, r19
      d0:	53 06       	cpc	r5, r19
      d2:	53 06       	cpc	r5, r19
      d4:	53 06       	cpc	r5, r19
      d6:	53 06       	cpc	r5, r19
      d8:	9d 05       	cpc	r25, r13
      da:	53 06       	cpc	r5, r19
      dc:	53 06       	cpc	r5, r19
      de:	53 06       	cpc	r5, r19
      e0:	53 06       	cpc	r5, r19
      e2:	53 06       	cpc	r5, r19
      e4:	53 06       	cpc	r5, r19
      e6:	53 06       	cpc	r5, r19
      e8:	af 05       	cpc	r26, r15
      ea:	53 06       	cpc	r5, r19
      ec:	53 06       	cpc	r5, r19
      ee:	53 06       	cpc	r5, r19
      f0:	53 06       	cpc	r5, r19
      f2:	53 06       	cpc	r5, r19
      f4:	53 06       	cpc	r5, r19
      f6:	53 06       	cpc	r5, r19
      f8:	d9 05       	cpc	r29, r9
      fa:	53 06       	cpc	r5, r19
      fc:	53 06       	cpc	r5, r19
      fe:	53 06       	cpc	r5, r19
     100:	53 06       	cpc	r5, r19
     102:	53 06       	cpc	r5, r19
     104:	53 06       	cpc	r5, r19
     106:	53 06       	cpc	r5, r19
     108:	a3 05       	cpc	r26, r3
     10a:	53 06       	cpc	r5, r19
     10c:	53 06       	cpc	r5, r19
     10e:	53 06       	cpc	r5, r19
     110:	53 06       	cpc	r5, r19
     112:	53 06       	cpc	r5, r19
     114:	53 06       	cpc	r5, r19
     116:	53 06       	cpc	r5, r19
     118:	bd 05       	cpc	r27, r13
     11a:	53 06       	cpc	r5, r19
     11c:	53 06       	cpc	r5, r19
     11e:	53 06       	cpc	r5, r19
     120:	53 06       	cpc	r5, r19
     122:	53 06       	cpc	r5, r19
     124:	53 06       	cpc	r5, r19
     126:	53 06       	cpc	r5, r19
     128:	dc 05       	cpc	r29, r12
     12a:	53 06       	cpc	r5, r19
     12c:	53 06       	cpc	r5, r19
     12e:	53 06       	cpc	r5, r19
     130:	53 06       	cpc	r5, r19
     132:	53 06       	cpc	r5, r19
     134:	53 06       	cpc	r5, r19
     136:	53 06       	cpc	r5, r19
     138:	dc 05       	cpc	r29, r12
     13a:	53 06       	cpc	r5, r19
     13c:	53 06       	cpc	r5, r19
     13e:	53 06       	cpc	r5, r19
     140:	53 06       	cpc	r5, r19
     142:	53 06       	cpc	r5, r19
     144:	53 06       	cpc	r5, r19
     146:	53 06       	cpc	r5, r19
     148:	dc 05       	cpc	r29, r12
     14a:	53 06       	cpc	r5, r19
     14c:	53 06       	cpc	r5, r19
     14e:	53 06       	cpc	r5, r19
     150:	53 06       	cpc	r5, r19
     152:	53 06       	cpc	r5, r19
     154:	53 06       	cpc	r5, r19
     156:	53 06       	cpc	r5, r19
     158:	dc 05       	cpc	r29, r12
     15a:	53 06       	cpc	r5, r19
     15c:	53 06       	cpc	r5, r19
     15e:	53 06       	cpc	r5, r19
     160:	53 06       	cpc	r5, r19
     162:	53 06       	cpc	r5, r19
     164:	53 06       	cpc	r5, r19
     166:	53 06       	cpc	r5, r19
     168:	e5 05       	cpc	r30, r5
     16a:	53 06       	cpc	r5, r19
     16c:	53 06       	cpc	r5, r19
     16e:	53 06       	cpc	r5, r19
     170:	53 06       	cpc	r5, r19
     172:	53 06       	cpc	r5, r19
     174:	53 06       	cpc	r5, r19
     176:	53 06       	cpc	r5, r19
     178:	16 06       	cpc	r1, r22
     17a:	53 06       	cpc	r5, r19
     17c:	53 06       	cpc	r5, r19
     17e:	53 06       	cpc	r5, r19
     180:	53 06       	cpc	r5, r19
     182:	53 06       	cpc	r5, r19
     184:	53 06       	cpc	r5, r19
     186:	53 06       	cpc	r5, r19
     188:	e5 05       	cpc	r30, r5
     18a:	53 06       	cpc	r5, r19
     18c:	53 06       	cpc	r5, r19
     18e:	53 06       	cpc	r5, r19
     190:	53 06       	cpc	r5, r19
     192:	53 06       	cpc	r5, r19
     194:	53 06       	cpc	r5, r19
     196:	53 06       	cpc	r5, r19
     198:	16 06       	cpc	r1, r22
     19a:	53 06       	cpc	r5, r19
     19c:	53 06       	cpc	r5, r19
     19e:	53 06       	cpc	r5, r19
     1a0:	53 06       	cpc	r5, r19
     1a2:	53 06       	cpc	r5, r19
     1a4:	53 06       	cpc	r5, r19
     1a6:	53 06       	cpc	r5, r19
     1a8:	fd 05       	cpc	r31, r13
     1aa:	53 06       	cpc	r5, r19
     1ac:	53 06       	cpc	r5, r19
     1ae:	53 06       	cpc	r5, r19
     1b0:	53 06       	cpc	r5, r19
     1b2:	53 06       	cpc	r5, r19
     1b4:	53 06       	cpc	r5, r19
     1b6:	53 06       	cpc	r5, r19
     1b8:	1a 06       	cpc	r1, r26
     1ba:	53 06       	cpc	r5, r19
     1bc:	53 06       	cpc	r5, r19
     1be:	53 06       	cpc	r5, r19
     1c0:	53 06       	cpc	r5, r19
     1c2:	53 06       	cpc	r5, r19
     1c4:	53 06       	cpc	r5, r19
     1c6:	53 06       	cpc	r5, r19
     1c8:	1a 06       	cpc	r1, r26
     1ca:	53 06       	cpc	r5, r19
     1cc:	53 06       	cpc	r5, r19
     1ce:	53 06       	cpc	r5, r19
     1d0:	53 06       	cpc	r5, r19
     1d2:	53 06       	cpc	r5, r19
     1d4:	53 06       	cpc	r5, r19
     1d6:	53 06       	cpc	r5, r19
     1d8:	2f 06       	cpc	r2, r31
     1da:	53 06       	cpc	r5, r19
     1dc:	53 06       	cpc	r5, r19
     1de:	53 06       	cpc	r5, r19
     1e0:	53 06       	cpc	r5, r19
     1e2:	53 06       	cpc	r5, r19
     1e4:	53 06       	cpc	r5, r19
     1e6:	53 06       	cpc	r5, r19
     1e8:	49 06       	cpc	r4, r25
     1ea:	53 06       	cpc	r5, r19
     1ec:	53 06       	cpc	r5, r19
     1ee:	53 06       	cpc	r5, r19
     1f0:	53 06       	cpc	r5, r19
     1f2:	53 06       	cpc	r5, r19
     1f4:	53 06       	cpc	r5, r19
     1f6:	53 06       	cpc	r5, r19
     1f8:	49 06       	cpc	r4, r25

000001fa <__trampolines_end>:
     1fa:	6e 61       	ori	r22, 0x1E	; 30
     1fc:	6e 00       	.word	0x006e	; ????

000001fe <__c.2332>:
     1fe:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     20e:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     21e:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     22e:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     23e:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     24e:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     25e:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     26e:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     27e:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     28e:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     29e:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     2ae:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     2be:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2ce:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2de:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     2ee:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000002fc <__ctors_end>:
     2fc:	11 24       	eor	r1, r1
     2fe:	1f be       	out	0x3f, r1	; 63
     300:	cf ef       	ldi	r28, 0xFF	; 255
     302:	d8 e0       	ldi	r29, 0x08	; 8
     304:	de bf       	out	0x3e, r29	; 62
     306:	cd bf       	out	0x3d, r28	; 61

00000308 <__do_clear_bss>:
     308:	22 e0       	ldi	r18, 0x02	; 2
     30a:	a0 e0       	ldi	r26, 0x00	; 0
     30c:	b1 e0       	ldi	r27, 0x01	; 1
     30e:	01 c0       	rjmp	.+2      	; 0x312 <.do_clear_bss_start>

00000310 <.do_clear_bss_loop>:
     310:	1d 92       	st	X+, r1

00000312 <.do_clear_bss_start>:
     312:	a5 30       	cpi	r26, 0x05	; 5
     314:	b2 07       	cpc	r27, r18
     316:	e1 f7       	brne	.-8      	; 0x310 <.do_clear_bss_loop>
     318:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <main>
     31c:	0c 94 36 0c 	jmp	0x186c	; 0x186c <_exit>

00000320 <__bad_interrupt>:
     320:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000324 <setup>:
#include "icarolib/twi/i2cdevlib.h"
#include "icarolib/uart/uart.h"
#include "icarolib/icaro_common.h"

void setup()
{
     324:	0f 93       	push	r16
     326:	1f 93       	push	r17
     328:	cf 93       	push	r28
     32a:	df 93       	push	r29
     32c:	cd b7       	in	r28, 0x3d	; 61
     32e:	de b7       	in	r29, 0x3e	; 62
     330:	2a 97       	sbiw	r28, 0x0a	; 10
     332:	0f b6       	in	r0, 0x3f	; 63
     334:	f8 94       	cli
     336:	de bf       	out	0x3e, r29	; 62
     338:	0f be       	out	0x3f, r0	; 63
     33a:	cd bf       	out	0x3d, r28	; 61
    DDRB |= (1 << PB5);
     33c:	25 9a       	sbi	0x04, 5	; 4
    init_millis(F_CPU);
     33e:	60 e0       	ldi	r22, 0x00	; 0
     340:	74 e2       	ldi	r23, 0x24	; 36
     342:	84 ef       	ldi	r24, 0xF4	; 244
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	0e 94 1d 02 	call	0x43a	; 0x43a <init_millis>
    wire_init();
     34a:	0e 94 79 02 	call	0x4f2	; 0x4f2 <wire_init>
    uart_init(UART_BAUD_SELECT(UART_BAUD_RATE, F_CPU));
     34e:	80 e1       	ldi	r24, 0x10	; 16
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	0e 94 b9 06 	call	0xd72	; 0xd72 <uart_init>
    sei();
     356:	78 94       	sei
    
    
    uint8_t values[10] = {0};
     358:	8e 01       	movw	r16, r28
     35a:	0f 5f       	subi	r16, 0xFF	; 255
     35c:	1f 4f       	sbci	r17, 0xFF	; 255
     35e:	8a e0       	ldi	r24, 0x0A	; 10
     360:	f8 01       	movw	r30, r16
     362:	11 92       	st	Z+, r1
     364:	8a 95       	dec	r24
     366:	e9 f7       	brne	.-6      	; 0x362 <setup+0x3e>
    i2c_read_byte(IMU_TWI_ADDRESS, IMU_STATUS_ADDRESS, values, I2CDEV_DEFAULT_READ_TIMEOUT);
     368:	28 ee       	ldi	r18, 0xE8	; 232
     36a:	33 e0       	ldi	r19, 0x03	; 3
     36c:	a8 01       	movw	r20, r16
     36e:	60 e0       	ldi	r22, 0x00	; 0
     370:	81 e0       	ldi	r24, 0x01	; 1
     372:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <i2c_read_byte>
    
    i2c_write_byte(IMU_TWI_ADDRESS, IMU_STATUS_ADDRESS, 10);
     376:	4a e0       	ldi	r20, 0x0A	; 10
     378:	60 e0       	ldi	r22, 0x00	; 0
     37a:	81 e0       	ldi	r24, 0x01	; 1
     37c:	0e 94 26 04 	call	0x84c	; 0x84c <i2c_write_byte>
    i2c_read_byte(IMU_TWI_ADDRESS, IMU_STATUS_ADDRESS, values, I2CDEV_DEFAULT_READ_TIMEOUT);
     380:	28 ee       	ldi	r18, 0xE8	; 232
     382:	33 e0       	ldi	r19, 0x03	; 3
     384:	a8 01       	movw	r20, r16
     386:	60 e0       	ldi	r22, 0x00	; 0
     388:	81 e0       	ldi	r24, 0x01	; 1
     38a:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <i2c_read_byte>
}
     38e:	2a 96       	adiw	r28, 0x0a	; 10
     390:	0f b6       	in	r0, 0x3f	; 63
     392:	f8 94       	cli
     394:	de bf       	out	0x3e, r29	; 62
     396:	0f be       	out	0x3f, r0	; 63
     398:	cd bf       	out	0x3d, r28	; 61
     39a:	df 91       	pop	r29
     39c:	cf 91       	pop	r28
     39e:	1f 91       	pop	r17
     3a0:	0f 91       	pop	r16
     3a2:	08 95       	ret

000003a4 <main>:
long last_time = 0;

int main(void)
{
    
    setup();
     3a4:	0e 94 92 01 	call	0x324	; 0x324 <setup>
    while(1)
    {
        long delta = millis() - last_time;
        if(delta > 1000)
        {
         PORTB ^= (1 << PB5);
     3a8:	c0 e2       	ldi	r28, 0x20	; 32
    
    setup();
    
    while(1)
    {
        long delta = millis() - last_time;
     3aa:	0e 94 36 02 	call	0x46c	; 0x46c <millis>
        if(delta > 1000)
     3ae:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     3b2:	10 91 01 01 	lds	r17, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     3b6:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     3ba:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     3be:	dc 01       	movw	r26, r24
     3c0:	cb 01       	movw	r24, r22
     3c2:	80 1b       	sub	r24, r16
     3c4:	91 0b       	sbc	r25, r17
     3c6:	a2 0b       	sbc	r26, r18
     3c8:	b3 0b       	sbc	r27, r19
     3ca:	89 3e       	cpi	r24, 0xE9	; 233
     3cc:	93 40       	sbci	r25, 0x03	; 3
     3ce:	a1 05       	cpc	r26, r1
     3d0:	b1 05       	cpc	r27, r1
     3d2:	5c f3       	brlt	.-42     	; 0x3aa <main+0x6>
        {
         PORTB ^= (1 << PB5);
     3d4:	85 b1       	in	r24, 0x05	; 5
     3d6:	8c 27       	eor	r24, r28
     3d8:	85 b9       	out	0x05, r24	; 5
         last_time = millis();
     3da:	0e 94 36 02 	call	0x46c	; 0x46c <millis>
     3de:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
     3e2:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     3e6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     3ea:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     3ee:	dd cf       	rjmp	.-70     	; 0x3aa <main+0x6>

000003f0 <__vector_11>:

volatile unsigned long timer1_millis;
//NOTE: A unsigned long holds values from 0 to 4,294,967,295 (2^32 - 1). It will roll over to 0 after reaching its maximum value.

ISR(TIMER1_COMPA_vect)
{
     3f0:	1f 92       	push	r1
     3f2:	0f 92       	push	r0
     3f4:	0f b6       	in	r0, 0x3f	; 63
     3f6:	0f 92       	push	r0
     3f8:	11 24       	eor	r1, r1
     3fa:	8f 93       	push	r24
     3fc:	9f 93       	push	r25
     3fe:	af 93       	push	r26
     400:	bf 93       	push	r27
	timer1_millis++;
     402:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <timer1_millis>
     406:	90 91 c2 01 	lds	r25, 0x01C2	; 0x8001c2 <timer1_millis+0x1>
     40a:	a0 91 c3 01 	lds	r26, 0x01C3	; 0x8001c3 <timer1_millis+0x2>
     40e:	b0 91 c4 01 	lds	r27, 0x01C4	; 0x8001c4 <timer1_millis+0x3>
     412:	01 96       	adiw	r24, 0x01	; 1
     414:	a1 1d       	adc	r26, r1
     416:	b1 1d       	adc	r27, r1
     418:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <timer1_millis>
     41c:	90 93 c2 01 	sts	0x01C2, r25	; 0x8001c2 <timer1_millis+0x1>
     420:	a0 93 c3 01 	sts	0x01C3, r26	; 0x8001c3 <timer1_millis+0x2>
     424:	b0 93 c4 01 	sts	0x01C4, r27	; 0x8001c4 <timer1_millis+0x3>
}
     428:	bf 91       	pop	r27
     42a:	af 91       	pop	r26
     42c:	9f 91       	pop	r25
     42e:	8f 91       	pop	r24
     430:	0f 90       	pop	r0
     432:	0f be       	out	0x3f, r0	; 63
     434:	0f 90       	pop	r0
     436:	1f 90       	pop	r1
     438:	18 95       	reti

0000043a <init_millis>:

void init_millis(unsigned long f_cpu)
{
	unsigned long ctc_match_overflow;
	
	ctc_match_overflow = ((f_cpu / 1000) / 8); //when timer1 is this value, 1ms has passed
     43a:	20 e4       	ldi	r18, 0x40	; 64
     43c:	3f e1       	ldi	r19, 0x1F	; 31
     43e:	40 e0       	ldi	r20, 0x00	; 0
     440:	50 e0       	ldi	r21, 0x00	; 0
     442:	0e 94 4f 0a 	call	0x149e	; 0x149e <__udivmodsi4>
	
	// (Set timer to clear when matching ctc_match_overflow) | (Set clock divisor to 8)
	TCCR1B |= (1 << WGM12) | (1 << CS11);
     446:	e1 e8       	ldi	r30, 0x81	; 129
     448:	f0 e0       	ldi	r31, 0x00	; 0
     44a:	80 81       	ld	r24, Z
     44c:	8a 60       	ori	r24, 0x0A	; 10
     44e:	80 83       	st	Z, r24
	
	// high byte first, then low byte
	OCR1AH = (ctc_match_overflow >> 8);
     450:	bb 27       	eor	r27, r27
     452:	a5 2f       	mov	r26, r21
     454:	94 2f       	mov	r25, r20
     456:	83 2f       	mov	r24, r19
     458:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
	OCR1AL = ctc_match_overflow;
     45c:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	
	// Enable the compare match interrupt
	TIMSK1 |= (1 << OCIE1A);
     460:	ef e6       	ldi	r30, 0x6F	; 111
     462:	f0 e0       	ldi	r31, 0x00	; 0
     464:	80 81       	ld	r24, Z
     466:	82 60       	ori	r24, 0x02	; 2
     468:	80 83       	st	Z, r24
     46a:	08 95       	ret

0000046c <millis>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     46c:	f8 94       	cli
{
	unsigned long millis_return;
	
	// Ensure this cannot be disrupted
	ATOMIC_BLOCK(ATOMIC_FORCEON) {
		millis_return = timer1_millis;
     46e:	60 91 c1 01 	lds	r22, 0x01C1	; 0x8001c1 <timer1_millis>
     472:	70 91 c2 01 	lds	r23, 0x01C2	; 0x8001c2 <timer1_millis+0x1>
     476:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <timer1_millis+0x2>
     47a:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <timer1_millis+0x3>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     47e:	78 94       	sei
	}
	return millis_return;
     480:	08 95       	ret

00000482 <wire_on_receive_service>:
        w &= mask;
        w >>= (bit_start - length + 1);
        *data = w;
    }
    return count;
}
     482:	cf 93       	push	r28
     484:	df 93       	push	r29
     486:	ec 01       	movw	r28, r24
     488:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <user_on_receive>
     48c:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <user_on_receive+0x1>
     490:	30 97       	sbiw	r30, 0x00	; 0
     492:	01 f1       	breq	.+64     	; 0x4d4 <wire_on_receive_service+0x52>
     494:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <rx_buffer_index>
     498:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <rx_buffer_length>
     49c:	98 17       	cp	r25, r24
     49e:	d0 f0       	brcs	.+52     	; 0x4d4 <wire_on_receive_service+0x52>
     4a0:	16 16       	cp	r1, r22
     4a2:	17 06       	cpc	r1, r23
     4a4:	8c f4       	brge	.+34     	; 0x4c8 <wire_on_receive_service+0x46>
     4a6:	20 e0       	ldi	r18, 0x00	; 0
     4a8:	30 e0       	ldi	r19, 0x00	; 0
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	de 01       	movw	r26, r28
     4ae:	a9 0f       	add	r26, r25
     4b0:	b1 1d       	adc	r27, r1
     4b2:	4c 91       	ld	r20, X
     4b4:	d9 01       	movw	r26, r18
     4b6:	ab 53       	subi	r26, 0x3B	; 59
     4b8:	be 4f       	sbci	r27, 0xFE	; 254
     4ba:	4c 93       	st	X, r20
     4bc:	9f 5f       	subi	r25, 0xFF	; 255
     4be:	29 2f       	mov	r18, r25
     4c0:	30 e0       	ldi	r19, 0x00	; 0
     4c2:	26 17       	cp	r18, r22
     4c4:	37 07       	cpc	r19, r23
     4c6:	94 f3       	brlt	.-28     	; 0x4ac <wire_on_receive_service+0x2a>
     4c8:	cb 01       	movw	r24, r22
     4ca:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <rx_buffer_index>
     4ce:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <rx_buffer_length>
     4d2:	09 95       	icall
     4d4:	df 91       	pop	r29
     4d6:	cf 91       	pop	r28
     4d8:	08 95       	ret

000004da <wire_on_request_service>:
     4da:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <user_on_request>
     4de:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <user_on_request+0x1>
     4e2:	30 97       	sbiw	r30, 0x00	; 0
     4e4:	29 f0       	breq	.+10     	; 0x4f0 <wire_on_request_service+0x16>
     4e6:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <tx_buffer_index>
     4ea:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <tx_buffer_length>
     4ee:	09 95       	icall
     4f0:	08 95       	ret

000004f2 <wire_init>:
     4f2:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <rx_buffer_index>
     4f6:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <rx_buffer_length>
     4fa:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <tx_buffer_index>
     4fe:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <tx_buffer_length>
     502:	0e 94 36 04 	call	0x86c	; 0x86c <twi_init>
     506:	8d e6       	ldi	r24, 0x6D	; 109
     508:	92 e0       	ldi	r25, 0x02	; 2
     50a:	0e 94 51 04 	call	0x8a2	; 0x8a2 <twi_attach_slave_tx_event>
     50e:	81 e4       	ldi	r24, 0x41	; 65
     510:	92 e0       	ldi	r25, 0x02	; 2
     512:	0e 94 4c 04 	call	0x898	; 0x898 <twi_attach_slave_rx_event>
     516:	08 95       	ret

00000518 <wire_begin_transmission>:
     518:	91 e0       	ldi	r25, 0x01	; 1
     51a:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <transmitting>
     51e:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <tx_address>
     522:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <tx_buffer_index>
     526:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <tx_buffer_length>
     52a:	08 95       	ret

0000052c <wire_end_transmission>:
     52c:	0f 93       	push	r16
     52e:	08 2f       	mov	r16, r24
     530:	21 e0       	ldi	r18, 0x01	; 1
     532:	40 91 05 01 	lds	r20, 0x0105	; 0x800105 <tx_buffer_length>
     536:	65 ee       	ldi	r22, 0xE5	; 229
     538:	71 e0       	ldi	r23, 0x01	; 1
     53a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <tx_address>
     53e:	0e 94 a8 04 	call	0x950	; 0x950 <twi_write>
     542:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <tx_buffer_index>
     546:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <tx_buffer_length>
     54a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <transmitting>
     54e:	0f 91       	pop	r16
     550:	08 95       	ret

00000552 <wire_write>:
     552:	cf 93       	push	r28
     554:	df 93       	push	r29
     556:	1f 92       	push	r1
     558:	cd b7       	in	r28, 0x3d	; 61
     55a:	de b7       	in	r29, 0x3e	; 62
     55c:	89 83       	std	Y+1, r24	; 0x01
     55e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <transmitting>
     562:	88 23       	and	r24, r24
     564:	a1 f0       	breq	.+40     	; 0x58e <wire_write+0x3c>
     566:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <tx_buffer_length>
     56a:	80 32       	cpi	r24, 0x20	; 32
     56c:	c0 f4       	brcc	.+48     	; 0x59e <wire_write+0x4c>
     56e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <tx_buffer_index>
     572:	e8 2f       	mov	r30, r24
     574:	f0 e0       	ldi	r31, 0x00	; 0
     576:	eb 51       	subi	r30, 0x1B	; 27
     578:	fe 4f       	sbci	r31, 0xFE	; 254
     57a:	99 81       	ldd	r25, Y+1	; 0x01
     57c:	90 83       	st	Z, r25
     57e:	8f 5f       	subi	r24, 0xFF	; 255
     580:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <tx_buffer_index>
     584:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <tx_buffer_length>
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	0a c0       	rjmp	.+20     	; 0x5a2 <wire_write+0x50>
     58e:	61 e0       	ldi	r22, 0x01	; 1
     590:	ce 01       	movw	r24, r28
     592:	01 96       	adiw	r24, 0x01	; 1
     594:	0e 94 08 05 	call	0xa10	; 0xa10 <twi_transmit>
     598:	81 e0       	ldi	r24, 0x01	; 1
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	02 c0       	rjmp	.+4      	; 0x5a2 <wire_write+0x50>
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	0f 90       	pop	r0
     5a4:	df 91       	pop	r29
     5a6:	cf 91       	pop	r28
     5a8:	08 95       	ret

000005aa <wire_request_from>:
     5aa:	8f 92       	push	r8
     5ac:	9f 92       	push	r9
     5ae:	af 92       	push	r10
     5b0:	bf 92       	push	r11
     5b2:	ef 92       	push	r14
     5b4:	0f 93       	push	r16
     5b6:	1f 93       	push	r17
     5b8:	cf 93       	push	r28
     5ba:	df 93       	push	r29
     5bc:	18 2f       	mov	r17, r24
     5be:	d6 2f       	mov	r29, r22
     5c0:	49 01       	movw	r8, r18
     5c2:	5a 01       	movw	r10, r20
     5c4:	00 23       	and	r16, r16
     5c6:	09 f1       	breq	.+66     	; 0x60a <wire_request_from+0x60>
     5c8:	0e 94 8c 02 	call	0x518	; 0x518 <wire_begin_transmission>
     5cc:	04 30       	cpi	r16, 0x04	; 4
     5ce:	08 f0       	brcs	.+2      	; 0x5d2 <wire_request_from+0x28>
     5d0:	03 e0       	ldi	r16, 0x03	; 3
     5d2:	cf ef       	ldi	r28, 0xFF	; 255
     5d4:	c0 0f       	add	r28, r16
     5d6:	00 23       	and	r16, r16
     5d8:	a9 f0       	breq	.+42     	; 0x604 <wire_request_from+0x5a>
     5da:	8c 2f       	mov	r24, r28
     5dc:	88 0f       	add	r24, r24
     5de:	88 0f       	add	r24, r24
     5e0:	88 0f       	add	r24, r24
     5e2:	a5 01       	movw	r20, r10
     5e4:	94 01       	movw	r18, r8
     5e6:	04 c0       	rjmp	.+8      	; 0x5f0 <wire_request_from+0x46>
     5e8:	56 95       	lsr	r21
     5ea:	47 95       	ror	r20
     5ec:	37 95       	ror	r19
     5ee:	27 95       	ror	r18
     5f0:	8a 95       	dec	r24
     5f2:	d2 f7       	brpl	.-12     	; 0x5e8 <wire_request_from+0x3e>
     5f4:	da 01       	movw	r26, r20
     5f6:	c9 01       	movw	r24, r18
     5f8:	0e 94 a9 02 	call	0x552	; 0x552 <wire_write>
     5fc:	8c 2f       	mov	r24, r28
     5fe:	c1 50       	subi	r28, 0x01	; 1
     600:	81 11       	cpse	r24, r1
     602:	eb cf       	rjmp	.-42     	; 0x5da <wire_request_from+0x30>
     604:	80 e0       	ldi	r24, 0x00	; 0
     606:	0e 94 96 02 	call	0x52c	; 0x52c <wire_end_transmission>
     60a:	4d 2f       	mov	r20, r29
     60c:	d1 32       	cpi	r29, 0x21	; 33
     60e:	08 f0       	brcs	.+2      	; 0x612 <wire_request_from+0x68>
     610:	40 e2       	ldi	r20, 0x20	; 32
     612:	2e 2d       	mov	r18, r14
     614:	65 ec       	ldi	r22, 0xC5	; 197
     616:	71 e0       	ldi	r23, 0x01	; 1
     618:	81 2f       	mov	r24, r17
     61a:	0e 94 56 04 	call	0x8ac	; 0x8ac <twi_read>
     61e:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <rx_buffer_index>
     622:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <rx_buffer_length>
     626:	df 91       	pop	r29
     628:	cf 91       	pop	r28
     62a:	1f 91       	pop	r17
     62c:	0f 91       	pop	r16
     62e:	ef 90       	pop	r14
     630:	bf 90       	pop	r11
     632:	af 90       	pop	r10
     634:	9f 90       	pop	r9
     636:	8f 90       	pop	r8
     638:	08 95       	ret

0000063a <wire_available>:
     63a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <rx_buffer_length>
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <rx_buffer_index>
     644:	82 1b       	sub	r24, r18
     646:	91 09       	sbc	r25, r1
     648:	08 95       	ret

0000064a <wire_read>:
     64a:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <rx_buffer_index>
     64e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <rx_buffer_length>
     652:	98 17       	cp	r25, r24
     654:	50 f4       	brcc	.+20     	; 0x66a <wire_read+0x20>
     656:	e9 2f       	mov	r30, r25
     658:	f0 e0       	ldi	r31, 0x00	; 0
     65a:	eb 53       	subi	r30, 0x3B	; 59
     65c:	fe 4f       	sbci	r31, 0xFE	; 254
     65e:	20 81       	ld	r18, Z
     660:	30 e0       	ldi	r19, 0x00	; 0
     662:	9f 5f       	subi	r25, 0xFF	; 255
     664:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <rx_buffer_index>
     668:	02 c0       	rjmp	.+4      	; 0x66e <wire_read+0x24>
     66a:	2f ef       	ldi	r18, 0xFF	; 255
     66c:	3f ef       	ldi	r19, 0xFF	; 255
     66e:	c9 01       	movw	r24, r18
     670:	08 95       	ret

00000672 <i2c_read_bytes>:
     672:	2f 92       	push	r2
     674:	3f 92       	push	r3
     676:	4f 92       	push	r4
     678:	5f 92       	push	r5
     67a:	6f 92       	push	r6
     67c:	7f 92       	push	r7
     67e:	8f 92       	push	r8
     680:	9f 92       	push	r9
     682:	af 92       	push	r10
     684:	bf 92       	push	r11
     686:	cf 92       	push	r12
     688:	df 92       	push	r13
     68a:	ef 92       	push	r14
     68c:	ff 92       	push	r15
     68e:	0f 93       	push	r16
     690:	1f 93       	push	r17
     692:	cf 93       	push	r28
     694:	df 93       	push	r29
     696:	cd b7       	in	r28, 0x3d	; 61
     698:	de b7       	in	r29, 0x3e	; 62
     69a:	28 97       	sbiw	r28, 0x08	; 8
     69c:	0f b6       	in	r0, 0x3f	; 63
     69e:	f8 94       	cli
     6a0:	de bf       	out	0x3e, r29	; 62
     6a2:	0f be       	out	0x3f, r0	; 63
     6a4:	cd bf       	out	0x3d, r28	; 61
     6a6:	f8 2e       	mov	r15, r24
     6a8:	6d 83       	std	Y+5, r22	; 0x05
     6aa:	84 2e       	mov	r8, r20
     6ac:	59 01       	movw	r10, r18
     6ae:	68 01       	movw	r12, r16
     6b0:	0e 94 36 02 	call	0x46c	; 0x46c <millis>
     6b4:	2b 01       	movw	r4, r22
     6b6:	3c 01       	movw	r6, r24
     6b8:	88 20       	and	r8, r8
     6ba:	09 f4       	brne	.+2      	; 0x6be <i2c_read_bytes+0x4c>
     6bc:	5a c0       	rjmp	.+180    	; 0x772 <i2c_read_bytes+0x100>
     6be:	91 2c       	mov	r9, r1
     6c0:	10 e0       	ldi	r17, 0x00	; 0
     6c2:	28 2c       	mov	r2, r8
     6c4:	31 2c       	mov	r3, r1
     6c6:	96 01       	movw	r18, r12
     6c8:	40 e0       	ldi	r20, 0x00	; 0
     6ca:	50 e0       	ldi	r21, 0x00	; 0
     6cc:	29 83       	std	Y+1, r18	; 0x01
     6ce:	3a 83       	std	Y+2, r19	; 0x02
     6d0:	4b 83       	std	Y+3, r20	; 0x03
     6d2:	5c 83       	std	Y+4, r21	; 0x04
     6d4:	8e 82       	std	Y+6, r8	; 0x06
     6d6:	8f 2d       	mov	r24, r15
     6d8:	0e 94 8c 02 	call	0x518	; 0x518 <wire_begin_transmission>
     6dc:	8d 81       	ldd	r24, Y+5	; 0x05
     6de:	0e 94 a9 02 	call	0x552	; 0x552 <wire_write>
     6e2:	81 e0       	ldi	r24, 0x01	; 1
     6e4:	0e 94 96 02 	call	0x52c	; 0x52c <wire_end_transmission>
     6e8:	8f 2d       	mov	r24, r15
     6ea:	0e 94 8c 02 	call	0x518	; 0x518 <wire_begin_transmission>
     6ee:	c1 01       	movw	r24, r2
     6f0:	89 19       	sub	r24, r9
     6f2:	91 09       	sbc	r25, r1
     6f4:	80 97       	sbiw	r24, 0x20	; 32
     6f6:	1c f4       	brge	.+6      	; 0x6fe <i2c_read_bytes+0x8c>
     6f8:	68 2d       	mov	r22, r8
     6fa:	69 19       	sub	r22, r9
     6fc:	01 c0       	rjmp	.+2      	; 0x700 <i2c_read_bytes+0x8e>
     6fe:	60 e2       	ldi	r22, 0x20	; 32
     700:	ee 24       	eor	r14, r14
     702:	e3 94       	inc	r14
     704:	00 e0       	ldi	r16, 0x00	; 0
     706:	20 e0       	ldi	r18, 0x00	; 0
     708:	30 e0       	ldi	r19, 0x00	; 0
     70a:	a9 01       	movw	r20, r18
     70c:	8f 2d       	mov	r24, r15
     70e:	0e 94 d5 02 	call	0x5aa	; 0x5aa <wire_request_from>
     712:	0d c0       	rjmp	.+26     	; 0x72e <i2c_read_bytes+0xbc>
     714:	a5 01       	movw	r20, r10
     716:	41 0f       	add	r20, r17
     718:	51 1d       	adc	r21, r1
     71a:	17 fd       	sbrc	r17, 7
     71c:	5a 95       	dec	r21
     71e:	58 87       	std	Y+8, r21	; 0x08
     720:	4f 83       	std	Y+7, r20	; 0x07
     722:	0e 94 25 03 	call	0x64a	; 0x64a <wire_read>
     726:	af 81       	ldd	r26, Y+7	; 0x07
     728:	b8 85       	ldd	r27, Y+8	; 0x08
     72a:	8c 93       	st	X, r24
     72c:	1f 5f       	subi	r17, 0xFF	; 255
     72e:	0e 94 1d 03 	call	0x63a	; 0x63a <wire_available>
     732:	89 2b       	or	r24, r25
     734:	a1 f0       	breq	.+40     	; 0x75e <i2c_read_bytes+0xec>
     736:	c1 14       	cp	r12, r1
     738:	d1 04       	cpc	r13, r1
     73a:	61 f3       	breq	.-40     	; 0x714 <i2c_read_bytes+0xa2>
     73c:	0e 94 36 02 	call	0x46c	; 0x46c <millis>
     740:	dc 01       	movw	r26, r24
     742:	cb 01       	movw	r24, r22
     744:	84 19       	sub	r24, r4
     746:	95 09       	sbc	r25, r5
     748:	a6 09       	sbc	r26, r6
     74a:	b7 09       	sbc	r27, r7
     74c:	29 81       	ldd	r18, Y+1	; 0x01
     74e:	3a 81       	ldd	r19, Y+2	; 0x02
     750:	4b 81       	ldd	r20, Y+3	; 0x03
     752:	5c 81       	ldd	r21, Y+4	; 0x04
     754:	82 17       	cp	r24, r18
     756:	93 07       	cpc	r25, r19
     758:	a4 07       	cpc	r26, r20
     75a:	b5 07       	cpc	r27, r21
     75c:	d8 f2       	brcs	.-74     	; 0x714 <i2c_read_bytes+0xa2>
     75e:	8e 81       	ldd	r24, Y+6	; 0x06
     760:	30 e2       	ldi	r19, 0x20	; 32
     762:	38 15       	cp	r19, r8
     764:	08 f4       	brcc	.+2      	; 0x768 <i2c_read_bytes+0xf6>
     766:	80 e2       	ldi	r24, 0x20	; 32
     768:	98 0e       	add	r9, r24
     76a:	98 14       	cp	r9, r8
     76c:	08 f4       	brcc	.+2      	; 0x770 <i2c_read_bytes+0xfe>
     76e:	b3 cf       	rjmp	.-154    	; 0x6d6 <i2c_read_bytes+0x64>
     770:	01 c0       	rjmp	.+2      	; 0x774 <i2c_read_bytes+0x102>
     772:	10 e0       	ldi	r17, 0x00	; 0
     774:	c1 14       	cp	r12, r1
     776:	d1 04       	cpc	r13, r1
     778:	c9 f0       	breq	.+50     	; 0x7ac <i2c_read_bytes+0x13a>
     77a:	0e 94 36 02 	call	0x46c	; 0x46c <millis>
     77e:	ab 01       	movw	r20, r22
     780:	bc 01       	movw	r22, r24
     782:	44 19       	sub	r20, r4
     784:	55 09       	sbc	r21, r5
     786:	66 09       	sbc	r22, r6
     788:	77 09       	sbc	r23, r7
     78a:	c6 01       	movw	r24, r12
     78c:	a0 e0       	ldi	r26, 0x00	; 0
     78e:	b0 e0       	ldi	r27, 0x00	; 0
     790:	48 17       	cp	r20, r24
     792:	59 07       	cpc	r21, r25
     794:	6a 07       	cpc	r22, r26
     796:	7b 07       	cpc	r23, r27
     798:	48 f0       	brcs	.+18     	; 0x7ac <i2c_read_bytes+0x13a>
     79a:	91 2c       	mov	r9, r1
     79c:	81 2f       	mov	r24, r17
     79e:	01 2e       	mov	r0, r17
     7a0:	00 0c       	add	r0, r0
     7a2:	99 0b       	sbc	r25, r25
     7a4:	88 15       	cp	r24, r8
     7a6:	99 05       	cpc	r25, r9
     7a8:	0c f4       	brge	.+2      	; 0x7ac <i2c_read_bytes+0x13a>
     7aa:	1f ef       	ldi	r17, 0xFF	; 255
     7ac:	81 2f       	mov	r24, r17
     7ae:	28 96       	adiw	r28, 0x08	; 8
     7b0:	0f b6       	in	r0, 0x3f	; 63
     7b2:	f8 94       	cli
     7b4:	de bf       	out	0x3e, r29	; 62
     7b6:	0f be       	out	0x3f, r0	; 63
     7b8:	cd bf       	out	0x3d, r28	; 61
     7ba:	df 91       	pop	r29
     7bc:	cf 91       	pop	r28
     7be:	1f 91       	pop	r17
     7c0:	0f 91       	pop	r16
     7c2:	ff 90       	pop	r15
     7c4:	ef 90       	pop	r14
     7c6:	df 90       	pop	r13
     7c8:	cf 90       	pop	r12
     7ca:	bf 90       	pop	r11
     7cc:	af 90       	pop	r10
     7ce:	9f 90       	pop	r9
     7d0:	8f 90       	pop	r8
     7d2:	7f 90       	pop	r7
     7d4:	6f 90       	pop	r6
     7d6:	5f 90       	pop	r5
     7d8:	4f 90       	pop	r4
     7da:	3f 90       	pop	r3
     7dc:	2f 90       	pop	r2
     7de:	08 95       	ret

000007e0 <i2c_read_byte>:
     7e0:	0f 93       	push	r16
     7e2:	1f 93       	push	r17
     7e4:	89 01       	movw	r16, r18
     7e6:	9a 01       	movw	r18, r20
     7e8:	41 e0       	ldi	r20, 0x01	; 1
     7ea:	0e 94 39 03 	call	0x672	; 0x672 <i2c_read_bytes>
     7ee:	1f 91       	pop	r17
     7f0:	0f 91       	pop	r16
     7f2:	08 95       	ret

000007f4 <i2c_write_bytes>:
* @param length Number of bytes to write
* @param data Buffer to copy new data from
* @return Status of operation (true = success)
*/
uint8_t i2c_write_bytes(uint8_t dev_address, uint8_t reg_address, uint8_t length, uint8_t* data)
{
     7f4:	ef 92       	push	r14
     7f6:	ff 92       	push	r15
     7f8:	0f 93       	push	r16
     7fa:	1f 93       	push	r17
     7fc:	cf 93       	push	r28
     7fe:	df 93       	push	r29
     800:	c6 2f       	mov	r28, r22
     802:	14 2f       	mov	r17, r20
     804:	79 01       	movw	r14, r18
    
    uint8_t status = 0;
    wire_begin_transmission(dev_address);
     806:	0e 94 8c 02 	call	0x518	; 0x518 <wire_begin_transmission>
    wire_write((uint8_t) reg_address);
     80a:	8c 2f       	mov	r24, r28
     80c:	0e 94 a9 02 	call	0x552	; 0x552 <wire_write>
    for (uint8_t i = 0; i < length; i++)
     810:	11 23       	and	r17, r17
     812:	71 f0       	breq	.+28     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
     814:	e7 01       	movw	r28, r14
     816:	11 50       	subi	r17, 0x01	; 1
     818:	01 2f       	mov	r16, r17
     81a:	10 e0       	ldi	r17, 0x00	; 0
     81c:	0f 5f       	subi	r16, 0xFF	; 255
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	0e 0d       	add	r16, r14
     822:	1f 1d       	adc	r17, r15
    {
        wire_write((uint8_t) data[i]);
     824:	89 91       	ld	r24, Y+
     826:	0e 94 a9 02 	call	0x552	; 0x552 <wire_write>
{
    
    uint8_t status = 0;
    wire_begin_transmission(dev_address);
    wire_write((uint8_t) reg_address);
    for (uint8_t i = 0; i < length; i++)
     82a:	c0 17       	cp	r28, r16
     82c:	d1 07       	cpc	r29, r17
     82e:	d1 f7       	brne	.-12     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
    {
        wire_write((uint8_t) data[i]);
    }
    status = wire_end_transmission(1);
     830:	81 e0       	ldi	r24, 0x01	; 1
     832:	0e 94 96 02 	call	0x52c	; 0x52c <wire_end_transmission>
    return status == 0;
     836:	91 e0       	ldi	r25, 0x01	; 1
     838:	81 11       	cpse	r24, r1
     83a:	90 e0       	ldi	r25, 0x00	; 0
}
     83c:	89 2f       	mov	r24, r25
     83e:	df 91       	pop	r29
     840:	cf 91       	pop	r28
     842:	1f 91       	pop	r17
     844:	0f 91       	pop	r16
     846:	ff 90       	pop	r15
     848:	ef 90       	pop	r14
     84a:	08 95       	ret

0000084c <i2c_write_byte>:
* @param reg_address Register address to write to
* @param data New byte value to write
* @return Status of operation (true = success)
*/
uint8_t i2c_write_byte(uint8_t dev_address, uint8_t reg_address, uint8_t data)
{
     84c:	cf 93       	push	r28
     84e:	df 93       	push	r29
     850:	1f 92       	push	r1
     852:	cd b7       	in	r28, 0x3d	; 61
     854:	de b7       	in	r29, 0x3e	; 62
     856:	49 83       	std	Y+1, r20	; 0x01
    return i2c_write_bytes(dev_address, reg_address, 1, &data);
     858:	9e 01       	movw	r18, r28
     85a:	2f 5f       	subi	r18, 0xFF	; 255
     85c:	3f 4f       	sbci	r19, 0xFF	; 255
     85e:	41 e0       	ldi	r20, 0x01	; 1
     860:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <i2c_write_bytes>
}
     864:	0f 90       	pop	r0
     866:	df 91       	pop	r29
     868:	cf 91       	pop	r28
     86a:	08 95       	ret

0000086c <twi_init>:
}

void twi_reply(uint8_t ack)
{
    if (ack) { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA); }
    else { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT); }
     86c:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <twi_state>
     870:	81 e0       	ldi	r24, 0x01	; 1
     872:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <twi_send_stop>
     876:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <twi_in_rep_start>
     87a:	e9 eb       	ldi	r30, 0xB9	; 185
     87c:	f0 e0       	ldi	r31, 0x00	; 0
     87e:	80 81       	ld	r24, Z
     880:	8e 7f       	andi	r24, 0xFE	; 254
     882:	80 83       	st	Z, r24
     884:	80 81       	ld	r24, Z
     886:	8d 7f       	andi	r24, 0xFD	; 253
     888:	80 83       	st	Z, r24
     88a:	88 e4       	ldi	r24, 0x48	; 72
     88c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
     890:	85 e4       	ldi	r24, 0x45	; 69
     892:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     896:	08 95       	ret

00000898 <twi_attach_slave_rx_event>:
     898:	90 93 74 01 	sts	0x0174, r25	; 0x800174 <twi_on_slave_receive+0x1>
     89c:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <twi_on_slave_receive>
     8a0:	08 95       	ret

000008a2 <twi_attach_slave_tx_event>:
     8a2:	90 93 76 01 	sts	0x0176, r25	; 0x800176 <twi_on_slave_transmit+0x1>
     8a6:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <twi_on_slave_transmit>
     8aa:	08 95       	ret

000008ac <twi_read>:
     8ac:	41 32       	cpi	r20, 0x21	; 33
     8ae:	08 f0       	brcs	.+2      	; 0x8b2 <twi_read+0x6>
     8b0:	4c c0       	rjmp	.+152    	; 0x94a <__stack+0x4b>
     8b2:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <twi_state>
     8b6:	91 11       	cpse	r25, r1
     8b8:	fc cf       	rjmp	.-8      	; 0x8b2 <twi_read+0x6>
     8ba:	31 e0       	ldi	r19, 0x01	; 1
     8bc:	30 93 7b 01 	sts	0x017B, r19	; 0x80017b <twi_state>
     8c0:	20 93 7a 01 	sts	0x017A, r18	; 0x80017a <twi_send_stop>
     8c4:	2f ef       	ldi	r18, 0xFF	; 255
     8c6:	20 93 77 01 	sts	0x0177, r18	; 0x800177 <twi_error>
     8ca:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <twi_master_buffer_index>
     8ce:	24 0f       	add	r18, r20
     8d0:	20 93 51 01 	sts	0x0151, r18	; 0x800151 <twi_master_buffer_length>
     8d4:	30 93 78 01 	sts	0x0178, r19	; 0x800178 <twi_slarw>
     8d8:	20 91 78 01 	lds	r18, 0x0178	; 0x800178 <twi_slarw>
     8dc:	88 0f       	add	r24, r24
     8de:	82 2b       	or	r24, r18
     8e0:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <twi_slarw>
     8e4:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <twi_in_rep_start>
     8e8:	81 30       	cpi	r24, 0x01	; 1
     8ea:	81 f4       	brne	.+32     	; 0x90c <__stack+0xd>
     8ec:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <twi_in_rep_start>
     8f0:	ab eb       	ldi	r26, 0xBB	; 187
     8f2:	b0 e0       	ldi	r27, 0x00	; 0
     8f4:	ec eb       	ldi	r30, 0xBC	; 188
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <twi_slarw>
     8fc:	8c 93       	st	X, r24
     8fe:	80 81       	ld	r24, Z
     900:	83 fd       	sbrc	r24, 3
     902:	fa cf       	rjmp	.-12     	; 0x8f8 <twi_read+0x4c>
     904:	85 ec       	ldi	r24, 0xC5	; 197
     906:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     90a:	03 c0       	rjmp	.+6      	; 0x912 <__stack+0x13>
     90c:	85 ee       	ldi	r24, 0xE5	; 229
     90e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     912:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <twi_state>
     916:	81 30       	cpi	r24, 0x01	; 1
     918:	e1 f3       	breq	.-8      	; 0x912 <__stack+0x13>
     91a:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <twi_master_buffer_index>
     91e:	84 17       	cp	r24, r20
     920:	10 f4       	brcc	.+4      	; 0x926 <__stack+0x27>
     922:	40 91 52 01 	lds	r20, 0x0152	; 0x800152 <twi_master_buffer_index>
     926:	44 23       	and	r20, r20
     928:	89 f0       	breq	.+34     	; 0x94c <__stack+0x4d>
     92a:	e3 e5       	ldi	r30, 0x53	; 83
     92c:	f1 e0       	ldi	r31, 0x01	; 1
     92e:	a6 2f       	mov	r26, r22
     930:	b7 2f       	mov	r27, r23
     932:	2f ef       	ldi	r18, 0xFF	; 255
     934:	24 0f       	add	r18, r20
     936:	30 e0       	ldi	r19, 0x00	; 0
     938:	2c 5a       	subi	r18, 0xAC	; 172
     93a:	3e 4f       	sbci	r19, 0xFE	; 254
     93c:	81 91       	ld	r24, Z+
     93e:	8d 93       	st	X+, r24
     940:	e2 17       	cp	r30, r18
     942:	f3 07       	cpc	r31, r19
     944:	d9 f7       	brne	.-10     	; 0x93c <__stack+0x3d>
     946:	94 2f       	mov	r25, r20
     948:	01 c0       	rjmp	.+2      	; 0x94c <__stack+0x4d>
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	89 2f       	mov	r24, r25
     94e:	08 95       	ret

00000950 <twi_write>:
     950:	0f 93       	push	r16
     952:	41 32       	cpi	r20, 0x21	; 33
     954:	08 f0       	brcs	.+2      	; 0x958 <twi_write+0x8>
     956:	54 c0       	rjmp	.+168    	; 0xa00 <twi_write+0xb0>
     958:	30 91 7b 01 	lds	r19, 0x017B	; 0x80017b <twi_state>
     95c:	31 11       	cpse	r19, r1
     95e:	fc cf       	rjmp	.-8      	; 0x958 <twi_write+0x8>
     960:	92 e0       	ldi	r25, 0x02	; 2
     962:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <twi_state>
     966:	00 93 7a 01 	sts	0x017A, r16	; 0x80017a <twi_send_stop>
     96a:	9f ef       	ldi	r25, 0xFF	; 255
     96c:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <twi_error>
     970:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <twi_master_buffer_index>
     974:	40 93 51 01 	sts	0x0151, r20	; 0x800151 <twi_master_buffer_length>
     978:	44 23       	and	r20, r20
     97a:	71 f0       	breq	.+28     	; 0x998 <twi_write+0x48>
     97c:	fb 01       	movw	r30, r22
     97e:	a3 e5       	ldi	r26, 0x53	; 83
     980:	b1 e0       	ldi	r27, 0x01	; 1
     982:	41 50       	subi	r20, 0x01	; 1
     984:	50 e0       	ldi	r21, 0x00	; 0
     986:	4f 5f       	subi	r20, 0xFF	; 255
     988:	5f 4f       	sbci	r21, 0xFF	; 255
     98a:	64 0f       	add	r22, r20
     98c:	75 1f       	adc	r23, r21
     98e:	91 91       	ld	r25, Z+
     990:	9d 93       	st	X+, r25
     992:	e6 17       	cp	r30, r22
     994:	f7 07       	cpc	r31, r23
     996:	d9 f7       	brne	.-10     	; 0x98e <twi_write+0x3e>
     998:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <twi_slarw>
     99c:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <twi_slarw>
     9a0:	88 0f       	add	r24, r24
     9a2:	89 2b       	or	r24, r25
     9a4:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <twi_slarw>
     9a8:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <twi_in_rep_start>
     9ac:	88 23       	and	r24, r24
     9ae:	69 f0       	breq	.+26     	; 0x9ca <twi_write+0x7a>
     9b0:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <twi_in_rep_start>
     9b4:	ab eb       	ldi	r26, 0xBB	; 187
     9b6:	b0 e0       	ldi	r27, 0x00	; 0
     9b8:	ec eb       	ldi	r30, 0xBC	; 188
     9ba:	f0 e0       	ldi	r31, 0x00	; 0
     9bc:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <twi_slarw>
     9c0:	9c 93       	st	X, r25
     9c2:	90 81       	ld	r25, Z
     9c4:	93 fd       	sbrc	r25, 3
     9c6:	fa cf       	rjmp	.-12     	; 0x9bc <twi_write+0x6c>
     9c8:	03 c0       	rjmp	.+6      	; 0x9d0 <twi_write+0x80>
     9ca:	85 ee       	ldi	r24, 0xE5	; 229
     9cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     9d0:	22 23       	and	r18, r18
     9d2:	41 f0       	breq	.+16     	; 0x9e4 <twi_write+0x94>
     9d4:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <twi_state>
     9d8:	82 30       	cpi	r24, 0x02	; 2
     9da:	21 f4       	brne	.+8      	; 0x9e4 <twi_write+0x94>
     9dc:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <twi_state>
     9e0:	82 30       	cpi	r24, 0x02	; 2
     9e2:	e1 f3       	breq	.-8      	; 0x9dc <twi_write+0x8c>
     9e4:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <twi_error>
     9e8:	8f 3f       	cpi	r24, 0xFF	; 255
     9ea:	79 f0       	breq	.+30     	; 0xa0a <twi_write+0xba>
     9ec:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <twi_error>
     9f0:	80 32       	cpi	r24, 0x20	; 32
     9f2:	41 f0       	breq	.+16     	; 0xa04 <twi_write+0xb4>
     9f4:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <twi_error>
     9f8:	80 33       	cpi	r24, 0x30	; 48
     9fa:	31 f0       	breq	.+12     	; 0xa08 <twi_write+0xb8>
     9fc:	34 e0       	ldi	r19, 0x04	; 4
     9fe:	05 c0       	rjmp	.+10     	; 0xa0a <twi_write+0xba>
     a00:	31 e0       	ldi	r19, 0x01	; 1
     a02:	03 c0       	rjmp	.+6      	; 0xa0a <twi_write+0xba>
     a04:	32 e0       	ldi	r19, 0x02	; 2
     a06:	01 c0       	rjmp	.+2      	; 0xa0a <twi_write+0xba>
     a08:	33 e0       	ldi	r19, 0x03	; 3
     a0a:	83 2f       	mov	r24, r19
     a0c:	0f 91       	pop	r16
     a0e:	08 95       	ret

00000a10 <twi_transmit>:
     a10:	40 91 2f 01 	lds	r20, 0x012F	; 0x80012f <twi_tx_buffer_length>
     a14:	26 2f       	mov	r18, r22
     a16:	30 e0       	ldi	r19, 0x00	; 0
     a18:	24 0f       	add	r18, r20
     a1a:	31 1d       	adc	r19, r1
     a1c:	21 32       	cpi	r18, 0x21	; 33
     a1e:	31 05       	cpc	r19, r1
     a20:	ec f4       	brge	.+58     	; 0xa5c <twi_transmit+0x4c>
     a22:	20 91 7b 01 	lds	r18, 0x017B	; 0x80017b <twi_state>
     a26:	24 30       	cpi	r18, 0x04	; 4
     a28:	d9 f4       	brne	.+54     	; 0xa60 <twi_transmit+0x50>
     a2a:	66 23       	and	r22, r22
     a2c:	81 f0       	breq	.+32     	; 0xa4e <twi_transmit+0x3e>
     a2e:	a8 2f       	mov	r26, r24
     a30:	b9 2f       	mov	r27, r25
     a32:	80 e0       	ldi	r24, 0x00	; 0
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <twi_tx_buffer_length>
     a3a:	2d 91       	ld	r18, X+
     a3c:	fc 01       	movw	r30, r24
     a3e:	ef 5c       	subi	r30, 0xCF	; 207
     a40:	fe 4f       	sbci	r31, 0xFE	; 254
     a42:	e3 0f       	add	r30, r19
     a44:	f1 1d       	adc	r31, r1
     a46:	20 83       	st	Z, r18
     a48:	01 96       	adiw	r24, 0x01	; 1
     a4a:	86 17       	cp	r24, r22
     a4c:	a0 f3       	brcs	.-24     	; 0xa36 <twi_transmit+0x26>
     a4e:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <twi_tx_buffer_length>
     a52:	68 0f       	add	r22, r24
     a54:	60 93 2f 01 	sts	0x012F, r22	; 0x80012f <twi_tx_buffer_length>
     a58:	80 e0       	ldi	r24, 0x00	; 0
     a5a:	08 95       	ret
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	08 95       	ret
     a60:	82 e0       	ldi	r24, 0x02	; 2
     a62:	08 95       	ret

00000a64 <twi_stop>:
     a64:	85 ed       	ldi	r24, 0xD5	; 213
     a66:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     a6a:	ec eb       	ldi	r30, 0xBC	; 188
     a6c:	f0 e0       	ldi	r31, 0x00	; 0
     a6e:	80 81       	ld	r24, Z
     a70:	84 fd       	sbrc	r24, 4
     a72:	fd cf       	rjmp	.-6      	; 0xa6e <twi_stop+0xa>
     a74:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <twi_state>
     a78:	08 95       	ret

00000a7a <twi_release_bus>:
}

void twi_release_bus(void)
{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
     a7a:	85 ec       	ldi	r24, 0xC5	; 197
     a7c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    twi_state = TWI_READY;
     a80:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <twi_state>
     a84:	08 95       	ret

00000a86 <__vector_24>:
}

ISR(TWI_vect)
{
     a86:	1f 92       	push	r1
     a88:	0f 92       	push	r0
     a8a:	0f b6       	in	r0, 0x3f	; 63
     a8c:	0f 92       	push	r0
     a8e:	11 24       	eor	r1, r1
     a90:	2f 93       	push	r18
     a92:	3f 93       	push	r19
     a94:	4f 93       	push	r20
     a96:	5f 93       	push	r21
     a98:	6f 93       	push	r22
     a9a:	7f 93       	push	r23
     a9c:	8f 93       	push	r24
     a9e:	9f 93       	push	r25
     aa0:	af 93       	push	r26
     aa2:	bf 93       	push	r27
     aa4:	ef 93       	push	r30
     aa6:	ff 93       	push	r31
    switch(TW_STATUS)
     aa8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     aac:	e8 2f       	mov	r30, r24
     aae:	e8 7f       	andi	r30, 0xF8	; 248
     ab0:	8e 2f       	mov	r24, r30
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	89 3c       	cpi	r24, 0xC9	; 201
     ab6:	91 05       	cpc	r25, r1
     ab8:	08 f0       	brcs	.+2      	; 0xabc <__vector_24+0x36>
     aba:	f5 c0       	rjmp	.+490    	; 0xca6 <__vector_24+0x220>
     abc:	fc 01       	movw	r30, r24
     abe:	ec 5c       	subi	r30, 0xCC	; 204
     ac0:	ff 4f       	sbci	r31, 0xFF	; 255
     ac2:	0c 94 71 0a 	jmp	0x14e2	; 0x14e2 <__tablejump2__>
    {
        // MASTER
        case TW_START: // start condition transmitted
        case TW_REP_START: // repeated start condition transmitted
        {
            TWDR = twi_slarw;
     ac6:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <twi_slarw>
     aca:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    twi_state = TWI_READY;
}

void twi_reply(uint8_t ack)
{
    if (ack) { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA); }
     ace:	85 ec       	ldi	r24, 0xC5	; 197
     ad0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     ad4:	e8 c0       	rjmp	.+464    	; 0xca6 <__vector_24+0x220>
        
        // MASTER TRANSMITTER
        case TW_MT_SLA_ACK: // SLA+W transmitted, ACK received
        case TW_MT_DATA_ACK: // data transmitted, ACK received
        {
            if (twi_master_buffer_index < twi_master_buffer_length)
     ad6:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <twi_master_buffer_index>
     ada:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <twi_master_buffer_length>
     ade:	98 17       	cp	r25, r24
     ae0:	80 f4       	brcc	.+32     	; 0xb02 <__vector_24+0x7c>
            {
                TWDR = twi_master_buffer[twi_master_buffer_index++];
     ae2:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <twi_master_buffer_index>
     ae6:	81 e0       	ldi	r24, 0x01	; 1
     ae8:	8e 0f       	add	r24, r30
     aea:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <twi_master_buffer_index>
     aee:	f0 e0       	ldi	r31, 0x00	; 0
     af0:	ed 5a       	subi	r30, 0xAD	; 173
     af2:	fe 4f       	sbci	r31, 0xFE	; 254
     af4:	80 81       	ld	r24, Z
     af6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    twi_state = TWI_READY;
}

void twi_reply(uint8_t ack)
{
    if (ack) { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA); }
     afa:	85 ec       	ldi	r24, 0xC5	; 197
     afc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     b00:	d2 c0       	rjmp	.+420    	; 0xca6 <__vector_24+0x220>
                TWDR = twi_master_buffer[twi_master_buffer_index++];
                twi_reply(1);
            }
            else
            {
                if (twi_send_stop) { twi_stop(); }
     b02:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <twi_send_stop>
     b06:	88 23       	and	r24, r24
     b08:	19 f0       	breq	.+6      	; 0xb10 <__vector_24+0x8a>
     b0a:	0e 94 32 05 	call	0xa64	; 0xa64 <twi_stop>
     b0e:	cb c0       	rjmp	.+406    	; 0xca6 <__vector_24+0x220>
                else
                {
                    twi_in_rep_start = 1;
     b10:	81 e0       	ldi	r24, 0x01	; 1
     b12:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <twi_in_rep_start>
                    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
     b16:	84 ea       	ldi	r24, 0xA4	; 164
     b18:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
                    twi_state = TWI_READY;
     b1c:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <twi_state>
     b20:	c2 c0       	rjmp	.+388    	; 0xca6 <__vector_24+0x220>
            }
        }
        break;
        case TW_MT_SLA_NACK:  // SLA+W transmitted, NACK received
        {
            twi_error = TW_MT_SLA_NACK;
     b22:	80 e2       	ldi	r24, 0x20	; 32
     b24:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <twi_error>
            twi_stop();
     b28:	0e 94 32 05 	call	0xa64	; 0xa64 <twi_stop>
        }
        break;
     b2c:	bc c0       	rjmp	.+376    	; 0xca6 <__vector_24+0x220>
        case TW_MT_DATA_NACK: // data transmitted, NACK received
        {
            twi_error = TW_MT_DATA_NACK;
     b2e:	80 e3       	ldi	r24, 0x30	; 48
     b30:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <twi_error>
            twi_stop();
     b34:	0e 94 32 05 	call	0xa64	; 0xa64 <twi_stop>
        }
        break;
     b38:	b6 c0       	rjmp	.+364    	; 0xca6 <__vector_24+0x220>
        case TW_MT_ARB_LOST: // arbitration lost in SLA+W or data
        {
            twi_error = TW_MT_ARB_LOST;
     b3a:	88 e3       	ldi	r24, 0x38	; 56
     b3c:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <twi_error>
            twi_release_bus();
     b40:	0e 94 3d 05 	call	0xa7a	; 0xa7a <twi_release_bus>
        }
        break;
     b44:	b0 c0       	rjmp	.+352    	; 0xca6 <__vector_24+0x220>
        
        // MASTER RECEIVER
        case TW_MR_DATA_ACK: // data received, ACK returned
        twi_master_buffer[twi_master_buffer_index++] = TWDR;
     b46:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <twi_master_buffer_index>
     b4a:	81 e0       	ldi	r24, 0x01	; 1
     b4c:	8e 0f       	add	r24, r30
     b4e:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <twi_master_buffer_index>
     b52:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	ed 5a       	subi	r30, 0xAD	; 173
     b5a:	fe 4f       	sbci	r31, 0xFE	; 254
     b5c:	80 83       	st	Z, r24
        /* fall through */
        case TW_MR_SLA_ACK:  // SLA+R transmitted, ACK received
        {
            if (twi_master_buffer_index < twi_master_buffer_length) { twi_reply(1); }
     b5e:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <twi_master_buffer_index>
     b62:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <twi_master_buffer_length>
     b66:	98 17       	cp	r25, r24
     b68:	20 f4       	brcc	.+8      	; 0xb72 <__vector_24+0xec>
    twi_state = TWI_READY;
}

void twi_reply(uint8_t ack)
{
    if (ack) { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA); }
     b6a:	85 ec       	ldi	r24, 0xC5	; 197
     b6c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     b70:	9a c0       	rjmp	.+308    	; 0xca6 <__vector_24+0x220>
    else { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT); }
     b72:	85 e8       	ldi	r24, 0x85	; 133
     b74:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     b78:	96 c0       	rjmp	.+300    	; 0xca6 <__vector_24+0x220>
            else { twi_reply(0); }
        }
        break;
        case TW_MR_DATA_NACK: // data received, NACK returned
        {
            twi_master_buffer[twi_master_buffer_index++] = TWDR;
     b7a:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <twi_master_buffer_index>
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	8e 0f       	add	r24, r30
     b82:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <twi_master_buffer_index>
     b86:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	ed 5a       	subi	r30, 0xAD	; 173
     b8e:	fe 4f       	sbci	r31, 0xFE	; 254
     b90:	80 83       	st	Z, r24
            if (twi_send_stop) { twi_stop(); }
     b92:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <twi_send_stop>
     b96:	88 23       	and	r24, r24
     b98:	19 f0       	breq	.+6      	; 0xba0 <__vector_24+0x11a>
     b9a:	0e 94 32 05 	call	0xa64	; 0xa64 <twi_stop>
     b9e:	83 c0       	rjmp	.+262    	; 0xca6 <__vector_24+0x220>
            else {
                twi_in_rep_start = 1;
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <twi_in_rep_start>
                TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
     ba6:	84 ea       	ldi	r24, 0xA4	; 164
     ba8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
                twi_state = TWI_READY;
     bac:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <twi_state>
     bb0:	7a c0       	rjmp	.+244    	; 0xca6 <__vector_24+0x220>
            }
        }
        break;
        case TW_MR_SLA_NACK: // SLA+R transmitted, NACK received
        {
            twi_stop();
     bb2:	0e 94 32 05 	call	0xa64	; 0xa64 <twi_stop>
        }
        break;
     bb6:	77 c0       	rjmp	.+238    	; 0xca6 <__vector_24+0x220>
        case TW_SR_SLA_ACK: // SLA+W received, ACK returned
        case TW_SR_GCALL_ACK: // general call received, ACK returned
        case TW_SR_ARB_LOST_SLA_ACK:   // arbitration lost in SLA+RW, SLA+W received, ACK returned
        case TW_SR_ARB_LOST_GCALL_ACK: // arbitration lost in SLA+RW, general call received, ACK returned
        {
            twi_state = TWI_SRX;
     bb8:	83 e0       	ldi	r24, 0x03	; 3
     bba:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <twi_state>
            twi_rx_buffer_index = 0;
     bbe:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <twi_rx_buffer_index>
    twi_state = TWI_READY;
}

void twi_reply(uint8_t ack)
{
    if (ack) { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA); }
     bc2:	85 ec       	ldi	r24, 0xC5	; 197
     bc4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     bc8:	6e c0       	rjmp	.+220    	; 0xca6 <__vector_24+0x220>
        }
        break;
        case TW_SR_DATA_ACK: // data received, ACK returned
        case TW_SR_GCALL_DATA_ACK: // general call data received, ACK returned
        {
            if (twi_rx_buffer_index < TWI_BUFFER_LENGTH) {
     bca:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <twi_rx_buffer_index>
     bce:	80 32       	cpi	r24, 0x20	; 32
     bd0:	80 f4       	brcc	.+32     	; 0xbf2 <__vector_24+0x16c>
                
                twi_rx_buffer[twi_rx_buffer_index++] = TWDR;
     bd2:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <twi_rx_buffer_index>
     bd6:	81 e0       	ldi	r24, 0x01	; 1
     bd8:	8e 0f       	add	r24, r30
     bda:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <twi_rx_buffer_index>
     bde:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	e1 5f       	subi	r30, 0xF1	; 241
     be6:	fe 4f       	sbci	r31, 0xFE	; 254
     be8:	80 83       	st	Z, r24
    twi_state = TWI_READY;
}

void twi_reply(uint8_t ack)
{
    if (ack) { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA); }
     bea:	85 ec       	ldi	r24, 0xC5	; 197
     bec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     bf0:	5a c0       	rjmp	.+180    	; 0xca6 <__vector_24+0x220>
    else { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT); }
     bf2:	85 e8       	ldi	r24, 0x85	; 133
     bf4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     bf8:	56 c0       	rjmp	.+172    	; 0xca6 <__vector_24+0x220>
            
        }
        break;
        case TW_SR_STOP: // stop or repeated start condition received while selected
        {
            twi_release_bus();
     bfa:	0e 94 3d 05 	call	0xa7a	; 0xa7a <twi_release_bus>
            if(twi_rx_buffer_index < TWI_BUFFER_LENGTH) { twi_rx_buffer[twi_rx_buffer_index] = '\0'; }
     bfe:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <twi_rx_buffer_index>
     c02:	80 32       	cpi	r24, 0x20	; 32
     c04:	30 f4       	brcc	.+12     	; 0xc12 <__vector_24+0x18c>
     c06:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <twi_rx_buffer_index>
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	e1 5f       	subi	r30, 0xF1	; 241
     c0e:	fe 4f       	sbci	r31, 0xFE	; 254
     c10:	10 82       	st	Z, r1
            twi_on_slave_receive(twi_rx_buffer, twi_rx_buffer_index);
     c12:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <twi_rx_buffer_index>
     c16:	70 e0       	ldi	r23, 0x00	; 0
     c18:	e0 91 73 01 	lds	r30, 0x0173	; 0x800173 <twi_on_slave_receive>
     c1c:	f0 91 74 01 	lds	r31, 0x0174	; 0x800174 <twi_on_slave_receive+0x1>
     c20:	8f e0       	ldi	r24, 0x0F	; 15
     c22:	91 e0       	ldi	r25, 0x01	; 1
     c24:	09 95       	icall
            twi_rx_buffer_index = 0;
     c26:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <twi_rx_buffer_index>
        }
        break;
     c2a:	3d c0       	rjmp	.+122    	; 0xca6 <__vector_24+0x220>
}

void twi_reply(uint8_t ack)
{
    if (ack) { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA); }
    else { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT); }
     c2c:	85 e8       	ldi	r24, 0x85	; 133
     c2e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     c32:	39 c0       	rjmp	.+114    	; 0xca6 <__vector_24+0x220>
        // SLAVE TRANSMITTER
        case TW_ST_SLA_ACK: // SLA+R received, ACK returned
        case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost in SLA+RW, SLA+R received, ACK returned
        {
            
            twi_state = TWI_STX;
     c34:	84 e0       	ldi	r24, 0x04	; 4
     c36:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <twi_state>
            twi_tx_buffer_index = 0;
     c3a:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <twi_tx_buffer_index>
            twi_tx_buffer_length = 0;
     c3e:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <twi_tx_buffer_length>
            twi_on_slave_transmit();
     c42:	e0 91 75 01 	lds	r30, 0x0175	; 0x800175 <twi_on_slave_transmit>
     c46:	f0 91 76 01 	lds	r31, 0x0176	; 0x800176 <twi_on_slave_transmit+0x1>
     c4a:	09 95       	icall
            if (0 == twi_tx_buffer_length) {
     c4c:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <twi_tx_buffer_length>
     c50:	81 11       	cpse	r24, r1
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__vector_24+0x1d8>
                twi_tx_buffer_length = 1;
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <twi_tx_buffer_length>
                twi_tx_buffer[0] = 0x00;
     c5a:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <twi_tx_buffer>
            }
        }
        /* fall through */
        case TW_ST_DATA_ACK: // data transmitted, ACK received
        {
            TWDR = twi_tx_buffer[twi_tx_buffer_index++];
     c5e:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <twi_tx_buffer_index>
     c62:	81 e0       	ldi	r24, 0x01	; 1
     c64:	8e 0f       	add	r24, r30
     c66:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <twi_tx_buffer_index>
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	ef 5c       	subi	r30, 0xCF	; 207
     c6e:	fe 4f       	sbci	r31, 0xFE	; 254
     c70:	80 81       	ld	r24, Z
     c72:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
            if (twi_tx_buffer_index < twi_tx_buffer_length) { twi_reply(1); }
     c76:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <twi_tx_buffer_index>
     c7a:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <twi_tx_buffer_length>
     c7e:	98 17       	cp	r25, r24
     c80:	20 f4       	brcc	.+8      	; 0xc8a <__vector_24+0x204>
    twi_state = TWI_READY;
}

void twi_reply(uint8_t ack)
{
    if (ack) { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA); }
     c82:	85 ec       	ldi	r24, 0xC5	; 197
     c84:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     c88:	0e c0       	rjmp	.+28     	; 0xca6 <__vector_24+0x220>
    else { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT); }
     c8a:	85 e8       	ldi	r24, 0x85	; 133
     c8c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     c90:	0a c0       	rjmp	.+20     	; 0xca6 <__vector_24+0x220>
    twi_state = TWI_READY;
}

void twi_reply(uint8_t ack)
{
    if (ack) { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA); }
     c92:	85 ec       	ldi	r24, 0xC5	; 197
     c94:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
        break;
        case TW_ST_DATA_NACK: // data transmitted, NACK received
        case TW_ST_LAST_DATA: // last data byte transmitted, ACK received
        {
            twi_reply(1);
            twi_state = TWI_READY;
     c98:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <twi_state>
        }
        break;
     c9c:	04 c0       	rjmp	.+8      	; 0xca6 <__vector_24+0x220>
        // MISC
        case TW_NO_INFO:   // no state information available
        break;
        case TW_BUS_ERROR: // illegal start or stop condition
        {
            twi_error = TW_BUS_ERROR;
     c9e:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <twi_error>
            twi_stop();
     ca2:	0e 94 32 05 	call	0xa64	; 0xa64 <twi_stop>
        }
        break;
    }
     ca6:	ff 91       	pop	r31
     ca8:	ef 91       	pop	r30
     caa:	bf 91       	pop	r27
     cac:	af 91       	pop	r26
     cae:	9f 91       	pop	r25
     cb0:	8f 91       	pop	r24
     cb2:	7f 91       	pop	r23
     cb4:	6f 91       	pop	r22
     cb6:	5f 91       	pop	r21
     cb8:	4f 91       	pop	r20
     cba:	3f 91       	pop	r19
     cbc:	2f 91       	pop	r18
     cbe:	0f 90       	pop	r0
     cc0:	0f be       	out	0x3f, r0	; 63
     cc2:	0f 90       	pop	r0
     cc4:	1f 90       	pop	r1
     cc6:	18 95       	reti

00000cc8 <__vector_18>:
ISR(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
     cc8:	1f 92       	push	r1
     cca:	0f 92       	push	r0
     ccc:	0f b6       	in	r0, 0x3f	; 63
     cce:	0f 92       	push	r0
     cd0:	11 24       	eor	r1, r1
     cd2:	2f 93       	push	r18
     cd4:	8f 93       	push	r24
     cd6:	9f 93       	push	r25
     cd8:	ef 93       	push	r30
     cda:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
     cdc:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    data = UART0_DATA;
     ce0:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART0 )
    lastRxError = (usr & (_BV(FE0)|_BV(DOR0)) );
     ce4:	88 71       	andi	r24, 0x18	; 24
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
     ce6:	e0 91 7e 01 	lds	r30, 0x017E	; 0x80017e <UART_RxHead>
     cea:	ef 5f       	subi	r30, 0xFF	; 255
     cec:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
     cee:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <UART_RxTail>
     cf2:	e9 17       	cp	r30, r25
     cf4:	39 f0       	breq	.+14     	; 0xd04 <__vector_18+0x3c>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
     cf6:	e0 93 7e 01 	sts	0x017E, r30	; 0x80017e <UART_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	ef 57       	subi	r30, 0x7F	; 127
     cfe:	fe 4f       	sbci	r31, 0xFE	; 254
     d00:	20 83       	st	Z, r18
     d02:	01 c0       	rjmp	.+2      	; 0xd06 <__vector_18+0x3e>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
     d04:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError = lastRxError;   
     d06:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <UART_LastRxError>
}
     d0a:	ff 91       	pop	r31
     d0c:	ef 91       	pop	r30
     d0e:	9f 91       	pop	r25
     d10:	8f 91       	pop	r24
     d12:	2f 91       	pop	r18
     d14:	0f 90       	pop	r0
     d16:	0f be       	out	0x3f, r0	; 63
     d18:	0f 90       	pop	r0
     d1a:	1f 90       	pop	r1
     d1c:	18 95       	reti

00000d1e <__vector_19>:
ISR(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
     d1e:	1f 92       	push	r1
     d20:	0f 92       	push	r0
     d22:	0f b6       	in	r0, 0x3f	; 63
     d24:	0f 92       	push	r0
     d26:	11 24       	eor	r1, r1
     d28:	8f 93       	push	r24
     d2a:	9f 93       	push	r25
     d2c:	ef 93       	push	r30
     d2e:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
     d30:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <UART_TxHead>
     d34:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <UART_TxTail>
     d38:	98 17       	cp	r25, r24
     d3a:	69 f0       	breq	.+26     	; 0xd56 <__vector_19+0x38>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
     d3c:	e0 91 7f 01 	lds	r30, 0x017F	; 0x80017f <UART_TxTail>
     d40:	ef 5f       	subi	r30, 0xFF	; 255
     d42:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
     d44:	e0 93 7f 01 	sts	0x017F, r30	; 0x80017f <UART_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	ef 55       	subi	r30, 0x5F	; 95
     d4c:	fe 4f       	sbci	r31, 0xFE	; 254
     d4e:	80 81       	ld	r24, Z
     d50:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     d54:	05 c0       	rjmp	.+10     	; 0xd60 <__vector_19+0x42>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
     d56:	e1 ec       	ldi	r30, 0xC1	; 193
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	8f 7d       	andi	r24, 0xDF	; 223
     d5e:	80 83       	st	Z, r24
    }
}
     d60:	ff 91       	pop	r31
     d62:	ef 91       	pop	r30
     d64:	9f 91       	pop	r25
     d66:	8f 91       	pop	r24
     d68:	0f 90       	pop	r0
     d6a:	0f be       	out	0x3f, r0	; 63
     d6c:	0f 90       	pop	r0
     d6e:	1f 90       	pop	r1
     d70:	18 95       	reti

00000d72 <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
     d72:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <UART_TxHead>
    UART_TxTail = 0;
     d76:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <UART_TxTail>
    UART_RxHead = 0;
     d7a:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <UART_RxHead>
    UART_RxTail = 0;
     d7e:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <UART_RxTail>
    UCSRC = (3<<UCSZ0);
    #endif 
    
#elif defined (ATMEGA_USART0 )
    /* Set baud rate */
    if ( baudrate & 0x8000 ) 
     d82:	99 23       	and	r25, r25
     d84:	24 f4       	brge	.+8      	; 0xd8e <uart_init+0x1c>
    {
   		UART0_STATUS = (1<<U2X0);  //Enable 2x speed 
     d86:	22 e0       	ldi	r18, 0x02	; 2
     d88:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
   		baudrate &= ~0x8000;
     d8c:	9f 77       	andi	r25, 0x7F	; 127
   	}
    UBRR0H = (unsigned char)(baudrate>>8);
     d8e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    UBRR0L = (unsigned char) baudrate;
     d92:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
     d96:	88 e9       	ldi	r24, 0x98	; 152
     d98:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL0
    UCSR0C = (1<<URSEL0)|(3<<UCSZ00);
    #else
    UCSR0C = (3<<UCSZ00);
     d9c:	86 e0       	ldi	r24, 0x06	; 6
     d9e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     da2:	08 95       	ret

00000da4 <vfprintf>:
     da4:	a0 e1       	ldi	r26, 0x10	; 16
     da6:	b0 e0       	ldi	r27, 0x00	; 0
     da8:	e8 ed       	ldi	r30, 0xD8	; 216
     daa:	f6 e0       	ldi	r31, 0x06	; 6
     dac:	0c 94 77 0a 	jmp	0x14ee	; 0x14ee <__prologue_saves__>
     db0:	7c 01       	movw	r14, r24
     db2:	1b 01       	movw	r2, r22
     db4:	6a 01       	movw	r12, r20
     db6:	fc 01       	movw	r30, r24
     db8:	17 82       	std	Z+7, r1	; 0x07
     dba:	16 82       	std	Z+6, r1	; 0x06
     dbc:	83 81       	ldd	r24, Z+3	; 0x03
     dbe:	81 ff       	sbrs	r24, 1
     dc0:	44 c3       	rjmp	.+1672   	; 0x144a <vfprintf+0x6a6>
     dc2:	9e 01       	movw	r18, r28
     dc4:	2f 5f       	subi	r18, 0xFF	; 255
     dc6:	3f 4f       	sbci	r19, 0xFF	; 255
     dc8:	39 01       	movw	r6, r18
     dca:	f7 01       	movw	r30, r14
     dcc:	93 81       	ldd	r25, Z+3	; 0x03
     dce:	f1 01       	movw	r30, r2
     dd0:	93 fd       	sbrc	r25, 3
     dd2:	85 91       	lpm	r24, Z+
     dd4:	93 ff       	sbrs	r25, 3
     dd6:	81 91       	ld	r24, Z+
     dd8:	1f 01       	movw	r2, r30
     dda:	88 23       	and	r24, r24
     ddc:	09 f4       	brne	.+2      	; 0xde0 <vfprintf+0x3c>
     dde:	31 c3       	rjmp	.+1634   	; 0x1442 <vfprintf+0x69e>
     de0:	85 32       	cpi	r24, 0x25	; 37
     de2:	39 f4       	brne	.+14     	; 0xdf2 <vfprintf+0x4e>
     de4:	93 fd       	sbrc	r25, 3
     de6:	85 91       	lpm	r24, Z+
     de8:	93 ff       	sbrs	r25, 3
     dea:	81 91       	ld	r24, Z+
     dec:	1f 01       	movw	r2, r30
     dee:	85 32       	cpi	r24, 0x25	; 37
     df0:	39 f4       	brne	.+14     	; 0xe00 <vfprintf+0x5c>
     df2:	b7 01       	movw	r22, r14
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	0e 94 9c 0b 	call	0x1738	; 0x1738 <fputc>
     dfa:	56 01       	movw	r10, r12
     dfc:	65 01       	movw	r12, r10
     dfe:	e5 cf       	rjmp	.-54     	; 0xdca <vfprintf+0x26>
     e00:	10 e0       	ldi	r17, 0x00	; 0
     e02:	51 2c       	mov	r5, r1
     e04:	91 2c       	mov	r9, r1
     e06:	ff e1       	ldi	r31, 0x1F	; 31
     e08:	f9 15       	cp	r31, r9
     e0a:	d8 f0       	brcs	.+54     	; 0xe42 <vfprintf+0x9e>
     e0c:	8b 32       	cpi	r24, 0x2B	; 43
     e0e:	79 f0       	breq	.+30     	; 0xe2e <vfprintf+0x8a>
     e10:	38 f4       	brcc	.+14     	; 0xe20 <vfprintf+0x7c>
     e12:	80 32       	cpi	r24, 0x20	; 32
     e14:	79 f0       	breq	.+30     	; 0xe34 <vfprintf+0x90>
     e16:	83 32       	cpi	r24, 0x23	; 35
     e18:	a1 f4       	brne	.+40     	; 0xe42 <vfprintf+0x9e>
     e1a:	f9 2d       	mov	r31, r9
     e1c:	f0 61       	ori	r31, 0x10	; 16
     e1e:	2e c0       	rjmp	.+92     	; 0xe7c <vfprintf+0xd8>
     e20:	8d 32       	cpi	r24, 0x2D	; 45
     e22:	61 f0       	breq	.+24     	; 0xe3c <vfprintf+0x98>
     e24:	80 33       	cpi	r24, 0x30	; 48
     e26:	69 f4       	brne	.+26     	; 0xe42 <vfprintf+0x9e>
     e28:	29 2d       	mov	r18, r9
     e2a:	21 60       	ori	r18, 0x01	; 1
     e2c:	2d c0       	rjmp	.+90     	; 0xe88 <vfprintf+0xe4>
     e2e:	39 2d       	mov	r19, r9
     e30:	32 60       	ori	r19, 0x02	; 2
     e32:	93 2e       	mov	r9, r19
     e34:	89 2d       	mov	r24, r9
     e36:	84 60       	ori	r24, 0x04	; 4
     e38:	98 2e       	mov	r9, r24
     e3a:	2a c0       	rjmp	.+84     	; 0xe90 <vfprintf+0xec>
     e3c:	e9 2d       	mov	r30, r9
     e3e:	e8 60       	ori	r30, 0x08	; 8
     e40:	15 c0       	rjmp	.+42     	; 0xe6c <vfprintf+0xc8>
     e42:	97 fc       	sbrc	r9, 7
     e44:	2d c0       	rjmp	.+90     	; 0xea0 <vfprintf+0xfc>
     e46:	20 ed       	ldi	r18, 0xD0	; 208
     e48:	28 0f       	add	r18, r24
     e4a:	2a 30       	cpi	r18, 0x0A	; 10
     e4c:	88 f4       	brcc	.+34     	; 0xe70 <vfprintf+0xcc>
     e4e:	96 fe       	sbrs	r9, 6
     e50:	06 c0       	rjmp	.+12     	; 0xe5e <vfprintf+0xba>
     e52:	3a e0       	ldi	r19, 0x0A	; 10
     e54:	13 9f       	mul	r17, r19
     e56:	20 0d       	add	r18, r0
     e58:	11 24       	eor	r1, r1
     e5a:	12 2f       	mov	r17, r18
     e5c:	19 c0       	rjmp	.+50     	; 0xe90 <vfprintf+0xec>
     e5e:	8a e0       	ldi	r24, 0x0A	; 10
     e60:	58 9e       	mul	r5, r24
     e62:	20 0d       	add	r18, r0
     e64:	11 24       	eor	r1, r1
     e66:	52 2e       	mov	r5, r18
     e68:	e9 2d       	mov	r30, r9
     e6a:	e0 62       	ori	r30, 0x20	; 32
     e6c:	9e 2e       	mov	r9, r30
     e6e:	10 c0       	rjmp	.+32     	; 0xe90 <vfprintf+0xec>
     e70:	8e 32       	cpi	r24, 0x2E	; 46
     e72:	31 f4       	brne	.+12     	; 0xe80 <vfprintf+0xdc>
     e74:	96 fc       	sbrc	r9, 6
     e76:	e5 c2       	rjmp	.+1482   	; 0x1442 <vfprintf+0x69e>
     e78:	f9 2d       	mov	r31, r9
     e7a:	f0 64       	ori	r31, 0x40	; 64
     e7c:	9f 2e       	mov	r9, r31
     e7e:	08 c0       	rjmp	.+16     	; 0xe90 <vfprintf+0xec>
     e80:	8c 36       	cpi	r24, 0x6C	; 108
     e82:	21 f4       	brne	.+8      	; 0xe8c <vfprintf+0xe8>
     e84:	29 2d       	mov	r18, r9
     e86:	20 68       	ori	r18, 0x80	; 128
     e88:	92 2e       	mov	r9, r18
     e8a:	02 c0       	rjmp	.+4      	; 0xe90 <vfprintf+0xec>
     e8c:	88 36       	cpi	r24, 0x68	; 104
     e8e:	41 f4       	brne	.+16     	; 0xea0 <vfprintf+0xfc>
     e90:	f1 01       	movw	r30, r2
     e92:	93 fd       	sbrc	r25, 3
     e94:	85 91       	lpm	r24, Z+
     e96:	93 ff       	sbrs	r25, 3
     e98:	81 91       	ld	r24, Z+
     e9a:	1f 01       	movw	r2, r30
     e9c:	81 11       	cpse	r24, r1
     e9e:	b3 cf       	rjmp	.-154    	; 0xe06 <vfprintf+0x62>
     ea0:	9b eb       	ldi	r25, 0xBB	; 187
     ea2:	98 0f       	add	r25, r24
     ea4:	93 30       	cpi	r25, 0x03	; 3
     ea6:	20 f4       	brcc	.+8      	; 0xeb0 <vfprintf+0x10c>
     ea8:	99 2d       	mov	r25, r9
     eaa:	90 61       	ori	r25, 0x10	; 16
     eac:	80 5e       	subi	r24, 0xE0	; 224
     eae:	07 c0       	rjmp	.+14     	; 0xebe <vfprintf+0x11a>
     eb0:	9b e9       	ldi	r25, 0x9B	; 155
     eb2:	98 0f       	add	r25, r24
     eb4:	93 30       	cpi	r25, 0x03	; 3
     eb6:	08 f0       	brcs	.+2      	; 0xeba <vfprintf+0x116>
     eb8:	66 c1       	rjmp	.+716    	; 0x1186 <vfprintf+0x3e2>
     eba:	99 2d       	mov	r25, r9
     ebc:	9f 7e       	andi	r25, 0xEF	; 239
     ebe:	96 ff       	sbrs	r25, 6
     ec0:	16 e0       	ldi	r17, 0x06	; 6
     ec2:	9f 73       	andi	r25, 0x3F	; 63
     ec4:	99 2e       	mov	r9, r25
     ec6:	85 36       	cpi	r24, 0x65	; 101
     ec8:	19 f4       	brne	.+6      	; 0xed0 <vfprintf+0x12c>
     eca:	90 64       	ori	r25, 0x40	; 64
     ecc:	99 2e       	mov	r9, r25
     ece:	08 c0       	rjmp	.+16     	; 0xee0 <vfprintf+0x13c>
     ed0:	86 36       	cpi	r24, 0x66	; 102
     ed2:	21 f4       	brne	.+8      	; 0xedc <vfprintf+0x138>
     ed4:	39 2f       	mov	r19, r25
     ed6:	30 68       	ori	r19, 0x80	; 128
     ed8:	93 2e       	mov	r9, r19
     eda:	02 c0       	rjmp	.+4      	; 0xee0 <vfprintf+0x13c>
     edc:	11 11       	cpse	r17, r1
     ede:	11 50       	subi	r17, 0x01	; 1
     ee0:	97 fe       	sbrs	r9, 7
     ee2:	07 c0       	rjmp	.+14     	; 0xef2 <vfprintf+0x14e>
     ee4:	1c 33       	cpi	r17, 0x3C	; 60
     ee6:	50 f4       	brcc	.+20     	; 0xefc <vfprintf+0x158>
     ee8:	44 24       	eor	r4, r4
     eea:	43 94       	inc	r4
     eec:	41 0e       	add	r4, r17
     eee:	27 e0       	ldi	r18, 0x07	; 7
     ef0:	0b c0       	rjmp	.+22     	; 0xf08 <vfprintf+0x164>
     ef2:	18 30       	cpi	r17, 0x08	; 8
     ef4:	38 f0       	brcs	.+14     	; 0xf04 <vfprintf+0x160>
     ef6:	27 e0       	ldi	r18, 0x07	; 7
     ef8:	17 e0       	ldi	r17, 0x07	; 7
     efa:	05 c0       	rjmp	.+10     	; 0xf06 <vfprintf+0x162>
     efc:	27 e0       	ldi	r18, 0x07	; 7
     efe:	9c e3       	ldi	r25, 0x3C	; 60
     f00:	49 2e       	mov	r4, r25
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <vfprintf+0x164>
     f04:	21 2f       	mov	r18, r17
     f06:	41 2c       	mov	r4, r1
     f08:	56 01       	movw	r10, r12
     f0a:	84 e0       	ldi	r24, 0x04	; 4
     f0c:	a8 0e       	add	r10, r24
     f0e:	b1 1c       	adc	r11, r1
     f10:	f6 01       	movw	r30, r12
     f12:	60 81       	ld	r22, Z
     f14:	71 81       	ldd	r23, Z+1	; 0x01
     f16:	82 81       	ldd	r24, Z+2	; 0x02
     f18:	93 81       	ldd	r25, Z+3	; 0x03
     f1a:	04 2d       	mov	r16, r4
     f1c:	a3 01       	movw	r20, r6
     f1e:	0e 94 ae 0a 	call	0x155c	; 0x155c <__ftoa_engine>
     f22:	6c 01       	movw	r12, r24
     f24:	f9 81       	ldd	r31, Y+1	; 0x01
     f26:	fc 87       	std	Y+12, r31	; 0x0c
     f28:	f0 ff       	sbrs	r31, 0
     f2a:	02 c0       	rjmp	.+4      	; 0xf30 <vfprintf+0x18c>
     f2c:	f3 ff       	sbrs	r31, 3
     f2e:	06 c0       	rjmp	.+12     	; 0xf3c <vfprintf+0x198>
     f30:	91 fc       	sbrc	r9, 1
     f32:	06 c0       	rjmp	.+12     	; 0xf40 <vfprintf+0x19c>
     f34:	92 fe       	sbrs	r9, 2
     f36:	06 c0       	rjmp	.+12     	; 0xf44 <vfprintf+0x1a0>
     f38:	00 e2       	ldi	r16, 0x20	; 32
     f3a:	05 c0       	rjmp	.+10     	; 0xf46 <vfprintf+0x1a2>
     f3c:	0d e2       	ldi	r16, 0x2D	; 45
     f3e:	03 c0       	rjmp	.+6      	; 0xf46 <vfprintf+0x1a2>
     f40:	0b e2       	ldi	r16, 0x2B	; 43
     f42:	01 c0       	rjmp	.+2      	; 0xf46 <vfprintf+0x1a2>
     f44:	00 e0       	ldi	r16, 0x00	; 0
     f46:	8c 85       	ldd	r24, Y+12	; 0x0c
     f48:	8c 70       	andi	r24, 0x0C	; 12
     f4a:	19 f0       	breq	.+6      	; 0xf52 <vfprintf+0x1ae>
     f4c:	01 11       	cpse	r16, r1
     f4e:	5a c2       	rjmp	.+1204   	; 0x1404 <vfprintf+0x660>
     f50:	9b c2       	rjmp	.+1334   	; 0x1488 <vfprintf+0x6e4>
     f52:	97 fe       	sbrs	r9, 7
     f54:	10 c0       	rjmp	.+32     	; 0xf76 <vfprintf+0x1d2>
     f56:	4c 0c       	add	r4, r12
     f58:	fc 85       	ldd	r31, Y+12	; 0x0c
     f5a:	f4 ff       	sbrs	r31, 4
     f5c:	04 c0       	rjmp	.+8      	; 0xf66 <vfprintf+0x1c2>
     f5e:	8a 81       	ldd	r24, Y+2	; 0x02
     f60:	81 33       	cpi	r24, 0x31	; 49
     f62:	09 f4       	brne	.+2      	; 0xf66 <vfprintf+0x1c2>
     f64:	4a 94       	dec	r4
     f66:	14 14       	cp	r1, r4
     f68:	74 f5       	brge	.+92     	; 0xfc6 <vfprintf+0x222>
     f6a:	28 e0       	ldi	r18, 0x08	; 8
     f6c:	24 15       	cp	r18, r4
     f6e:	78 f5       	brcc	.+94     	; 0xfce <vfprintf+0x22a>
     f70:	88 e0       	ldi	r24, 0x08	; 8
     f72:	48 2e       	mov	r4, r24
     f74:	2c c0       	rjmp	.+88     	; 0xfce <vfprintf+0x22a>
     f76:	96 fc       	sbrc	r9, 6
     f78:	2a c0       	rjmp	.+84     	; 0xfce <vfprintf+0x22a>
     f7a:	81 2f       	mov	r24, r17
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	8c 15       	cp	r24, r12
     f80:	9d 05       	cpc	r25, r13
     f82:	9c f0       	brlt	.+38     	; 0xfaa <vfprintf+0x206>
     f84:	3c ef       	ldi	r19, 0xFC	; 252
     f86:	c3 16       	cp	r12, r19
     f88:	3f ef       	ldi	r19, 0xFF	; 255
     f8a:	d3 06       	cpc	r13, r19
     f8c:	74 f0       	brlt	.+28     	; 0xfaa <vfprintf+0x206>
     f8e:	89 2d       	mov	r24, r9
     f90:	80 68       	ori	r24, 0x80	; 128
     f92:	98 2e       	mov	r9, r24
     f94:	0a c0       	rjmp	.+20     	; 0xfaa <vfprintf+0x206>
     f96:	e2 e0       	ldi	r30, 0x02	; 2
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	ec 0f       	add	r30, r28
     f9c:	fd 1f       	adc	r31, r29
     f9e:	e1 0f       	add	r30, r17
     fa0:	f1 1d       	adc	r31, r1
     fa2:	80 81       	ld	r24, Z
     fa4:	80 33       	cpi	r24, 0x30	; 48
     fa6:	19 f4       	brne	.+6      	; 0xfae <vfprintf+0x20a>
     fa8:	11 50       	subi	r17, 0x01	; 1
     faa:	11 11       	cpse	r17, r1
     fac:	f4 cf       	rjmp	.-24     	; 0xf96 <vfprintf+0x1f2>
     fae:	97 fe       	sbrs	r9, 7
     fb0:	0e c0       	rjmp	.+28     	; 0xfce <vfprintf+0x22a>
     fb2:	44 24       	eor	r4, r4
     fb4:	43 94       	inc	r4
     fb6:	41 0e       	add	r4, r17
     fb8:	81 2f       	mov	r24, r17
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	c8 16       	cp	r12, r24
     fbe:	d9 06       	cpc	r13, r25
     fc0:	2c f4       	brge	.+10     	; 0xfcc <vfprintf+0x228>
     fc2:	1c 19       	sub	r17, r12
     fc4:	04 c0       	rjmp	.+8      	; 0xfce <vfprintf+0x22a>
     fc6:	44 24       	eor	r4, r4
     fc8:	43 94       	inc	r4
     fca:	01 c0       	rjmp	.+2      	; 0xfce <vfprintf+0x22a>
     fcc:	10 e0       	ldi	r17, 0x00	; 0
     fce:	97 fe       	sbrs	r9, 7
     fd0:	06 c0       	rjmp	.+12     	; 0xfde <vfprintf+0x23a>
     fd2:	1c 14       	cp	r1, r12
     fd4:	1d 04       	cpc	r1, r13
     fd6:	34 f4       	brge	.+12     	; 0xfe4 <vfprintf+0x240>
     fd8:	c6 01       	movw	r24, r12
     fda:	01 96       	adiw	r24, 0x01	; 1
     fdc:	05 c0       	rjmp	.+10     	; 0xfe8 <vfprintf+0x244>
     fde:	85 e0       	ldi	r24, 0x05	; 5
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	02 c0       	rjmp	.+4      	; 0xfe8 <vfprintf+0x244>
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	01 11       	cpse	r16, r1
     fea:	01 96       	adiw	r24, 0x01	; 1
     fec:	11 23       	and	r17, r17
     fee:	31 f0       	breq	.+12     	; 0xffc <vfprintf+0x258>
     ff0:	21 2f       	mov	r18, r17
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	2f 5f       	subi	r18, 0xFF	; 255
     ff6:	3f 4f       	sbci	r19, 0xFF	; 255
     ff8:	82 0f       	add	r24, r18
     ffa:	93 1f       	adc	r25, r19
     ffc:	25 2d       	mov	r18, r5
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	82 17       	cp	r24, r18
    1002:	93 07       	cpc	r25, r19
    1004:	14 f4       	brge	.+4      	; 0x100a <vfprintf+0x266>
    1006:	58 1a       	sub	r5, r24
    1008:	01 c0       	rjmp	.+2      	; 0x100c <vfprintf+0x268>
    100a:	51 2c       	mov	r5, r1
    100c:	89 2d       	mov	r24, r9
    100e:	89 70       	andi	r24, 0x09	; 9
    1010:	49 f4       	brne	.+18     	; 0x1024 <vfprintf+0x280>
    1012:	55 20       	and	r5, r5
    1014:	39 f0       	breq	.+14     	; 0x1024 <vfprintf+0x280>
    1016:	b7 01       	movw	r22, r14
    1018:	80 e2       	ldi	r24, 0x20	; 32
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	0e 94 9c 0b 	call	0x1738	; 0x1738 <fputc>
    1020:	5a 94       	dec	r5
    1022:	f7 cf       	rjmp	.-18     	; 0x1012 <vfprintf+0x26e>
    1024:	00 23       	and	r16, r16
    1026:	29 f0       	breq	.+10     	; 0x1032 <vfprintf+0x28e>
    1028:	b7 01       	movw	r22, r14
    102a:	80 2f       	mov	r24, r16
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	0e 94 9c 0b 	call	0x1738	; 0x1738 <fputc>
    1032:	93 fc       	sbrc	r9, 3
    1034:	09 c0       	rjmp	.+18     	; 0x1048 <vfprintf+0x2a4>
    1036:	55 20       	and	r5, r5
    1038:	39 f0       	breq	.+14     	; 0x1048 <vfprintf+0x2a4>
    103a:	b7 01       	movw	r22, r14
    103c:	80 e3       	ldi	r24, 0x30	; 48
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	0e 94 9c 0b 	call	0x1738	; 0x1738 <fputc>
    1044:	5a 94       	dec	r5
    1046:	f7 cf       	rjmp	.-18     	; 0x1036 <vfprintf+0x292>
    1048:	97 fe       	sbrs	r9, 7
    104a:	4c c0       	rjmp	.+152    	; 0x10e4 <vfprintf+0x340>
    104c:	46 01       	movw	r8, r12
    104e:	d7 fe       	sbrs	r13, 7
    1050:	02 c0       	rjmp	.+4      	; 0x1056 <vfprintf+0x2b2>
    1052:	81 2c       	mov	r8, r1
    1054:	91 2c       	mov	r9, r1
    1056:	c6 01       	movw	r24, r12
    1058:	88 19       	sub	r24, r8
    105a:	99 09       	sbc	r25, r9
    105c:	f3 01       	movw	r30, r6
    105e:	e8 0f       	add	r30, r24
    1060:	f9 1f       	adc	r31, r25
    1062:	fe 87       	std	Y+14, r31	; 0x0e
    1064:	ed 87       	std	Y+13, r30	; 0x0d
    1066:	96 01       	movw	r18, r12
    1068:	24 19       	sub	r18, r4
    106a:	31 09       	sbc	r19, r1
    106c:	38 8b       	std	Y+16, r19	; 0x10
    106e:	2f 87       	std	Y+15, r18	; 0x0f
    1070:	01 2f       	mov	r16, r17
    1072:	10 e0       	ldi	r17, 0x00	; 0
    1074:	11 95       	neg	r17
    1076:	01 95       	neg	r16
    1078:	11 09       	sbc	r17, r1
    107a:	3f ef       	ldi	r19, 0xFF	; 255
    107c:	83 16       	cp	r8, r19
    107e:	93 06       	cpc	r9, r19
    1080:	29 f4       	brne	.+10     	; 0x108c <vfprintf+0x2e8>
    1082:	b7 01       	movw	r22, r14
    1084:	8e e2       	ldi	r24, 0x2E	; 46
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	0e 94 9c 0b 	call	0x1738	; 0x1738 <fputc>
    108c:	c8 14       	cp	r12, r8
    108e:	d9 04       	cpc	r13, r9
    1090:	4c f0       	brlt	.+18     	; 0x10a4 <vfprintf+0x300>
    1092:	8f 85       	ldd	r24, Y+15	; 0x0f
    1094:	98 89       	ldd	r25, Y+16	; 0x10
    1096:	88 15       	cp	r24, r8
    1098:	99 05       	cpc	r25, r9
    109a:	24 f4       	brge	.+8      	; 0x10a4 <vfprintf+0x300>
    109c:	ed 85       	ldd	r30, Y+13	; 0x0d
    109e:	fe 85       	ldd	r31, Y+14	; 0x0e
    10a0:	81 81       	ldd	r24, Z+1	; 0x01
    10a2:	01 c0       	rjmp	.+2      	; 0x10a6 <vfprintf+0x302>
    10a4:	80 e3       	ldi	r24, 0x30	; 48
    10a6:	f1 e0       	ldi	r31, 0x01	; 1
    10a8:	8f 1a       	sub	r8, r31
    10aa:	91 08       	sbc	r9, r1
    10ac:	2d 85       	ldd	r18, Y+13	; 0x0d
    10ae:	3e 85       	ldd	r19, Y+14	; 0x0e
    10b0:	2f 5f       	subi	r18, 0xFF	; 255
    10b2:	3f 4f       	sbci	r19, 0xFF	; 255
    10b4:	3e 87       	std	Y+14, r19	; 0x0e
    10b6:	2d 87       	std	Y+13, r18	; 0x0d
    10b8:	80 16       	cp	r8, r16
    10ba:	91 06       	cpc	r9, r17
    10bc:	2c f0       	brlt	.+10     	; 0x10c8 <vfprintf+0x324>
    10be:	b7 01       	movw	r22, r14
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	0e 94 9c 0b 	call	0x1738	; 0x1738 <fputc>
    10c6:	d9 cf       	rjmp	.-78     	; 0x107a <vfprintf+0x2d6>
    10c8:	c8 14       	cp	r12, r8
    10ca:	d9 04       	cpc	r13, r9
    10cc:	41 f4       	brne	.+16     	; 0x10de <vfprintf+0x33a>
    10ce:	9a 81       	ldd	r25, Y+2	; 0x02
    10d0:	96 33       	cpi	r25, 0x36	; 54
    10d2:	20 f4       	brcc	.+8      	; 0x10dc <vfprintf+0x338>
    10d4:	95 33       	cpi	r25, 0x35	; 53
    10d6:	19 f4       	brne	.+6      	; 0x10de <vfprintf+0x33a>
    10d8:	3c 85       	ldd	r19, Y+12	; 0x0c
    10da:	34 ff       	sbrs	r19, 4
    10dc:	81 e3       	ldi	r24, 0x31	; 49
    10de:	b7 01       	movw	r22, r14
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	4e c0       	rjmp	.+156    	; 0x1180 <vfprintf+0x3dc>
    10e4:	8a 81       	ldd	r24, Y+2	; 0x02
    10e6:	81 33       	cpi	r24, 0x31	; 49
    10e8:	19 f0       	breq	.+6      	; 0x10f0 <vfprintf+0x34c>
    10ea:	9c 85       	ldd	r25, Y+12	; 0x0c
    10ec:	9f 7e       	andi	r25, 0xEF	; 239
    10ee:	9c 87       	std	Y+12, r25	; 0x0c
    10f0:	b7 01       	movw	r22, r14
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	0e 94 9c 0b 	call	0x1738	; 0x1738 <fputc>
    10f8:	11 11       	cpse	r17, r1
    10fa:	05 c0       	rjmp	.+10     	; 0x1106 <vfprintf+0x362>
    10fc:	94 fc       	sbrc	r9, 4
    10fe:	18 c0       	rjmp	.+48     	; 0x1130 <vfprintf+0x38c>
    1100:	85 e6       	ldi	r24, 0x65	; 101
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	17 c0       	rjmp	.+46     	; 0x1134 <vfprintf+0x390>
    1106:	b7 01       	movw	r22, r14
    1108:	8e e2       	ldi	r24, 0x2E	; 46
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	0e 94 9c 0b 	call	0x1738	; 0x1738 <fputc>
    1110:	1e 5f       	subi	r17, 0xFE	; 254
    1112:	82 e0       	ldi	r24, 0x02	; 2
    1114:	01 e0       	ldi	r16, 0x01	; 1
    1116:	08 0f       	add	r16, r24
    1118:	f3 01       	movw	r30, r6
    111a:	e8 0f       	add	r30, r24
    111c:	f1 1d       	adc	r31, r1
    111e:	80 81       	ld	r24, Z
    1120:	b7 01       	movw	r22, r14
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	0e 94 9c 0b 	call	0x1738	; 0x1738 <fputc>
    1128:	80 2f       	mov	r24, r16
    112a:	01 13       	cpse	r16, r17
    112c:	f3 cf       	rjmp	.-26     	; 0x1114 <vfprintf+0x370>
    112e:	e6 cf       	rjmp	.-52     	; 0x10fc <vfprintf+0x358>
    1130:	85 e4       	ldi	r24, 0x45	; 69
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	b7 01       	movw	r22, r14
    1136:	0e 94 9c 0b 	call	0x1738	; 0x1738 <fputc>
    113a:	d7 fc       	sbrc	r13, 7
    113c:	06 c0       	rjmp	.+12     	; 0x114a <vfprintf+0x3a6>
    113e:	c1 14       	cp	r12, r1
    1140:	d1 04       	cpc	r13, r1
    1142:	41 f4       	brne	.+16     	; 0x1154 <vfprintf+0x3b0>
    1144:	ec 85       	ldd	r30, Y+12	; 0x0c
    1146:	e4 ff       	sbrs	r30, 4
    1148:	05 c0       	rjmp	.+10     	; 0x1154 <vfprintf+0x3b0>
    114a:	d1 94       	neg	r13
    114c:	c1 94       	neg	r12
    114e:	d1 08       	sbc	r13, r1
    1150:	8d e2       	ldi	r24, 0x2D	; 45
    1152:	01 c0       	rjmp	.+2      	; 0x1156 <vfprintf+0x3b2>
    1154:	8b e2       	ldi	r24, 0x2B	; 43
    1156:	b7 01       	movw	r22, r14
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	0e 94 9c 0b 	call	0x1738	; 0x1738 <fputc>
    115e:	80 e3       	ldi	r24, 0x30	; 48
    1160:	2a e0       	ldi	r18, 0x0A	; 10
    1162:	c2 16       	cp	r12, r18
    1164:	d1 04       	cpc	r13, r1
    1166:	2c f0       	brlt	.+10     	; 0x1172 <vfprintf+0x3ce>
    1168:	8f 5f       	subi	r24, 0xFF	; 255
    116a:	fa e0       	ldi	r31, 0x0A	; 10
    116c:	cf 1a       	sub	r12, r31
    116e:	d1 08       	sbc	r13, r1
    1170:	f7 cf       	rjmp	.-18     	; 0x1160 <vfprintf+0x3bc>
    1172:	b7 01       	movw	r22, r14
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	0e 94 9c 0b 	call	0x1738	; 0x1738 <fputc>
    117a:	b7 01       	movw	r22, r14
    117c:	c6 01       	movw	r24, r12
    117e:	c0 96       	adiw	r24, 0x30	; 48
    1180:	0e 94 9c 0b 	call	0x1738	; 0x1738 <fputc>
    1184:	54 c1       	rjmp	.+680    	; 0x142e <vfprintf+0x68a>
    1186:	83 36       	cpi	r24, 0x63	; 99
    1188:	31 f0       	breq	.+12     	; 0x1196 <vfprintf+0x3f2>
    118a:	83 37       	cpi	r24, 0x73	; 115
    118c:	79 f0       	breq	.+30     	; 0x11ac <vfprintf+0x408>
    118e:	83 35       	cpi	r24, 0x53	; 83
    1190:	09 f0       	breq	.+2      	; 0x1194 <vfprintf+0x3f0>
    1192:	56 c0       	rjmp	.+172    	; 0x1240 <vfprintf+0x49c>
    1194:	20 c0       	rjmp	.+64     	; 0x11d6 <vfprintf+0x432>
    1196:	56 01       	movw	r10, r12
    1198:	32 e0       	ldi	r19, 0x02	; 2
    119a:	a3 0e       	add	r10, r19
    119c:	b1 1c       	adc	r11, r1
    119e:	f6 01       	movw	r30, r12
    11a0:	80 81       	ld	r24, Z
    11a2:	89 83       	std	Y+1, r24	; 0x01
    11a4:	01 e0       	ldi	r16, 0x01	; 1
    11a6:	10 e0       	ldi	r17, 0x00	; 0
    11a8:	63 01       	movw	r12, r6
    11aa:	12 c0       	rjmp	.+36     	; 0x11d0 <vfprintf+0x42c>
    11ac:	56 01       	movw	r10, r12
    11ae:	f2 e0       	ldi	r31, 0x02	; 2
    11b0:	af 0e       	add	r10, r31
    11b2:	b1 1c       	adc	r11, r1
    11b4:	f6 01       	movw	r30, r12
    11b6:	c0 80       	ld	r12, Z
    11b8:	d1 80       	ldd	r13, Z+1	; 0x01
    11ba:	96 fe       	sbrs	r9, 6
    11bc:	03 c0       	rjmp	.+6      	; 0x11c4 <vfprintf+0x420>
    11be:	61 2f       	mov	r22, r17
    11c0:	70 e0       	ldi	r23, 0x00	; 0
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <vfprintf+0x424>
    11c4:	6f ef       	ldi	r22, 0xFF	; 255
    11c6:	7f ef       	ldi	r23, 0xFF	; 255
    11c8:	c6 01       	movw	r24, r12
    11ca:	0e 94 91 0b 	call	0x1722	; 0x1722 <strnlen>
    11ce:	8c 01       	movw	r16, r24
    11d0:	f9 2d       	mov	r31, r9
    11d2:	ff 77       	andi	r31, 0x7F	; 127
    11d4:	14 c0       	rjmp	.+40     	; 0x11fe <vfprintf+0x45a>
    11d6:	56 01       	movw	r10, r12
    11d8:	22 e0       	ldi	r18, 0x02	; 2
    11da:	a2 0e       	add	r10, r18
    11dc:	b1 1c       	adc	r11, r1
    11de:	f6 01       	movw	r30, r12
    11e0:	c0 80       	ld	r12, Z
    11e2:	d1 80       	ldd	r13, Z+1	; 0x01
    11e4:	96 fe       	sbrs	r9, 6
    11e6:	03 c0       	rjmp	.+6      	; 0x11ee <vfprintf+0x44a>
    11e8:	61 2f       	mov	r22, r17
    11ea:	70 e0       	ldi	r23, 0x00	; 0
    11ec:	02 c0       	rjmp	.+4      	; 0x11f2 <vfprintf+0x44e>
    11ee:	6f ef       	ldi	r22, 0xFF	; 255
    11f0:	7f ef       	ldi	r23, 0xFF	; 255
    11f2:	c6 01       	movw	r24, r12
    11f4:	0e 94 86 0b 	call	0x170c	; 0x170c <strnlen_P>
    11f8:	8c 01       	movw	r16, r24
    11fa:	f9 2d       	mov	r31, r9
    11fc:	f0 68       	ori	r31, 0x80	; 128
    11fe:	9f 2e       	mov	r9, r31
    1200:	f3 fd       	sbrc	r31, 3
    1202:	1a c0       	rjmp	.+52     	; 0x1238 <vfprintf+0x494>
    1204:	85 2d       	mov	r24, r5
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	08 17       	cp	r16, r24
    120a:	19 07       	cpc	r17, r25
    120c:	a8 f4       	brcc	.+42     	; 0x1238 <vfprintf+0x494>
    120e:	b7 01       	movw	r22, r14
    1210:	80 e2       	ldi	r24, 0x20	; 32
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	0e 94 9c 0b 	call	0x1738	; 0x1738 <fputc>
    1218:	5a 94       	dec	r5
    121a:	f4 cf       	rjmp	.-24     	; 0x1204 <vfprintf+0x460>
    121c:	f6 01       	movw	r30, r12
    121e:	97 fc       	sbrc	r9, 7
    1220:	85 91       	lpm	r24, Z+
    1222:	97 fe       	sbrs	r9, 7
    1224:	81 91       	ld	r24, Z+
    1226:	6f 01       	movw	r12, r30
    1228:	b7 01       	movw	r22, r14
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	0e 94 9c 0b 	call	0x1738	; 0x1738 <fputc>
    1230:	51 10       	cpse	r5, r1
    1232:	5a 94       	dec	r5
    1234:	01 50       	subi	r16, 0x01	; 1
    1236:	11 09       	sbc	r17, r1
    1238:	01 15       	cp	r16, r1
    123a:	11 05       	cpc	r17, r1
    123c:	79 f7       	brne	.-34     	; 0x121c <vfprintf+0x478>
    123e:	f7 c0       	rjmp	.+494    	; 0x142e <vfprintf+0x68a>
    1240:	84 36       	cpi	r24, 0x64	; 100
    1242:	11 f0       	breq	.+4      	; 0x1248 <vfprintf+0x4a4>
    1244:	89 36       	cpi	r24, 0x69	; 105
    1246:	61 f5       	brne	.+88     	; 0x12a0 <vfprintf+0x4fc>
    1248:	56 01       	movw	r10, r12
    124a:	97 fe       	sbrs	r9, 7
    124c:	09 c0       	rjmp	.+18     	; 0x1260 <vfprintf+0x4bc>
    124e:	24 e0       	ldi	r18, 0x04	; 4
    1250:	a2 0e       	add	r10, r18
    1252:	b1 1c       	adc	r11, r1
    1254:	f6 01       	movw	r30, r12
    1256:	60 81       	ld	r22, Z
    1258:	71 81       	ldd	r23, Z+1	; 0x01
    125a:	82 81       	ldd	r24, Z+2	; 0x02
    125c:	93 81       	ldd	r25, Z+3	; 0x03
    125e:	0a c0       	rjmp	.+20     	; 0x1274 <vfprintf+0x4d0>
    1260:	f2 e0       	ldi	r31, 0x02	; 2
    1262:	af 0e       	add	r10, r31
    1264:	b1 1c       	adc	r11, r1
    1266:	f6 01       	movw	r30, r12
    1268:	60 81       	ld	r22, Z
    126a:	71 81       	ldd	r23, Z+1	; 0x01
    126c:	07 2e       	mov	r0, r23
    126e:	00 0c       	add	r0, r0
    1270:	88 0b       	sbc	r24, r24
    1272:	99 0b       	sbc	r25, r25
    1274:	f9 2d       	mov	r31, r9
    1276:	ff 76       	andi	r31, 0x6F	; 111
    1278:	9f 2e       	mov	r9, r31
    127a:	97 ff       	sbrs	r25, 7
    127c:	09 c0       	rjmp	.+18     	; 0x1290 <vfprintf+0x4ec>
    127e:	90 95       	com	r25
    1280:	80 95       	com	r24
    1282:	70 95       	com	r23
    1284:	61 95       	neg	r22
    1286:	7f 4f       	sbci	r23, 0xFF	; 255
    1288:	8f 4f       	sbci	r24, 0xFF	; 255
    128a:	9f 4f       	sbci	r25, 0xFF	; 255
    128c:	f0 68       	ori	r31, 0x80	; 128
    128e:	9f 2e       	mov	r9, r31
    1290:	2a e0       	ldi	r18, 0x0A	; 10
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	a3 01       	movw	r20, r6
    1296:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__ultoa_invert>
    129a:	c8 2e       	mov	r12, r24
    129c:	c6 18       	sub	r12, r6
    129e:	3f c0       	rjmp	.+126    	; 0x131e <vfprintf+0x57a>
    12a0:	09 2d       	mov	r16, r9
    12a2:	85 37       	cpi	r24, 0x75	; 117
    12a4:	21 f4       	brne	.+8      	; 0x12ae <vfprintf+0x50a>
    12a6:	0f 7e       	andi	r16, 0xEF	; 239
    12a8:	2a e0       	ldi	r18, 0x0A	; 10
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	1d c0       	rjmp	.+58     	; 0x12e8 <vfprintf+0x544>
    12ae:	09 7f       	andi	r16, 0xF9	; 249
    12b0:	8f 36       	cpi	r24, 0x6F	; 111
    12b2:	91 f0       	breq	.+36     	; 0x12d8 <vfprintf+0x534>
    12b4:	18 f4       	brcc	.+6      	; 0x12bc <vfprintf+0x518>
    12b6:	88 35       	cpi	r24, 0x58	; 88
    12b8:	59 f0       	breq	.+22     	; 0x12d0 <vfprintf+0x52c>
    12ba:	c3 c0       	rjmp	.+390    	; 0x1442 <vfprintf+0x69e>
    12bc:	80 37       	cpi	r24, 0x70	; 112
    12be:	19 f0       	breq	.+6      	; 0x12c6 <vfprintf+0x522>
    12c0:	88 37       	cpi	r24, 0x78	; 120
    12c2:	11 f0       	breq	.+4      	; 0x12c8 <vfprintf+0x524>
    12c4:	be c0       	rjmp	.+380    	; 0x1442 <vfprintf+0x69e>
    12c6:	00 61       	ori	r16, 0x10	; 16
    12c8:	04 ff       	sbrs	r16, 4
    12ca:	09 c0       	rjmp	.+18     	; 0x12de <vfprintf+0x53a>
    12cc:	04 60       	ori	r16, 0x04	; 4
    12ce:	07 c0       	rjmp	.+14     	; 0x12de <vfprintf+0x53a>
    12d0:	94 fe       	sbrs	r9, 4
    12d2:	08 c0       	rjmp	.+16     	; 0x12e4 <vfprintf+0x540>
    12d4:	06 60       	ori	r16, 0x06	; 6
    12d6:	06 c0       	rjmp	.+12     	; 0x12e4 <vfprintf+0x540>
    12d8:	28 e0       	ldi	r18, 0x08	; 8
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	05 c0       	rjmp	.+10     	; 0x12e8 <vfprintf+0x544>
    12de:	20 e1       	ldi	r18, 0x10	; 16
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	02 c0       	rjmp	.+4      	; 0x12e8 <vfprintf+0x544>
    12e4:	20 e1       	ldi	r18, 0x10	; 16
    12e6:	32 e0       	ldi	r19, 0x02	; 2
    12e8:	56 01       	movw	r10, r12
    12ea:	07 ff       	sbrs	r16, 7
    12ec:	09 c0       	rjmp	.+18     	; 0x1300 <vfprintf+0x55c>
    12ee:	84 e0       	ldi	r24, 0x04	; 4
    12f0:	a8 0e       	add	r10, r24
    12f2:	b1 1c       	adc	r11, r1
    12f4:	f6 01       	movw	r30, r12
    12f6:	60 81       	ld	r22, Z
    12f8:	71 81       	ldd	r23, Z+1	; 0x01
    12fa:	82 81       	ldd	r24, Z+2	; 0x02
    12fc:	93 81       	ldd	r25, Z+3	; 0x03
    12fe:	08 c0       	rjmp	.+16     	; 0x1310 <vfprintf+0x56c>
    1300:	f2 e0       	ldi	r31, 0x02	; 2
    1302:	af 0e       	add	r10, r31
    1304:	b1 1c       	adc	r11, r1
    1306:	f6 01       	movw	r30, r12
    1308:	60 81       	ld	r22, Z
    130a:	71 81       	ldd	r23, Z+1	; 0x01
    130c:	80 e0       	ldi	r24, 0x00	; 0
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	a3 01       	movw	r20, r6
    1312:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__ultoa_invert>
    1316:	c8 2e       	mov	r12, r24
    1318:	c6 18       	sub	r12, r6
    131a:	0f 77       	andi	r16, 0x7F	; 127
    131c:	90 2e       	mov	r9, r16
    131e:	96 fe       	sbrs	r9, 6
    1320:	0b c0       	rjmp	.+22     	; 0x1338 <vfprintf+0x594>
    1322:	09 2d       	mov	r16, r9
    1324:	0e 7f       	andi	r16, 0xFE	; 254
    1326:	c1 16       	cp	r12, r17
    1328:	50 f4       	brcc	.+20     	; 0x133e <vfprintf+0x59a>
    132a:	94 fe       	sbrs	r9, 4
    132c:	0a c0       	rjmp	.+20     	; 0x1342 <vfprintf+0x59e>
    132e:	92 fc       	sbrc	r9, 2
    1330:	08 c0       	rjmp	.+16     	; 0x1342 <vfprintf+0x59e>
    1332:	09 2d       	mov	r16, r9
    1334:	0e 7e       	andi	r16, 0xEE	; 238
    1336:	05 c0       	rjmp	.+10     	; 0x1342 <vfprintf+0x59e>
    1338:	dc 2c       	mov	r13, r12
    133a:	09 2d       	mov	r16, r9
    133c:	03 c0       	rjmp	.+6      	; 0x1344 <vfprintf+0x5a0>
    133e:	dc 2c       	mov	r13, r12
    1340:	01 c0       	rjmp	.+2      	; 0x1344 <vfprintf+0x5a0>
    1342:	d1 2e       	mov	r13, r17
    1344:	04 ff       	sbrs	r16, 4
    1346:	0d c0       	rjmp	.+26     	; 0x1362 <vfprintf+0x5be>
    1348:	fe 01       	movw	r30, r28
    134a:	ec 0d       	add	r30, r12
    134c:	f1 1d       	adc	r31, r1
    134e:	80 81       	ld	r24, Z
    1350:	80 33       	cpi	r24, 0x30	; 48
    1352:	11 f4       	brne	.+4      	; 0x1358 <vfprintf+0x5b4>
    1354:	09 7e       	andi	r16, 0xE9	; 233
    1356:	09 c0       	rjmp	.+18     	; 0x136a <vfprintf+0x5c6>
    1358:	02 ff       	sbrs	r16, 2
    135a:	06 c0       	rjmp	.+12     	; 0x1368 <vfprintf+0x5c4>
    135c:	d3 94       	inc	r13
    135e:	d3 94       	inc	r13
    1360:	04 c0       	rjmp	.+8      	; 0x136a <vfprintf+0x5c6>
    1362:	80 2f       	mov	r24, r16
    1364:	86 78       	andi	r24, 0x86	; 134
    1366:	09 f0       	breq	.+2      	; 0x136a <vfprintf+0x5c6>
    1368:	d3 94       	inc	r13
    136a:	03 fd       	sbrc	r16, 3
    136c:	11 c0       	rjmp	.+34     	; 0x1390 <vfprintf+0x5ec>
    136e:	00 ff       	sbrs	r16, 0
    1370:	06 c0       	rjmp	.+12     	; 0x137e <vfprintf+0x5da>
    1372:	1c 2d       	mov	r17, r12
    1374:	d5 14       	cp	r13, r5
    1376:	80 f4       	brcc	.+32     	; 0x1398 <vfprintf+0x5f4>
    1378:	15 0d       	add	r17, r5
    137a:	1d 19       	sub	r17, r13
    137c:	0d c0       	rjmp	.+26     	; 0x1398 <vfprintf+0x5f4>
    137e:	d5 14       	cp	r13, r5
    1380:	58 f4       	brcc	.+22     	; 0x1398 <vfprintf+0x5f4>
    1382:	b7 01       	movw	r22, r14
    1384:	80 e2       	ldi	r24, 0x20	; 32
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	0e 94 9c 0b 	call	0x1738	; 0x1738 <fputc>
    138c:	d3 94       	inc	r13
    138e:	f7 cf       	rjmp	.-18     	; 0x137e <vfprintf+0x5da>
    1390:	d5 14       	cp	r13, r5
    1392:	10 f4       	brcc	.+4      	; 0x1398 <vfprintf+0x5f4>
    1394:	5d 18       	sub	r5, r13
    1396:	01 c0       	rjmp	.+2      	; 0x139a <vfprintf+0x5f6>
    1398:	51 2c       	mov	r5, r1
    139a:	04 ff       	sbrs	r16, 4
    139c:	10 c0       	rjmp	.+32     	; 0x13be <vfprintf+0x61a>
    139e:	b7 01       	movw	r22, r14
    13a0:	80 e3       	ldi	r24, 0x30	; 48
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	0e 94 9c 0b 	call	0x1738	; 0x1738 <fputc>
    13a8:	02 ff       	sbrs	r16, 2
    13aa:	17 c0       	rjmp	.+46     	; 0x13da <vfprintf+0x636>
    13ac:	01 fd       	sbrc	r16, 1
    13ae:	03 c0       	rjmp	.+6      	; 0x13b6 <vfprintf+0x612>
    13b0:	88 e7       	ldi	r24, 0x78	; 120
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	02 c0       	rjmp	.+4      	; 0x13ba <vfprintf+0x616>
    13b6:	88 e5       	ldi	r24, 0x58	; 88
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	b7 01       	movw	r22, r14
    13bc:	0c c0       	rjmp	.+24     	; 0x13d6 <vfprintf+0x632>
    13be:	80 2f       	mov	r24, r16
    13c0:	86 78       	andi	r24, 0x86	; 134
    13c2:	59 f0       	breq	.+22     	; 0x13da <vfprintf+0x636>
    13c4:	01 ff       	sbrs	r16, 1
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <vfprintf+0x628>
    13c8:	8b e2       	ldi	r24, 0x2B	; 43
    13ca:	01 c0       	rjmp	.+2      	; 0x13ce <vfprintf+0x62a>
    13cc:	80 e2       	ldi	r24, 0x20	; 32
    13ce:	07 fd       	sbrc	r16, 7
    13d0:	8d e2       	ldi	r24, 0x2D	; 45
    13d2:	b7 01       	movw	r22, r14
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	0e 94 9c 0b 	call	0x1738	; 0x1738 <fputc>
    13da:	c1 16       	cp	r12, r17
    13dc:	38 f4       	brcc	.+14     	; 0x13ec <vfprintf+0x648>
    13de:	b7 01       	movw	r22, r14
    13e0:	80 e3       	ldi	r24, 0x30	; 48
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	0e 94 9c 0b 	call	0x1738	; 0x1738 <fputc>
    13e8:	11 50       	subi	r17, 0x01	; 1
    13ea:	f7 cf       	rjmp	.-18     	; 0x13da <vfprintf+0x636>
    13ec:	ca 94       	dec	r12
    13ee:	f3 01       	movw	r30, r6
    13f0:	ec 0d       	add	r30, r12
    13f2:	f1 1d       	adc	r31, r1
    13f4:	80 81       	ld	r24, Z
    13f6:	b7 01       	movw	r22, r14
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	0e 94 9c 0b 	call	0x1738	; 0x1738 <fputc>
    13fe:	c1 10       	cpse	r12, r1
    1400:	f5 cf       	rjmp	.-22     	; 0x13ec <vfprintf+0x648>
    1402:	15 c0       	rjmp	.+42     	; 0x142e <vfprintf+0x68a>
    1404:	f4 e0       	ldi	r31, 0x04	; 4
    1406:	f5 15       	cp	r31, r5
    1408:	60 f5       	brcc	.+88     	; 0x1462 <vfprintf+0x6be>
    140a:	84 e0       	ldi	r24, 0x04	; 4
    140c:	58 1a       	sub	r5, r24
    140e:	93 fe       	sbrs	r9, 3
    1410:	1f c0       	rjmp	.+62     	; 0x1450 <vfprintf+0x6ac>
    1412:	01 11       	cpse	r16, r1
    1414:	27 c0       	rjmp	.+78     	; 0x1464 <vfprintf+0x6c0>
    1416:	2c 85       	ldd	r18, Y+12	; 0x0c
    1418:	23 ff       	sbrs	r18, 3
    141a:	2a c0       	rjmp	.+84     	; 0x1470 <vfprintf+0x6cc>
    141c:	0a ef       	ldi	r16, 0xFA	; 250
    141e:	11 e0       	ldi	r17, 0x01	; 1
    1420:	39 2d       	mov	r19, r9
    1422:	30 71       	andi	r19, 0x10	; 16
    1424:	93 2e       	mov	r9, r19
    1426:	f8 01       	movw	r30, r16
    1428:	84 91       	lpm	r24, Z
    142a:	81 11       	cpse	r24, r1
    142c:	24 c0       	rjmp	.+72     	; 0x1476 <vfprintf+0x6d2>
    142e:	55 20       	and	r5, r5
    1430:	09 f4       	brne	.+2      	; 0x1434 <vfprintf+0x690>
    1432:	e4 cc       	rjmp	.-1592   	; 0xdfc <vfprintf+0x58>
    1434:	b7 01       	movw	r22, r14
    1436:	80 e2       	ldi	r24, 0x20	; 32
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	0e 94 9c 0b 	call	0x1738	; 0x1738 <fputc>
    143e:	5a 94       	dec	r5
    1440:	f6 cf       	rjmp	.-20     	; 0x142e <vfprintf+0x68a>
    1442:	f7 01       	movw	r30, r14
    1444:	86 81       	ldd	r24, Z+6	; 0x06
    1446:	97 81       	ldd	r25, Z+7	; 0x07
    1448:	26 c0       	rjmp	.+76     	; 0x1496 <vfprintf+0x6f2>
    144a:	8f ef       	ldi	r24, 0xFF	; 255
    144c:	9f ef       	ldi	r25, 0xFF	; 255
    144e:	23 c0       	rjmp	.+70     	; 0x1496 <vfprintf+0x6f2>
    1450:	b7 01       	movw	r22, r14
    1452:	80 e2       	ldi	r24, 0x20	; 32
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	0e 94 9c 0b 	call	0x1738	; 0x1738 <fputc>
    145a:	5a 94       	dec	r5
    145c:	51 10       	cpse	r5, r1
    145e:	f8 cf       	rjmp	.-16     	; 0x1450 <vfprintf+0x6ac>
    1460:	d8 cf       	rjmp	.-80     	; 0x1412 <vfprintf+0x66e>
    1462:	51 2c       	mov	r5, r1
    1464:	b7 01       	movw	r22, r14
    1466:	80 2f       	mov	r24, r16
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	0e 94 9c 0b 	call	0x1738	; 0x1738 <fputc>
    146e:	d3 cf       	rjmp	.-90     	; 0x1416 <vfprintf+0x672>
    1470:	0e ef       	ldi	r16, 0xFE	; 254
    1472:	11 e0       	ldi	r17, 0x01	; 1
    1474:	d5 cf       	rjmp	.-86     	; 0x1420 <vfprintf+0x67c>
    1476:	91 10       	cpse	r9, r1
    1478:	80 52       	subi	r24, 0x20	; 32
    147a:	b7 01       	movw	r22, r14
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	0e 94 9c 0b 	call	0x1738	; 0x1738 <fputc>
    1482:	0f 5f       	subi	r16, 0xFF	; 255
    1484:	1f 4f       	sbci	r17, 0xFF	; 255
    1486:	cf cf       	rjmp	.-98     	; 0x1426 <vfprintf+0x682>
    1488:	23 e0       	ldi	r18, 0x03	; 3
    148a:	25 15       	cp	r18, r5
    148c:	10 f4       	brcc	.+4      	; 0x1492 <vfprintf+0x6ee>
    148e:	83 e0       	ldi	r24, 0x03	; 3
    1490:	bd cf       	rjmp	.-134    	; 0x140c <vfprintf+0x668>
    1492:	51 2c       	mov	r5, r1
    1494:	c0 cf       	rjmp	.-128    	; 0x1416 <vfprintf+0x672>
    1496:	60 96       	adiw	r28, 0x10	; 16
    1498:	e2 e1       	ldi	r30, 0x12	; 18
    149a:	0c 94 93 0a 	jmp	0x1526	; 0x1526 <__epilogue_restores__>

0000149e <__udivmodsi4>:
    149e:	a1 e2       	ldi	r26, 0x21	; 33
    14a0:	1a 2e       	mov	r1, r26
    14a2:	aa 1b       	sub	r26, r26
    14a4:	bb 1b       	sub	r27, r27
    14a6:	fd 01       	movw	r30, r26
    14a8:	0d c0       	rjmp	.+26     	; 0x14c4 <__udivmodsi4_ep>

000014aa <__udivmodsi4_loop>:
    14aa:	aa 1f       	adc	r26, r26
    14ac:	bb 1f       	adc	r27, r27
    14ae:	ee 1f       	adc	r30, r30
    14b0:	ff 1f       	adc	r31, r31
    14b2:	a2 17       	cp	r26, r18
    14b4:	b3 07       	cpc	r27, r19
    14b6:	e4 07       	cpc	r30, r20
    14b8:	f5 07       	cpc	r31, r21
    14ba:	20 f0       	brcs	.+8      	; 0x14c4 <__udivmodsi4_ep>
    14bc:	a2 1b       	sub	r26, r18
    14be:	b3 0b       	sbc	r27, r19
    14c0:	e4 0b       	sbc	r30, r20
    14c2:	f5 0b       	sbc	r31, r21

000014c4 <__udivmodsi4_ep>:
    14c4:	66 1f       	adc	r22, r22
    14c6:	77 1f       	adc	r23, r23
    14c8:	88 1f       	adc	r24, r24
    14ca:	99 1f       	adc	r25, r25
    14cc:	1a 94       	dec	r1
    14ce:	69 f7       	brne	.-38     	; 0x14aa <__udivmodsi4_loop>
    14d0:	60 95       	com	r22
    14d2:	70 95       	com	r23
    14d4:	80 95       	com	r24
    14d6:	90 95       	com	r25
    14d8:	9b 01       	movw	r18, r22
    14da:	ac 01       	movw	r20, r24
    14dc:	bd 01       	movw	r22, r26
    14de:	cf 01       	movw	r24, r30
    14e0:	08 95       	ret

000014e2 <__tablejump2__>:
    14e2:	ee 0f       	add	r30, r30
    14e4:	ff 1f       	adc	r31, r31
    14e6:	05 90       	lpm	r0, Z+
    14e8:	f4 91       	lpm	r31, Z
    14ea:	e0 2d       	mov	r30, r0
    14ec:	09 94       	ijmp

000014ee <__prologue_saves__>:
    14ee:	2f 92       	push	r2
    14f0:	3f 92       	push	r3
    14f2:	4f 92       	push	r4
    14f4:	5f 92       	push	r5
    14f6:	6f 92       	push	r6
    14f8:	7f 92       	push	r7
    14fa:	8f 92       	push	r8
    14fc:	9f 92       	push	r9
    14fe:	af 92       	push	r10
    1500:	bf 92       	push	r11
    1502:	cf 92       	push	r12
    1504:	df 92       	push	r13
    1506:	ef 92       	push	r14
    1508:	ff 92       	push	r15
    150a:	0f 93       	push	r16
    150c:	1f 93       	push	r17
    150e:	cf 93       	push	r28
    1510:	df 93       	push	r29
    1512:	cd b7       	in	r28, 0x3d	; 61
    1514:	de b7       	in	r29, 0x3e	; 62
    1516:	ca 1b       	sub	r28, r26
    1518:	db 0b       	sbc	r29, r27
    151a:	0f b6       	in	r0, 0x3f	; 63
    151c:	f8 94       	cli
    151e:	de bf       	out	0x3e, r29	; 62
    1520:	0f be       	out	0x3f, r0	; 63
    1522:	cd bf       	out	0x3d, r28	; 61
    1524:	09 94       	ijmp

00001526 <__epilogue_restores__>:
    1526:	2a 88       	ldd	r2, Y+18	; 0x12
    1528:	39 88       	ldd	r3, Y+17	; 0x11
    152a:	48 88       	ldd	r4, Y+16	; 0x10
    152c:	5f 84       	ldd	r5, Y+15	; 0x0f
    152e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1530:	7d 84       	ldd	r7, Y+13	; 0x0d
    1532:	8c 84       	ldd	r8, Y+12	; 0x0c
    1534:	9b 84       	ldd	r9, Y+11	; 0x0b
    1536:	aa 84       	ldd	r10, Y+10	; 0x0a
    1538:	b9 84       	ldd	r11, Y+9	; 0x09
    153a:	c8 84       	ldd	r12, Y+8	; 0x08
    153c:	df 80       	ldd	r13, Y+7	; 0x07
    153e:	ee 80       	ldd	r14, Y+6	; 0x06
    1540:	fd 80       	ldd	r15, Y+5	; 0x05
    1542:	0c 81       	ldd	r16, Y+4	; 0x04
    1544:	1b 81       	ldd	r17, Y+3	; 0x03
    1546:	aa 81       	ldd	r26, Y+2	; 0x02
    1548:	b9 81       	ldd	r27, Y+1	; 0x01
    154a:	ce 0f       	add	r28, r30
    154c:	d1 1d       	adc	r29, r1
    154e:	0f b6       	in	r0, 0x3f	; 63
    1550:	f8 94       	cli
    1552:	de bf       	out	0x3e, r29	; 62
    1554:	0f be       	out	0x3f, r0	; 63
    1556:	cd bf       	out	0x3d, r28	; 61
    1558:	ed 01       	movw	r28, r26
    155a:	08 95       	ret

0000155c <__ftoa_engine>:
    155c:	28 30       	cpi	r18, 0x08	; 8
    155e:	08 f0       	brcs	.+2      	; 0x1562 <__ftoa_engine+0x6>
    1560:	27 e0       	ldi	r18, 0x07	; 7
    1562:	33 27       	eor	r19, r19
    1564:	da 01       	movw	r26, r20
    1566:	99 0f       	add	r25, r25
    1568:	31 1d       	adc	r19, r1
    156a:	87 fd       	sbrc	r24, 7
    156c:	91 60       	ori	r25, 0x01	; 1
    156e:	00 96       	adiw	r24, 0x00	; 0
    1570:	61 05       	cpc	r22, r1
    1572:	71 05       	cpc	r23, r1
    1574:	39 f4       	brne	.+14     	; 0x1584 <__ftoa_engine+0x28>
    1576:	32 60       	ori	r19, 0x02	; 2
    1578:	2e 5f       	subi	r18, 0xFE	; 254
    157a:	3d 93       	st	X+, r19
    157c:	30 e3       	ldi	r19, 0x30	; 48
    157e:	2a 95       	dec	r18
    1580:	e1 f7       	brne	.-8      	; 0x157a <__ftoa_engine+0x1e>
    1582:	08 95       	ret
    1584:	9f 3f       	cpi	r25, 0xFF	; 255
    1586:	30 f0       	brcs	.+12     	; 0x1594 <__ftoa_engine+0x38>
    1588:	80 38       	cpi	r24, 0x80	; 128
    158a:	71 05       	cpc	r23, r1
    158c:	61 05       	cpc	r22, r1
    158e:	09 f0       	breq	.+2      	; 0x1592 <__ftoa_engine+0x36>
    1590:	3c 5f       	subi	r19, 0xFC	; 252
    1592:	3c 5f       	subi	r19, 0xFC	; 252
    1594:	3d 93       	st	X+, r19
    1596:	91 30       	cpi	r25, 0x01	; 1
    1598:	08 f0       	brcs	.+2      	; 0x159c <__ftoa_engine+0x40>
    159a:	80 68       	ori	r24, 0x80	; 128
    159c:	91 1d       	adc	r25, r1
    159e:	df 93       	push	r29
    15a0:	cf 93       	push	r28
    15a2:	1f 93       	push	r17
    15a4:	0f 93       	push	r16
    15a6:	ff 92       	push	r15
    15a8:	ef 92       	push	r14
    15aa:	19 2f       	mov	r17, r25
    15ac:	98 7f       	andi	r25, 0xF8	; 248
    15ae:	96 95       	lsr	r25
    15b0:	e9 2f       	mov	r30, r25
    15b2:	96 95       	lsr	r25
    15b4:	96 95       	lsr	r25
    15b6:	e9 0f       	add	r30, r25
    15b8:	ff 27       	eor	r31, r31
    15ba:	e4 5a       	subi	r30, 0xA4	; 164
    15bc:	fd 4f       	sbci	r31, 0xFD	; 253
    15be:	99 27       	eor	r25, r25
    15c0:	33 27       	eor	r19, r19
    15c2:	ee 24       	eor	r14, r14
    15c4:	ff 24       	eor	r15, r15
    15c6:	a7 01       	movw	r20, r14
    15c8:	e7 01       	movw	r28, r14
    15ca:	05 90       	lpm	r0, Z+
    15cc:	08 94       	sec
    15ce:	07 94       	ror	r0
    15d0:	28 f4       	brcc	.+10     	; 0x15dc <__ftoa_engine+0x80>
    15d2:	36 0f       	add	r19, r22
    15d4:	e7 1e       	adc	r14, r23
    15d6:	f8 1e       	adc	r15, r24
    15d8:	49 1f       	adc	r20, r25
    15da:	51 1d       	adc	r21, r1
    15dc:	66 0f       	add	r22, r22
    15de:	77 1f       	adc	r23, r23
    15e0:	88 1f       	adc	r24, r24
    15e2:	99 1f       	adc	r25, r25
    15e4:	06 94       	lsr	r0
    15e6:	a1 f7       	brne	.-24     	; 0x15d0 <__ftoa_engine+0x74>
    15e8:	05 90       	lpm	r0, Z+
    15ea:	07 94       	ror	r0
    15ec:	28 f4       	brcc	.+10     	; 0x15f8 <__ftoa_engine+0x9c>
    15ee:	e7 0e       	add	r14, r23
    15f0:	f8 1e       	adc	r15, r24
    15f2:	49 1f       	adc	r20, r25
    15f4:	56 1f       	adc	r21, r22
    15f6:	c1 1d       	adc	r28, r1
    15f8:	77 0f       	add	r23, r23
    15fa:	88 1f       	adc	r24, r24
    15fc:	99 1f       	adc	r25, r25
    15fe:	66 1f       	adc	r22, r22
    1600:	06 94       	lsr	r0
    1602:	a1 f7       	brne	.-24     	; 0x15ec <__ftoa_engine+0x90>
    1604:	05 90       	lpm	r0, Z+
    1606:	07 94       	ror	r0
    1608:	28 f4       	brcc	.+10     	; 0x1614 <__ftoa_engine+0xb8>
    160a:	f8 0e       	add	r15, r24
    160c:	49 1f       	adc	r20, r25
    160e:	56 1f       	adc	r21, r22
    1610:	c7 1f       	adc	r28, r23
    1612:	d1 1d       	adc	r29, r1
    1614:	88 0f       	add	r24, r24
    1616:	99 1f       	adc	r25, r25
    1618:	66 1f       	adc	r22, r22
    161a:	77 1f       	adc	r23, r23
    161c:	06 94       	lsr	r0
    161e:	a1 f7       	brne	.-24     	; 0x1608 <__ftoa_engine+0xac>
    1620:	05 90       	lpm	r0, Z+
    1622:	07 94       	ror	r0
    1624:	20 f4       	brcc	.+8      	; 0x162e <__ftoa_engine+0xd2>
    1626:	49 0f       	add	r20, r25
    1628:	56 1f       	adc	r21, r22
    162a:	c7 1f       	adc	r28, r23
    162c:	d8 1f       	adc	r29, r24
    162e:	99 0f       	add	r25, r25
    1630:	66 1f       	adc	r22, r22
    1632:	77 1f       	adc	r23, r23
    1634:	88 1f       	adc	r24, r24
    1636:	06 94       	lsr	r0
    1638:	a9 f7       	brne	.-22     	; 0x1624 <__ftoa_engine+0xc8>
    163a:	84 91       	lpm	r24, Z
    163c:	10 95       	com	r17
    163e:	17 70       	andi	r17, 0x07	; 7
    1640:	41 f0       	breq	.+16     	; 0x1652 <__ftoa_engine+0xf6>
    1642:	d6 95       	lsr	r29
    1644:	c7 95       	ror	r28
    1646:	57 95       	ror	r21
    1648:	47 95       	ror	r20
    164a:	f7 94       	ror	r15
    164c:	e7 94       	ror	r14
    164e:	1a 95       	dec	r17
    1650:	c1 f7       	brne	.-16     	; 0x1642 <__ftoa_engine+0xe6>
    1652:	e2 e0       	ldi	r30, 0x02	; 2
    1654:	f2 e0       	ldi	r31, 0x02	; 2
    1656:	68 94       	set
    1658:	15 90       	lpm	r1, Z+
    165a:	15 91       	lpm	r17, Z+
    165c:	35 91       	lpm	r19, Z+
    165e:	65 91       	lpm	r22, Z+
    1660:	95 91       	lpm	r25, Z+
    1662:	05 90       	lpm	r0, Z+
    1664:	7f e2       	ldi	r23, 0x2F	; 47
    1666:	73 95       	inc	r23
    1668:	e1 18       	sub	r14, r1
    166a:	f1 0a       	sbc	r15, r17
    166c:	43 0b       	sbc	r20, r19
    166e:	56 0b       	sbc	r21, r22
    1670:	c9 0b       	sbc	r28, r25
    1672:	d0 09       	sbc	r29, r0
    1674:	c0 f7       	brcc	.-16     	; 0x1666 <__ftoa_engine+0x10a>
    1676:	e1 0c       	add	r14, r1
    1678:	f1 1e       	adc	r15, r17
    167a:	43 1f       	adc	r20, r19
    167c:	56 1f       	adc	r21, r22
    167e:	c9 1f       	adc	r28, r25
    1680:	d0 1d       	adc	r29, r0
    1682:	7e f4       	brtc	.+30     	; 0x16a2 <__ftoa_engine+0x146>
    1684:	70 33       	cpi	r23, 0x30	; 48
    1686:	11 f4       	brne	.+4      	; 0x168c <__ftoa_engine+0x130>
    1688:	8a 95       	dec	r24
    168a:	e6 cf       	rjmp	.-52     	; 0x1658 <__ftoa_engine+0xfc>
    168c:	e8 94       	clt
    168e:	01 50       	subi	r16, 0x01	; 1
    1690:	30 f0       	brcs	.+12     	; 0x169e <__ftoa_engine+0x142>
    1692:	08 0f       	add	r16, r24
    1694:	0a f4       	brpl	.+2      	; 0x1698 <__ftoa_engine+0x13c>
    1696:	00 27       	eor	r16, r16
    1698:	02 17       	cp	r16, r18
    169a:	08 f4       	brcc	.+2      	; 0x169e <__ftoa_engine+0x142>
    169c:	20 2f       	mov	r18, r16
    169e:	23 95       	inc	r18
    16a0:	02 2f       	mov	r16, r18
    16a2:	7a 33       	cpi	r23, 0x3A	; 58
    16a4:	28 f0       	brcs	.+10     	; 0x16b0 <__ftoa_engine+0x154>
    16a6:	79 e3       	ldi	r23, 0x39	; 57
    16a8:	7d 93       	st	X+, r23
    16aa:	2a 95       	dec	r18
    16ac:	e9 f7       	brne	.-6      	; 0x16a8 <__ftoa_engine+0x14c>
    16ae:	10 c0       	rjmp	.+32     	; 0x16d0 <__ftoa_engine+0x174>
    16b0:	7d 93       	st	X+, r23
    16b2:	2a 95       	dec	r18
    16b4:	89 f6       	brne	.-94     	; 0x1658 <__ftoa_engine+0xfc>
    16b6:	06 94       	lsr	r0
    16b8:	97 95       	ror	r25
    16ba:	67 95       	ror	r22
    16bc:	37 95       	ror	r19
    16be:	17 95       	ror	r17
    16c0:	17 94       	ror	r1
    16c2:	e1 18       	sub	r14, r1
    16c4:	f1 0a       	sbc	r15, r17
    16c6:	43 0b       	sbc	r20, r19
    16c8:	56 0b       	sbc	r21, r22
    16ca:	c9 0b       	sbc	r28, r25
    16cc:	d0 09       	sbc	r29, r0
    16ce:	98 f0       	brcs	.+38     	; 0x16f6 <__ftoa_engine+0x19a>
    16d0:	23 95       	inc	r18
    16d2:	7e 91       	ld	r23, -X
    16d4:	73 95       	inc	r23
    16d6:	7a 33       	cpi	r23, 0x3A	; 58
    16d8:	08 f0       	brcs	.+2      	; 0x16dc <__ftoa_engine+0x180>
    16da:	70 e3       	ldi	r23, 0x30	; 48
    16dc:	7c 93       	st	X, r23
    16de:	20 13       	cpse	r18, r16
    16e0:	b8 f7       	brcc	.-18     	; 0x16d0 <__ftoa_engine+0x174>
    16e2:	7e 91       	ld	r23, -X
    16e4:	70 61       	ori	r23, 0x10	; 16
    16e6:	7d 93       	st	X+, r23
    16e8:	30 f0       	brcs	.+12     	; 0x16f6 <__ftoa_engine+0x19a>
    16ea:	83 95       	inc	r24
    16ec:	71 e3       	ldi	r23, 0x31	; 49
    16ee:	7d 93       	st	X+, r23
    16f0:	70 e3       	ldi	r23, 0x30	; 48
    16f2:	2a 95       	dec	r18
    16f4:	e1 f7       	brne	.-8      	; 0x16ee <__ftoa_engine+0x192>
    16f6:	11 24       	eor	r1, r1
    16f8:	ef 90       	pop	r14
    16fa:	ff 90       	pop	r15
    16fc:	0f 91       	pop	r16
    16fe:	1f 91       	pop	r17
    1700:	cf 91       	pop	r28
    1702:	df 91       	pop	r29
    1704:	99 27       	eor	r25, r25
    1706:	87 fd       	sbrc	r24, 7
    1708:	90 95       	com	r25
    170a:	08 95       	ret

0000170c <strnlen_P>:
    170c:	fc 01       	movw	r30, r24
    170e:	05 90       	lpm	r0, Z+
    1710:	61 50       	subi	r22, 0x01	; 1
    1712:	70 40       	sbci	r23, 0x00	; 0
    1714:	01 10       	cpse	r0, r1
    1716:	d8 f7       	brcc	.-10     	; 0x170e <strnlen_P+0x2>
    1718:	80 95       	com	r24
    171a:	90 95       	com	r25
    171c:	8e 0f       	add	r24, r30
    171e:	9f 1f       	adc	r25, r31
    1720:	08 95       	ret

00001722 <strnlen>:
    1722:	fc 01       	movw	r30, r24
    1724:	61 50       	subi	r22, 0x01	; 1
    1726:	70 40       	sbci	r23, 0x00	; 0
    1728:	01 90       	ld	r0, Z+
    172a:	01 10       	cpse	r0, r1
    172c:	d8 f7       	brcc	.-10     	; 0x1724 <strnlen+0x2>
    172e:	80 95       	com	r24
    1730:	90 95       	com	r25
    1732:	8e 0f       	add	r24, r30
    1734:	9f 1f       	adc	r25, r31
    1736:	08 95       	ret

00001738 <fputc>:
    1738:	0f 93       	push	r16
    173a:	1f 93       	push	r17
    173c:	cf 93       	push	r28
    173e:	df 93       	push	r29
    1740:	fb 01       	movw	r30, r22
    1742:	23 81       	ldd	r18, Z+3	; 0x03
    1744:	21 fd       	sbrc	r18, 1
    1746:	03 c0       	rjmp	.+6      	; 0x174e <fputc+0x16>
    1748:	8f ef       	ldi	r24, 0xFF	; 255
    174a:	9f ef       	ldi	r25, 0xFF	; 255
    174c:	2c c0       	rjmp	.+88     	; 0x17a6 <fputc+0x6e>
    174e:	22 ff       	sbrs	r18, 2
    1750:	16 c0       	rjmp	.+44     	; 0x177e <fputc+0x46>
    1752:	46 81       	ldd	r20, Z+6	; 0x06
    1754:	57 81       	ldd	r21, Z+7	; 0x07
    1756:	24 81       	ldd	r18, Z+4	; 0x04
    1758:	35 81       	ldd	r19, Z+5	; 0x05
    175a:	42 17       	cp	r20, r18
    175c:	53 07       	cpc	r21, r19
    175e:	44 f4       	brge	.+16     	; 0x1770 <fputc+0x38>
    1760:	a0 81       	ld	r26, Z
    1762:	b1 81       	ldd	r27, Z+1	; 0x01
    1764:	9d 01       	movw	r18, r26
    1766:	2f 5f       	subi	r18, 0xFF	; 255
    1768:	3f 4f       	sbci	r19, 0xFF	; 255
    176a:	31 83       	std	Z+1, r19	; 0x01
    176c:	20 83       	st	Z, r18
    176e:	8c 93       	st	X, r24
    1770:	26 81       	ldd	r18, Z+6	; 0x06
    1772:	37 81       	ldd	r19, Z+7	; 0x07
    1774:	2f 5f       	subi	r18, 0xFF	; 255
    1776:	3f 4f       	sbci	r19, 0xFF	; 255
    1778:	37 83       	std	Z+7, r19	; 0x07
    177a:	26 83       	std	Z+6, r18	; 0x06
    177c:	14 c0       	rjmp	.+40     	; 0x17a6 <fputc+0x6e>
    177e:	8b 01       	movw	r16, r22
    1780:	ec 01       	movw	r28, r24
    1782:	fb 01       	movw	r30, r22
    1784:	00 84       	ldd	r0, Z+8	; 0x08
    1786:	f1 85       	ldd	r31, Z+9	; 0x09
    1788:	e0 2d       	mov	r30, r0
    178a:	09 95       	icall
    178c:	89 2b       	or	r24, r25
    178e:	e1 f6       	brne	.-72     	; 0x1748 <fputc+0x10>
    1790:	d8 01       	movw	r26, r16
    1792:	16 96       	adiw	r26, 0x06	; 6
    1794:	8d 91       	ld	r24, X+
    1796:	9c 91       	ld	r25, X
    1798:	17 97       	sbiw	r26, 0x07	; 7
    179a:	01 96       	adiw	r24, 0x01	; 1
    179c:	17 96       	adiw	r26, 0x07	; 7
    179e:	9c 93       	st	X, r25
    17a0:	8e 93       	st	-X, r24
    17a2:	16 97       	sbiw	r26, 0x06	; 6
    17a4:	ce 01       	movw	r24, r28
    17a6:	df 91       	pop	r29
    17a8:	cf 91       	pop	r28
    17aa:	1f 91       	pop	r17
    17ac:	0f 91       	pop	r16
    17ae:	08 95       	ret

000017b0 <__ultoa_invert>:
    17b0:	fa 01       	movw	r30, r20
    17b2:	aa 27       	eor	r26, r26
    17b4:	28 30       	cpi	r18, 0x08	; 8
    17b6:	51 f1       	breq	.+84     	; 0x180c <__ultoa_invert+0x5c>
    17b8:	20 31       	cpi	r18, 0x10	; 16
    17ba:	81 f1       	breq	.+96     	; 0x181c <__ultoa_invert+0x6c>
    17bc:	e8 94       	clt
    17be:	6f 93       	push	r22
    17c0:	6e 7f       	andi	r22, 0xFE	; 254
    17c2:	6e 5f       	subi	r22, 0xFE	; 254
    17c4:	7f 4f       	sbci	r23, 0xFF	; 255
    17c6:	8f 4f       	sbci	r24, 0xFF	; 255
    17c8:	9f 4f       	sbci	r25, 0xFF	; 255
    17ca:	af 4f       	sbci	r26, 0xFF	; 255
    17cc:	b1 e0       	ldi	r27, 0x01	; 1
    17ce:	3e d0       	rcall	.+124    	; 0x184c <__ultoa_invert+0x9c>
    17d0:	b4 e0       	ldi	r27, 0x04	; 4
    17d2:	3c d0       	rcall	.+120    	; 0x184c <__ultoa_invert+0x9c>
    17d4:	67 0f       	add	r22, r23
    17d6:	78 1f       	adc	r23, r24
    17d8:	89 1f       	adc	r24, r25
    17da:	9a 1f       	adc	r25, r26
    17dc:	a1 1d       	adc	r26, r1
    17de:	68 0f       	add	r22, r24
    17e0:	79 1f       	adc	r23, r25
    17e2:	8a 1f       	adc	r24, r26
    17e4:	91 1d       	adc	r25, r1
    17e6:	a1 1d       	adc	r26, r1
    17e8:	6a 0f       	add	r22, r26
    17ea:	71 1d       	adc	r23, r1
    17ec:	81 1d       	adc	r24, r1
    17ee:	91 1d       	adc	r25, r1
    17f0:	a1 1d       	adc	r26, r1
    17f2:	20 d0       	rcall	.+64     	; 0x1834 <__ultoa_invert+0x84>
    17f4:	09 f4       	brne	.+2      	; 0x17f8 <__ultoa_invert+0x48>
    17f6:	68 94       	set
    17f8:	3f 91       	pop	r19
    17fa:	2a e0       	ldi	r18, 0x0A	; 10
    17fc:	26 9f       	mul	r18, r22
    17fe:	11 24       	eor	r1, r1
    1800:	30 19       	sub	r19, r0
    1802:	30 5d       	subi	r19, 0xD0	; 208
    1804:	31 93       	st	Z+, r19
    1806:	de f6       	brtc	.-74     	; 0x17be <__ultoa_invert+0xe>
    1808:	cf 01       	movw	r24, r30
    180a:	08 95       	ret
    180c:	46 2f       	mov	r20, r22
    180e:	47 70       	andi	r20, 0x07	; 7
    1810:	40 5d       	subi	r20, 0xD0	; 208
    1812:	41 93       	st	Z+, r20
    1814:	b3 e0       	ldi	r27, 0x03	; 3
    1816:	0f d0       	rcall	.+30     	; 0x1836 <__ultoa_invert+0x86>
    1818:	c9 f7       	brne	.-14     	; 0x180c <__ultoa_invert+0x5c>
    181a:	f6 cf       	rjmp	.-20     	; 0x1808 <__ultoa_invert+0x58>
    181c:	46 2f       	mov	r20, r22
    181e:	4f 70       	andi	r20, 0x0F	; 15
    1820:	40 5d       	subi	r20, 0xD0	; 208
    1822:	4a 33       	cpi	r20, 0x3A	; 58
    1824:	18 f0       	brcs	.+6      	; 0x182c <__ultoa_invert+0x7c>
    1826:	49 5d       	subi	r20, 0xD9	; 217
    1828:	31 fd       	sbrc	r19, 1
    182a:	40 52       	subi	r20, 0x20	; 32
    182c:	41 93       	st	Z+, r20
    182e:	02 d0       	rcall	.+4      	; 0x1834 <__ultoa_invert+0x84>
    1830:	a9 f7       	brne	.-22     	; 0x181c <__ultoa_invert+0x6c>
    1832:	ea cf       	rjmp	.-44     	; 0x1808 <__ultoa_invert+0x58>
    1834:	b4 e0       	ldi	r27, 0x04	; 4
    1836:	a6 95       	lsr	r26
    1838:	97 95       	ror	r25
    183a:	87 95       	ror	r24
    183c:	77 95       	ror	r23
    183e:	67 95       	ror	r22
    1840:	ba 95       	dec	r27
    1842:	c9 f7       	brne	.-14     	; 0x1836 <__ultoa_invert+0x86>
    1844:	00 97       	sbiw	r24, 0x00	; 0
    1846:	61 05       	cpc	r22, r1
    1848:	71 05       	cpc	r23, r1
    184a:	08 95       	ret
    184c:	9b 01       	movw	r18, r22
    184e:	ac 01       	movw	r20, r24
    1850:	0a 2e       	mov	r0, r26
    1852:	06 94       	lsr	r0
    1854:	57 95       	ror	r21
    1856:	47 95       	ror	r20
    1858:	37 95       	ror	r19
    185a:	27 95       	ror	r18
    185c:	ba 95       	dec	r27
    185e:	c9 f7       	brne	.-14     	; 0x1852 <__ultoa_invert+0xa2>
    1860:	62 0f       	add	r22, r18
    1862:	73 1f       	adc	r23, r19
    1864:	84 1f       	adc	r24, r20
    1866:	95 1f       	adc	r25, r21
    1868:	a0 1d       	adc	r26, r0
    186a:	08 95       	ret

0000186c <_exit>:
    186c:	f8 94       	cli

0000186e <__stop_program>:
    186e:	ff cf       	rjmp	.-2      	; 0x186e <__stop_program>
