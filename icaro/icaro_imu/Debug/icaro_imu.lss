
icaro_imu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000050c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000498  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006e  00800100  00800100  0000050c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000050c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000053c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  0000057c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c7f  00000000  00000000  0000061c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007f1  00000000  00000000  0000129b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006ae  00000000  00000000  00001a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000158  00000000  00000000  0000213c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000054d  00000000  00000000  00002294  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000508  00000000  00000000  000027e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002ce9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__ctors_end>
   4:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
   8:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
   c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  10:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  14:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  18:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  1c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  20:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  24:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  28:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  2c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  30:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  34:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  38:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  3c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  40:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  44:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  48:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  4c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  50:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  54:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  58:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  5c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  60:	0c 94 23 01 	jmp	0x246	; 0x246 <__vector_24>
  64:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  68:	2f 02       	muls	r18, r31
  6a:	33 02       	muls	r19, r19
  6c:	33 02       	muls	r19, r19
  6e:	33 02       	muls	r19, r19
  70:	33 02       	muls	r19, r19
  72:	33 02       	muls	r19, r19
  74:	33 02       	muls	r19, r19
  76:	33 02       	muls	r19, r19
  78:	43 01       	movw	r8, r6
  7a:	33 02       	muls	r19, r19
  7c:	33 02       	muls	r19, r19
  7e:	33 02       	muls	r19, r19
  80:	33 02       	muls	r19, r19
  82:	33 02       	muls	r19, r19
  84:	33 02       	muls	r19, r19
  86:	33 02       	muls	r19, r19
  88:	43 01       	movw	r8, r6
  8a:	33 02       	muls	r19, r19
  8c:	33 02       	muls	r19, r19
  8e:	33 02       	muls	r19, r19
  90:	33 02       	muls	r19, r19
  92:	33 02       	muls	r19, r19
  94:	33 02       	muls	r19, r19
  96:	33 02       	muls	r19, r19
  98:	4b 01       	movw	r8, r22
  9a:	33 02       	muls	r19, r19
  9c:	33 02       	muls	r19, r19
  9e:	33 02       	muls	r19, r19
  a0:	33 02       	muls	r19, r19
  a2:	33 02       	muls	r19, r19
  a4:	33 02       	muls	r19, r19
  a6:	33 02       	muls	r19, r19
  a8:	71 01       	movw	r14, r2
  aa:	33 02       	muls	r19, r19
  ac:	33 02       	muls	r19, r19
  ae:	33 02       	muls	r19, r19
  b0:	33 02       	muls	r19, r19
  b2:	33 02       	muls	r19, r19
  b4:	33 02       	muls	r19, r19
  b6:	33 02       	muls	r19, r19
  b8:	4b 01       	movw	r8, r22
  ba:	33 02       	muls	r19, r19
  bc:	33 02       	muls	r19, r19
  be:	33 02       	muls	r19, r19
  c0:	33 02       	muls	r19, r19
  c2:	33 02       	muls	r19, r19
  c4:	33 02       	muls	r19, r19
  c6:	33 02       	muls	r19, r19
  c8:	77 01       	movw	r14, r14
  ca:	33 02       	muls	r19, r19
  cc:	33 02       	muls	r19, r19
  ce:	33 02       	muls	r19, r19
  d0:	33 02       	muls	r19, r19
  d2:	33 02       	muls	r19, r19
  d4:	33 02       	muls	r19, r19
  d6:	33 02       	muls	r19, r19
  d8:	7d 01       	movw	r14, r26
  da:	33 02       	muls	r19, r19
  dc:	33 02       	muls	r19, r19
  de:	33 02       	muls	r19, r19
  e0:	33 02       	muls	r19, r19
  e2:	33 02       	muls	r19, r19
  e4:	33 02       	muls	r19, r19
  e6:	33 02       	muls	r19, r19
  e8:	8f 01       	movw	r16, r30
  ea:	33 02       	muls	r19, r19
  ec:	33 02       	muls	r19, r19
  ee:	33 02       	muls	r19, r19
  f0:	33 02       	muls	r19, r19
  f2:	33 02       	muls	r19, r19
  f4:	33 02       	muls	r19, r19
  f6:	33 02       	muls	r19, r19
  f8:	b9 01       	movw	r22, r18
  fa:	33 02       	muls	r19, r19
  fc:	33 02       	muls	r19, r19
  fe:	33 02       	muls	r19, r19
 100:	33 02       	muls	r19, r19
 102:	33 02       	muls	r19, r19
 104:	33 02       	muls	r19, r19
 106:	33 02       	muls	r19, r19
 108:	83 01       	movw	r16, r6
 10a:	33 02       	muls	r19, r19
 10c:	33 02       	muls	r19, r19
 10e:	33 02       	muls	r19, r19
 110:	33 02       	muls	r19, r19
 112:	33 02       	muls	r19, r19
 114:	33 02       	muls	r19, r19
 116:	33 02       	muls	r19, r19
 118:	9d 01       	movw	r18, r26
 11a:	33 02       	muls	r19, r19
 11c:	33 02       	muls	r19, r19
 11e:	33 02       	muls	r19, r19
 120:	33 02       	muls	r19, r19
 122:	33 02       	muls	r19, r19
 124:	33 02       	muls	r19, r19
 126:	33 02       	muls	r19, r19
 128:	bc 01       	movw	r22, r24
 12a:	33 02       	muls	r19, r19
 12c:	33 02       	muls	r19, r19
 12e:	33 02       	muls	r19, r19
 130:	33 02       	muls	r19, r19
 132:	33 02       	muls	r19, r19
 134:	33 02       	muls	r19, r19
 136:	33 02       	muls	r19, r19
 138:	bc 01       	movw	r22, r24
 13a:	33 02       	muls	r19, r19
 13c:	33 02       	muls	r19, r19
 13e:	33 02       	muls	r19, r19
 140:	33 02       	muls	r19, r19
 142:	33 02       	muls	r19, r19
 144:	33 02       	muls	r19, r19
 146:	33 02       	muls	r19, r19
 148:	bc 01       	movw	r22, r24
 14a:	33 02       	muls	r19, r19
 14c:	33 02       	muls	r19, r19
 14e:	33 02       	muls	r19, r19
 150:	33 02       	muls	r19, r19
 152:	33 02       	muls	r19, r19
 154:	33 02       	muls	r19, r19
 156:	33 02       	muls	r19, r19
 158:	bc 01       	movw	r22, r24
 15a:	33 02       	muls	r19, r19
 15c:	33 02       	muls	r19, r19
 15e:	33 02       	muls	r19, r19
 160:	33 02       	muls	r19, r19
 162:	33 02       	muls	r19, r19
 164:	33 02       	muls	r19, r19
 166:	33 02       	muls	r19, r19
 168:	c5 01       	movw	r24, r10
 16a:	33 02       	muls	r19, r19
 16c:	33 02       	muls	r19, r19
 16e:	33 02       	muls	r19, r19
 170:	33 02       	muls	r19, r19
 172:	33 02       	muls	r19, r19
 174:	33 02       	muls	r19, r19
 176:	33 02       	muls	r19, r19
 178:	f6 01       	movw	r30, r12
 17a:	33 02       	muls	r19, r19
 17c:	33 02       	muls	r19, r19
 17e:	33 02       	muls	r19, r19
 180:	33 02       	muls	r19, r19
 182:	33 02       	muls	r19, r19
 184:	33 02       	muls	r19, r19
 186:	33 02       	muls	r19, r19
 188:	c5 01       	movw	r24, r10
 18a:	33 02       	muls	r19, r19
 18c:	33 02       	muls	r19, r19
 18e:	33 02       	muls	r19, r19
 190:	33 02       	muls	r19, r19
 192:	33 02       	muls	r19, r19
 194:	33 02       	muls	r19, r19
 196:	33 02       	muls	r19, r19
 198:	f6 01       	movw	r30, r12
 19a:	33 02       	muls	r19, r19
 19c:	33 02       	muls	r19, r19
 19e:	33 02       	muls	r19, r19
 1a0:	33 02       	muls	r19, r19
 1a2:	33 02       	muls	r19, r19
 1a4:	33 02       	muls	r19, r19
 1a6:	33 02       	muls	r19, r19
 1a8:	dd 01       	movw	r26, r26
 1aa:	33 02       	muls	r19, r19
 1ac:	33 02       	muls	r19, r19
 1ae:	33 02       	muls	r19, r19
 1b0:	33 02       	muls	r19, r19
 1b2:	33 02       	muls	r19, r19
 1b4:	33 02       	muls	r19, r19
 1b6:	33 02       	muls	r19, r19
 1b8:	fa 01       	movw	r30, r20
 1ba:	33 02       	muls	r19, r19
 1bc:	33 02       	muls	r19, r19
 1be:	33 02       	muls	r19, r19
 1c0:	33 02       	muls	r19, r19
 1c2:	33 02       	muls	r19, r19
 1c4:	33 02       	muls	r19, r19
 1c6:	33 02       	muls	r19, r19
 1c8:	fa 01       	movw	r30, r20
 1ca:	33 02       	muls	r19, r19
 1cc:	33 02       	muls	r19, r19
 1ce:	33 02       	muls	r19, r19
 1d0:	33 02       	muls	r19, r19
 1d2:	33 02       	muls	r19, r19
 1d4:	33 02       	muls	r19, r19
 1d6:	33 02       	muls	r19, r19
 1d8:	0f 02       	muls	r16, r31
 1da:	33 02       	muls	r19, r19
 1dc:	33 02       	muls	r19, r19
 1de:	33 02       	muls	r19, r19
 1e0:	33 02       	muls	r19, r19
 1e2:	33 02       	muls	r19, r19
 1e4:	33 02       	muls	r19, r19
 1e6:	33 02       	muls	r19, r19
 1e8:	29 02       	muls	r18, r25
 1ea:	33 02       	muls	r19, r19
 1ec:	33 02       	muls	r19, r19
 1ee:	33 02       	muls	r19, r19
 1f0:	33 02       	muls	r19, r19
 1f2:	33 02       	muls	r19, r19
 1f4:	33 02       	muls	r19, r19
 1f6:	33 02       	muls	r19, r19
 1f8:	29 02       	muls	r18, r25

000001fa <__ctors_end>:
 1fa:	11 24       	eor	r1, r1
 1fc:	1f be       	out	0x3f, r1	; 63
 1fe:	cf ef       	ldi	r28, 0xFF	; 255
 200:	d8 e0       	ldi	r29, 0x08	; 8
 202:	de bf       	out	0x3e, r29	; 62
 204:	cd bf       	out	0x3d, r28	; 61

00000206 <__do_clear_bss>:
 206:	21 e0       	ldi	r18, 0x01	; 1
 208:	a0 e0       	ldi	r26, 0x00	; 0
 20a:	b1 e0       	ldi	r27, 0x01	; 1
 20c:	01 c0       	rjmp	.+2      	; 0x210 <.do_clear_bss_start>

0000020e <.do_clear_bss_loop>:
 20e:	1d 92       	st	X+, r1

00000210 <.do_clear_bss_start>:
 210:	ae 36       	cpi	r26, 0x6E	; 110
 212:	b2 07       	cpc	r27, r18
 214:	e1 f7       	brne	.-8      	; 0x20e <.do_clear_bss_loop>
 216:	0e 94 11 01 	call	0x222	; 0x222 <main>
 21a:	0c 94 4a 02 	jmp	0x494	; 0x494 <_exit>

0000021e <__bad_interrupt>:
 21e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000222 <main>:
    twi_init();
    twi_set_address(IMU_ADDRESS);    
}

int main(void)
{
 222:	ff cf       	rjmp	.-2      	; 0x222 <main>

00000224 <twi_stop>:
}

void twi_reply(uint8_t ack)
{
    if (ack) { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA); }
    else { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT); }
 224:	85 ed       	ldi	r24, 0xD5	; 213
 226:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 22a:	ec eb       	ldi	r30, 0xBC	; 188
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	80 81       	ld	r24, Z
 230:	84 fd       	sbrc	r24, 4
 232:	fd cf       	rjmp	.-6      	; 0x22e <twi_stop+0xa>
 234:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <twi_state>
 238:	08 95       	ret

0000023a <twi_release_bus>:
}

void twi_release_bus(void)
{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
 23a:	85 ec       	ldi	r24, 0xC5	; 197
 23c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    twi_state = TWI_READY;
 240:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <twi_state>
 244:	08 95       	ret

00000246 <__vector_24>:
}

ISR(TWI_vect)
{
 246:	1f 92       	push	r1
 248:	0f 92       	push	r0
 24a:	0f b6       	in	r0, 0x3f	; 63
 24c:	0f 92       	push	r0
 24e:	11 24       	eor	r1, r1
 250:	2f 93       	push	r18
 252:	3f 93       	push	r19
 254:	4f 93       	push	r20
 256:	5f 93       	push	r21
 258:	6f 93       	push	r22
 25a:	7f 93       	push	r23
 25c:	8f 93       	push	r24
 25e:	9f 93       	push	r25
 260:	af 93       	push	r26
 262:	bf 93       	push	r27
 264:	ef 93       	push	r30
 266:	ff 93       	push	r31
    switch(TW_STATUS)
 268:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 26c:	e8 2f       	mov	r30, r24
 26e:	e8 7f       	andi	r30, 0xF8	; 248
 270:	8e 2f       	mov	r24, r30
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	89 3c       	cpi	r24, 0xC9	; 201
 276:	91 05       	cpc	r25, r1
 278:	08 f0       	brcs	.+2      	; 0x27c <__vector_24+0x36>
 27a:	f5 c0       	rjmp	.+490    	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 27c:	fc 01       	movw	r30, r24
 27e:	ec 5c       	subi	r30, 0xCC	; 204
 280:	ff 4f       	sbci	r31, 0xFF	; 255
 282:	0c 94 44 02 	jmp	0x488	; 0x488 <__tablejump2__>
    {
        // MASTER
        case TW_START: // start condition transmitted
        case TW_REP_START: // repeated start condition transmitted
        {
            TWDR = twi_slarw;
 286:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <twi_slarw>
 28a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    twi_state = TWI_READY;
}

void twi_reply(uint8_t ack)
{
    if (ack) { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA); }
 28e:	85 ec       	ldi	r24, 0xC5	; 197
 290:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 294:	e8 c0       	rjmp	.+464    	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
        
        // MASTER TRANSMITTER
        case TW_MT_SLA_ACK: // SLA+W transmitted, ACK received
        case TW_MT_DATA_ACK: // data transmitted, ACK received
        {
            if (twi_master_buffer_index < twi_master_buffer_length)
 296:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <twi_master_buffer_index>
 29a:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <twi_master_buffer_length>
 29e:	98 17       	cp	r25, r24
 2a0:	80 f4       	brcc	.+32     	; 0x2c2 <__vector_24+0x7c>
            {
                TWDR = twi_master_buffer[twi_master_buffer_index++];
 2a2:	e0 91 48 01 	lds	r30, 0x0148	; 0x800148 <twi_master_buffer_index>
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	8e 0f       	add	r24, r30
 2aa:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <twi_master_buffer_index>
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	e7 5b       	subi	r30, 0xB7	; 183
 2b2:	fe 4f       	sbci	r31, 0xFE	; 254
 2b4:	80 81       	ld	r24, Z
 2b6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    twi_state = TWI_READY;
}

void twi_reply(uint8_t ack)
{
    if (ack) { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA); }
 2ba:	85 ec       	ldi	r24, 0xC5	; 197
 2bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2c0:	d2 c0       	rjmp	.+420    	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
                TWDR = twi_master_buffer[twi_master_buffer_index++];
                twi_reply(1);
            }
            else
            {
                if (twi_send_stop) { twi_stop(); }
 2c2:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <twi_send_stop>
 2c6:	88 23       	and	r24, r24
 2c8:	19 f0       	breq	.+6      	; 0x2d0 <__vector_24+0x8a>
 2ca:	0e 94 12 01 	call	0x224	; 0x224 <twi_stop>
 2ce:	cb c0       	rjmp	.+406    	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
                else
                {
                    twi_in_rep_start = 1;
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <twi_in_rep_start>
                    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
 2d6:	84 ea       	ldi	r24, 0xA4	; 164
 2d8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
                    twi_state = TWI_READY;
 2dc:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <twi_state>
 2e0:	c2 c0       	rjmp	.+388    	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
            }
        }
        break;
        case TW_MT_SLA_NACK:  // SLA+W transmitted, NACK received
        {
            twi_error = TW_MT_SLA_NACK;
 2e2:	80 e2       	ldi	r24, 0x20	; 32
 2e4:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <twi_error>
            twi_stop();
 2e8:	0e 94 12 01 	call	0x224	; 0x224 <twi_stop>
        }
        break;
 2ec:	bc c0       	rjmp	.+376    	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
        case TW_MT_DATA_NACK: // data transmitted, NACK received
        {
            twi_error = TW_MT_DATA_NACK;
 2ee:	80 e3       	ldi	r24, 0x30	; 48
 2f0:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <twi_error>
            twi_stop();
 2f4:	0e 94 12 01 	call	0x224	; 0x224 <twi_stop>
        }
        break;
 2f8:	b6 c0       	rjmp	.+364    	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
        case TW_MT_ARB_LOST: // arbitration lost in SLA+W or data
        {
            twi_error = TW_MT_ARB_LOST;
 2fa:	88 e3       	ldi	r24, 0x38	; 56
 2fc:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <twi_error>
            twi_release_bus();
 300:	0e 94 1d 01 	call	0x23a	; 0x23a <twi_release_bus>
        }
        break;
 304:	b0 c0       	rjmp	.+352    	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
        
        // MASTER RECEIVER
        case TW_MR_DATA_ACK: // data received, ACK returned
        twi_master_buffer[twi_master_buffer_index++] = TWDR;
 306:	e0 91 48 01 	lds	r30, 0x0148	; 0x800148 <twi_master_buffer_index>
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	8e 0f       	add	r24, r30
 30e:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <twi_master_buffer_index>
 312:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 316:	f0 e0       	ldi	r31, 0x00	; 0
 318:	e7 5b       	subi	r30, 0xB7	; 183
 31a:	fe 4f       	sbci	r31, 0xFE	; 254
 31c:	80 83       	st	Z, r24
        /* fall through */
        case TW_MR_SLA_ACK:  // SLA+R transmitted, ACK received
        {
            if (twi_master_buffer_index < twi_master_buffer_length) { twi_reply(1); }
 31e:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <twi_master_buffer_index>
 322:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <twi_master_buffer_length>
 326:	98 17       	cp	r25, r24
 328:	20 f4       	brcc	.+8      	; 0x332 <__vector_24+0xec>
    twi_state = TWI_READY;
}

void twi_reply(uint8_t ack)
{
    if (ack) { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA); }
 32a:	85 ec       	ldi	r24, 0xC5	; 197
 32c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 330:	9a c0       	rjmp	.+308    	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
    else { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT); }
 332:	85 e8       	ldi	r24, 0x85	; 133
 334:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 338:	96 c0       	rjmp	.+300    	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
            else { twi_reply(0); }
        }
        break;
        case TW_MR_DATA_NACK: // data received, NACK returned
        {
            twi_master_buffer[twi_master_buffer_index++] = TWDR;
 33a:	e0 91 48 01 	lds	r30, 0x0148	; 0x800148 <twi_master_buffer_index>
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	8e 0f       	add	r24, r30
 342:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <twi_master_buffer_index>
 346:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	e7 5b       	subi	r30, 0xB7	; 183
 34e:	fe 4f       	sbci	r31, 0xFE	; 254
 350:	80 83       	st	Z, r24
            if (twi_send_stop) { twi_stop(); }
 352:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <twi_send_stop>
 356:	88 23       	and	r24, r24
 358:	19 f0       	breq	.+6      	; 0x360 <__vector_24+0x11a>
 35a:	0e 94 12 01 	call	0x224	; 0x224 <twi_stop>
 35e:	83 c0       	rjmp	.+262    	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
            else {
                twi_in_rep_start = 1;
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <twi_in_rep_start>
                TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
 366:	84 ea       	ldi	r24, 0xA4	; 164
 368:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
                twi_state = TWI_READY;
 36c:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <twi_state>
 370:	7a c0       	rjmp	.+244    	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
            }
        }
        break;
        case TW_MR_SLA_NACK: // SLA+R transmitted, NACK received
        {
            twi_stop();
 372:	0e 94 12 01 	call	0x224	; 0x224 <twi_stop>
        }
        break;
 376:	77 c0       	rjmp	.+238    	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
        case TW_SR_SLA_ACK: // SLA+W received, ACK returned
        case TW_SR_GCALL_ACK: // general call received, ACK returned
        case TW_SR_ARB_LOST_SLA_ACK:   // arbitration lost in SLA+RW, SLA+W received, ACK returned
        case TW_SR_ARB_LOST_GCALL_ACK: // arbitration lost in SLA+RW, general call received, ACK returned
        {
            twi_state = TWI_SRX;
 378:	83 e0       	ldi	r24, 0x03	; 3
 37a:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <twi_state>
            twi_rx_buffer_index = 0;
 37e:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <twi_rx_buffer_index>
    twi_state = TWI_READY;
}

void twi_reply(uint8_t ack)
{
    if (ack) { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA); }
 382:	85 ec       	ldi	r24, 0xC5	; 197
 384:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 388:	6e c0       	rjmp	.+220    	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
        }
        break;
        case TW_SR_DATA_ACK: // data received, ACK returned
        case TW_SR_GCALL_DATA_ACK: // general call data received, ACK returned
        {
            if (twi_rx_buffer_index < TWI_BUFFER_LENGTH) {
 38a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <twi_rx_buffer_index>
 38e:	80 32       	cpi	r24, 0x20	; 32
 390:	80 f4       	brcc	.+32     	; 0x3b2 <__vector_24+0x16c>
                
                twi_rx_buffer[twi_rx_buffer_index++] = TWDR;
 392:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <twi_rx_buffer_index>
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	8e 0f       	add	r24, r30
 39a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <twi_rx_buffer_index>
 39e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 3a2:	f0 e0       	ldi	r31, 0x00	; 0
 3a4:	eb 5f       	subi	r30, 0xFB	; 251
 3a6:	fe 4f       	sbci	r31, 0xFE	; 254
 3a8:	80 83       	st	Z, r24
    twi_state = TWI_READY;
}

void twi_reply(uint8_t ack)
{
    if (ack) { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA); }
 3aa:	85 ec       	ldi	r24, 0xC5	; 197
 3ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 3b0:	5a c0       	rjmp	.+180    	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
    else { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT); }
 3b2:	85 e8       	ldi	r24, 0x85	; 133
 3b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 3b8:	56 c0       	rjmp	.+172    	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
            
        }
        break;
        case TW_SR_STOP: // stop or repeated start condition received while selected
        {
            twi_release_bus();
 3ba:	0e 94 1d 01 	call	0x23a	; 0x23a <twi_release_bus>
            if(twi_rx_buffer_index < TWI_BUFFER_LENGTH) { twi_rx_buffer[twi_rx_buffer_index] = '\0'; }
 3be:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <twi_rx_buffer_index>
 3c2:	80 32       	cpi	r24, 0x20	; 32
 3c4:	30 f4       	brcc	.+12     	; 0x3d2 <__vector_24+0x18c>
 3c6:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <twi_rx_buffer_index>
 3ca:	f0 e0       	ldi	r31, 0x00	; 0
 3cc:	eb 5f       	subi	r30, 0xFB	; 251
 3ce:	fe 4f       	sbci	r31, 0xFE	; 254
 3d0:	10 82       	st	Z, r1
            twi_on_slave_receive(twi_rx_buffer, twi_rx_buffer_index);
 3d2:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <twi_rx_buffer_index>
 3d6:	70 e0       	ldi	r23, 0x00	; 0
 3d8:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3dc:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3e0:	85 e0       	ldi	r24, 0x05	; 5
 3e2:	91 e0       	ldi	r25, 0x01	; 1
 3e4:	09 95       	icall
            twi_rx_buffer_index = 0;
 3e6:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <twi_rx_buffer_index>
        }
        break;
 3ea:	3d c0       	rjmp	.+122    	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
}

void twi_reply(uint8_t ack)
{
    if (ack) { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA); }
    else { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT); }
 3ec:	85 e8       	ldi	r24, 0x85	; 133
 3ee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 3f2:	39 c0       	rjmp	.+114    	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
        // SLAVE TRANSMITTER
        case TW_ST_SLA_ACK: // SLA+R received, ACK returned
        case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost in SLA+RW, SLA+R received, ACK returned
        {
            
            twi_state = TWI_STX;
 3f4:	84 e0       	ldi	r24, 0x04	; 4
 3f6:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <twi_state>
            twi_tx_buffer_index = 0;
 3fa:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <twi_tx_buffer_index>
            twi_tx_buffer_length = 0;
 3fe:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <twi_tx_buffer_length>
            twi_on_slave_transmit();
 402:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <twi_on_slave_transmit>
 406:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <twi_on_slave_transmit+0x1>
 40a:	09 95       	icall
            if (0 == twi_tx_buffer_length) {
 40c:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <twi_tx_buffer_length>
 410:	81 11       	cpse	r24, r1
 412:	05 c0       	rjmp	.+10     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
                twi_tx_buffer_length = 1;
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <twi_tx_buffer_length>
                twi_tx_buffer[0] = 0x00;
 41a:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <twi_tx_buffer>
            }
        }
        /* fall through */
        case TW_ST_DATA_ACK: // data transmitted, ACK received
        {
            TWDR = twi_tx_buffer[twi_tx_buffer_index++];
 41e:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <twi_tx_buffer_index>
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	8e 0f       	add	r24, r30
 426:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <twi_tx_buffer_index>
 42a:	f0 e0       	ldi	r31, 0x00	; 0
 42c:	e9 5d       	subi	r30, 0xD9	; 217
 42e:	fe 4f       	sbci	r31, 0xFE	; 254
 430:	80 81       	ld	r24, Z
 432:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
            if (twi_tx_buffer_index < twi_tx_buffer_length) { twi_reply(1); }
 436:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <twi_tx_buffer_index>
 43a:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <twi_tx_buffer_length>
 43e:	98 17       	cp	r25, r24
 440:	20 f4       	brcc	.+8      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
    twi_state = TWI_READY;
}

void twi_reply(uint8_t ack)
{
    if (ack) { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA); }
 442:	85 ec       	ldi	r24, 0xC5	; 197
 444:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 448:	0e c0       	rjmp	.+28     	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
    else { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT); }
 44a:	85 e8       	ldi	r24, 0x85	; 133
 44c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 450:	0a c0       	rjmp	.+20     	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
    twi_state = TWI_READY;
}

void twi_reply(uint8_t ack)
{
    if (ack) { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA); }
 452:	85 ec       	ldi	r24, 0xC5	; 197
 454:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
        break;
        case TW_ST_DATA_NACK: // data transmitted, NACK received
        case TW_ST_LAST_DATA: // last data byte transmitted, ACK received
        {
            twi_reply(1);
            twi_state = TWI_READY;
 458:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <twi_state>
        }
        break;
 45c:	04 c0       	rjmp	.+8      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
        // MISC
        case TW_NO_INFO:   // no state information available
        break;
        case TW_BUS_ERROR: // illegal start or stop condition
        {
            twi_error = TW_BUS_ERROR;
 45e:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <twi_error>
            twi_stop();
 462:	0e 94 12 01 	call	0x224	; 0x224 <twi_stop>
        }
        break;
    }
 466:	ff 91       	pop	r31
 468:	ef 91       	pop	r30
 46a:	bf 91       	pop	r27
 46c:	af 91       	pop	r26
 46e:	9f 91       	pop	r25
 470:	8f 91       	pop	r24
 472:	7f 91       	pop	r23
 474:	6f 91       	pop	r22
 476:	5f 91       	pop	r21
 478:	4f 91       	pop	r20
 47a:	3f 91       	pop	r19
 47c:	2f 91       	pop	r18
 47e:	0f 90       	pop	r0
 480:	0f be       	out	0x3f, r0	; 63
 482:	0f 90       	pop	r0
 484:	1f 90       	pop	r1
 486:	18 95       	reti

00000488 <__tablejump2__>:
 488:	ee 0f       	add	r30, r30
 48a:	ff 1f       	adc	r31, r31
 48c:	05 90       	lpm	r0, Z+
 48e:	f4 91       	lpm	r31, Z
 490:	e0 2d       	mov	r30, r0
 492:	09 94       	ijmp

00000494 <_exit>:
 494:	f8 94       	cli

00000496 <__stop_program>:
 496:	ff cf       	rjmp	.-2      	; 0x496 <__stop_program>
