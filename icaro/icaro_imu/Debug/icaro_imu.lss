
icaro_imu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000096  00800100  00004af6  00004b8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004af6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001f9  00800196  00800196  00004c20  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004c20  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004c7c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000470  00000000  00000000  00004cc0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004779  00000000  00000000  00005130  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001476  00000000  00000000  000098a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002774  00000000  00000000  0000ad1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e58  00000000  00000000  0000d494  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000fe1  00000000  00000000  0000e2ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000046e1  00000000  00000000  0000f2cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003a8  00000000  00000000  000139ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b3 01 	jmp	0x366	; 0x366 <__ctors_end>
       4:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
       8:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
       c:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      10:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      14:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      18:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      1c:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      20:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      24:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      28:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      2c:	0c 94 d8 19 	jmp	0x33b0	; 0x33b0 <__vector_11>
      30:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      34:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      38:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      3c:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      40:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      44:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      48:	0c 94 19 1f 	jmp	0x3e32	; 0x3e32 <__vector_18>
      4c:	0c 94 44 1f 	jmp	0x3e88	; 0x3e88 <__vector_19>
      50:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      54:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      58:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      5c:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      60:	0c 94 f8 1d 	jmp	0x3bf0	; 0x3bf0 <__vector_24>
      64:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      68:	03 6e       	ori	r16, 0xE3	; 227
      6a:	db 36       	cpi	r29, 0x6B	; 107
      6c:	3d 9a       	sbi	0x07, 5	; 7
      6e:	99 99       	sbic	0x13, 1	; 19
      70:	99 3d       	cpi	r25, 0xD9	; 217
      72:	ab aa       	std	Y+51, r10	; 0x33
      74:	aa 2a       	or	r10, r26
      76:	3e 00       	.word	0x003e	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	08 4a       	sbci	r16, 0xA8	; 168
      7e:	d7 3b       	cpi	r29, 0xB7	; 183
      80:	3b ce       	rjmp	.-906    	; 0xfffffcf8 <__eeprom_end+0xff7efcf8>
      82:	01 6e       	ori	r16, 0xE1	; 225
      84:	84 bc       	out	0x24, r8	; 36
      86:	bf fd       	.word	0xfdbf	; ????
      88:	c1 2f       	mov	r28, r17
      8a:	3d 6c       	ori	r19, 0xCD	; 205
      8c:	74 31       	cpi	r23, 0x14	; 20
      8e:	9a bd       	out	0x2a, r25	; 42
      90:	56 83       	std	Z+6, r21	; 0x06
      92:	3d da       	rcall	.-2950   	; 0xfffff50e <__eeprom_end+0xff7ef50e>
      94:	3d 00       	.word	0x003d	; ????
      96:	c7 7f       	andi	r28, 0xF7	; 247
      98:	11 be       	out	0x31, r1	; 49
      9a:	d9 e4       	ldi	r29, 0x49	; 73
      9c:	bb 4c       	sbci	r27, 0xCB	; 203
      9e:	3e 91       	ld	r19, -X
      a0:	6b aa       	std	Y+51, r6	; 0x33
      a2:	aa be       	out	0x3a, r10	; 58
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	3f 07       	cpc	r19, r31
      aa:	2c 7a       	andi	r18, 0xAC	; 172
      ac:	a5 ba       	out	0x15, r10	; 21
      ae:	6c c5       	rjmp	.+2776   	; 0xb88 <__stack+0x289>
      b0:	90 da       	rcall	.-2784   	; 0xfffff5d2 <__eeprom_end+0xff7ef5d2>
      b2:	3b 93       	.word	0x933b	; ????
      b4:	65 fc       	sbrc	r6, 5
      b6:	8b bc       	out	0x2b, r8	; 43
      b8:	53 f8       	bld	r5, 3
      ba:	10 fd       	sbrc	r17, 0
      bc:	3c 56       	subi	r19, 0x6C	; 108
      be:	92 83       	std	Z+2, r25	; 0x02
      c0:	4d bd       	out	0x2d, r20	; 45
      c2:	87 9d       	mul	r24, r7
      c4:	3a b6       	in	r3, 0x3a	; 58
      c6:	3d cb       	rjmp	.-2438   	; 0xfffff742 <__eeprom_end+0xff7ef742>
      c8:	c9 bf       	out	0x39, r28	; 57
      ca:	5b be       	out	0x3b, r5	; 59
      cc:	73 da       	rcall	.-2842   	; 0xfffff5b4 <__eeprom_end+0xff7ef5b4>
      ce:	0f c9       	rjmp	.-3554   	; 0xfffff2ee <__eeprom_end+0xff7ef2ee>
      d0:	3f 00       	.word	0x003f	; ????
      d2:	04 1f       	adc	r16, r20
      d4:	08 1f       	adc	r16, r24
      d6:	08 1f       	adc	r16, r24
      d8:	08 1f       	adc	r16, r24
      da:	08 1f       	adc	r16, r24
      dc:	08 1f       	adc	r16, r24
      de:	08 1f       	adc	r16, r24
      e0:	08 1f       	adc	r16, r24
      e2:	18 1e       	adc	r1, r24
      e4:	08 1f       	adc	r16, r24
      e6:	08 1f       	adc	r16, r24
      e8:	08 1f       	adc	r16, r24
      ea:	08 1f       	adc	r16, r24
      ec:	08 1f       	adc	r16, r24
      ee:	08 1f       	adc	r16, r24
      f0:	08 1f       	adc	r16, r24
      f2:	18 1e       	adc	r1, r24
      f4:	08 1f       	adc	r16, r24
      f6:	08 1f       	adc	r16, r24
      f8:	08 1f       	adc	r16, r24
      fa:	08 1f       	adc	r16, r24
      fc:	08 1f       	adc	r16, r24
      fe:	08 1f       	adc	r16, r24
     100:	08 1f       	adc	r16, r24
     102:	20 1e       	adc	r2, r16
     104:	08 1f       	adc	r16, r24
     106:	08 1f       	adc	r16, r24
     108:	08 1f       	adc	r16, r24
     10a:	08 1f       	adc	r16, r24
     10c:	08 1f       	adc	r16, r24
     10e:	08 1f       	adc	r16, r24
     110:	08 1f       	adc	r16, r24
     112:	46 1e       	adc	r4, r22
     114:	08 1f       	adc	r16, r24
     116:	08 1f       	adc	r16, r24
     118:	08 1f       	adc	r16, r24
     11a:	08 1f       	adc	r16, r24
     11c:	08 1f       	adc	r16, r24
     11e:	08 1f       	adc	r16, r24
     120:	08 1f       	adc	r16, r24
     122:	20 1e       	adc	r2, r16
     124:	08 1f       	adc	r16, r24
     126:	08 1f       	adc	r16, r24
     128:	08 1f       	adc	r16, r24
     12a:	08 1f       	adc	r16, r24
     12c:	08 1f       	adc	r16, r24
     12e:	08 1f       	adc	r16, r24
     130:	08 1f       	adc	r16, r24
     132:	4c 1e       	adc	r4, r28
     134:	08 1f       	adc	r16, r24
     136:	08 1f       	adc	r16, r24
     138:	08 1f       	adc	r16, r24
     13a:	08 1f       	adc	r16, r24
     13c:	08 1f       	adc	r16, r24
     13e:	08 1f       	adc	r16, r24
     140:	08 1f       	adc	r16, r24
     142:	52 1e       	adc	r5, r18
     144:	08 1f       	adc	r16, r24
     146:	08 1f       	adc	r16, r24
     148:	08 1f       	adc	r16, r24
     14a:	08 1f       	adc	r16, r24
     14c:	08 1f       	adc	r16, r24
     14e:	08 1f       	adc	r16, r24
     150:	08 1f       	adc	r16, r24
     152:	64 1e       	adc	r6, r20
     154:	08 1f       	adc	r16, r24
     156:	08 1f       	adc	r16, r24
     158:	08 1f       	adc	r16, r24
     15a:	08 1f       	adc	r16, r24
     15c:	08 1f       	adc	r16, r24
     15e:	08 1f       	adc	r16, r24
     160:	08 1f       	adc	r16, r24
     162:	8e 1e       	adc	r8, r30
     164:	08 1f       	adc	r16, r24
     166:	08 1f       	adc	r16, r24
     168:	08 1f       	adc	r16, r24
     16a:	08 1f       	adc	r16, r24
     16c:	08 1f       	adc	r16, r24
     16e:	08 1f       	adc	r16, r24
     170:	08 1f       	adc	r16, r24
     172:	58 1e       	adc	r5, r24
     174:	08 1f       	adc	r16, r24
     176:	08 1f       	adc	r16, r24
     178:	08 1f       	adc	r16, r24
     17a:	08 1f       	adc	r16, r24
     17c:	08 1f       	adc	r16, r24
     17e:	08 1f       	adc	r16, r24
     180:	08 1f       	adc	r16, r24
     182:	72 1e       	adc	r7, r18
     184:	08 1f       	adc	r16, r24
     186:	08 1f       	adc	r16, r24
     188:	08 1f       	adc	r16, r24
     18a:	08 1f       	adc	r16, r24
     18c:	08 1f       	adc	r16, r24
     18e:	08 1f       	adc	r16, r24
     190:	08 1f       	adc	r16, r24
     192:	91 1e       	adc	r9, r17
     194:	08 1f       	adc	r16, r24
     196:	08 1f       	adc	r16, r24
     198:	08 1f       	adc	r16, r24
     19a:	08 1f       	adc	r16, r24
     19c:	08 1f       	adc	r16, r24
     19e:	08 1f       	adc	r16, r24
     1a0:	08 1f       	adc	r16, r24
     1a2:	91 1e       	adc	r9, r17
     1a4:	08 1f       	adc	r16, r24
     1a6:	08 1f       	adc	r16, r24
     1a8:	08 1f       	adc	r16, r24
     1aa:	08 1f       	adc	r16, r24
     1ac:	08 1f       	adc	r16, r24
     1ae:	08 1f       	adc	r16, r24
     1b0:	08 1f       	adc	r16, r24
     1b2:	91 1e       	adc	r9, r17
     1b4:	08 1f       	adc	r16, r24
     1b6:	08 1f       	adc	r16, r24
     1b8:	08 1f       	adc	r16, r24
     1ba:	08 1f       	adc	r16, r24
     1bc:	08 1f       	adc	r16, r24
     1be:	08 1f       	adc	r16, r24
     1c0:	08 1f       	adc	r16, r24
     1c2:	91 1e       	adc	r9, r17
     1c4:	08 1f       	adc	r16, r24
     1c6:	08 1f       	adc	r16, r24
     1c8:	08 1f       	adc	r16, r24
     1ca:	08 1f       	adc	r16, r24
     1cc:	08 1f       	adc	r16, r24
     1ce:	08 1f       	adc	r16, r24
     1d0:	08 1f       	adc	r16, r24
     1d2:	9a 1e       	adc	r9, r26
     1d4:	08 1f       	adc	r16, r24
     1d6:	08 1f       	adc	r16, r24
     1d8:	08 1f       	adc	r16, r24
     1da:	08 1f       	adc	r16, r24
     1dc:	08 1f       	adc	r16, r24
     1de:	08 1f       	adc	r16, r24
     1e0:	08 1f       	adc	r16, r24
     1e2:	cb 1e       	adc	r12, r27
     1e4:	08 1f       	adc	r16, r24
     1e6:	08 1f       	adc	r16, r24
     1e8:	08 1f       	adc	r16, r24
     1ea:	08 1f       	adc	r16, r24
     1ec:	08 1f       	adc	r16, r24
     1ee:	08 1f       	adc	r16, r24
     1f0:	08 1f       	adc	r16, r24
     1f2:	9a 1e       	adc	r9, r26
     1f4:	08 1f       	adc	r16, r24
     1f6:	08 1f       	adc	r16, r24
     1f8:	08 1f       	adc	r16, r24
     1fa:	08 1f       	adc	r16, r24
     1fc:	08 1f       	adc	r16, r24
     1fe:	08 1f       	adc	r16, r24
     200:	08 1f       	adc	r16, r24
     202:	cb 1e       	adc	r12, r27
     204:	08 1f       	adc	r16, r24
     206:	08 1f       	adc	r16, r24
     208:	08 1f       	adc	r16, r24
     20a:	08 1f       	adc	r16, r24
     20c:	08 1f       	adc	r16, r24
     20e:	08 1f       	adc	r16, r24
     210:	08 1f       	adc	r16, r24
     212:	b2 1e       	adc	r11, r18
     214:	08 1f       	adc	r16, r24
     216:	08 1f       	adc	r16, r24
     218:	08 1f       	adc	r16, r24
     21a:	08 1f       	adc	r16, r24
     21c:	08 1f       	adc	r16, r24
     21e:	08 1f       	adc	r16, r24
     220:	08 1f       	adc	r16, r24
     222:	cf 1e       	adc	r12, r31
     224:	08 1f       	adc	r16, r24
     226:	08 1f       	adc	r16, r24
     228:	08 1f       	adc	r16, r24
     22a:	08 1f       	adc	r16, r24
     22c:	08 1f       	adc	r16, r24
     22e:	08 1f       	adc	r16, r24
     230:	08 1f       	adc	r16, r24
     232:	cf 1e       	adc	r12, r31
     234:	08 1f       	adc	r16, r24
     236:	08 1f       	adc	r16, r24
     238:	08 1f       	adc	r16, r24
     23a:	08 1f       	adc	r16, r24
     23c:	08 1f       	adc	r16, r24
     23e:	08 1f       	adc	r16, r24
     240:	08 1f       	adc	r16, r24
     242:	e4 1e       	adc	r14, r20
     244:	08 1f       	adc	r16, r24
     246:	08 1f       	adc	r16, r24
     248:	08 1f       	adc	r16, r24
     24a:	08 1f       	adc	r16, r24
     24c:	08 1f       	adc	r16, r24
     24e:	08 1f       	adc	r16, r24
     250:	08 1f       	adc	r16, r24
     252:	fe 1e       	adc	r15, r30
     254:	08 1f       	adc	r16, r24
     256:	08 1f       	adc	r16, r24
     258:	08 1f       	adc	r16, r24
     25a:	08 1f       	adc	r16, r24
     25c:	08 1f       	adc	r16, r24
     25e:	08 1f       	adc	r16, r24
     260:	08 1f       	adc	r16, r24
     262:	fe 1e       	adc	r15, r30

00000264 <__trampolines_end>:
     264:	6e 61       	ori	r22, 0x1E	; 30
     266:	6e 00       	.word	0x006e	; ????

00000268 <__c.2332>:
     268:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     278:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     288:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     298:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     2a8:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     2b8:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     2c8:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     2d8:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     2e8:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     2f8:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     308:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     318:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     328:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     338:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     348:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     358:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000366 <__ctors_end>:
     366:	11 24       	eor	r1, r1
     368:	1f be       	out	0x3f, r1	; 63
     36a:	cf ef       	ldi	r28, 0xFF	; 255
     36c:	d8 e0       	ldi	r29, 0x08	; 8
     36e:	de bf       	out	0x3e, r29	; 62
     370:	cd bf       	out	0x3d, r28	; 61

00000372 <__do_copy_data>:
     372:	11 e0       	ldi	r17, 0x01	; 1
     374:	a0 e0       	ldi	r26, 0x00	; 0
     376:	b1 e0       	ldi	r27, 0x01	; 1
     378:	e6 ef       	ldi	r30, 0xF6	; 246
     37a:	fa e4       	ldi	r31, 0x4A	; 74
     37c:	02 c0       	rjmp	.+4      	; 0x382 <__do_copy_data+0x10>
     37e:	05 90       	lpm	r0, Z+
     380:	0d 92       	st	X+, r0
     382:	a6 39       	cpi	r26, 0x96	; 150
     384:	b1 07       	cpc	r27, r17
     386:	d9 f7       	brne	.-10     	; 0x37e <__do_copy_data+0xc>

00000388 <__do_clear_bss>:
     388:	23 e0       	ldi	r18, 0x03	; 3
     38a:	a6 e9       	ldi	r26, 0x96	; 150
     38c:	b1 e0       	ldi	r27, 0x01	; 1
     38e:	01 c0       	rjmp	.+2      	; 0x392 <.do_clear_bss_start>

00000390 <.do_clear_bss_loop>:
     390:	1d 92       	st	X+, r1

00000392 <.do_clear_bss_start>:
     392:	af 38       	cpi	r26, 0x8F	; 143
     394:	b2 07       	cpc	r27, r18
     396:	e1 f7       	brne	.-8      	; 0x390 <.do_clear_bss_loop>
     398:	0e 94 25 12 	call	0x244a	; 0x244a <main>
     39c:	0c 94 79 25 	jmp	0x4af2	; 0x4af2 <_exit>

000003a0 <__bad_interrupt>:
     3a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a4 <fetch_mpu6050_calibration>:
#include <avr/eeprom.h>

#include "eeprom.h"

void fetch_mpu6050_calibration(int16_t* values)
{       
     3a4:	cf 93       	push	r28
     3a6:	df 93       	push	r29
     3a8:	ec 01       	movw	r28, r24
    values[0] = eeprom_read_word((uint16_t*)AX_OFFSET_ADDRESS);
     3aa:	80 e0       	ldi	r24, 0x00	; 0
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <eeprom_read_word>
     3b2:	99 83       	std	Y+1, r25	; 0x01
     3b4:	88 83       	st	Y, r24
    values[1] = eeprom_read_word((uint16_t*)AY_OFFSET_ADDRESS);
     3b6:	82 e0       	ldi	r24, 0x02	; 2
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <eeprom_read_word>
     3be:	9b 83       	std	Y+3, r25	; 0x03
     3c0:	8a 83       	std	Y+2, r24	; 0x02
    values[2] = eeprom_read_word((uint16_t*)AZ_OFFSET_ADDRESS);
     3c2:	84 e0       	ldi	r24, 0x04	; 4
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <eeprom_read_word>
     3ca:	9d 83       	std	Y+5, r25	; 0x05
     3cc:	8c 83       	std	Y+4, r24	; 0x04
    
    values[3] = eeprom_read_word((uint16_t*)GX_OFFSET_ADDRESS);
     3ce:	86 e0       	ldi	r24, 0x06	; 6
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <eeprom_read_word>
     3d6:	9f 83       	std	Y+7, r25	; 0x07
     3d8:	8e 83       	std	Y+6, r24	; 0x06
    values[4] = eeprom_read_word((uint16_t*)GY_OFFSET_ADDRESS);
     3da:	88 e0       	ldi	r24, 0x08	; 8
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <eeprom_read_word>
     3e2:	99 87       	std	Y+9, r25	; 0x09
     3e4:	88 87       	std	Y+8, r24	; 0x08
    values[5] = eeprom_read_word((uint16_t*)GZ_OFFSET_ADDRESS);
     3e6:	8a e0       	ldi	r24, 0x0A	; 10
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <eeprom_read_word>
     3ee:	9b 87       	std	Y+11, r25	; 0x0b
     3f0:	8a 87       	std	Y+10, r24	; 0x0a
}
     3f2:	df 91       	pop	r29
     3f4:	cf 91       	pop	r28
     3f6:	08 95       	ret

000003f8 <save_mpu6050_calibration>:

void save_mpu6050_calibration(int16_t* values)
{
     3f8:	cf 93       	push	r28
     3fa:	df 93       	push	r29
     3fc:	ec 01       	movw	r28, r24
    eeprom_write_word((uint16_t*)AX_OFFSET_ADDRESS, values[0]);
     3fe:	68 81       	ld	r22, Y
     400:	79 81       	ldd	r23, Y+1	; 0x01
     402:	80 e0       	ldi	r24, 0x00	; 0
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	0e 94 56 25 	call	0x4aac	; 0x4aac <eeprom_write_word>
    eeprom_write_word((uint16_t*)AY_OFFSET_ADDRESS, values[1]);
     40a:	6a 81       	ldd	r22, Y+2	; 0x02
     40c:	7b 81       	ldd	r23, Y+3	; 0x03
     40e:	82 e0       	ldi	r24, 0x02	; 2
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	0e 94 56 25 	call	0x4aac	; 0x4aac <eeprom_write_word>
    eeprom_write_word((uint16_t*)AZ_OFFSET_ADDRESS, values[2]);
     416:	6c 81       	ldd	r22, Y+4	; 0x04
     418:	7d 81       	ldd	r23, Y+5	; 0x05
     41a:	84 e0       	ldi	r24, 0x04	; 4
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	0e 94 56 25 	call	0x4aac	; 0x4aac <eeprom_write_word>
    
    eeprom_write_word((uint16_t*)GY_OFFSET_ADDRESS, values[3]);
     422:	6e 81       	ldd	r22, Y+6	; 0x06
     424:	7f 81       	ldd	r23, Y+7	; 0x07
     426:	88 e0       	ldi	r24, 0x08	; 8
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	0e 94 56 25 	call	0x4aac	; 0x4aac <eeprom_write_word>
    eeprom_write_word((uint16_t*)GX_OFFSET_ADDRESS, values[4]);
     42e:	68 85       	ldd	r22, Y+8	; 0x08
     430:	79 85       	ldd	r23, Y+9	; 0x09
     432:	86 e0       	ldi	r24, 0x06	; 6
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	0e 94 56 25 	call	0x4aac	; 0x4aac <eeprom_write_word>
    eeprom_write_word((uint16_t*)GZ_OFFSET_ADDRESS, values[5]);
     43a:	6a 85       	ldd	r22, Y+10	; 0x0a
     43c:	7b 85       	ldd	r23, Y+11	; 0x0b
     43e:	8a e0       	ldi	r24, 0x0A	; 10
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	0e 94 56 25 	call	0x4aac	; 0x4aac <eeprom_write_word>
     446:	df 91       	pop	r29
     448:	cf 91       	pop	r28
     44a:	08 95       	ret

0000044c <mahony_init>:
    integralFBz = 0.0f;
    anglesComputed = 0;
    invSampleFreq = 1.0f / DEFAULT_SAMPLE_FREQ;
}

void begin(float sampleFrequency) { invSampleFreq = 1.0f / sampleFrequency; }
     44c:	80 e0       	ldi	r24, 0x00	; 0
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	a0 e2       	ldi	r26, 0x20	; 32
     452:	b1 e4       	ldi	r27, 0x41	; 65
     454:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <twoKp>
     458:	90 93 c8 01 	sts	0x01C8, r25	; 0x8001c8 <twoKp+0x1>
     45c:	a0 93 c9 01 	sts	0x01C9, r26	; 0x8001c9 <twoKp+0x2>
     460:	b0 93 ca 01 	sts	0x01CA, r27	; 0x8001ca <twoKp+0x3>
     464:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <twoKi>
     468:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <twoKi+0x1>
     46c:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <twoKi+0x2>
     470:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <twoKi+0x3>
     474:	80 e0       	ldi	r24, 0x00	; 0
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	a0 e8       	ldi	r26, 0x80	; 128
     47a:	bf e3       	ldi	r27, 0x3F	; 63
     47c:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <q0>
     480:	90 93 c0 01 	sts	0x01C0, r25	; 0x8001c0 <q0+0x1>
     484:	a0 93 c1 01 	sts	0x01C1, r26	; 0x8001c1 <q0+0x2>
     488:	b0 93 c2 01 	sts	0x01C2, r27	; 0x8001c2 <q0+0x3>
     48c:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <q1>
     490:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <q1+0x1>
     494:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <q1+0x2>
     498:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <q1+0x3>
     49c:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <q2>
     4a0:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <q2+0x1>
     4a4:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <q2+0x2>
     4a8:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <q2+0x3>
     4ac:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <q3>
     4b0:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <q3+0x1>
     4b4:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <q3+0x2>
     4b8:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <q3+0x3>
     4bc:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <integralFBx>
     4c0:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <integralFBx+0x1>
     4c4:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <integralFBx+0x2>
     4c8:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <integralFBx+0x3>
     4cc:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <integralFBy>
     4d0:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <integralFBy+0x1>
     4d4:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <integralFBy+0x2>
     4d8:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <integralFBy+0x3>
     4dc:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <integralFBz>
     4e0:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <integralFBz+0x1>
     4e4:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <integralFBz+0x2>
     4e8:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <integralFBz+0x3>
     4ec:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <__data_end>
     4f0:	89 e3       	ldi	r24, 0x39	; 57
     4f2:	9e e8       	ldi	r25, 0x8E	; 142
     4f4:	a3 e6       	ldi	r26, 0x63	; 99
     4f6:	bc e3       	ldi	r27, 0x3C	; 60
     4f8:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <invSampleFreq>
     4fc:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <invSampleFreq+0x1>
     500:	a0 93 a5 01 	sts	0x01A5, r26	; 0x8001a5 <invSampleFreq+0x2>
     504:	b0 93 a6 01 	sts	0x01A6, r27	; 0x8001a6 <invSampleFreq+0x3>
     508:	08 95       	ret

0000050a <invSqrt>:
//-------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x)
{
     50a:	8f 92       	push	r8
     50c:	9f 92       	push	r9
     50e:	af 92       	push	r10
     510:	bf 92       	push	r11
     512:	cf 92       	push	r12
     514:	df 92       	push	r13
     516:	ef 92       	push	r14
     518:	ff 92       	push	r15
     51a:	6b 01       	movw	r12, r22
     51c:	7c 01       	movw	r14, r24
    float halfx = 0.5f * x;
     51e:	20 e0       	ldi	r18, 0x00	; 0
     520:	30 e0       	ldi	r19, 0x00	; 0
     522:	40 e0       	ldi	r20, 0x00	; 0
     524:	5f e3       	ldi	r21, 0x3F	; 63
     526:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
     52a:	4b 01       	movw	r8, r22
     52c:	5c 01       	movw	r10, r24
    float y = x;
    long i = *(long*)&y;
    i = 0x5f3759df - (i>>1);
    y = *(float*)&i;
     52e:	d7 01       	movw	r26, r14
     530:	c6 01       	movw	r24, r12
     532:	b5 95       	asr	r27
     534:	a7 95       	ror	r26
     536:	97 95       	ror	r25
     538:	87 95       	ror	r24
     53a:	0f 2e       	mov	r0, r31
     53c:	ff ed       	ldi	r31, 0xDF	; 223
     53e:	cf 2e       	mov	r12, r31
     540:	f9 e5       	ldi	r31, 0x59	; 89
     542:	df 2e       	mov	r13, r31
     544:	f7 e3       	ldi	r31, 0x37	; 55
     546:	ef 2e       	mov	r14, r31
     548:	ff e5       	ldi	r31, 0x5F	; 95
     54a:	ff 2e       	mov	r15, r31
     54c:	f0 2d       	mov	r31, r0
     54e:	c8 1a       	sub	r12, r24
     550:	d9 0a       	sbc	r13, r25
     552:	ea 0a       	sbc	r14, r26
     554:	fb 0a       	sbc	r15, r27
    y = y * (1.5f - (halfx * y * y));
     556:	a7 01       	movw	r20, r14
     558:	96 01       	movw	r18, r12
     55a:	c5 01       	movw	r24, r10
     55c:	b4 01       	movw	r22, r8
     55e:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
     562:	a7 01       	movw	r20, r14
     564:	96 01       	movw	r18, r12
     566:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
     56a:	9b 01       	movw	r18, r22
     56c:	ac 01       	movw	r20, r24
     56e:	60 e0       	ldi	r22, 0x00	; 0
     570:	70 e0       	ldi	r23, 0x00	; 0
     572:	80 ec       	ldi	r24, 0xC0	; 192
     574:	9f e3       	ldi	r25, 0x3F	; 63
     576:	0e 94 81 16 	call	0x2d02	; 0x2d02 <__subsf3>
     57a:	a7 01       	movw	r20, r14
     57c:	96 01       	movw	r18, r12
     57e:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
     582:	6b 01       	movw	r12, r22
     584:	7c 01       	movw	r14, r24
    y = y * (1.5f - (halfx * y * y));
    return y;
     586:	9b 01       	movw	r18, r22
     588:	ac 01       	movw	r20, r24
     58a:	c5 01       	movw	r24, r10
     58c:	b4 01       	movw	r22, r8
     58e:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
     592:	a7 01       	movw	r20, r14
     594:	96 01       	movw	r18, r12
     596:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
     59a:	9b 01       	movw	r18, r22
     59c:	ac 01       	movw	r20, r24
     59e:	60 e0       	ldi	r22, 0x00	; 0
     5a0:	70 e0       	ldi	r23, 0x00	; 0
     5a2:	80 ec       	ldi	r24, 0xC0	; 192
     5a4:	9f e3       	ldi	r25, 0x3F	; 63
     5a6:	0e 94 81 16 	call	0x2d02	; 0x2d02 <__subsf3>
     5aa:	a7 01       	movw	r20, r14
     5ac:	96 01       	movw	r18, r12
     5ae:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
}
     5b2:	ff 90       	pop	r15
     5b4:	ef 90       	pop	r14
     5b6:	df 90       	pop	r13
     5b8:	cf 90       	pop	r12
     5ba:	bf 90       	pop	r11
     5bc:	af 90       	pop	r10
     5be:	9f 90       	pop	r9
     5c0:	8f 90       	pop	r8
     5c2:	08 95       	ret

000005c4 <mahony_updateIMU>:

//-------------------------------------------------------------------------------------------
// IMU algorithm update

void mahony_updateIMU(float gx, float gy, float gz, float ax, float ay, float az)
{
     5c4:	4f 92       	push	r4
     5c6:	5f 92       	push	r5
     5c8:	6f 92       	push	r6
     5ca:	7f 92       	push	r7
     5cc:	8f 92       	push	r8
     5ce:	9f 92       	push	r9
     5d0:	af 92       	push	r10
     5d2:	bf 92       	push	r11
     5d4:	cf 92       	push	r12
     5d6:	df 92       	push	r13
     5d8:	ef 92       	push	r14
     5da:	ff 92       	push	r15
     5dc:	0f 93       	push	r16
     5de:	1f 93       	push	r17
     5e0:	cf 93       	push	r28
     5e2:	df 93       	push	r29
     5e4:	cd b7       	in	r28, 0x3d	; 61
     5e6:	de b7       	in	r29, 0x3e	; 62
     5e8:	a4 97       	sbiw	r28, 0x24	; 36
     5ea:	0f b6       	in	r0, 0x3f	; 63
     5ec:	f8 94       	cli
     5ee:	de bf       	out	0x3e, r29	; 62
     5f0:	0f be       	out	0x3f, r0	; 63
     5f2:	cd bf       	out	0x3d, r28	; 61
     5f4:	29 87       	std	Y+9, r18	; 0x09
     5f6:	3a 87       	std	Y+10, r19	; 0x0a
     5f8:	4b 87       	std	Y+11, r20	; 0x0b
     5fa:	5c 87       	std	Y+12, r21	; 0x0c
    float halfvx, halfvy, halfvz;
    float halfex, halfey, halfez;
    float qa, qb, qc;

    // Convert gyroscope degrees/sec to radians/sec
    gx *= 0.0174533f;
     5fc:	29 e3       	ldi	r18, 0x39	; 57
     5fe:	3a ef       	ldi	r19, 0xFA	; 250
     600:	4e e8       	ldi	r20, 0x8E	; 142
     602:	5c e3       	ldi	r21, 0x3C	; 60
     604:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
     608:	6d 87       	std	Y+13, r22	; 0x0d
     60a:	7e 87       	std	Y+14, r23	; 0x0e
     60c:	8f 87       	std	Y+15, r24	; 0x0f
     60e:	98 8b       	std	Y+16, r25	; 0x10
    gy *= 0.0174533f;
     610:	29 e3       	ldi	r18, 0x39	; 57
     612:	3a ef       	ldi	r19, 0xFA	; 250
     614:	4e e8       	ldi	r20, 0x8E	; 142
     616:	5c e3       	ldi	r21, 0x3C	; 60
     618:	69 85       	ldd	r22, Y+9	; 0x09
     61a:	7a 85       	ldd	r23, Y+10	; 0x0a
     61c:	8b 85       	ldd	r24, Y+11	; 0x0b
     61e:	9c 85       	ldd	r25, Y+12	; 0x0c
     620:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
     624:	69 87       	std	Y+9, r22	; 0x09
     626:	7a 87       	std	Y+10, r23	; 0x0a
     628:	8b 87       	std	Y+11, r24	; 0x0b
     62a:	9c 87       	std	Y+12, r25	; 0x0c
    gz *= 0.0174533f;
     62c:	29 e3       	ldi	r18, 0x39	; 57
     62e:	3a ef       	ldi	r19, 0xFA	; 250
     630:	4e e8       	ldi	r20, 0x8E	; 142
     632:	5c e3       	ldi	r21, 0x3C	; 60
     634:	c8 01       	movw	r24, r16
     636:	b7 01       	movw	r22, r14
     638:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
     63c:	69 8b       	std	Y+17, r22	; 0x11
     63e:	7a 8b       	std	Y+18, r23	; 0x12
     640:	8b 8b       	std	Y+19, r24	; 0x13
     642:	9c 8b       	std	Y+20, r25	; 0x14

    // Compute feedback only if accelerometer measurement valid
    // (avoids NaN in accelerometer normalisation)
    if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
     644:	20 e0       	ldi	r18, 0x00	; 0
     646:	30 e0       	ldi	r19, 0x00	; 0
     648:	a9 01       	movw	r20, r18
     64a:	c6 01       	movw	r24, r12
     64c:	b5 01       	movw	r22, r10
     64e:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <__cmpsf2>
     652:	81 11       	cpse	r24, r1
     654:	17 c0       	rjmp	.+46     	; 0x684 <mahony_updateIMU+0xc0>
     656:	20 e0       	ldi	r18, 0x00	; 0
     658:	30 e0       	ldi	r19, 0x00	; 0
     65a:	a9 01       	movw	r20, r18
     65c:	6f a9       	ldd	r22, Y+55	; 0x37
     65e:	78 ad       	ldd	r23, Y+56	; 0x38
     660:	89 ad       	ldd	r24, Y+57	; 0x39
     662:	9a ad       	ldd	r25, Y+58	; 0x3a
     664:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <__cmpsf2>
     668:	81 11       	cpse	r24, r1
     66a:	0c c0       	rjmp	.+24     	; 0x684 <mahony_updateIMU+0xc0>
     66c:	20 e0       	ldi	r18, 0x00	; 0
     66e:	30 e0       	ldi	r19, 0x00	; 0
     670:	a9 01       	movw	r20, r18
     672:	6b ad       	ldd	r22, Y+59	; 0x3b
     674:	7c ad       	ldd	r23, Y+60	; 0x3c
     676:	8d ad       	ldd	r24, Y+61	; 0x3d
     678:	9e ad       	ldd	r25, Y+62	; 0x3e
     67a:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <__cmpsf2>
     67e:	88 23       	and	r24, r24
     680:	09 f4       	brne	.+2      	; 0x684 <mahony_updateIMU+0xc0>
     682:	1f c2       	rjmp	.+1086   	; 0xac2 <__stack+0x1c3>

        // Normalise accelerometer measurement
        recipNorm = invSqrt(ax * ax + ay * ay + az * az);
     684:	a6 01       	movw	r20, r12
     686:	95 01       	movw	r18, r10
     688:	c6 01       	movw	r24, r12
     68a:	b5 01       	movw	r22, r10
     68c:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
     690:	2b 01       	movw	r4, r22
     692:	3c 01       	movw	r6, r24
     694:	2f a9       	ldd	r18, Y+55	; 0x37
     696:	38 ad       	ldd	r19, Y+56	; 0x38
     698:	49 ad       	ldd	r20, Y+57	; 0x39
     69a:	5a ad       	ldd	r21, Y+58	; 0x3a
     69c:	ca 01       	movw	r24, r20
     69e:	b9 01       	movw	r22, r18
     6a0:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
     6a4:	9b 01       	movw	r18, r22
     6a6:	ac 01       	movw	r20, r24
     6a8:	c3 01       	movw	r24, r6
     6aa:	b2 01       	movw	r22, r4
     6ac:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
     6b0:	2b 01       	movw	r4, r22
     6b2:	3c 01       	movw	r6, r24
     6b4:	2b ad       	ldd	r18, Y+59	; 0x3b
     6b6:	3c ad       	ldd	r19, Y+60	; 0x3c
     6b8:	4d ad       	ldd	r20, Y+61	; 0x3d
     6ba:	5e ad       	ldd	r21, Y+62	; 0x3e
     6bc:	ca 01       	movw	r24, r20
     6be:	b9 01       	movw	r22, r18
     6c0:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
     6c4:	9b 01       	movw	r18, r22
     6c6:	ac 01       	movw	r20, r24
     6c8:	c3 01       	movw	r24, r6
     6ca:	b2 01       	movw	r22, r4
     6cc:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
     6d0:	0e 94 85 02 	call	0x50a	; 0x50a <invSqrt>
     6d4:	2b 01       	movw	r4, r22
     6d6:	3c 01       	movw	r6, r24
        ax *= recipNorm;
     6d8:	9b 01       	movw	r18, r22
     6da:	ac 01       	movw	r20, r24
     6dc:	c6 01       	movw	r24, r12
     6de:	b5 01       	movw	r22, r10
     6e0:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
     6e4:	6d 8b       	std	Y+21, r22	; 0x15
     6e6:	7e 8b       	std	Y+22, r23	; 0x16
     6e8:	8f 8b       	std	Y+23, r24	; 0x17
     6ea:	98 8f       	std	Y+24, r25	; 0x18
        ay *= recipNorm;
     6ec:	a3 01       	movw	r20, r6
     6ee:	92 01       	movw	r18, r4
     6f0:	6f a9       	ldd	r22, Y+55	; 0x37
     6f2:	78 ad       	ldd	r23, Y+56	; 0x38
     6f4:	89 ad       	ldd	r24, Y+57	; 0x39
     6f6:	9a ad       	ldd	r25, Y+58	; 0x3a
     6f8:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
     6fc:	6d 8f       	std	Y+29, r22	; 0x1d
     6fe:	7e 8f       	std	Y+30, r23	; 0x1e
     700:	8f 8f       	std	Y+31, r24	; 0x1f
     702:	98 a3       	std	Y+32, r25	; 0x20
        az *= recipNorm;
     704:	a3 01       	movw	r20, r6
     706:	92 01       	movw	r18, r4
     708:	6b ad       	ldd	r22, Y+59	; 0x3b
     70a:	7c ad       	ldd	r23, Y+60	; 0x3c
     70c:	8d ad       	ldd	r24, Y+61	; 0x3d
     70e:	9e ad       	ldd	r25, Y+62	; 0x3e
     710:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
     714:	6d 83       	std	Y+5, r22	; 0x05
     716:	7e 83       	std	Y+6, r23	; 0x06
     718:	8f 83       	std	Y+7, r24	; 0x07
     71a:	98 87       	std	Y+8, r25	; 0x08

        // Estimated direction of gravity
        halfvx = q1 * q3 - q0 * q2;
     71c:	80 90 bb 01 	lds	r8, 0x01BB	; 0x8001bb <q1>
     720:	90 90 bc 01 	lds	r9, 0x01BC	; 0x8001bc <q1+0x1>
     724:	a0 90 bd 01 	lds	r10, 0x01BD	; 0x8001bd <q1+0x2>
     728:	b0 90 be 01 	lds	r11, 0x01BE	; 0x8001be <q1+0x3>
     72c:	40 90 b3 01 	lds	r4, 0x01B3	; 0x8001b3 <q3>
     730:	50 90 b4 01 	lds	r5, 0x01B4	; 0x8001b4 <q3+0x1>
     734:	60 90 b5 01 	lds	r6, 0x01B5	; 0x8001b5 <q3+0x2>
     738:	70 90 b6 01 	lds	r7, 0x01B6	; 0x8001b6 <q3+0x3>
     73c:	c0 90 bf 01 	lds	r12, 0x01BF	; 0x8001bf <q0>
     740:	d0 90 c0 01 	lds	r13, 0x01C0	; 0x8001c0 <q0+0x1>
     744:	e0 90 c1 01 	lds	r14, 0x01C1	; 0x8001c1 <q0+0x2>
     748:	f0 90 c2 01 	lds	r15, 0x01C2	; 0x8001c2 <q0+0x3>
     74c:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <q2>
     750:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <q2+0x1>
     754:	a0 91 b9 01 	lds	r26, 0x01B9	; 0x8001b9 <q2+0x2>
     758:	b0 91 ba 01 	lds	r27, 0x01BA	; 0x8001ba <q2+0x3>
     75c:	89 83       	std	Y+1, r24	; 0x01
     75e:	9a 83       	std	Y+2, r25	; 0x02
     760:	ab 83       	std	Y+3, r26	; 0x03
     762:	bc 83       	std	Y+4, r27	; 0x04
     764:	a3 01       	movw	r20, r6
     766:	92 01       	movw	r18, r4
     768:	c5 01       	movw	r24, r10
     76a:	b4 01       	movw	r22, r8
     76c:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
     770:	69 8f       	std	Y+25, r22	; 0x19
     772:	7a 8f       	std	Y+26, r23	; 0x1a
     774:	8b 8f       	std	Y+27, r24	; 0x1b
     776:	9c 8f       	std	Y+28, r25	; 0x1c
     778:	29 81       	ldd	r18, Y+1	; 0x01
     77a:	3a 81       	ldd	r19, Y+2	; 0x02
     77c:	4b 81       	ldd	r20, Y+3	; 0x03
     77e:	5c 81       	ldd	r21, Y+4	; 0x04
     780:	c7 01       	movw	r24, r14
     782:	b6 01       	movw	r22, r12
     784:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
     788:	9b 01       	movw	r18, r22
     78a:	ac 01       	movw	r20, r24
     78c:	69 8d       	ldd	r22, Y+25	; 0x19
     78e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     790:	8b 8d       	ldd	r24, Y+27	; 0x1b
     792:	9c 8d       	ldd	r25, Y+28	; 0x1c
     794:	0e 94 81 16 	call	0x2d02	; 0x2d02 <__subsf3>
     798:	69 8f       	std	Y+25, r22	; 0x19
     79a:	7a 8f       	std	Y+26, r23	; 0x1a
     79c:	8b 8f       	std	Y+27, r24	; 0x1b
     79e:	9c 8f       	std	Y+28, r25	; 0x1c
        halfvy = q0 * q1 + q2 * q3;
     7a0:	a7 01       	movw	r20, r14
     7a2:	96 01       	movw	r18, r12
     7a4:	c5 01       	movw	r24, r10
     7a6:	b4 01       	movw	r22, r8
     7a8:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
     7ac:	4b 01       	movw	r8, r22
     7ae:	5c 01       	movw	r10, r24
     7b0:	29 81       	ldd	r18, Y+1	; 0x01
     7b2:	3a 81       	ldd	r19, Y+2	; 0x02
     7b4:	4b 81       	ldd	r20, Y+3	; 0x03
     7b6:	5c 81       	ldd	r21, Y+4	; 0x04
     7b8:	c3 01       	movw	r24, r6
     7ba:	b2 01       	movw	r22, r4
     7bc:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
     7c0:	9b 01       	movw	r18, r22
     7c2:	ac 01       	movw	r20, r24
     7c4:	c5 01       	movw	r24, r10
     7c6:	b4 01       	movw	r22, r8
     7c8:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
     7cc:	69 83       	std	Y+1, r22	; 0x01
     7ce:	7a 83       	std	Y+2, r23	; 0x02
     7d0:	8b 83       	std	Y+3, r24	; 0x03
     7d2:	9c 83       	std	Y+4, r25	; 0x04
        halfvz = q0 * q0 - 0.5f + q3 * q3;
     7d4:	a7 01       	movw	r20, r14
     7d6:	96 01       	movw	r18, r12
     7d8:	c7 01       	movw	r24, r14
     7da:	b6 01       	movw	r22, r12
     7dc:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
     7e0:	20 e0       	ldi	r18, 0x00	; 0
     7e2:	30 e0       	ldi	r19, 0x00	; 0
     7e4:	40 e0       	ldi	r20, 0x00	; 0
     7e6:	5f e3       	ldi	r21, 0x3F	; 63
     7e8:	0e 94 81 16 	call	0x2d02	; 0x2d02 <__subsf3>
     7ec:	6b 01       	movw	r12, r22
     7ee:	7c 01       	movw	r14, r24
     7f0:	a3 01       	movw	r20, r6
     7f2:	92 01       	movw	r18, r4
     7f4:	c3 01       	movw	r24, r6
     7f6:	b2 01       	movw	r22, r4
     7f8:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
     7fc:	9b 01       	movw	r18, r22
     7fe:	ac 01       	movw	r20, r24
     800:	c7 01       	movw	r24, r14
     802:	b6 01       	movw	r22, r12
     804:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
     808:	6b 01       	movw	r12, r22
     80a:	7c 01       	movw	r14, r24

        // Error is sum of cross product between estimated
        // and measured direction of gravity
        halfex = (ay * halfvz - az * halfvy);
     80c:	9b 01       	movw	r18, r22
     80e:	ac 01       	movw	r20, r24
     810:	6d 8d       	ldd	r22, Y+29	; 0x1d
     812:	7e 8d       	ldd	r23, Y+30	; 0x1e
     814:	8f 8d       	ldd	r24, Y+31	; 0x1f
     816:	98 a1       	ldd	r25, Y+32	; 0x20
     818:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
     81c:	4b 01       	movw	r8, r22
     81e:	5c 01       	movw	r10, r24
     820:	29 81       	ldd	r18, Y+1	; 0x01
     822:	3a 81       	ldd	r19, Y+2	; 0x02
     824:	4b 81       	ldd	r20, Y+3	; 0x03
     826:	5c 81       	ldd	r21, Y+4	; 0x04
     828:	6d 81       	ldd	r22, Y+5	; 0x05
     82a:	7e 81       	ldd	r23, Y+6	; 0x06
     82c:	8f 81       	ldd	r24, Y+7	; 0x07
     82e:	98 85       	ldd	r25, Y+8	; 0x08
     830:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
     834:	9b 01       	movw	r18, r22
     836:	ac 01       	movw	r20, r24
     838:	c5 01       	movw	r24, r10
     83a:	b4 01       	movw	r22, r8
     83c:	0e 94 81 16 	call	0x2d02	; 0x2d02 <__subsf3>
     840:	69 a3       	std	Y+33, r22	; 0x21
     842:	7a a3       	std	Y+34, r23	; 0x22
     844:	8b a3       	std	Y+35, r24	; 0x23
     846:	9c a3       	std	Y+36, r25	; 0x24
        halfey = (az * halfvx - ax * halfvz);
     848:	29 8d       	ldd	r18, Y+25	; 0x19
     84a:	3a 8d       	ldd	r19, Y+26	; 0x1a
     84c:	4b 8d       	ldd	r20, Y+27	; 0x1b
     84e:	5c 8d       	ldd	r21, Y+28	; 0x1c
     850:	6d 81       	ldd	r22, Y+5	; 0x05
     852:	7e 81       	ldd	r23, Y+6	; 0x06
     854:	8f 81       	ldd	r24, Y+7	; 0x07
     856:	98 85       	ldd	r25, Y+8	; 0x08
     858:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
     85c:	4b 01       	movw	r8, r22
     85e:	5c 01       	movw	r10, r24
     860:	a7 01       	movw	r20, r14
     862:	96 01       	movw	r18, r12
     864:	6d 89       	ldd	r22, Y+21	; 0x15
     866:	7e 89       	ldd	r23, Y+22	; 0x16
     868:	8f 89       	ldd	r24, Y+23	; 0x17
     86a:	98 8d       	ldd	r25, Y+24	; 0x18
     86c:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
     870:	9b 01       	movw	r18, r22
     872:	ac 01       	movw	r20, r24
     874:	c5 01       	movw	r24, r10
     876:	b4 01       	movw	r22, r8
     878:	0e 94 81 16 	call	0x2d02	; 0x2d02 <__subsf3>
     87c:	6d 83       	std	Y+5, r22	; 0x05
     87e:	7e 83       	std	Y+6, r23	; 0x06
     880:	8f 83       	std	Y+7, r24	; 0x07
     882:	98 87       	std	Y+8, r25	; 0x08
        halfez = (ax * halfvy - ay * halfvx);
     884:	29 81       	ldd	r18, Y+1	; 0x01
     886:	3a 81       	ldd	r19, Y+2	; 0x02
     888:	4b 81       	ldd	r20, Y+3	; 0x03
     88a:	5c 81       	ldd	r21, Y+4	; 0x04
     88c:	6d 89       	ldd	r22, Y+21	; 0x15
     88e:	7e 89       	ldd	r23, Y+22	; 0x16
     890:	8f 89       	ldd	r24, Y+23	; 0x17
     892:	98 8d       	ldd	r25, Y+24	; 0x18
     894:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
     898:	6b 01       	movw	r12, r22
     89a:	7c 01       	movw	r14, r24
     89c:	29 8d       	ldd	r18, Y+25	; 0x19
     89e:	3a 8d       	ldd	r19, Y+26	; 0x1a
     8a0:	4b 8d       	ldd	r20, Y+27	; 0x1b
     8a2:	5c 8d       	ldd	r21, Y+28	; 0x1c
     8a4:	6d 8d       	ldd	r22, Y+29	; 0x1d
     8a6:	7e 8d       	ldd	r23, Y+30	; 0x1e
     8a8:	8f 8d       	ldd	r24, Y+31	; 0x1f
     8aa:	98 a1       	ldd	r25, Y+32	; 0x20
     8ac:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
     8b0:	9b 01       	movw	r18, r22
     8b2:	ac 01       	movw	r20, r24
     8b4:	c7 01       	movw	r24, r14
     8b6:	b6 01       	movw	r22, r12
     8b8:	0e 94 81 16 	call	0x2d02	; 0x2d02 <__subsf3>
     8bc:	69 83       	std	Y+1, r22	; 0x01
     8be:	7a 83       	std	Y+2, r23	; 0x02
     8c0:	8b 83       	std	Y+3, r24	; 0x03
     8c2:	9c 83       	std	Y+4, r25	; 0x04

        // Compute and apply integral feedback if enabled
        if(twoKi > 0.0f) {
     8c4:	c0 90 c3 01 	lds	r12, 0x01C3	; 0x8001c3 <twoKi>
     8c8:	d0 90 c4 01 	lds	r13, 0x01C4	; 0x8001c4 <twoKi+0x1>
     8cc:	e0 90 c5 01 	lds	r14, 0x01C5	; 0x8001c5 <twoKi+0x2>
     8d0:	f0 90 c6 01 	lds	r15, 0x01C6	; 0x8001c6 <twoKi+0x3>
     8d4:	20 e0       	ldi	r18, 0x00	; 0
     8d6:	30 e0       	ldi	r19, 0x00	; 0
     8d8:	a9 01       	movw	r20, r18
     8da:	c7 01       	movw	r24, r14
     8dc:	b6 01       	movw	r22, r12
     8de:	0e 94 ff 18 	call	0x31fe	; 0x31fe <__gesf2>
     8e2:	18 16       	cp	r1, r24
     8e4:	0c f0       	brlt	.+2      	; 0x8e8 <__DATA_REGION_LENGTH__+0xe8>
     8e6:	91 c0       	rjmp	.+290    	; 0xa0a <__stack+0x10b>
            // integral error scaled by Ki
            integralFBx += twoKi * halfex * invSampleFreq;
     8e8:	80 90 a3 01 	lds	r8, 0x01A3	; 0x8001a3 <invSampleFreq>
     8ec:	90 90 a4 01 	lds	r9, 0x01A4	; 0x8001a4 <invSampleFreq+0x1>
     8f0:	a0 90 a5 01 	lds	r10, 0x01A5	; 0x8001a5 <invSampleFreq+0x2>
     8f4:	b0 90 a6 01 	lds	r11, 0x01A6	; 0x8001a6 <invSampleFreq+0x3>
     8f8:	a7 01       	movw	r20, r14
     8fa:	96 01       	movw	r18, r12
     8fc:	69 a1       	ldd	r22, Y+33	; 0x21
     8fe:	7a a1       	ldd	r23, Y+34	; 0x22
     900:	8b a1       	ldd	r24, Y+35	; 0x23
     902:	9c a1       	ldd	r25, Y+36	; 0x24
     904:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
     908:	a5 01       	movw	r20, r10
     90a:	94 01       	movw	r18, r8
     90c:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
     910:	20 91 af 01 	lds	r18, 0x01AF	; 0x8001af <integralFBx>
     914:	30 91 b0 01 	lds	r19, 0x01B0	; 0x8001b0 <integralFBx+0x1>
     918:	40 91 b1 01 	lds	r20, 0x01B1	; 0x8001b1 <integralFBx+0x2>
     91c:	50 91 b2 01 	lds	r21, 0x01B2	; 0x8001b2 <integralFBx+0x3>
     920:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
     924:	6d 8b       	std	Y+21, r22	; 0x15
     926:	7e 8b       	std	Y+22, r23	; 0x16
     928:	8f 8b       	std	Y+23, r24	; 0x17
     92a:	98 8f       	std	Y+24, r25	; 0x18
     92c:	60 93 af 01 	sts	0x01AF, r22	; 0x8001af <integralFBx>
     930:	70 93 b0 01 	sts	0x01B0, r23	; 0x8001b0 <integralFBx+0x1>
     934:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <integralFBx+0x2>
     938:	90 93 b2 01 	sts	0x01B2, r25	; 0x8001b2 <integralFBx+0x3>
            integralFBy += twoKi * halfey * invSampleFreq;
     93c:	a7 01       	movw	r20, r14
     93e:	96 01       	movw	r18, r12
     940:	6d 81       	ldd	r22, Y+5	; 0x05
     942:	7e 81       	ldd	r23, Y+6	; 0x06
     944:	8f 81       	ldd	r24, Y+7	; 0x07
     946:	98 85       	ldd	r25, Y+8	; 0x08
     948:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
     94c:	a5 01       	movw	r20, r10
     94e:	94 01       	movw	r18, r8
     950:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
     954:	20 91 ab 01 	lds	r18, 0x01AB	; 0x8001ab <integralFBy>
     958:	30 91 ac 01 	lds	r19, 0x01AC	; 0x8001ac <integralFBy+0x1>
     95c:	40 91 ad 01 	lds	r20, 0x01AD	; 0x8001ad <integralFBy+0x2>
     960:	50 91 ae 01 	lds	r21, 0x01AE	; 0x8001ae <integralFBy+0x3>
     964:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
     968:	2b 01       	movw	r4, r22
     96a:	3c 01       	movw	r6, r24
     96c:	60 93 ab 01 	sts	0x01AB, r22	; 0x8001ab <integralFBy>
     970:	70 93 ac 01 	sts	0x01AC, r23	; 0x8001ac <integralFBy+0x1>
     974:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <integralFBy+0x2>
     978:	90 93 ae 01 	sts	0x01AE, r25	; 0x8001ae <integralFBy+0x3>
            integralFBz += twoKi * halfez * invSampleFreq;
     97c:	a7 01       	movw	r20, r14
     97e:	96 01       	movw	r18, r12
     980:	69 81       	ldd	r22, Y+1	; 0x01
     982:	7a 81       	ldd	r23, Y+2	; 0x02
     984:	8b 81       	ldd	r24, Y+3	; 0x03
     986:	9c 81       	ldd	r25, Y+4	; 0x04
     988:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
     98c:	a5 01       	movw	r20, r10
     98e:	94 01       	movw	r18, r8
     990:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
     994:	20 91 a7 01 	lds	r18, 0x01A7	; 0x8001a7 <integralFBz>
     998:	30 91 a8 01 	lds	r19, 0x01A8	; 0x8001a8 <integralFBz+0x1>
     99c:	40 91 a9 01 	lds	r20, 0x01A9	; 0x8001a9 <integralFBz+0x2>
     9a0:	50 91 aa 01 	lds	r21, 0x01AA	; 0x8001aa <integralFBz+0x3>
     9a4:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
     9a8:	6b 01       	movw	r12, r22
     9aa:	7c 01       	movw	r14, r24
     9ac:	60 93 a7 01 	sts	0x01A7, r22	; 0x8001a7 <integralFBz>
     9b0:	70 93 a8 01 	sts	0x01A8, r23	; 0x8001a8 <integralFBz+0x1>
     9b4:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <integralFBz+0x2>
     9b8:	90 93 aa 01 	sts	0x01AA, r25	; 0x8001aa <integralFBz+0x3>
            gx += integralFBx;	// apply integral feedback
     9bc:	2d 89       	ldd	r18, Y+21	; 0x15
     9be:	3e 89       	ldd	r19, Y+22	; 0x16
     9c0:	4f 89       	ldd	r20, Y+23	; 0x17
     9c2:	58 8d       	ldd	r21, Y+24	; 0x18
     9c4:	6d 85       	ldd	r22, Y+13	; 0x0d
     9c6:	7e 85       	ldd	r23, Y+14	; 0x0e
     9c8:	8f 85       	ldd	r24, Y+15	; 0x0f
     9ca:	98 89       	ldd	r25, Y+16	; 0x10
     9cc:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
     9d0:	6d 87       	std	Y+13, r22	; 0x0d
     9d2:	7e 87       	std	Y+14, r23	; 0x0e
     9d4:	8f 87       	std	Y+15, r24	; 0x0f
     9d6:	98 8b       	std	Y+16, r25	; 0x10
            gy += integralFBy;
     9d8:	a3 01       	movw	r20, r6
     9da:	92 01       	movw	r18, r4
     9dc:	69 85       	ldd	r22, Y+9	; 0x09
     9de:	7a 85       	ldd	r23, Y+10	; 0x0a
     9e0:	8b 85       	ldd	r24, Y+11	; 0x0b
     9e2:	9c 85       	ldd	r25, Y+12	; 0x0c
     9e4:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
     9e8:	69 87       	std	Y+9, r22	; 0x09
     9ea:	7a 87       	std	Y+10, r23	; 0x0a
     9ec:	8b 87       	std	Y+11, r24	; 0x0b
     9ee:	9c 87       	std	Y+12, r25	; 0x0c
            gz += integralFBz;
     9f0:	a7 01       	movw	r20, r14
     9f2:	96 01       	movw	r18, r12
     9f4:	69 89       	ldd	r22, Y+17	; 0x11
     9f6:	7a 89       	ldd	r23, Y+18	; 0x12
     9f8:	8b 89       	ldd	r24, Y+19	; 0x13
     9fa:	9c 89       	ldd	r25, Y+20	; 0x14
     9fc:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
     a00:	69 8b       	std	Y+17, r22	; 0x11
     a02:	7a 8b       	std	Y+18, r23	; 0x12
     a04:	8b 8b       	std	Y+19, r24	; 0x13
     a06:	9c 8b       	std	Y+20, r25	; 0x14
     a08:	18 c0       	rjmp	.+48     	; 0xa3a <__stack+0x13b>
            } else {
            integralFBx = 0.0f;	// prevent integral windup
     a0a:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <integralFBx>
     a0e:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <integralFBx+0x1>
     a12:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <integralFBx+0x2>
     a16:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <integralFBx+0x3>
            integralFBy = 0.0f;
     a1a:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <integralFBy>
     a1e:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <integralFBy+0x1>
     a22:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <integralFBy+0x2>
     a26:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <integralFBy+0x3>
            integralFBz = 0.0f;
     a2a:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <integralFBz>
     a2e:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <integralFBz+0x1>
     a32:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <integralFBz+0x2>
     a36:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <integralFBz+0x3>
        }

        // Apply proportional feedback
        gx += twoKp * halfex;
     a3a:	c0 90 c7 01 	lds	r12, 0x01C7	; 0x8001c7 <twoKp>
     a3e:	d0 90 c8 01 	lds	r13, 0x01C8	; 0x8001c8 <twoKp+0x1>
     a42:	e0 90 c9 01 	lds	r14, 0x01C9	; 0x8001c9 <twoKp+0x2>
     a46:	f0 90 ca 01 	lds	r15, 0x01CA	; 0x8001ca <twoKp+0x3>
     a4a:	a7 01       	movw	r20, r14
     a4c:	96 01       	movw	r18, r12
     a4e:	69 a1       	ldd	r22, Y+33	; 0x21
     a50:	7a a1       	ldd	r23, Y+34	; 0x22
     a52:	8b a1       	ldd	r24, Y+35	; 0x23
     a54:	9c a1       	ldd	r25, Y+36	; 0x24
     a56:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
     a5a:	9b 01       	movw	r18, r22
     a5c:	ac 01       	movw	r20, r24
     a5e:	6d 85       	ldd	r22, Y+13	; 0x0d
     a60:	7e 85       	ldd	r23, Y+14	; 0x0e
     a62:	8f 85       	ldd	r24, Y+15	; 0x0f
     a64:	98 89       	ldd	r25, Y+16	; 0x10
     a66:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
     a6a:	6d 87       	std	Y+13, r22	; 0x0d
     a6c:	7e 87       	std	Y+14, r23	; 0x0e
     a6e:	8f 87       	std	Y+15, r24	; 0x0f
     a70:	98 8b       	std	Y+16, r25	; 0x10
        gy += twoKp * halfey;
     a72:	a7 01       	movw	r20, r14
     a74:	96 01       	movw	r18, r12
     a76:	6d 81       	ldd	r22, Y+5	; 0x05
     a78:	7e 81       	ldd	r23, Y+6	; 0x06
     a7a:	8f 81       	ldd	r24, Y+7	; 0x07
     a7c:	98 85       	ldd	r25, Y+8	; 0x08
     a7e:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
     a82:	9b 01       	movw	r18, r22
     a84:	ac 01       	movw	r20, r24
     a86:	69 85       	ldd	r22, Y+9	; 0x09
     a88:	7a 85       	ldd	r23, Y+10	; 0x0a
     a8a:	8b 85       	ldd	r24, Y+11	; 0x0b
     a8c:	9c 85       	ldd	r25, Y+12	; 0x0c
     a8e:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
     a92:	69 87       	std	Y+9, r22	; 0x09
     a94:	7a 87       	std	Y+10, r23	; 0x0a
     a96:	8b 87       	std	Y+11, r24	; 0x0b
     a98:	9c 87       	std	Y+12, r25	; 0x0c
        gz += twoKp * halfez;
     a9a:	a7 01       	movw	r20, r14
     a9c:	96 01       	movw	r18, r12
     a9e:	69 81       	ldd	r22, Y+1	; 0x01
     aa0:	7a 81       	ldd	r23, Y+2	; 0x02
     aa2:	8b 81       	ldd	r24, Y+3	; 0x03
     aa4:	9c 81       	ldd	r25, Y+4	; 0x04
     aa6:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
     aaa:	9b 01       	movw	r18, r22
     aac:	ac 01       	movw	r20, r24
     aae:	69 89       	ldd	r22, Y+17	; 0x11
     ab0:	7a 89       	ldd	r23, Y+18	; 0x12
     ab2:	8b 89       	ldd	r24, Y+19	; 0x13
     ab4:	9c 89       	ldd	r25, Y+20	; 0x14
     ab6:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
     aba:	69 8b       	std	Y+17, r22	; 0x11
     abc:	7a 8b       	std	Y+18, r23	; 0x12
     abe:	8b 8b       	std	Y+19, r24	; 0x13
     ac0:	9c 8b       	std	Y+20, r25	; 0x14
    }

    // Integrate rate of change of quaternion
    gx *= (0.5f * invSampleFreq);		// pre-multiply common factors
     ac2:	20 e0       	ldi	r18, 0x00	; 0
     ac4:	30 e0       	ldi	r19, 0x00	; 0
     ac6:	40 e0       	ldi	r20, 0x00	; 0
     ac8:	5f e3       	ldi	r21, 0x3F	; 63
     aca:	60 91 a3 01 	lds	r22, 0x01A3	; 0x8001a3 <invSampleFreq>
     ace:	70 91 a4 01 	lds	r23, 0x01A4	; 0x8001a4 <invSampleFreq+0x1>
     ad2:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <invSampleFreq+0x2>
     ad6:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <invSampleFreq+0x3>
     ada:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
     ade:	6b 01       	movw	r12, r22
     ae0:	7c 01       	movw	r14, r24
     ae2:	9b 01       	movw	r18, r22
     ae4:	ac 01       	movw	r20, r24
     ae6:	6d 85       	ldd	r22, Y+13	; 0x0d
     ae8:	7e 85       	ldd	r23, Y+14	; 0x0e
     aea:	8f 85       	ldd	r24, Y+15	; 0x0f
     aec:	98 89       	ldd	r25, Y+16	; 0x10
     aee:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
     af2:	69 83       	std	Y+1, r22	; 0x01
     af4:	7a 83       	std	Y+2, r23	; 0x02
     af6:	8b 83       	std	Y+3, r24	; 0x03
     af8:	9c 83       	std	Y+4, r25	; 0x04
    gy *= (0.5f * invSampleFreq);
     afa:	a7 01       	movw	r20, r14
     afc:	96 01       	movw	r18, r12
     afe:	69 85       	ldd	r22, Y+9	; 0x09
     b00:	7a 85       	ldd	r23, Y+10	; 0x0a
     b02:	8b 85       	ldd	r24, Y+11	; 0x0b
     b04:	9c 85       	ldd	r25, Y+12	; 0x0c
     b06:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
     b0a:	6d 83       	std	Y+5, r22	; 0x05
     b0c:	7e 83       	std	Y+6, r23	; 0x06
     b0e:	8f 83       	std	Y+7, r24	; 0x07
     b10:	98 87       	std	Y+8, r25	; 0x08
    gz *= (0.5f * invSampleFreq);
     b12:	a7 01       	movw	r20, r14
     b14:	96 01       	movw	r18, r12
     b16:	69 89       	ldd	r22, Y+17	; 0x11
     b18:	7a 89       	ldd	r23, Y+18	; 0x12
     b1a:	8b 89       	ldd	r24, Y+19	; 0x13
     b1c:	9c 89       	ldd	r25, Y+20	; 0x14
     b1e:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
     b22:	69 8b       	std	Y+17, r22	; 0x11
     b24:	7a 8b       	std	Y+18, r23	; 0x12
     b26:	8b 8b       	std	Y+19, r24	; 0x13
     b28:	9c 8b       	std	Y+20, r25	; 0x14
    qa = q0;
     b2a:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <q0>
     b2e:	90 91 c0 01 	lds	r25, 0x01C0	; 0x8001c0 <q0+0x1>
     b32:	a0 91 c1 01 	lds	r26, 0x01C1	; 0x8001c1 <q0+0x2>
     b36:	b0 91 c2 01 	lds	r27, 0x01C2	; 0x8001c2 <q0+0x3>
     b3a:	8d 87       	std	Y+13, r24	; 0x0d
     b3c:	9e 87       	std	Y+14, r25	; 0x0e
     b3e:	af 87       	std	Y+15, r26	; 0x0f
     b40:	b8 8b       	std	Y+16, r27	; 0x10
    qb = q1;
     b42:	c0 90 bb 01 	lds	r12, 0x01BB	; 0x8001bb <q1>
     b46:	d0 90 bc 01 	lds	r13, 0x01BC	; 0x8001bc <q1+0x1>
     b4a:	e0 90 bd 01 	lds	r14, 0x01BD	; 0x8001bd <q1+0x2>
     b4e:	f0 90 be 01 	lds	r15, 0x01BE	; 0x8001be <q1+0x3>
    qc = q2;
     b52:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <q2>
     b56:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <q2+0x1>
     b5a:	a0 91 b9 01 	lds	r26, 0x01B9	; 0x8001b9 <q2+0x2>
     b5e:	b0 91 ba 01 	lds	r27, 0x01BA	; 0x8001ba <q2+0x3>
     b62:	89 87       	std	Y+9, r24	; 0x09
     b64:	9a 87       	std	Y+10, r25	; 0x0a
     b66:	ab 87       	std	Y+11, r26	; 0x0b
     b68:	bc 87       	std	Y+12, r27	; 0x0c
    q0 += (-qb * gx - qc * gy - q3 * gz);
     b6a:	40 90 b3 01 	lds	r4, 0x01B3	; 0x8001b3 <q3>
     b6e:	50 90 b4 01 	lds	r5, 0x01B4	; 0x8001b4 <q3+0x1>
     b72:	60 90 b5 01 	lds	r6, 0x01B5	; 0x8001b5 <q3+0x2>
     b76:	70 90 b6 01 	lds	r7, 0x01B6	; 0x8001b6 <q3+0x3>
     b7a:	c7 01       	movw	r24, r14
     b7c:	b6 01       	movw	r22, r12
     b7e:	90 58       	subi	r25, 0x80	; 128
     b80:	29 81       	ldd	r18, Y+1	; 0x01
     b82:	3a 81       	ldd	r19, Y+2	; 0x02
     b84:	4b 81       	ldd	r20, Y+3	; 0x03
     b86:	5c 81       	ldd	r21, Y+4	; 0x04
     b88:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
     b8c:	4b 01       	movw	r8, r22
     b8e:	5c 01       	movw	r10, r24
     b90:	29 85       	ldd	r18, Y+9	; 0x09
     b92:	3a 85       	ldd	r19, Y+10	; 0x0a
     b94:	4b 85       	ldd	r20, Y+11	; 0x0b
     b96:	5c 85       	ldd	r21, Y+12	; 0x0c
     b98:	6d 81       	ldd	r22, Y+5	; 0x05
     b9a:	7e 81       	ldd	r23, Y+6	; 0x06
     b9c:	8f 81       	ldd	r24, Y+7	; 0x07
     b9e:	98 85       	ldd	r25, Y+8	; 0x08
     ba0:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
     ba4:	9b 01       	movw	r18, r22
     ba6:	ac 01       	movw	r20, r24
     ba8:	c5 01       	movw	r24, r10
     baa:	b4 01       	movw	r22, r8
     bac:	0e 94 81 16 	call	0x2d02	; 0x2d02 <__subsf3>
     bb0:	4b 01       	movw	r8, r22
     bb2:	5c 01       	movw	r10, r24
     bb4:	a3 01       	movw	r20, r6
     bb6:	92 01       	movw	r18, r4
     bb8:	69 89       	ldd	r22, Y+17	; 0x11
     bba:	7a 89       	ldd	r23, Y+18	; 0x12
     bbc:	8b 89       	ldd	r24, Y+19	; 0x13
     bbe:	9c 89       	ldd	r25, Y+20	; 0x14
     bc0:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
     bc4:	9b 01       	movw	r18, r22
     bc6:	ac 01       	movw	r20, r24
     bc8:	c5 01       	movw	r24, r10
     bca:	b4 01       	movw	r22, r8
     bcc:	0e 94 81 16 	call	0x2d02	; 0x2d02 <__subsf3>
     bd0:	2d 85       	ldd	r18, Y+13	; 0x0d
     bd2:	3e 85       	ldd	r19, Y+14	; 0x0e
     bd4:	4f 85       	ldd	r20, Y+15	; 0x0f
     bd6:	58 89       	ldd	r21, Y+16	; 0x10
     bd8:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
     bdc:	6d 8b       	std	Y+21, r22	; 0x15
     bde:	7e 8b       	std	Y+22, r23	; 0x16
     be0:	8f 8b       	std	Y+23, r24	; 0x17
     be2:	98 8f       	std	Y+24, r25	; 0x18
    q1 += (qa * gx + qc * gz - q3 * gy);
     be4:	2d 85       	ldd	r18, Y+13	; 0x0d
     be6:	3e 85       	ldd	r19, Y+14	; 0x0e
     be8:	4f 85       	ldd	r20, Y+15	; 0x0f
     bea:	58 89       	ldd	r21, Y+16	; 0x10
     bec:	69 81       	ldd	r22, Y+1	; 0x01
     bee:	7a 81       	ldd	r23, Y+2	; 0x02
     bf0:	8b 81       	ldd	r24, Y+3	; 0x03
     bf2:	9c 81       	ldd	r25, Y+4	; 0x04
     bf4:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
     bf8:	4b 01       	movw	r8, r22
     bfa:	5c 01       	movw	r10, r24
     bfc:	29 85       	ldd	r18, Y+9	; 0x09
     bfe:	3a 85       	ldd	r19, Y+10	; 0x0a
     c00:	4b 85       	ldd	r20, Y+11	; 0x0b
     c02:	5c 85       	ldd	r21, Y+12	; 0x0c
     c04:	69 89       	ldd	r22, Y+17	; 0x11
     c06:	7a 89       	ldd	r23, Y+18	; 0x12
     c08:	8b 89       	ldd	r24, Y+19	; 0x13
     c0a:	9c 89       	ldd	r25, Y+20	; 0x14
     c0c:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
     c10:	9b 01       	movw	r18, r22
     c12:	ac 01       	movw	r20, r24
     c14:	c5 01       	movw	r24, r10
     c16:	b4 01       	movw	r22, r8
     c18:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
     c1c:	4b 01       	movw	r8, r22
     c1e:	5c 01       	movw	r10, r24
     c20:	a3 01       	movw	r20, r6
     c22:	92 01       	movw	r18, r4
     c24:	6d 81       	ldd	r22, Y+5	; 0x05
     c26:	7e 81       	ldd	r23, Y+6	; 0x06
     c28:	8f 81       	ldd	r24, Y+7	; 0x07
     c2a:	98 85       	ldd	r25, Y+8	; 0x08
     c2c:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
     c30:	9b 01       	movw	r18, r22
     c32:	ac 01       	movw	r20, r24
     c34:	c5 01       	movw	r24, r10
     c36:	b4 01       	movw	r22, r8
     c38:	0e 94 81 16 	call	0x2d02	; 0x2d02 <__subsf3>
     c3c:	a7 01       	movw	r20, r14
     c3e:	96 01       	movw	r18, r12
     c40:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
     c44:	6d 8f       	std	Y+29, r22	; 0x1d
     c46:	7e 8f       	std	Y+30, r23	; 0x1e
     c48:	8f 8f       	std	Y+31, r24	; 0x1f
     c4a:	98 a3       	std	Y+32, r25	; 0x20
    q2 += (qa * gy - qb * gz + q3 * gx);
     c4c:	2d 85       	ldd	r18, Y+13	; 0x0d
     c4e:	3e 85       	ldd	r19, Y+14	; 0x0e
     c50:	4f 85       	ldd	r20, Y+15	; 0x0f
     c52:	58 89       	ldd	r21, Y+16	; 0x10
     c54:	6d 81       	ldd	r22, Y+5	; 0x05
     c56:	7e 81       	ldd	r23, Y+6	; 0x06
     c58:	8f 81       	ldd	r24, Y+7	; 0x07
     c5a:	98 85       	ldd	r25, Y+8	; 0x08
     c5c:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
     c60:	4b 01       	movw	r8, r22
     c62:	5c 01       	movw	r10, r24
     c64:	a7 01       	movw	r20, r14
     c66:	96 01       	movw	r18, r12
     c68:	69 89       	ldd	r22, Y+17	; 0x11
     c6a:	7a 89       	ldd	r23, Y+18	; 0x12
     c6c:	8b 89       	ldd	r24, Y+19	; 0x13
     c6e:	9c 89       	ldd	r25, Y+20	; 0x14
     c70:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
     c74:	9b 01       	movw	r18, r22
     c76:	ac 01       	movw	r20, r24
     c78:	c5 01       	movw	r24, r10
     c7a:	b4 01       	movw	r22, r8
     c7c:	0e 94 81 16 	call	0x2d02	; 0x2d02 <__subsf3>
     c80:	4b 01       	movw	r8, r22
     c82:	5c 01       	movw	r10, r24
     c84:	a3 01       	movw	r20, r6
     c86:	92 01       	movw	r18, r4
     c88:	69 81       	ldd	r22, Y+1	; 0x01
     c8a:	7a 81       	ldd	r23, Y+2	; 0x02
     c8c:	8b 81       	ldd	r24, Y+3	; 0x03
     c8e:	9c 81       	ldd	r25, Y+4	; 0x04
     c90:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
     c94:	9b 01       	movw	r18, r22
     c96:	ac 01       	movw	r20, r24
     c98:	c5 01       	movw	r24, r10
     c9a:	b4 01       	movw	r22, r8
     c9c:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
     ca0:	29 85       	ldd	r18, Y+9	; 0x09
     ca2:	3a 85       	ldd	r19, Y+10	; 0x0a
     ca4:	4b 85       	ldd	r20, Y+11	; 0x0b
     ca6:	5c 85       	ldd	r21, Y+12	; 0x0c
     ca8:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
     cac:	69 8f       	std	Y+25, r22	; 0x19
     cae:	7a 8f       	std	Y+26, r23	; 0x1a
     cb0:	8b 8f       	std	Y+27, r24	; 0x1b
     cb2:	9c 8f       	std	Y+28, r25	; 0x1c
    q3 += (qa * gz + qb * gy - qc * gx);
     cb4:	2d 85       	ldd	r18, Y+13	; 0x0d
     cb6:	3e 85       	ldd	r19, Y+14	; 0x0e
     cb8:	4f 85       	ldd	r20, Y+15	; 0x0f
     cba:	58 89       	ldd	r21, Y+16	; 0x10
     cbc:	69 89       	ldd	r22, Y+17	; 0x11
     cbe:	7a 89       	ldd	r23, Y+18	; 0x12
     cc0:	8b 89       	ldd	r24, Y+19	; 0x13
     cc2:	9c 89       	ldd	r25, Y+20	; 0x14
     cc4:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
     cc8:	4b 01       	movw	r8, r22
     cca:	5c 01       	movw	r10, r24
     ccc:	a7 01       	movw	r20, r14
     cce:	96 01       	movw	r18, r12
     cd0:	6d 81       	ldd	r22, Y+5	; 0x05
     cd2:	7e 81       	ldd	r23, Y+6	; 0x06
     cd4:	8f 81       	ldd	r24, Y+7	; 0x07
     cd6:	98 85       	ldd	r25, Y+8	; 0x08
     cd8:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
     cdc:	9b 01       	movw	r18, r22
     cde:	ac 01       	movw	r20, r24
     ce0:	c5 01       	movw	r24, r10
     ce2:	b4 01       	movw	r22, r8
     ce4:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
     ce8:	6b 01       	movw	r12, r22
     cea:	7c 01       	movw	r14, r24
     cec:	29 85       	ldd	r18, Y+9	; 0x09
     cee:	3a 85       	ldd	r19, Y+10	; 0x0a
     cf0:	4b 85       	ldd	r20, Y+11	; 0x0b
     cf2:	5c 85       	ldd	r21, Y+12	; 0x0c
     cf4:	69 81       	ldd	r22, Y+1	; 0x01
     cf6:	7a 81       	ldd	r23, Y+2	; 0x02
     cf8:	8b 81       	ldd	r24, Y+3	; 0x03
     cfa:	9c 81       	ldd	r25, Y+4	; 0x04
     cfc:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
     d00:	9b 01       	movw	r18, r22
     d02:	ac 01       	movw	r20, r24
     d04:	c7 01       	movw	r24, r14
     d06:	b6 01       	movw	r22, r12
     d08:	0e 94 81 16 	call	0x2d02	; 0x2d02 <__subsf3>
     d0c:	a3 01       	movw	r20, r6
     d0e:	92 01       	movw	r18, r4
     d10:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
     d14:	4b 01       	movw	r8, r22
     d16:	5c 01       	movw	r10, r24

    // Normalise quaternion
    recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
     d18:	2d 89       	ldd	r18, Y+21	; 0x15
     d1a:	3e 89       	ldd	r19, Y+22	; 0x16
     d1c:	4f 89       	ldd	r20, Y+23	; 0x17
     d1e:	58 8d       	ldd	r21, Y+24	; 0x18
     d20:	ca 01       	movw	r24, r20
     d22:	b9 01       	movw	r22, r18
     d24:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
     d28:	6b 01       	movw	r12, r22
     d2a:	7c 01       	movw	r14, r24
     d2c:	2d 8d       	ldd	r18, Y+29	; 0x1d
     d2e:	3e 8d       	ldd	r19, Y+30	; 0x1e
     d30:	4f 8d       	ldd	r20, Y+31	; 0x1f
     d32:	58 a1       	ldd	r21, Y+32	; 0x20
     d34:	ca 01       	movw	r24, r20
     d36:	b9 01       	movw	r22, r18
     d38:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
     d3c:	9b 01       	movw	r18, r22
     d3e:	ac 01       	movw	r20, r24
     d40:	c7 01       	movw	r24, r14
     d42:	b6 01       	movw	r22, r12
     d44:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
     d48:	6b 01       	movw	r12, r22
     d4a:	7c 01       	movw	r14, r24
     d4c:	29 8d       	ldd	r18, Y+25	; 0x19
     d4e:	3a 8d       	ldd	r19, Y+26	; 0x1a
     d50:	4b 8d       	ldd	r20, Y+27	; 0x1b
     d52:	5c 8d       	ldd	r21, Y+28	; 0x1c
     d54:	ca 01       	movw	r24, r20
     d56:	b9 01       	movw	r22, r18
     d58:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
     d5c:	9b 01       	movw	r18, r22
     d5e:	ac 01       	movw	r20, r24
     d60:	c7 01       	movw	r24, r14
     d62:	b6 01       	movw	r22, r12
     d64:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
     d68:	6b 01       	movw	r12, r22
     d6a:	7c 01       	movw	r14, r24
     d6c:	a5 01       	movw	r20, r10
     d6e:	94 01       	movw	r18, r8
     d70:	c5 01       	movw	r24, r10
     d72:	b4 01       	movw	r22, r8
     d74:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
     d78:	9b 01       	movw	r18, r22
     d7a:	ac 01       	movw	r20, r24
     d7c:	c7 01       	movw	r24, r14
     d7e:	b6 01       	movw	r22, r12
     d80:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
     d84:	0e 94 85 02 	call	0x50a	; 0x50a <invSqrt>
     d88:	6b 01       	movw	r12, r22
     d8a:	7c 01       	movw	r14, r24
    q0 *= recipNorm;
     d8c:	9b 01       	movw	r18, r22
     d8e:	ac 01       	movw	r20, r24
     d90:	6d 89       	ldd	r22, Y+21	; 0x15
     d92:	7e 89       	ldd	r23, Y+22	; 0x16
     d94:	8f 89       	ldd	r24, Y+23	; 0x17
     d96:	98 8d       	ldd	r25, Y+24	; 0x18
     d98:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
     d9c:	60 93 bf 01 	sts	0x01BF, r22	; 0x8001bf <q0>
     da0:	70 93 c0 01 	sts	0x01C0, r23	; 0x8001c0 <q0+0x1>
     da4:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <q0+0x2>
     da8:	90 93 c2 01 	sts	0x01C2, r25	; 0x8001c2 <q0+0x3>
    q1 *= recipNorm;
     dac:	a7 01       	movw	r20, r14
     dae:	96 01       	movw	r18, r12
     db0:	6d 8d       	ldd	r22, Y+29	; 0x1d
     db2:	7e 8d       	ldd	r23, Y+30	; 0x1e
     db4:	8f 8d       	ldd	r24, Y+31	; 0x1f
     db6:	98 a1       	ldd	r25, Y+32	; 0x20
     db8:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
     dbc:	60 93 bb 01 	sts	0x01BB, r22	; 0x8001bb <q1>
     dc0:	70 93 bc 01 	sts	0x01BC, r23	; 0x8001bc <q1+0x1>
     dc4:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <q1+0x2>
     dc8:	90 93 be 01 	sts	0x01BE, r25	; 0x8001be <q1+0x3>
    q2 *= recipNorm;
     dcc:	a7 01       	movw	r20, r14
     dce:	96 01       	movw	r18, r12
     dd0:	69 8d       	ldd	r22, Y+25	; 0x19
     dd2:	7a 8d       	ldd	r23, Y+26	; 0x1a
     dd4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     dd6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dd8:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
     ddc:	60 93 b7 01 	sts	0x01B7, r22	; 0x8001b7 <q2>
     de0:	70 93 b8 01 	sts	0x01B8, r23	; 0x8001b8 <q2+0x1>
     de4:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <q2+0x2>
     de8:	90 93 ba 01 	sts	0x01BA, r25	; 0x8001ba <q2+0x3>
    q3 *= recipNorm;
     dec:	a7 01       	movw	r20, r14
     dee:	96 01       	movw	r18, r12
     df0:	c5 01       	movw	r24, r10
     df2:	b4 01       	movw	r22, r8
     df4:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
     df8:	60 93 b3 01 	sts	0x01B3, r22	; 0x8001b3 <q3>
     dfc:	70 93 b4 01 	sts	0x01B4, r23	; 0x8001b4 <q3+0x1>
     e00:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <q3+0x2>
     e04:	90 93 b6 01 	sts	0x01B6, r25	; 0x8001b6 <q3+0x3>
    anglesComputed = 0;
     e08:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <__data_end>
}
     e0c:	a4 96       	adiw	r28, 0x24	; 36
     e0e:	0f b6       	in	r0, 0x3f	; 63
     e10:	f8 94       	cli
     e12:	de bf       	out	0x3e, r29	; 62
     e14:	0f be       	out	0x3f, r0	; 63
     e16:	cd bf       	out	0x3d, r28	; 61
     e18:	df 91       	pop	r29
     e1a:	cf 91       	pop	r28
     e1c:	1f 91       	pop	r17
     e1e:	0f 91       	pop	r16
     e20:	ff 90       	pop	r15
     e22:	ef 90       	pop	r14
     e24:	df 90       	pop	r13
     e26:	cf 90       	pop	r12
     e28:	bf 90       	pop	r11
     e2a:	af 90       	pop	r10
     e2c:	9f 90       	pop	r9
     e2e:	8f 90       	pop	r8
     e30:	7f 90       	pop	r7
     e32:	6f 90       	pop	r6
     e34:	5f 90       	pop	r5
     e36:	4f 90       	pop	r4
     e38:	08 95       	ret

00000e3a <mahony_update>:
}

void begin(float sampleFrequency) { invSampleFreq = 1.0f / sampleFrequency; }

void mahony_update(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz)
{
     e3a:	2f 92       	push	r2
     e3c:	3f 92       	push	r3
     e3e:	4f 92       	push	r4
     e40:	5f 92       	push	r5
     e42:	6f 92       	push	r6
     e44:	7f 92       	push	r7
     e46:	8f 92       	push	r8
     e48:	9f 92       	push	r9
     e4a:	af 92       	push	r10
     e4c:	bf 92       	push	r11
     e4e:	cf 92       	push	r12
     e50:	df 92       	push	r13
     e52:	ef 92       	push	r14
     e54:	ff 92       	push	r15
     e56:	0f 93       	push	r16
     e58:	1f 93       	push	r17
     e5a:	cf 93       	push	r28
     e5c:	df 93       	push	r29
     e5e:	cd b7       	in	r28, 0x3d	; 61
     e60:	de b7       	in	r29, 0x3e	; 62
     e62:	c4 55       	subi	r28, 0x54	; 84
     e64:	d1 09       	sbc	r29, r1
     e66:	0f b6       	in	r0, 0x3f	; 63
     e68:	f8 94       	cli
     e6a:	de bf       	out	0x3e, r29	; 62
     e6c:	0f be       	out	0x3f, r0	; 63
     e6e:	cd bf       	out	0x3d, r28	; 61
     e70:	69 87       	std	Y+9, r22	; 0x09
     e72:	7a 87       	std	Y+10, r23	; 0x0a
     e74:	8b 87       	std	Y+11, r24	; 0x0b
     e76:	9c 87       	std	Y+12, r25	; 0x0c
     e78:	29 01       	movw	r4, r18
     e7a:	3a 01       	movw	r6, r20
     e7c:	e9 8a       	std	Y+17, r14	; 0x11
     e7e:	fa 8a       	std	Y+18, r15	; 0x12
     e80:	0b 8b       	std	Y+19, r16	; 0x13
     e82:	1c 8b       	std	Y+20, r17	; 0x14
     e84:	aa 96       	adiw	r28, 0x2a	; 42
     e86:	ff ac       	ldd	r15, Y+63	; 0x3f
     e88:	aa 97       	sbiw	r28, 0x2a	; 42
     e8a:	ab 96       	adiw	r28, 0x2b	; 43
     e8c:	ef ac       	ldd	r14, Y+63	; 0x3f
     e8e:	ab 97       	sbiw	r28, 0x2b	; 43
     e90:	ac 96       	adiw	r28, 0x2c	; 44
     e92:	9f ac       	ldd	r9, Y+63	; 0x3f
     e94:	ac 97       	sbiw	r28, 0x2c	; 44
     e96:	ad 96       	adiw	r28, 0x2d	; 45
     e98:	8f ac       	ldd	r8, Y+63	; 0x3f
     e9a:	ad 97       	sbiw	r28, 0x2d	; 45
     e9c:	ae 96       	adiw	r28, 0x2e	; 46
     e9e:	1f ad       	ldd	r17, Y+63	; 0x3f
     ea0:	ae 97       	sbiw	r28, 0x2e	; 46
     ea2:	af 96       	adiw	r28, 0x2f	; 47
     ea4:	0f ad       	ldd	r16, Y+63	; 0x3f
     ea6:	af 97       	sbiw	r28, 0x2f	; 47
     ea8:	e0 96       	adiw	r28, 0x30	; 48
     eaa:	3f ac       	ldd	r3, Y+63	; 0x3f
     eac:	e0 97       	sbiw	r28, 0x30	; 48
     eae:	e1 96       	adiw	r28, 0x31	; 49
     eb0:	2f ac       	ldd	r2, Y+63	; 0x3f
     eb2:	e1 97       	sbiw	r28, 0x31	; 49
    float halfex, halfey, halfez;
    float qa, qb, qc;

    // Use IMU algorithm if magnetometer measurement invalid
    // (avoids NaN in magnetometer normalisation)
    if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
     eb4:	20 e0       	ldi	r18, 0x00	; 0
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	a9 01       	movw	r20, r18
     eba:	e5 96       	adiw	r28, 0x35	; 53
     ebc:	6c ad       	ldd	r22, Y+60	; 0x3c
     ebe:	7d ad       	ldd	r23, Y+61	; 0x3d
     ec0:	8e ad       	ldd	r24, Y+62	; 0x3e
     ec2:	9f ad       	ldd	r25, Y+63	; 0x3f
     ec4:	e5 97       	sbiw	r28, 0x35	; 53
     ec6:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <__cmpsf2>
     eca:	81 11       	cpse	r24, r1
     ecc:	34 c0       	rjmp	.+104    	; 0xf36 <mahony_update+0xfc>
     ece:	20 e0       	ldi	r18, 0x00	; 0
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	a9 01       	movw	r20, r18
     ed4:	e9 96       	adiw	r28, 0x39	; 57
     ed6:	6c ad       	ldd	r22, Y+60	; 0x3c
     ed8:	7d ad       	ldd	r23, Y+61	; 0x3d
     eda:	8e ad       	ldd	r24, Y+62	; 0x3e
     edc:	9f ad       	ldd	r25, Y+63	; 0x3f
     ede:	e9 97       	sbiw	r28, 0x39	; 57
     ee0:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <__cmpsf2>
     ee4:	81 11       	cpse	r24, r1
     ee6:	27 c0       	rjmp	.+78     	; 0xf36 <mahony_update+0xfc>
     ee8:	20 e0       	ldi	r18, 0x00	; 0
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	a9 01       	movw	r20, r18
     eee:	ed 96       	adiw	r28, 0x3d	; 61
     ef0:	6c ad       	ldd	r22, Y+60	; 0x3c
     ef2:	7d ad       	ldd	r23, Y+61	; 0x3d
     ef4:	8e ad       	ldd	r24, Y+62	; 0x3e
     ef6:	9f ad       	ldd	r25, Y+63	; 0x3f
     ef8:	ed 97       	sbiw	r28, 0x3d	; 61
     efa:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <__cmpsf2>
     efe:	81 11       	cpse	r24, r1
     f00:	1a c0       	rjmp	.+52     	; 0xf36 <mahony_update+0xfc>
        mahony_updateIMU(gx, gy, gz, ax, ay, az);
     f02:	2f 92       	push	r2
     f04:	3f 92       	push	r3
     f06:	0f 93       	push	r16
     f08:	1f 93       	push	r17
     f0a:	8f 92       	push	r8
     f0c:	9f 92       	push	r9
     f0e:	ef 92       	push	r14
     f10:	ff 92       	push	r15
     f12:	e9 88       	ldd	r14, Y+17	; 0x11
     f14:	fa 88       	ldd	r15, Y+18	; 0x12
     f16:	0b 89       	ldd	r16, Y+19	; 0x13
     f18:	1c 89       	ldd	r17, Y+20	; 0x14
     f1a:	a3 01       	movw	r20, r6
     f1c:	92 01       	movw	r18, r4
     f1e:	69 85       	ldd	r22, Y+9	; 0x09
     f20:	7a 85       	ldd	r23, Y+10	; 0x0a
     f22:	8b 85       	ldd	r24, Y+11	; 0x0b
     f24:	9c 85       	ldd	r25, Y+12	; 0x0c
     f26:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <mahony_updateIMU>
        return;
     f2a:	0f b6       	in	r0, 0x3f	; 63
     f2c:	f8 94       	cli
     f2e:	de bf       	out	0x3e, r29	; 62
     f30:	0f be       	out	0x3f, r0	; 63
     f32:	cd bf       	out	0x3d, r28	; 61
     f34:	98 c6       	rjmp	.+3376   	; 0x1c66 <mahony_update+0xe2c>
    }

    // Convert gyroscope degrees/sec to radians/sec
    gx *= 0.0174533f;
     f36:	29 e3       	ldi	r18, 0x39	; 57
     f38:	3a ef       	ldi	r19, 0xFA	; 250
     f3a:	4e e8       	ldi	r20, 0x8E	; 142
     f3c:	5c e3       	ldi	r21, 0x3C	; 60
     f3e:	69 85       	ldd	r22, Y+9	; 0x09
     f40:	7a 85       	ldd	r23, Y+10	; 0x0a
     f42:	8b 85       	ldd	r24, Y+11	; 0x0b
     f44:	9c 85       	ldd	r25, Y+12	; 0x0c
     f46:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
     f4a:	6d 8b       	std	Y+21, r22	; 0x15
     f4c:	7e 8b       	std	Y+22, r23	; 0x16
     f4e:	8f 8b       	std	Y+23, r24	; 0x17
     f50:	98 8f       	std	Y+24, r25	; 0x18
    gy *= 0.0174533f;
     f52:	29 e3       	ldi	r18, 0x39	; 57
     f54:	3a ef       	ldi	r19, 0xFA	; 250
     f56:	4e e8       	ldi	r20, 0x8E	; 142
     f58:	5c e3       	ldi	r21, 0x3C	; 60
     f5a:	c3 01       	movw	r24, r6
     f5c:	b2 01       	movw	r22, r4
     f5e:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
     f62:	6d 8f       	std	Y+29, r22	; 0x1d
     f64:	7e 8f       	std	Y+30, r23	; 0x1e
     f66:	8f 8f       	std	Y+31, r24	; 0x1f
     f68:	98 a3       	std	Y+32, r25	; 0x20
    gz *= 0.0174533f;
     f6a:	29 e3       	ldi	r18, 0x39	; 57
     f6c:	3a ef       	ldi	r19, 0xFA	; 250
     f6e:	4e e8       	ldi	r20, 0x8E	; 142
     f70:	5c e3       	ldi	r21, 0x3C	; 60
     f72:	69 89       	ldd	r22, Y+17	; 0x11
     f74:	7a 89       	ldd	r23, Y+18	; 0x12
     f76:	8b 89       	ldd	r24, Y+19	; 0x13
     f78:	9c 89       	ldd	r25, Y+20	; 0x14
     f7a:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
     f7e:	69 8b       	std	Y+17, r22	; 0x11
     f80:	7a 8b       	std	Y+18, r23	; 0x12
     f82:	8b 8b       	std	Y+19, r24	; 0x13
     f84:	9c 8b       	std	Y+20, r25	; 0x14

    // Compute feedback only if accelerometer measurement valid
    // (avoids NaN in accelerometer normalisation)
    if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
     f86:	20 e0       	ldi	r18, 0x00	; 0
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	a9 01       	movw	r20, r18
     f8c:	c6 01       	movw	r24, r12
     f8e:	b5 01       	movw	r22, r10
     f90:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <__cmpsf2>
     f94:	81 11       	cpse	r24, r1
     f96:	17 c0       	rjmp	.+46     	; 0xfc6 <mahony_update+0x18c>
     f98:	20 e0       	ldi	r18, 0x00	; 0
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	a9 01       	movw	r20, r18
     f9e:	6f 2d       	mov	r22, r15
     fa0:	7e 2d       	mov	r23, r14
     fa2:	89 2d       	mov	r24, r9
     fa4:	98 2d       	mov	r25, r8
     fa6:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <__cmpsf2>
     faa:	81 11       	cpse	r24, r1
     fac:	0c c0       	rjmp	.+24     	; 0xfc6 <mahony_update+0x18c>
     fae:	20 e0       	ldi	r18, 0x00	; 0
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	a9 01       	movw	r20, r18
     fb4:	61 2f       	mov	r22, r17
     fb6:	70 2f       	mov	r23, r16
     fb8:	83 2d       	mov	r24, r3
     fba:	92 2d       	mov	r25, r2
     fbc:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <__cmpsf2>
     fc0:	88 23       	and	r24, r24
     fc2:	09 f4       	brne	.+2      	; 0xfc6 <mahony_update+0x18c>
     fc4:	ad c4       	rjmp	.+2394   	; 0x1920 <mahony_update+0xae6>

        // Normalise accelerometer measurement
        recipNorm = invSqrt(ax * ax + ay * ay + az * az);
     fc6:	a6 01       	movw	r20, r12
     fc8:	95 01       	movw	r18, r10
     fca:	c6 01       	movw	r24, r12
     fcc:	b5 01       	movw	r22, r10
     fce:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
     fd2:	2b 01       	movw	r4, r22
     fd4:	3c 01       	movw	r6, r24
     fd6:	2f 2d       	mov	r18, r15
     fd8:	3e 2d       	mov	r19, r14
     fda:	49 2d       	mov	r20, r9
     fdc:	58 2d       	mov	r21, r8
     fde:	6f 2d       	mov	r22, r15
     fe0:	7e 2d       	mov	r23, r14
     fe2:	89 2d       	mov	r24, r9
     fe4:	98 2d       	mov	r25, r8
     fe6:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
     fea:	9b 01       	movw	r18, r22
     fec:	ac 01       	movw	r20, r24
     fee:	c3 01       	movw	r24, r6
     ff0:	b2 01       	movw	r22, r4
     ff2:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
     ff6:	2b 01       	movw	r4, r22
     ff8:	3c 01       	movw	r6, r24
     ffa:	21 2f       	mov	r18, r17
     ffc:	30 2f       	mov	r19, r16
     ffe:	43 2d       	mov	r20, r3
    1000:	52 2d       	mov	r21, r2
    1002:	61 2f       	mov	r22, r17
    1004:	70 2f       	mov	r23, r16
    1006:	83 2d       	mov	r24, r3
    1008:	92 2d       	mov	r25, r2
    100a:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    100e:	9b 01       	movw	r18, r22
    1010:	ac 01       	movw	r20, r24
    1012:	c3 01       	movw	r24, r6
    1014:	b2 01       	movw	r22, r4
    1016:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
    101a:	0e 94 85 02 	call	0x50a	; 0x50a <invSqrt>
    101e:	2b 01       	movw	r4, r22
    1020:	3c 01       	movw	r6, r24
        ax *= recipNorm;
    1022:	9b 01       	movw	r18, r22
    1024:	ac 01       	movw	r20, r24
    1026:	c6 01       	movw	r24, r12
    1028:	b5 01       	movw	r22, r10
    102a:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    102e:	69 ab       	std	Y+49, r22	; 0x31
    1030:	7a ab       	std	Y+50, r23	; 0x32
    1032:	8b ab       	std	Y+51, r24	; 0x33
    1034:	9c ab       	std	Y+52, r25	; 0x34
        ay *= recipNorm;
    1036:	a3 01       	movw	r20, r6
    1038:	92 01       	movw	r18, r4
    103a:	6f 2d       	mov	r22, r15
    103c:	7e 2d       	mov	r23, r14
    103e:	89 2d       	mov	r24, r9
    1040:	98 2d       	mov	r25, r8
    1042:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    1046:	6d ab       	std	Y+53, r22	; 0x35
    1048:	7e ab       	std	Y+54, r23	; 0x36
    104a:	8f ab       	std	Y+55, r24	; 0x37
    104c:	98 af       	std	Y+56, r25	; 0x38
        az *= recipNorm;
    104e:	a3 01       	movw	r20, r6
    1050:	92 01       	movw	r18, r4
    1052:	61 2f       	mov	r22, r17
    1054:	70 2f       	mov	r23, r16
    1056:	83 2d       	mov	r24, r3
    1058:	92 2d       	mov	r25, r2
    105a:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    105e:	69 af       	std	Y+57, r22	; 0x39
    1060:	7a af       	std	Y+58, r23	; 0x3a
    1062:	8b af       	std	Y+59, r24	; 0x3b
    1064:	9c af       	std	Y+60, r25	; 0x3c

        // Normalise magnetometer measurement
        recipNorm = invSqrt(mx * mx + my * my + mz * mz);
    1066:	e5 96       	adiw	r28, 0x35	; 53
    1068:	2c ad       	ldd	r18, Y+60	; 0x3c
    106a:	3d ad       	ldd	r19, Y+61	; 0x3d
    106c:	4e ad       	ldd	r20, Y+62	; 0x3e
    106e:	5f ad       	ldd	r21, Y+63	; 0x3f
    1070:	e5 97       	sbiw	r28, 0x35	; 53
    1072:	ca 01       	movw	r24, r20
    1074:	b9 01       	movw	r22, r18
    1076:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    107a:	6b 01       	movw	r12, r22
    107c:	7c 01       	movw	r14, r24
    107e:	e9 96       	adiw	r28, 0x39	; 57
    1080:	2c ad       	ldd	r18, Y+60	; 0x3c
    1082:	3d ad       	ldd	r19, Y+61	; 0x3d
    1084:	4e ad       	ldd	r20, Y+62	; 0x3e
    1086:	5f ad       	ldd	r21, Y+63	; 0x3f
    1088:	e9 97       	sbiw	r28, 0x39	; 57
    108a:	ca 01       	movw	r24, r20
    108c:	b9 01       	movw	r22, r18
    108e:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    1092:	9b 01       	movw	r18, r22
    1094:	ac 01       	movw	r20, r24
    1096:	c7 01       	movw	r24, r14
    1098:	b6 01       	movw	r22, r12
    109a:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
    109e:	6b 01       	movw	r12, r22
    10a0:	7c 01       	movw	r14, r24
    10a2:	ed 96       	adiw	r28, 0x3d	; 61
    10a4:	2c ad       	ldd	r18, Y+60	; 0x3c
    10a6:	3d ad       	ldd	r19, Y+61	; 0x3d
    10a8:	4e ad       	ldd	r20, Y+62	; 0x3e
    10aa:	5f ad       	ldd	r21, Y+63	; 0x3f
    10ac:	ed 97       	sbiw	r28, 0x3d	; 61
    10ae:	ca 01       	movw	r24, r20
    10b0:	b9 01       	movw	r22, r18
    10b2:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    10b6:	9b 01       	movw	r18, r22
    10b8:	ac 01       	movw	r20, r24
    10ba:	c7 01       	movw	r24, r14
    10bc:	b6 01       	movw	r22, r12
    10be:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
    10c2:	0e 94 85 02 	call	0x50a	; 0x50a <invSqrt>
    10c6:	6b 01       	movw	r12, r22
    10c8:	7c 01       	movw	r14, r24
        mx *= recipNorm;
    10ca:	9b 01       	movw	r18, r22
    10cc:	ac 01       	movw	r20, r24
    10ce:	e5 96       	adiw	r28, 0x35	; 53
    10d0:	6c ad       	ldd	r22, Y+60	; 0x3c
    10d2:	7d ad       	ldd	r23, Y+61	; 0x3d
    10d4:	8e ad       	ldd	r24, Y+62	; 0x3e
    10d6:	9f ad       	ldd	r25, Y+63	; 0x3f
    10d8:	e5 97       	sbiw	r28, 0x35	; 53
    10da:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    10de:	69 87       	std	Y+9, r22	; 0x09
    10e0:	7a 87       	std	Y+10, r23	; 0x0a
    10e2:	8b 87       	std	Y+11, r24	; 0x0b
    10e4:	9c 87       	std	Y+12, r25	; 0x0c
        my *= recipNorm;
    10e6:	a7 01       	movw	r20, r14
    10e8:	96 01       	movw	r18, r12
    10ea:	e9 96       	adiw	r28, 0x39	; 57
    10ec:	6c ad       	ldd	r22, Y+60	; 0x3c
    10ee:	7d ad       	ldd	r23, Y+61	; 0x3d
    10f0:	8e ad       	ldd	r24, Y+62	; 0x3e
    10f2:	9f ad       	ldd	r25, Y+63	; 0x3f
    10f4:	e9 97       	sbiw	r28, 0x39	; 57
    10f6:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    10fa:	6d 83       	std	Y+5, r22	; 0x05
    10fc:	7e 83       	std	Y+6, r23	; 0x06
    10fe:	8f 83       	std	Y+7, r24	; 0x07
    1100:	98 87       	std	Y+8, r25	; 0x08
        mz *= recipNorm;
    1102:	a7 01       	movw	r20, r14
    1104:	96 01       	movw	r18, r12
    1106:	ed 96       	adiw	r28, 0x3d	; 61
    1108:	6c ad       	ldd	r22, Y+60	; 0x3c
    110a:	7d ad       	ldd	r23, Y+61	; 0x3d
    110c:	8e ad       	ldd	r24, Y+62	; 0x3e
    110e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1110:	ed 97       	sbiw	r28, 0x3d	; 61
    1112:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    1116:	6d 87       	std	Y+13, r22	; 0x0d
    1118:	7e 87       	std	Y+14, r23	; 0x0e
    111a:	8f 87       	std	Y+15, r24	; 0x0f
    111c:	98 8b       	std	Y+16, r25	; 0x10

        // Auxiliary variables to avoid repeated arithmetic
        q0q0 = q0 * q0;
    111e:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <q0>
    1122:	90 91 c0 01 	lds	r25, 0x01C0	; 0x8001c0 <q0+0x1>
    1126:	a0 91 c1 01 	lds	r26, 0x01C1	; 0x8001c1 <q0+0x2>
    112a:	b0 91 c2 01 	lds	r27, 0x01C2	; 0x8001c2 <q0+0x3>
    112e:	89 83       	std	Y+1, r24	; 0x01
    1130:	9a 83       	std	Y+2, r25	; 0x02
    1132:	ab 83       	std	Y+3, r26	; 0x03
    1134:	bc 83       	std	Y+4, r27	; 0x04
        q0q1 = q0 * q1;
    1136:	c0 90 bb 01 	lds	r12, 0x01BB	; 0x8001bb <q1>
    113a:	d0 90 bc 01 	lds	r13, 0x01BC	; 0x8001bc <q1+0x1>
    113e:	e0 90 bd 01 	lds	r14, 0x01BD	; 0x8001bd <q1+0x2>
    1142:	f0 90 be 01 	lds	r15, 0x01BE	; 0x8001be <q1+0x3>
    1146:	a7 01       	movw	r20, r14
    1148:	96 01       	movw	r18, r12
    114a:	bc 01       	movw	r22, r24
    114c:	cd 01       	movw	r24, r26
    114e:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    1152:	6d a3       	std	Y+37, r22	; 0x25
    1154:	7e a3       	std	Y+38, r23	; 0x26
    1156:	8f a3       	std	Y+39, r24	; 0x27
    1158:	98 a7       	std	Y+40, r25	; 0x28
        q0q2 = q0 * q2;
    115a:	40 90 b7 01 	lds	r4, 0x01B7	; 0x8001b7 <q2>
    115e:	50 90 b8 01 	lds	r5, 0x01B8	; 0x8001b8 <q2+0x1>
    1162:	60 90 b9 01 	lds	r6, 0x01B9	; 0x8001b9 <q2+0x2>
    1166:	70 90 ba 01 	lds	r7, 0x01BA	; 0x8001ba <q2+0x3>
    116a:	a3 01       	movw	r20, r6
    116c:	92 01       	movw	r18, r4
    116e:	69 81       	ldd	r22, Y+1	; 0x01
    1170:	7a 81       	ldd	r23, Y+2	; 0x02
    1172:	8b 81       	ldd	r24, Y+3	; 0x03
    1174:	9c 81       	ldd	r25, Y+4	; 0x04
    1176:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    117a:	69 a3       	std	Y+33, r22	; 0x21
    117c:	7a a3       	std	Y+34, r23	; 0x22
    117e:	8b a3       	std	Y+35, r24	; 0x23
    1180:	9c a3       	std	Y+36, r25	; 0x24
        q0q3 = q0 * q3;
    1182:	80 90 b3 01 	lds	r8, 0x01B3	; 0x8001b3 <q3>
    1186:	90 90 b4 01 	lds	r9, 0x01B4	; 0x8001b4 <q3+0x1>
    118a:	a0 90 b5 01 	lds	r10, 0x01B5	; 0x8001b5 <q3+0x2>
    118e:	b0 90 b6 01 	lds	r11, 0x01B6	; 0x8001b6 <q3+0x3>
    1192:	a5 01       	movw	r20, r10
    1194:	94 01       	movw	r18, r8
    1196:	69 81       	ldd	r22, Y+1	; 0x01
    1198:	7a 81       	ldd	r23, Y+2	; 0x02
    119a:	8b 81       	ldd	r24, Y+3	; 0x03
    119c:	9c 81       	ldd	r25, Y+4	; 0x04
    119e:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    11a2:	69 8f       	std	Y+25, r22	; 0x19
    11a4:	7a 8f       	std	Y+26, r23	; 0x1a
    11a6:	8b 8f       	std	Y+27, r24	; 0x1b
    11a8:	9c 8f       	std	Y+28, r25	; 0x1c
        q1q1 = q1 * q1;
        q1q2 = q1 * q2;
    11aa:	a3 01       	movw	r20, r6
    11ac:	92 01       	movw	r18, r4
    11ae:	c7 01       	movw	r24, r14
    11b0:	b6 01       	movw	r22, r12
    11b2:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    11b6:	69 a7       	std	Y+41, r22	; 0x29
    11b8:	7a a7       	std	Y+42, r23	; 0x2a
    11ba:	8b a7       	std	Y+43, r24	; 0x2b
    11bc:	9c a7       	std	Y+44, r25	; 0x2c
        q1q3 = q1 * q3;
    11be:	a5 01       	movw	r20, r10
    11c0:	94 01       	movw	r18, r8
    11c2:	c7 01       	movw	r24, r14
    11c4:	b6 01       	movw	r22, r12
    11c6:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    11ca:	6d a7       	std	Y+45, r22	; 0x2d
    11cc:	7e a7       	std	Y+46, r23	; 0x2e
    11ce:	8f a7       	std	Y+47, r24	; 0x2f
    11d0:	98 ab       	std	Y+48, r25	; 0x30
        q2q2 = q2 * q2;
    11d2:	a3 01       	movw	r20, r6
    11d4:	92 01       	movw	r18, r4
    11d6:	c3 01       	movw	r24, r6
    11d8:	b2 01       	movw	r22, r4
    11da:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    11de:	21 96       	adiw	r28, 0x01	; 1
    11e0:	6c af       	std	Y+60, r22	; 0x3c
    11e2:	7d af       	std	Y+61, r23	; 0x3d
    11e4:	8e af       	std	Y+62, r24	; 0x3e
    11e6:	9f af       	std	Y+63, r25	; 0x3f
    11e8:	21 97       	sbiw	r28, 0x01	; 1
        q2q3 = q2 * q3;
    11ea:	a5 01       	movw	r20, r10
    11ec:	94 01       	movw	r18, r8
    11ee:	c3 01       	movw	r24, r6
    11f0:	b2 01       	movw	r22, r4
    11f2:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    11f6:	25 96       	adiw	r28, 0x05	; 5
    11f8:	6c af       	std	Y+60, r22	; 0x3c
    11fa:	7d af       	std	Y+61, r23	; 0x3d
    11fc:	8e af       	std	Y+62, r24	; 0x3e
    11fe:	9f af       	std	Y+63, r25	; 0x3f
    1200:	25 97       	sbiw	r28, 0x05	; 5
        q3q3 = q3 * q3;
    1202:	a5 01       	movw	r20, r10
    1204:	94 01       	movw	r18, r8
    1206:	c5 01       	movw	r24, r10
    1208:	b4 01       	movw	r22, r8
    120a:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    120e:	2b 01       	movw	r4, r22
    1210:	3c 01       	movw	r6, r24

        // Reference direction of Earth's magnetic field
        hx = 2.0f * (mx * (0.5f - q2q2 - q3q3) + my * (q1q2 - q0q3) + mz * (q1q3 + q0q2));
    1212:	21 96       	adiw	r28, 0x01	; 1
    1214:	2c ad       	ldd	r18, Y+60	; 0x3c
    1216:	3d ad       	ldd	r19, Y+61	; 0x3d
    1218:	4e ad       	ldd	r20, Y+62	; 0x3e
    121a:	5f ad       	ldd	r21, Y+63	; 0x3f
    121c:	21 97       	sbiw	r28, 0x01	; 1
    121e:	60 e0       	ldi	r22, 0x00	; 0
    1220:	70 e0       	ldi	r23, 0x00	; 0
    1222:	80 e0       	ldi	r24, 0x00	; 0
    1224:	9f e3       	ldi	r25, 0x3F	; 63
    1226:	0e 94 81 16 	call	0x2d02	; 0x2d02 <__subsf3>
    122a:	a3 01       	movw	r20, r6
    122c:	92 01       	movw	r18, r4
    122e:	0e 94 81 16 	call	0x2d02	; 0x2d02 <__subsf3>
    1232:	29 96       	adiw	r28, 0x09	; 9
    1234:	6c af       	std	Y+60, r22	; 0x3c
    1236:	7d af       	std	Y+61, r23	; 0x3d
    1238:	8e af       	std	Y+62, r24	; 0x3e
    123a:	9f af       	std	Y+63, r25	; 0x3f
    123c:	29 97       	sbiw	r28, 0x09	; 9
    123e:	29 8d       	ldd	r18, Y+25	; 0x19
    1240:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1242:	4b 8d       	ldd	r20, Y+27	; 0x1b
    1244:	5c 8d       	ldd	r21, Y+28	; 0x1c
    1246:	69 a5       	ldd	r22, Y+41	; 0x29
    1248:	7a a5       	ldd	r23, Y+42	; 0x2a
    124a:	8b a5       	ldd	r24, Y+43	; 0x2b
    124c:	9c a5       	ldd	r25, Y+44	; 0x2c
    124e:	0e 94 81 16 	call	0x2d02	; 0x2d02 <__subsf3>
    1252:	2d 96       	adiw	r28, 0x0d	; 13
    1254:	6c af       	std	Y+60, r22	; 0x3c
    1256:	7d af       	std	Y+61, r23	; 0x3d
    1258:	8e af       	std	Y+62, r24	; 0x3e
    125a:	9f af       	std	Y+63, r25	; 0x3f
    125c:	2d 97       	sbiw	r28, 0x0d	; 13
    125e:	2d a5       	ldd	r18, Y+45	; 0x2d
    1260:	3e a5       	ldd	r19, Y+46	; 0x2e
    1262:	4f a5       	ldd	r20, Y+47	; 0x2f
    1264:	58 a9       	ldd	r21, Y+48	; 0x30
    1266:	69 a1       	ldd	r22, Y+33	; 0x21
    1268:	7a a1       	ldd	r23, Y+34	; 0x22
    126a:	8b a1       	ldd	r24, Y+35	; 0x23
    126c:	9c a1       	ldd	r25, Y+36	; 0x24
    126e:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
    1272:	61 96       	adiw	r28, 0x11	; 17
    1274:	6c af       	std	Y+60, r22	; 0x3c
    1276:	7d af       	std	Y+61, r23	; 0x3d
    1278:	8e af       	std	Y+62, r24	; 0x3e
    127a:	9f af       	std	Y+63, r25	; 0x3f
    127c:	61 97       	sbiw	r28, 0x11	; 17
    127e:	29 96       	adiw	r28, 0x09	; 9
    1280:	2c ad       	ldd	r18, Y+60	; 0x3c
    1282:	3d ad       	ldd	r19, Y+61	; 0x3d
    1284:	4e ad       	ldd	r20, Y+62	; 0x3e
    1286:	5f ad       	ldd	r21, Y+63	; 0x3f
    1288:	29 97       	sbiw	r28, 0x09	; 9
    128a:	69 85       	ldd	r22, Y+9	; 0x09
    128c:	7a 85       	ldd	r23, Y+10	; 0x0a
    128e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1290:	9c 85       	ldd	r25, Y+12	; 0x0c
    1292:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    1296:	4b 01       	movw	r8, r22
    1298:	5c 01       	movw	r10, r24
    129a:	2d 96       	adiw	r28, 0x0d	; 13
    129c:	2c ad       	ldd	r18, Y+60	; 0x3c
    129e:	3d ad       	ldd	r19, Y+61	; 0x3d
    12a0:	4e ad       	ldd	r20, Y+62	; 0x3e
    12a2:	5f ad       	ldd	r21, Y+63	; 0x3f
    12a4:	2d 97       	sbiw	r28, 0x0d	; 13
    12a6:	6d 81       	ldd	r22, Y+5	; 0x05
    12a8:	7e 81       	ldd	r23, Y+6	; 0x06
    12aa:	8f 81       	ldd	r24, Y+7	; 0x07
    12ac:	98 85       	ldd	r25, Y+8	; 0x08
    12ae:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    12b2:	9b 01       	movw	r18, r22
    12b4:	ac 01       	movw	r20, r24
    12b6:	c5 01       	movw	r24, r10
    12b8:	b4 01       	movw	r22, r8
    12ba:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
    12be:	4b 01       	movw	r8, r22
    12c0:	5c 01       	movw	r10, r24
    12c2:	61 96       	adiw	r28, 0x11	; 17
    12c4:	2c ad       	ldd	r18, Y+60	; 0x3c
    12c6:	3d ad       	ldd	r19, Y+61	; 0x3d
    12c8:	4e ad       	ldd	r20, Y+62	; 0x3e
    12ca:	5f ad       	ldd	r21, Y+63	; 0x3f
    12cc:	61 97       	sbiw	r28, 0x11	; 17
    12ce:	6d 85       	ldd	r22, Y+13	; 0x0d
    12d0:	7e 85       	ldd	r23, Y+14	; 0x0e
    12d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    12d4:	98 89       	ldd	r25, Y+16	; 0x10
    12d6:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    12da:	9b 01       	movw	r18, r22
    12dc:	ac 01       	movw	r20, r24
    12de:	c5 01       	movw	r24, r10
    12e0:	b4 01       	movw	r22, r8
    12e2:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
    12e6:	9b 01       	movw	r18, r22
    12e8:	ac 01       	movw	r20, r24
    12ea:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
    12ee:	4b 01       	movw	r8, r22
    12f0:	5c 01       	movw	r10, r24
        hy = 2.0f * (mx * (q1q2 + q0q3) + my * (0.5f - q1q1 - q3q3) + mz * (q2q3 - q0q1));
    12f2:	a7 01       	movw	r20, r14
    12f4:	96 01       	movw	r18, r12
    12f6:	c7 01       	movw	r24, r14
    12f8:	b6 01       	movw	r22, r12
    12fa:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    12fe:	9b 01       	movw	r18, r22
    1300:	ac 01       	movw	r20, r24
    1302:	60 e0       	ldi	r22, 0x00	; 0
    1304:	70 e0       	ldi	r23, 0x00	; 0
    1306:	80 e0       	ldi	r24, 0x00	; 0
    1308:	9f e3       	ldi	r25, 0x3F	; 63
    130a:	0e 94 81 16 	call	0x2d02	; 0x2d02 <__subsf3>
    130e:	65 96       	adiw	r28, 0x15	; 21
    1310:	6c af       	std	Y+60, r22	; 0x3c
    1312:	7d af       	std	Y+61, r23	; 0x3d
    1314:	8e af       	std	Y+62, r24	; 0x3e
    1316:	9f af       	std	Y+63, r25	; 0x3f
    1318:	65 97       	sbiw	r28, 0x15	; 21
    131a:	29 a5       	ldd	r18, Y+41	; 0x29
    131c:	3a a5       	ldd	r19, Y+42	; 0x2a
    131e:	4b a5       	ldd	r20, Y+43	; 0x2b
    1320:	5c a5       	ldd	r21, Y+44	; 0x2c
    1322:	69 8d       	ldd	r22, Y+25	; 0x19
    1324:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1326:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1328:	9c 8d       	ldd	r25, Y+28	; 0x1c
    132a:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
    132e:	29 85       	ldd	r18, Y+9	; 0x09
    1330:	3a 85       	ldd	r19, Y+10	; 0x0a
    1332:	4b 85       	ldd	r20, Y+11	; 0x0b
    1334:	5c 85       	ldd	r21, Y+12	; 0x0c
    1336:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    133a:	6b 01       	movw	r12, r22
    133c:	7c 01       	movw	r14, r24
    133e:	a3 01       	movw	r20, r6
    1340:	92 01       	movw	r18, r4
    1342:	65 96       	adiw	r28, 0x15	; 21
    1344:	6c ad       	ldd	r22, Y+60	; 0x3c
    1346:	7d ad       	ldd	r23, Y+61	; 0x3d
    1348:	8e ad       	ldd	r24, Y+62	; 0x3e
    134a:	9f ad       	ldd	r25, Y+63	; 0x3f
    134c:	65 97       	sbiw	r28, 0x15	; 21
    134e:	0e 94 81 16 	call	0x2d02	; 0x2d02 <__subsf3>
    1352:	2d 81       	ldd	r18, Y+5	; 0x05
    1354:	3e 81       	ldd	r19, Y+6	; 0x06
    1356:	4f 81       	ldd	r20, Y+7	; 0x07
    1358:	58 85       	ldd	r21, Y+8	; 0x08
    135a:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    135e:	9b 01       	movw	r18, r22
    1360:	ac 01       	movw	r20, r24
    1362:	c7 01       	movw	r24, r14
    1364:	b6 01       	movw	r22, r12
    1366:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
    136a:	6b 01       	movw	r12, r22
    136c:	7c 01       	movw	r14, r24
    136e:	2d a1       	ldd	r18, Y+37	; 0x25
    1370:	3e a1       	ldd	r19, Y+38	; 0x26
    1372:	4f a1       	ldd	r20, Y+39	; 0x27
    1374:	58 a5       	ldd	r21, Y+40	; 0x28
    1376:	25 96       	adiw	r28, 0x05	; 5
    1378:	6c ad       	ldd	r22, Y+60	; 0x3c
    137a:	7d ad       	ldd	r23, Y+61	; 0x3d
    137c:	8e ad       	ldd	r24, Y+62	; 0x3e
    137e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1380:	25 97       	sbiw	r28, 0x05	; 5
    1382:	0e 94 81 16 	call	0x2d02	; 0x2d02 <__subsf3>
    1386:	2d 85       	ldd	r18, Y+13	; 0x0d
    1388:	3e 85       	ldd	r19, Y+14	; 0x0e
    138a:	4f 85       	ldd	r20, Y+15	; 0x0f
    138c:	58 89       	ldd	r21, Y+16	; 0x10
    138e:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    1392:	9b 01       	movw	r18, r22
    1394:	ac 01       	movw	r20, r24
    1396:	c7 01       	movw	r24, r14
    1398:	b6 01       	movw	r22, r12
    139a:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
    139e:	9b 01       	movw	r18, r22
    13a0:	ac 01       	movw	r20, r24
    13a2:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
    13a6:	6b 01       	movw	r12, r22
    13a8:	7c 01       	movw	r14, r24
        bx = sqrtf(hx * hx + hy * hy);
    13aa:	a5 01       	movw	r20, r10
    13ac:	94 01       	movw	r18, r8
    13ae:	c5 01       	movw	r24, r10
    13b0:	b4 01       	movw	r22, r8
    13b2:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    13b6:	69 8f       	std	Y+25, r22	; 0x19
    13b8:	7a 8f       	std	Y+26, r23	; 0x1a
    13ba:	8b 8f       	std	Y+27, r24	; 0x1b
    13bc:	9c 8f       	std	Y+28, r25	; 0x1c
    13be:	a5 01       	movw	r20, r10
    13c0:	94 01       	movw	r18, r8
    13c2:	c5 01       	movw	r24, r10
    13c4:	b4 01       	movw	r22, r8
    13c6:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    13ca:	4b 01       	movw	r8, r22
    13cc:	5c 01       	movw	r10, r24
    13ce:	a7 01       	movw	r20, r14
    13d0:	96 01       	movw	r18, r12
    13d2:	c7 01       	movw	r24, r14
    13d4:	b6 01       	movw	r22, r12
    13d6:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    13da:	9b 01       	movw	r18, r22
    13dc:	ac 01       	movw	r20, r24
    13de:	c5 01       	movw	r24, r10
    13e0:	b4 01       	movw	r22, r8
    13e2:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
    13e6:	0e 94 7f 19 	call	0x32fe	; 0x32fe <sqrt>
    13ea:	4b 01       	movw	r8, r22
    13ec:	5c 01       	movw	r10, r24
        bz = 2.0f * (mx * (q1q3 - q0q2) + my * (q2q3 + q0q1) + mz * (0.5f - q1q1 - q2q2));
    13ee:	29 a1       	ldd	r18, Y+33	; 0x21
    13f0:	3a a1       	ldd	r19, Y+34	; 0x22
    13f2:	4b a1       	ldd	r20, Y+35	; 0x23
    13f4:	5c a1       	ldd	r21, Y+36	; 0x24
    13f6:	6d a5       	ldd	r22, Y+45	; 0x2d
    13f8:	7e a5       	ldd	r23, Y+46	; 0x2e
    13fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    13fc:	98 a9       	ldd	r25, Y+48	; 0x30
    13fe:	0e 94 81 16 	call	0x2d02	; 0x2d02 <__subsf3>
    1402:	69 a3       	std	Y+33, r22	; 0x21
    1404:	7a a3       	std	Y+34, r23	; 0x22
    1406:	8b a3       	std	Y+35, r24	; 0x23
    1408:	9c a3       	std	Y+36, r25	; 0x24
    140a:	25 96       	adiw	r28, 0x05	; 5
    140c:	2c ad       	ldd	r18, Y+60	; 0x3c
    140e:	3d ad       	ldd	r19, Y+61	; 0x3d
    1410:	4e ad       	ldd	r20, Y+62	; 0x3e
    1412:	5f ad       	ldd	r21, Y+63	; 0x3f
    1414:	25 97       	sbiw	r28, 0x05	; 5
    1416:	6d a1       	ldd	r22, Y+37	; 0x25
    1418:	7e a1       	ldd	r23, Y+38	; 0x26
    141a:	8f a1       	ldd	r24, Y+39	; 0x27
    141c:	98 a5       	ldd	r25, Y+40	; 0x28
    141e:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
    1422:	6d a3       	std	Y+37, r22	; 0x25
    1424:	7e a3       	std	Y+38, r23	; 0x26
    1426:	8f a3       	std	Y+39, r24	; 0x27
    1428:	98 a7       	std	Y+40, r25	; 0x28
    142a:	21 96       	adiw	r28, 0x01	; 1
    142c:	2c ad       	ldd	r18, Y+60	; 0x3c
    142e:	3d ad       	ldd	r19, Y+61	; 0x3d
    1430:	4e ad       	ldd	r20, Y+62	; 0x3e
    1432:	5f ad       	ldd	r21, Y+63	; 0x3f
    1434:	21 97       	sbiw	r28, 0x01	; 1
    1436:	65 96       	adiw	r28, 0x15	; 21
    1438:	6c ad       	ldd	r22, Y+60	; 0x3c
    143a:	7d ad       	ldd	r23, Y+61	; 0x3d
    143c:	8e ad       	ldd	r24, Y+62	; 0x3e
    143e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1440:	65 97       	sbiw	r28, 0x15	; 21
    1442:	0e 94 81 16 	call	0x2d02	; 0x2d02 <__subsf3>
    1446:	69 8f       	std	Y+25, r22	; 0x19
    1448:	7a 8f       	std	Y+26, r23	; 0x1a
    144a:	8b 8f       	std	Y+27, r24	; 0x1b
    144c:	9c 8f       	std	Y+28, r25	; 0x1c
    144e:	29 a1       	ldd	r18, Y+33	; 0x21
    1450:	3a a1       	ldd	r19, Y+34	; 0x22
    1452:	4b a1       	ldd	r20, Y+35	; 0x23
    1454:	5c a1       	ldd	r21, Y+36	; 0x24
    1456:	69 85       	ldd	r22, Y+9	; 0x09
    1458:	7a 85       	ldd	r23, Y+10	; 0x0a
    145a:	8b 85       	ldd	r24, Y+11	; 0x0b
    145c:	9c 85       	ldd	r25, Y+12	; 0x0c
    145e:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    1462:	6b 01       	movw	r12, r22
    1464:	7c 01       	movw	r14, r24
    1466:	2d a1       	ldd	r18, Y+37	; 0x25
    1468:	3e a1       	ldd	r19, Y+38	; 0x26
    146a:	4f a1       	ldd	r20, Y+39	; 0x27
    146c:	58 a5       	ldd	r21, Y+40	; 0x28
    146e:	6d 81       	ldd	r22, Y+5	; 0x05
    1470:	7e 81       	ldd	r23, Y+6	; 0x06
    1472:	8f 81       	ldd	r24, Y+7	; 0x07
    1474:	98 85       	ldd	r25, Y+8	; 0x08
    1476:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    147a:	9b 01       	movw	r18, r22
    147c:	ac 01       	movw	r20, r24
    147e:	c7 01       	movw	r24, r14
    1480:	b6 01       	movw	r22, r12
    1482:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
    1486:	6b 01       	movw	r12, r22
    1488:	7c 01       	movw	r14, r24
    148a:	29 8d       	ldd	r18, Y+25	; 0x19
    148c:	3a 8d       	ldd	r19, Y+26	; 0x1a
    148e:	4b 8d       	ldd	r20, Y+27	; 0x1b
    1490:	5c 8d       	ldd	r21, Y+28	; 0x1c
    1492:	6d 85       	ldd	r22, Y+13	; 0x0d
    1494:	7e 85       	ldd	r23, Y+14	; 0x0e
    1496:	8f 85       	ldd	r24, Y+15	; 0x0f
    1498:	98 89       	ldd	r25, Y+16	; 0x10
    149a:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    149e:	9b 01       	movw	r18, r22
    14a0:	ac 01       	movw	r20, r24
    14a2:	c7 01       	movw	r24, r14
    14a4:	b6 01       	movw	r22, r12
    14a6:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
    14aa:	9b 01       	movw	r18, r22
    14ac:	ac 01       	movw	r20, r24
    14ae:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
    14b2:	6b 01       	movw	r12, r22
    14b4:	7c 01       	movw	r14, r24

        // Estimated direction of gravity and magnetic field
        halfvx = q1q3 - q0q2;
        halfvy = q0q1 + q2q3;
        halfvz = q0q0 - 0.5f + q3q3;
    14b6:	29 81       	ldd	r18, Y+1	; 0x01
    14b8:	3a 81       	ldd	r19, Y+2	; 0x02
    14ba:	4b 81       	ldd	r20, Y+3	; 0x03
    14bc:	5c 81       	ldd	r21, Y+4	; 0x04
    14be:	ca 01       	movw	r24, r20
    14c0:	b9 01       	movw	r22, r18
    14c2:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    14c6:	20 e0       	ldi	r18, 0x00	; 0
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	40 e0       	ldi	r20, 0x00	; 0
    14cc:	5f e3       	ldi	r21, 0x3F	; 63
    14ce:	0e 94 81 16 	call	0x2d02	; 0x2d02 <__subsf3>
    14d2:	a3 01       	movw	r20, r6
    14d4:	92 01       	movw	r18, r4
    14d6:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
    14da:	69 83       	std	Y+1, r22	; 0x01
    14dc:	7a 83       	std	Y+2, r23	; 0x02
    14de:	8b 83       	std	Y+3, r24	; 0x03
    14e0:	9c 83       	std	Y+4, r25	; 0x04
        halfwx = bx * (0.5f - q2q2 - q3q3) + bz * (q1q3 - q0q2);
    14e2:	a5 01       	movw	r20, r10
    14e4:	94 01       	movw	r18, r8
    14e6:	29 96       	adiw	r28, 0x09	; 9
    14e8:	6c ad       	ldd	r22, Y+60	; 0x3c
    14ea:	7d ad       	ldd	r23, Y+61	; 0x3d
    14ec:	8e ad       	ldd	r24, Y+62	; 0x3e
    14ee:	9f ad       	ldd	r25, Y+63	; 0x3f
    14f0:	29 97       	sbiw	r28, 0x09	; 9
    14f2:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    14f6:	2b 01       	movw	r4, r22
    14f8:	3c 01       	movw	r6, r24
    14fa:	a7 01       	movw	r20, r14
    14fc:	96 01       	movw	r18, r12
    14fe:	69 a1       	ldd	r22, Y+33	; 0x21
    1500:	7a a1       	ldd	r23, Y+34	; 0x22
    1502:	8b a1       	ldd	r24, Y+35	; 0x23
    1504:	9c a1       	ldd	r25, Y+36	; 0x24
    1506:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    150a:	9b 01       	movw	r18, r22
    150c:	ac 01       	movw	r20, r24
    150e:	c3 01       	movw	r24, r6
    1510:	b2 01       	movw	r22, r4
    1512:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
    1516:	69 a7       	std	Y+41, r22	; 0x29
    1518:	7a a7       	std	Y+42, r23	; 0x2a
    151a:	8b a7       	std	Y+43, r24	; 0x2b
    151c:	9c a7       	std	Y+44, r25	; 0x2c
        halfwy = bx * (q1q2 - q0q3) + bz * (q0q1 + q2q3);
    151e:	a5 01       	movw	r20, r10
    1520:	94 01       	movw	r18, r8
    1522:	2d 96       	adiw	r28, 0x0d	; 13
    1524:	6c ad       	ldd	r22, Y+60	; 0x3c
    1526:	7d ad       	ldd	r23, Y+61	; 0x3d
    1528:	8e ad       	ldd	r24, Y+62	; 0x3e
    152a:	9f ad       	ldd	r25, Y+63	; 0x3f
    152c:	2d 97       	sbiw	r28, 0x0d	; 13
    152e:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    1532:	2b 01       	movw	r4, r22
    1534:	3c 01       	movw	r6, r24
    1536:	a7 01       	movw	r20, r14
    1538:	96 01       	movw	r18, r12
    153a:	6d a1       	ldd	r22, Y+37	; 0x25
    153c:	7e a1       	ldd	r23, Y+38	; 0x26
    153e:	8f a1       	ldd	r24, Y+39	; 0x27
    1540:	98 a5       	ldd	r25, Y+40	; 0x28
    1542:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    1546:	9b 01       	movw	r18, r22
    1548:	ac 01       	movw	r20, r24
    154a:	c3 01       	movw	r24, r6
    154c:	b2 01       	movw	r22, r4
    154e:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
    1552:	6d a7       	std	Y+45, r22	; 0x2d
    1554:	7e a7       	std	Y+46, r23	; 0x2e
    1556:	8f a7       	std	Y+47, r24	; 0x2f
    1558:	98 ab       	std	Y+48, r25	; 0x30
        halfwz = bx * (q0q2 + q1q3) + bz * (0.5f - q1q1 - q2q2);
    155a:	a5 01       	movw	r20, r10
    155c:	94 01       	movw	r18, r8
    155e:	61 96       	adiw	r28, 0x11	; 17
    1560:	6c ad       	ldd	r22, Y+60	; 0x3c
    1562:	7d ad       	ldd	r23, Y+61	; 0x3d
    1564:	8e ad       	ldd	r24, Y+62	; 0x3e
    1566:	9f ad       	ldd	r25, Y+63	; 0x3f
    1568:	61 97       	sbiw	r28, 0x11	; 17
    156a:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    156e:	2b 01       	movw	r4, r22
    1570:	3c 01       	movw	r6, r24
    1572:	a7 01       	movw	r20, r14
    1574:	96 01       	movw	r18, r12
    1576:	69 8d       	ldd	r22, Y+25	; 0x19
    1578:	7a 8d       	ldd	r23, Y+26	; 0x1a
    157a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    157c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    157e:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    1582:	9b 01       	movw	r18, r22
    1584:	ac 01       	movw	r20, r24
    1586:	c3 01       	movw	r24, r6
    1588:	b2 01       	movw	r22, r4
    158a:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
    158e:	6b 01       	movw	r12, r22
    1590:	7c 01       	movw	r14, r24

        // Error is sum of cross product between estimated direction
        // and measured direction of field vectors
        halfex = (ay * halfvz - az * halfvy) + (my * halfwz - mz * halfwy);
    1592:	29 81       	ldd	r18, Y+1	; 0x01
    1594:	3a 81       	ldd	r19, Y+2	; 0x02
    1596:	4b 81       	ldd	r20, Y+3	; 0x03
    1598:	5c 81       	ldd	r21, Y+4	; 0x04
    159a:	6d a9       	ldd	r22, Y+53	; 0x35
    159c:	7e a9       	ldd	r23, Y+54	; 0x36
    159e:	8f a9       	ldd	r24, Y+55	; 0x37
    15a0:	98 ad       	ldd	r25, Y+56	; 0x38
    15a2:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    15a6:	4b 01       	movw	r8, r22
    15a8:	5c 01       	movw	r10, r24
    15aa:	2d a1       	ldd	r18, Y+37	; 0x25
    15ac:	3e a1       	ldd	r19, Y+38	; 0x26
    15ae:	4f a1       	ldd	r20, Y+39	; 0x27
    15b0:	58 a5       	ldd	r21, Y+40	; 0x28
    15b2:	69 ad       	ldd	r22, Y+57	; 0x39
    15b4:	7a ad       	ldd	r23, Y+58	; 0x3a
    15b6:	8b ad       	ldd	r24, Y+59	; 0x3b
    15b8:	9c ad       	ldd	r25, Y+60	; 0x3c
    15ba:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    15be:	9b 01       	movw	r18, r22
    15c0:	ac 01       	movw	r20, r24
    15c2:	c5 01       	movw	r24, r10
    15c4:	b4 01       	movw	r22, r8
    15c6:	0e 94 81 16 	call	0x2d02	; 0x2d02 <__subsf3>
    15ca:	4b 01       	movw	r8, r22
    15cc:	5c 01       	movw	r10, r24
    15ce:	a7 01       	movw	r20, r14
    15d0:	96 01       	movw	r18, r12
    15d2:	6d 81       	ldd	r22, Y+5	; 0x05
    15d4:	7e 81       	ldd	r23, Y+6	; 0x06
    15d6:	8f 81       	ldd	r24, Y+7	; 0x07
    15d8:	98 85       	ldd	r25, Y+8	; 0x08
    15da:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    15de:	2b 01       	movw	r4, r22
    15e0:	3c 01       	movw	r6, r24
    15e2:	2d a5       	ldd	r18, Y+45	; 0x2d
    15e4:	3e a5       	ldd	r19, Y+46	; 0x2e
    15e6:	4f a5       	ldd	r20, Y+47	; 0x2f
    15e8:	58 a9       	ldd	r21, Y+48	; 0x30
    15ea:	6d 85       	ldd	r22, Y+13	; 0x0d
    15ec:	7e 85       	ldd	r23, Y+14	; 0x0e
    15ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    15f0:	98 89       	ldd	r25, Y+16	; 0x10
    15f2:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    15f6:	9b 01       	movw	r18, r22
    15f8:	ac 01       	movw	r20, r24
    15fa:	c3 01       	movw	r24, r6
    15fc:	b2 01       	movw	r22, r4
    15fe:	0e 94 81 16 	call	0x2d02	; 0x2d02 <__subsf3>
    1602:	9b 01       	movw	r18, r22
    1604:	ac 01       	movw	r20, r24
    1606:	c5 01       	movw	r24, r10
    1608:	b4 01       	movw	r22, r8
    160a:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
    160e:	69 8f       	std	Y+25, r22	; 0x19
    1610:	7a 8f       	std	Y+26, r23	; 0x1a
    1612:	8b 8f       	std	Y+27, r24	; 0x1b
    1614:	9c 8f       	std	Y+28, r25	; 0x1c
        halfey = (az * halfvx - ax * halfvz) + (mz * halfwx - mx * halfwz);
    1616:	29 a1       	ldd	r18, Y+33	; 0x21
    1618:	3a a1       	ldd	r19, Y+34	; 0x22
    161a:	4b a1       	ldd	r20, Y+35	; 0x23
    161c:	5c a1       	ldd	r21, Y+36	; 0x24
    161e:	69 ad       	ldd	r22, Y+57	; 0x39
    1620:	7a ad       	ldd	r23, Y+58	; 0x3a
    1622:	8b ad       	ldd	r24, Y+59	; 0x3b
    1624:	9c ad       	ldd	r25, Y+60	; 0x3c
    1626:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    162a:	4b 01       	movw	r8, r22
    162c:	5c 01       	movw	r10, r24
    162e:	29 81       	ldd	r18, Y+1	; 0x01
    1630:	3a 81       	ldd	r19, Y+2	; 0x02
    1632:	4b 81       	ldd	r20, Y+3	; 0x03
    1634:	5c 81       	ldd	r21, Y+4	; 0x04
    1636:	69 a9       	ldd	r22, Y+49	; 0x31
    1638:	7a a9       	ldd	r23, Y+50	; 0x32
    163a:	8b a9       	ldd	r24, Y+51	; 0x33
    163c:	9c a9       	ldd	r25, Y+52	; 0x34
    163e:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    1642:	9b 01       	movw	r18, r22
    1644:	ac 01       	movw	r20, r24
    1646:	c5 01       	movw	r24, r10
    1648:	b4 01       	movw	r22, r8
    164a:	0e 94 81 16 	call	0x2d02	; 0x2d02 <__subsf3>
    164e:	4b 01       	movw	r8, r22
    1650:	5c 01       	movw	r10, r24
    1652:	29 a5       	ldd	r18, Y+41	; 0x29
    1654:	3a a5       	ldd	r19, Y+42	; 0x2a
    1656:	4b a5       	ldd	r20, Y+43	; 0x2b
    1658:	5c a5       	ldd	r21, Y+44	; 0x2c
    165a:	6d 85       	ldd	r22, Y+13	; 0x0d
    165c:	7e 85       	ldd	r23, Y+14	; 0x0e
    165e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1660:	98 89       	ldd	r25, Y+16	; 0x10
    1662:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    1666:	2b 01       	movw	r4, r22
    1668:	3c 01       	movw	r6, r24
    166a:	a7 01       	movw	r20, r14
    166c:	96 01       	movw	r18, r12
    166e:	69 85       	ldd	r22, Y+9	; 0x09
    1670:	7a 85       	ldd	r23, Y+10	; 0x0a
    1672:	8b 85       	ldd	r24, Y+11	; 0x0b
    1674:	9c 85       	ldd	r25, Y+12	; 0x0c
    1676:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    167a:	9b 01       	movw	r18, r22
    167c:	ac 01       	movw	r20, r24
    167e:	c3 01       	movw	r24, r6
    1680:	b2 01       	movw	r22, r4
    1682:	0e 94 81 16 	call	0x2d02	; 0x2d02 <__subsf3>
    1686:	9b 01       	movw	r18, r22
    1688:	ac 01       	movw	r20, r24
    168a:	c5 01       	movw	r24, r10
    168c:	b4 01       	movw	r22, r8
    168e:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
    1692:	69 83       	std	Y+1, r22	; 0x01
    1694:	7a 83       	std	Y+2, r23	; 0x02
    1696:	8b 83       	std	Y+3, r24	; 0x03
    1698:	9c 83       	std	Y+4, r25	; 0x04
        halfez = (ax * halfvy - ay * halfvx) + (mx * halfwy - my * halfwx);
    169a:	2d a1       	ldd	r18, Y+37	; 0x25
    169c:	3e a1       	ldd	r19, Y+38	; 0x26
    169e:	4f a1       	ldd	r20, Y+39	; 0x27
    16a0:	58 a5       	ldd	r21, Y+40	; 0x28
    16a2:	69 a9       	ldd	r22, Y+49	; 0x31
    16a4:	7a a9       	ldd	r23, Y+50	; 0x32
    16a6:	8b a9       	ldd	r24, Y+51	; 0x33
    16a8:	9c a9       	ldd	r25, Y+52	; 0x34
    16aa:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    16ae:	6b 01       	movw	r12, r22
    16b0:	7c 01       	movw	r14, r24
    16b2:	29 a1       	ldd	r18, Y+33	; 0x21
    16b4:	3a a1       	ldd	r19, Y+34	; 0x22
    16b6:	4b a1       	ldd	r20, Y+35	; 0x23
    16b8:	5c a1       	ldd	r21, Y+36	; 0x24
    16ba:	6d a9       	ldd	r22, Y+53	; 0x35
    16bc:	7e a9       	ldd	r23, Y+54	; 0x36
    16be:	8f a9       	ldd	r24, Y+55	; 0x37
    16c0:	98 ad       	ldd	r25, Y+56	; 0x38
    16c2:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    16c6:	9b 01       	movw	r18, r22
    16c8:	ac 01       	movw	r20, r24
    16ca:	c7 01       	movw	r24, r14
    16cc:	b6 01       	movw	r22, r12
    16ce:	0e 94 81 16 	call	0x2d02	; 0x2d02 <__subsf3>
    16d2:	6b 01       	movw	r12, r22
    16d4:	7c 01       	movw	r14, r24
    16d6:	2d a5       	ldd	r18, Y+45	; 0x2d
    16d8:	3e a5       	ldd	r19, Y+46	; 0x2e
    16da:	4f a5       	ldd	r20, Y+47	; 0x2f
    16dc:	58 a9       	ldd	r21, Y+48	; 0x30
    16de:	69 85       	ldd	r22, Y+9	; 0x09
    16e0:	7a 85       	ldd	r23, Y+10	; 0x0a
    16e2:	8b 85       	ldd	r24, Y+11	; 0x0b
    16e4:	9c 85       	ldd	r25, Y+12	; 0x0c
    16e6:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    16ea:	4b 01       	movw	r8, r22
    16ec:	5c 01       	movw	r10, r24
    16ee:	29 a5       	ldd	r18, Y+41	; 0x29
    16f0:	3a a5       	ldd	r19, Y+42	; 0x2a
    16f2:	4b a5       	ldd	r20, Y+43	; 0x2b
    16f4:	5c a5       	ldd	r21, Y+44	; 0x2c
    16f6:	6d 81       	ldd	r22, Y+5	; 0x05
    16f8:	7e 81       	ldd	r23, Y+6	; 0x06
    16fa:	8f 81       	ldd	r24, Y+7	; 0x07
    16fc:	98 85       	ldd	r25, Y+8	; 0x08
    16fe:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    1702:	9b 01       	movw	r18, r22
    1704:	ac 01       	movw	r20, r24
    1706:	c5 01       	movw	r24, r10
    1708:	b4 01       	movw	r22, r8
    170a:	0e 94 81 16 	call	0x2d02	; 0x2d02 <__subsf3>
    170e:	9b 01       	movw	r18, r22
    1710:	ac 01       	movw	r20, r24
    1712:	c7 01       	movw	r24, r14
    1714:	b6 01       	movw	r22, r12
    1716:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
    171a:	69 87       	std	Y+9, r22	; 0x09
    171c:	7a 87       	std	Y+10, r23	; 0x0a
    171e:	8b 87       	std	Y+11, r24	; 0x0b
    1720:	9c 87       	std	Y+12, r25	; 0x0c

        // Compute and apply integral feedback if enabled
        if(twoKi > 0.0f) {
    1722:	c0 90 c3 01 	lds	r12, 0x01C3	; 0x8001c3 <twoKi>
    1726:	d0 90 c4 01 	lds	r13, 0x01C4	; 0x8001c4 <twoKi+0x1>
    172a:	e0 90 c5 01 	lds	r14, 0x01C5	; 0x8001c5 <twoKi+0x2>
    172e:	f0 90 c6 01 	lds	r15, 0x01C6	; 0x8001c6 <twoKi+0x3>
    1732:	20 e0       	ldi	r18, 0x00	; 0
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	a9 01       	movw	r20, r18
    1738:	c7 01       	movw	r24, r14
    173a:	b6 01       	movw	r22, r12
    173c:	0e 94 ff 18 	call	0x31fe	; 0x31fe <__gesf2>
    1740:	18 16       	cp	r1, r24
    1742:	0c f0       	brlt	.+2      	; 0x1746 <mahony_update+0x90c>
    1744:	91 c0       	rjmp	.+290    	; 0x1868 <mahony_update+0xa2e>
            // integral error scaled by Ki
            integralFBx += twoKi * halfex * invSampleFreq;
    1746:	80 90 a3 01 	lds	r8, 0x01A3	; 0x8001a3 <invSampleFreq>
    174a:	90 90 a4 01 	lds	r9, 0x01A4	; 0x8001a4 <invSampleFreq+0x1>
    174e:	a0 90 a5 01 	lds	r10, 0x01A5	; 0x8001a5 <invSampleFreq+0x2>
    1752:	b0 90 a6 01 	lds	r11, 0x01A6	; 0x8001a6 <invSampleFreq+0x3>
    1756:	a7 01       	movw	r20, r14
    1758:	96 01       	movw	r18, r12
    175a:	69 8d       	ldd	r22, Y+25	; 0x19
    175c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    175e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1760:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1762:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    1766:	a5 01       	movw	r20, r10
    1768:	94 01       	movw	r18, r8
    176a:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    176e:	20 91 af 01 	lds	r18, 0x01AF	; 0x8001af <integralFBx>
    1772:	30 91 b0 01 	lds	r19, 0x01B0	; 0x8001b0 <integralFBx+0x1>
    1776:	40 91 b1 01 	lds	r20, 0x01B1	; 0x8001b1 <integralFBx+0x2>
    177a:	50 91 b2 01 	lds	r21, 0x01B2	; 0x8001b2 <integralFBx+0x3>
    177e:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
    1782:	6d 83       	std	Y+5, r22	; 0x05
    1784:	7e 83       	std	Y+6, r23	; 0x06
    1786:	8f 83       	std	Y+7, r24	; 0x07
    1788:	98 87       	std	Y+8, r25	; 0x08
    178a:	60 93 af 01 	sts	0x01AF, r22	; 0x8001af <integralFBx>
    178e:	70 93 b0 01 	sts	0x01B0, r23	; 0x8001b0 <integralFBx+0x1>
    1792:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <integralFBx+0x2>
    1796:	90 93 b2 01 	sts	0x01B2, r25	; 0x8001b2 <integralFBx+0x3>
            integralFBy += twoKi * halfey * invSampleFreq;
    179a:	a7 01       	movw	r20, r14
    179c:	96 01       	movw	r18, r12
    179e:	69 81       	ldd	r22, Y+1	; 0x01
    17a0:	7a 81       	ldd	r23, Y+2	; 0x02
    17a2:	8b 81       	ldd	r24, Y+3	; 0x03
    17a4:	9c 81       	ldd	r25, Y+4	; 0x04
    17a6:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    17aa:	a5 01       	movw	r20, r10
    17ac:	94 01       	movw	r18, r8
    17ae:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    17b2:	20 91 ab 01 	lds	r18, 0x01AB	; 0x8001ab <integralFBy>
    17b6:	30 91 ac 01 	lds	r19, 0x01AC	; 0x8001ac <integralFBy+0x1>
    17ba:	40 91 ad 01 	lds	r20, 0x01AD	; 0x8001ad <integralFBy+0x2>
    17be:	50 91 ae 01 	lds	r21, 0x01AE	; 0x8001ae <integralFBy+0x3>
    17c2:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
    17c6:	2b 01       	movw	r4, r22
    17c8:	3c 01       	movw	r6, r24
    17ca:	60 93 ab 01 	sts	0x01AB, r22	; 0x8001ab <integralFBy>
    17ce:	70 93 ac 01 	sts	0x01AC, r23	; 0x8001ac <integralFBy+0x1>
    17d2:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <integralFBy+0x2>
    17d6:	90 93 ae 01 	sts	0x01AE, r25	; 0x8001ae <integralFBy+0x3>
            integralFBz += twoKi * halfez * invSampleFreq;
    17da:	a7 01       	movw	r20, r14
    17dc:	96 01       	movw	r18, r12
    17de:	69 85       	ldd	r22, Y+9	; 0x09
    17e0:	7a 85       	ldd	r23, Y+10	; 0x0a
    17e2:	8b 85       	ldd	r24, Y+11	; 0x0b
    17e4:	9c 85       	ldd	r25, Y+12	; 0x0c
    17e6:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    17ea:	a5 01       	movw	r20, r10
    17ec:	94 01       	movw	r18, r8
    17ee:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    17f2:	20 91 a7 01 	lds	r18, 0x01A7	; 0x8001a7 <integralFBz>
    17f6:	30 91 a8 01 	lds	r19, 0x01A8	; 0x8001a8 <integralFBz+0x1>
    17fa:	40 91 a9 01 	lds	r20, 0x01A9	; 0x8001a9 <integralFBz+0x2>
    17fe:	50 91 aa 01 	lds	r21, 0x01AA	; 0x8001aa <integralFBz+0x3>
    1802:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
    1806:	6b 01       	movw	r12, r22
    1808:	7c 01       	movw	r14, r24
    180a:	60 93 a7 01 	sts	0x01A7, r22	; 0x8001a7 <integralFBz>
    180e:	70 93 a8 01 	sts	0x01A8, r23	; 0x8001a8 <integralFBz+0x1>
    1812:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <integralFBz+0x2>
    1816:	90 93 aa 01 	sts	0x01AA, r25	; 0x8001aa <integralFBz+0x3>
            gx += integralFBx;	// apply integral feedback
    181a:	2d 81       	ldd	r18, Y+5	; 0x05
    181c:	3e 81       	ldd	r19, Y+6	; 0x06
    181e:	4f 81       	ldd	r20, Y+7	; 0x07
    1820:	58 85       	ldd	r21, Y+8	; 0x08
    1822:	6d 89       	ldd	r22, Y+21	; 0x15
    1824:	7e 89       	ldd	r23, Y+22	; 0x16
    1826:	8f 89       	ldd	r24, Y+23	; 0x17
    1828:	98 8d       	ldd	r25, Y+24	; 0x18
    182a:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
    182e:	6d 8b       	std	Y+21, r22	; 0x15
    1830:	7e 8b       	std	Y+22, r23	; 0x16
    1832:	8f 8b       	std	Y+23, r24	; 0x17
    1834:	98 8f       	std	Y+24, r25	; 0x18
            gy += integralFBy;
    1836:	a3 01       	movw	r20, r6
    1838:	92 01       	movw	r18, r4
    183a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    183c:	7e 8d       	ldd	r23, Y+30	; 0x1e
    183e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1840:	98 a1       	ldd	r25, Y+32	; 0x20
    1842:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
    1846:	6d 8f       	std	Y+29, r22	; 0x1d
    1848:	7e 8f       	std	Y+30, r23	; 0x1e
    184a:	8f 8f       	std	Y+31, r24	; 0x1f
    184c:	98 a3       	std	Y+32, r25	; 0x20
            gz += integralFBz;
    184e:	a7 01       	movw	r20, r14
    1850:	96 01       	movw	r18, r12
    1852:	69 89       	ldd	r22, Y+17	; 0x11
    1854:	7a 89       	ldd	r23, Y+18	; 0x12
    1856:	8b 89       	ldd	r24, Y+19	; 0x13
    1858:	9c 89       	ldd	r25, Y+20	; 0x14
    185a:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
    185e:	69 8b       	std	Y+17, r22	; 0x11
    1860:	7a 8b       	std	Y+18, r23	; 0x12
    1862:	8b 8b       	std	Y+19, r24	; 0x13
    1864:	9c 8b       	std	Y+20, r25	; 0x14
    1866:	18 c0       	rjmp	.+48     	; 0x1898 <mahony_update+0xa5e>
            } else {
            integralFBx = 0.0f;	// prevent integral windup
    1868:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <integralFBx>
    186c:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <integralFBx+0x1>
    1870:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <integralFBx+0x2>
    1874:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <integralFBx+0x3>
            integralFBy = 0.0f;
    1878:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <integralFBy>
    187c:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <integralFBy+0x1>
    1880:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <integralFBy+0x2>
    1884:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <integralFBy+0x3>
            integralFBz = 0.0f;
    1888:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <integralFBz>
    188c:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <integralFBz+0x1>
    1890:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <integralFBz+0x2>
    1894:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <integralFBz+0x3>
        }

        // Apply proportional feedback
        gx += twoKp * halfex;
    1898:	c0 90 c7 01 	lds	r12, 0x01C7	; 0x8001c7 <twoKp>
    189c:	d0 90 c8 01 	lds	r13, 0x01C8	; 0x8001c8 <twoKp+0x1>
    18a0:	e0 90 c9 01 	lds	r14, 0x01C9	; 0x8001c9 <twoKp+0x2>
    18a4:	f0 90 ca 01 	lds	r15, 0x01CA	; 0x8001ca <twoKp+0x3>
    18a8:	a7 01       	movw	r20, r14
    18aa:	96 01       	movw	r18, r12
    18ac:	69 8d       	ldd	r22, Y+25	; 0x19
    18ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18b4:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    18b8:	9b 01       	movw	r18, r22
    18ba:	ac 01       	movw	r20, r24
    18bc:	6d 89       	ldd	r22, Y+21	; 0x15
    18be:	7e 89       	ldd	r23, Y+22	; 0x16
    18c0:	8f 89       	ldd	r24, Y+23	; 0x17
    18c2:	98 8d       	ldd	r25, Y+24	; 0x18
    18c4:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
    18c8:	6d 8b       	std	Y+21, r22	; 0x15
    18ca:	7e 8b       	std	Y+22, r23	; 0x16
    18cc:	8f 8b       	std	Y+23, r24	; 0x17
    18ce:	98 8f       	std	Y+24, r25	; 0x18
        gy += twoKp * halfey;
    18d0:	a7 01       	movw	r20, r14
    18d2:	96 01       	movw	r18, r12
    18d4:	69 81       	ldd	r22, Y+1	; 0x01
    18d6:	7a 81       	ldd	r23, Y+2	; 0x02
    18d8:	8b 81       	ldd	r24, Y+3	; 0x03
    18da:	9c 81       	ldd	r25, Y+4	; 0x04
    18dc:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    18e0:	9b 01       	movw	r18, r22
    18e2:	ac 01       	movw	r20, r24
    18e4:	6d 8d       	ldd	r22, Y+29	; 0x1d
    18e6:	7e 8d       	ldd	r23, Y+30	; 0x1e
    18e8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18ea:	98 a1       	ldd	r25, Y+32	; 0x20
    18ec:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
    18f0:	6d 8f       	std	Y+29, r22	; 0x1d
    18f2:	7e 8f       	std	Y+30, r23	; 0x1e
    18f4:	8f 8f       	std	Y+31, r24	; 0x1f
    18f6:	98 a3       	std	Y+32, r25	; 0x20
        gz += twoKp * halfez;
    18f8:	a7 01       	movw	r20, r14
    18fa:	96 01       	movw	r18, r12
    18fc:	69 85       	ldd	r22, Y+9	; 0x09
    18fe:	7a 85       	ldd	r23, Y+10	; 0x0a
    1900:	8b 85       	ldd	r24, Y+11	; 0x0b
    1902:	9c 85       	ldd	r25, Y+12	; 0x0c
    1904:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    1908:	9b 01       	movw	r18, r22
    190a:	ac 01       	movw	r20, r24
    190c:	69 89       	ldd	r22, Y+17	; 0x11
    190e:	7a 89       	ldd	r23, Y+18	; 0x12
    1910:	8b 89       	ldd	r24, Y+19	; 0x13
    1912:	9c 89       	ldd	r25, Y+20	; 0x14
    1914:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
    1918:	69 8b       	std	Y+17, r22	; 0x11
    191a:	7a 8b       	std	Y+18, r23	; 0x12
    191c:	8b 8b       	std	Y+19, r24	; 0x13
    191e:	9c 8b       	std	Y+20, r25	; 0x14
    }

    // Integrate rate of change of quaternion
    gx *= (0.5f * invSampleFreq);		// pre-multiply common factors
    1920:	20 e0       	ldi	r18, 0x00	; 0
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	40 e0       	ldi	r20, 0x00	; 0
    1926:	5f e3       	ldi	r21, 0x3F	; 63
    1928:	60 91 a3 01 	lds	r22, 0x01A3	; 0x8001a3 <invSampleFreq>
    192c:	70 91 a4 01 	lds	r23, 0x01A4	; 0x8001a4 <invSampleFreq+0x1>
    1930:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <invSampleFreq+0x2>
    1934:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <invSampleFreq+0x3>
    1938:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    193c:	6b 01       	movw	r12, r22
    193e:	7c 01       	movw	r14, r24
    1940:	9b 01       	movw	r18, r22
    1942:	ac 01       	movw	r20, r24
    1944:	6d 89       	ldd	r22, Y+21	; 0x15
    1946:	7e 89       	ldd	r23, Y+22	; 0x16
    1948:	8f 89       	ldd	r24, Y+23	; 0x17
    194a:	98 8d       	ldd	r25, Y+24	; 0x18
    194c:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    1950:	6d 83       	std	Y+5, r22	; 0x05
    1952:	7e 83       	std	Y+6, r23	; 0x06
    1954:	8f 83       	std	Y+7, r24	; 0x07
    1956:	98 87       	std	Y+8, r25	; 0x08
    gy *= (0.5f * invSampleFreq);
    1958:	a7 01       	movw	r20, r14
    195a:	96 01       	movw	r18, r12
    195c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    195e:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1960:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1962:	98 a1       	ldd	r25, Y+32	; 0x20
    1964:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    1968:	6d 87       	std	Y+13, r22	; 0x0d
    196a:	7e 87       	std	Y+14, r23	; 0x0e
    196c:	8f 87       	std	Y+15, r24	; 0x0f
    196e:	98 8b       	std	Y+16, r25	; 0x10
    gz *= (0.5f * invSampleFreq);
    1970:	a7 01       	movw	r20, r14
    1972:	96 01       	movw	r18, r12
    1974:	69 89       	ldd	r22, Y+17	; 0x11
    1976:	7a 89       	ldd	r23, Y+18	; 0x12
    1978:	8b 89       	ldd	r24, Y+19	; 0x13
    197a:	9c 89       	ldd	r25, Y+20	; 0x14
    197c:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    1980:	6d 8b       	std	Y+21, r22	; 0x15
    1982:	7e 8b       	std	Y+22, r23	; 0x16
    1984:	8f 8b       	std	Y+23, r24	; 0x17
    1986:	98 8f       	std	Y+24, r25	; 0x18
    qa = q0;
    1988:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <q0>
    198c:	90 91 c0 01 	lds	r25, 0x01C0	; 0x8001c0 <q0+0x1>
    1990:	a0 91 c1 01 	lds	r26, 0x01C1	; 0x8001c1 <q0+0x2>
    1994:	b0 91 c2 01 	lds	r27, 0x01C2	; 0x8001c2 <q0+0x3>
    1998:	89 83       	std	Y+1, r24	; 0x01
    199a:	9a 83       	std	Y+2, r25	; 0x02
    199c:	ab 83       	std	Y+3, r26	; 0x03
    199e:	bc 83       	std	Y+4, r27	; 0x04
    qb = q1;
    19a0:	c0 90 bb 01 	lds	r12, 0x01BB	; 0x8001bb <q1>
    19a4:	d0 90 bc 01 	lds	r13, 0x01BC	; 0x8001bc <q1+0x1>
    19a8:	e0 90 bd 01 	lds	r14, 0x01BD	; 0x8001bd <q1+0x2>
    19ac:	f0 90 be 01 	lds	r15, 0x01BE	; 0x8001be <q1+0x3>
    qc = q2;
    19b0:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <q2>
    19b4:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <q2+0x1>
    19b8:	a0 91 b9 01 	lds	r26, 0x01B9	; 0x8001b9 <q2+0x2>
    19bc:	b0 91 ba 01 	lds	r27, 0x01BA	; 0x8001ba <q2+0x3>
    19c0:	89 87       	std	Y+9, r24	; 0x09
    19c2:	9a 87       	std	Y+10, r25	; 0x0a
    19c4:	ab 87       	std	Y+11, r26	; 0x0b
    19c6:	bc 87       	std	Y+12, r27	; 0x0c
    q0 += (-qb * gx - qc * gy - q3 * gz);
    19c8:	40 90 b3 01 	lds	r4, 0x01B3	; 0x8001b3 <q3>
    19cc:	50 90 b4 01 	lds	r5, 0x01B4	; 0x8001b4 <q3+0x1>
    19d0:	60 90 b5 01 	lds	r6, 0x01B5	; 0x8001b5 <q3+0x2>
    19d4:	70 90 b6 01 	lds	r7, 0x01B6	; 0x8001b6 <q3+0x3>
    19d8:	c7 01       	movw	r24, r14
    19da:	b6 01       	movw	r22, r12
    19dc:	90 58       	subi	r25, 0x80	; 128
    19de:	2d 81       	ldd	r18, Y+5	; 0x05
    19e0:	3e 81       	ldd	r19, Y+6	; 0x06
    19e2:	4f 81       	ldd	r20, Y+7	; 0x07
    19e4:	58 85       	ldd	r21, Y+8	; 0x08
    19e6:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    19ea:	4b 01       	movw	r8, r22
    19ec:	5c 01       	movw	r10, r24
    19ee:	29 85       	ldd	r18, Y+9	; 0x09
    19f0:	3a 85       	ldd	r19, Y+10	; 0x0a
    19f2:	4b 85       	ldd	r20, Y+11	; 0x0b
    19f4:	5c 85       	ldd	r21, Y+12	; 0x0c
    19f6:	6d 85       	ldd	r22, Y+13	; 0x0d
    19f8:	7e 85       	ldd	r23, Y+14	; 0x0e
    19fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    19fc:	98 89       	ldd	r25, Y+16	; 0x10
    19fe:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    1a02:	9b 01       	movw	r18, r22
    1a04:	ac 01       	movw	r20, r24
    1a06:	c5 01       	movw	r24, r10
    1a08:	b4 01       	movw	r22, r8
    1a0a:	0e 94 81 16 	call	0x2d02	; 0x2d02 <__subsf3>
    1a0e:	4b 01       	movw	r8, r22
    1a10:	5c 01       	movw	r10, r24
    1a12:	a3 01       	movw	r20, r6
    1a14:	92 01       	movw	r18, r4
    1a16:	6d 89       	ldd	r22, Y+21	; 0x15
    1a18:	7e 89       	ldd	r23, Y+22	; 0x16
    1a1a:	8f 89       	ldd	r24, Y+23	; 0x17
    1a1c:	98 8d       	ldd	r25, Y+24	; 0x18
    1a1e:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    1a22:	9b 01       	movw	r18, r22
    1a24:	ac 01       	movw	r20, r24
    1a26:	c5 01       	movw	r24, r10
    1a28:	b4 01       	movw	r22, r8
    1a2a:	0e 94 81 16 	call	0x2d02	; 0x2d02 <__subsf3>
    1a2e:	29 81       	ldd	r18, Y+1	; 0x01
    1a30:	3a 81       	ldd	r19, Y+2	; 0x02
    1a32:	4b 81       	ldd	r20, Y+3	; 0x03
    1a34:	5c 81       	ldd	r21, Y+4	; 0x04
    1a36:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
    1a3a:	6d 8f       	std	Y+29, r22	; 0x1d
    1a3c:	7e 8f       	std	Y+30, r23	; 0x1e
    1a3e:	8f 8f       	std	Y+31, r24	; 0x1f
    1a40:	98 a3       	std	Y+32, r25	; 0x20
    q1 += (qa * gx + qc * gz - q3 * gy);
    1a42:	29 81       	ldd	r18, Y+1	; 0x01
    1a44:	3a 81       	ldd	r19, Y+2	; 0x02
    1a46:	4b 81       	ldd	r20, Y+3	; 0x03
    1a48:	5c 81       	ldd	r21, Y+4	; 0x04
    1a4a:	6d 81       	ldd	r22, Y+5	; 0x05
    1a4c:	7e 81       	ldd	r23, Y+6	; 0x06
    1a4e:	8f 81       	ldd	r24, Y+7	; 0x07
    1a50:	98 85       	ldd	r25, Y+8	; 0x08
    1a52:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    1a56:	4b 01       	movw	r8, r22
    1a58:	5c 01       	movw	r10, r24
    1a5a:	29 85       	ldd	r18, Y+9	; 0x09
    1a5c:	3a 85       	ldd	r19, Y+10	; 0x0a
    1a5e:	4b 85       	ldd	r20, Y+11	; 0x0b
    1a60:	5c 85       	ldd	r21, Y+12	; 0x0c
    1a62:	6d 89       	ldd	r22, Y+21	; 0x15
    1a64:	7e 89       	ldd	r23, Y+22	; 0x16
    1a66:	8f 89       	ldd	r24, Y+23	; 0x17
    1a68:	98 8d       	ldd	r25, Y+24	; 0x18
    1a6a:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    1a6e:	9b 01       	movw	r18, r22
    1a70:	ac 01       	movw	r20, r24
    1a72:	c5 01       	movw	r24, r10
    1a74:	b4 01       	movw	r22, r8
    1a76:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
    1a7a:	4b 01       	movw	r8, r22
    1a7c:	5c 01       	movw	r10, r24
    1a7e:	a3 01       	movw	r20, r6
    1a80:	92 01       	movw	r18, r4
    1a82:	6d 85       	ldd	r22, Y+13	; 0x0d
    1a84:	7e 85       	ldd	r23, Y+14	; 0x0e
    1a86:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a88:	98 89       	ldd	r25, Y+16	; 0x10
    1a8a:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    1a8e:	9b 01       	movw	r18, r22
    1a90:	ac 01       	movw	r20, r24
    1a92:	c5 01       	movw	r24, r10
    1a94:	b4 01       	movw	r22, r8
    1a96:	0e 94 81 16 	call	0x2d02	; 0x2d02 <__subsf3>
    1a9a:	a7 01       	movw	r20, r14
    1a9c:	96 01       	movw	r18, r12
    1a9e:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
    1aa2:	69 8b       	std	Y+17, r22	; 0x11
    1aa4:	7a 8b       	std	Y+18, r23	; 0x12
    1aa6:	8b 8b       	std	Y+19, r24	; 0x13
    1aa8:	9c 8b       	std	Y+20, r25	; 0x14
    q2 += (qa * gy - qb * gz + q3 * gx);
    1aaa:	29 81       	ldd	r18, Y+1	; 0x01
    1aac:	3a 81       	ldd	r19, Y+2	; 0x02
    1aae:	4b 81       	ldd	r20, Y+3	; 0x03
    1ab0:	5c 81       	ldd	r21, Y+4	; 0x04
    1ab2:	6d 85       	ldd	r22, Y+13	; 0x0d
    1ab4:	7e 85       	ldd	r23, Y+14	; 0x0e
    1ab6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ab8:	98 89       	ldd	r25, Y+16	; 0x10
    1aba:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    1abe:	4b 01       	movw	r8, r22
    1ac0:	5c 01       	movw	r10, r24
    1ac2:	a7 01       	movw	r20, r14
    1ac4:	96 01       	movw	r18, r12
    1ac6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ac8:	7e 89       	ldd	r23, Y+22	; 0x16
    1aca:	8f 89       	ldd	r24, Y+23	; 0x17
    1acc:	98 8d       	ldd	r25, Y+24	; 0x18
    1ace:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    1ad2:	9b 01       	movw	r18, r22
    1ad4:	ac 01       	movw	r20, r24
    1ad6:	c5 01       	movw	r24, r10
    1ad8:	b4 01       	movw	r22, r8
    1ada:	0e 94 81 16 	call	0x2d02	; 0x2d02 <__subsf3>
    1ade:	4b 01       	movw	r8, r22
    1ae0:	5c 01       	movw	r10, r24
    1ae2:	a3 01       	movw	r20, r6
    1ae4:	92 01       	movw	r18, r4
    1ae6:	6d 81       	ldd	r22, Y+5	; 0x05
    1ae8:	7e 81       	ldd	r23, Y+6	; 0x06
    1aea:	8f 81       	ldd	r24, Y+7	; 0x07
    1aec:	98 85       	ldd	r25, Y+8	; 0x08
    1aee:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    1af2:	9b 01       	movw	r18, r22
    1af4:	ac 01       	movw	r20, r24
    1af6:	c5 01       	movw	r24, r10
    1af8:	b4 01       	movw	r22, r8
    1afa:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
    1afe:	29 85       	ldd	r18, Y+9	; 0x09
    1b00:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b02:	4b 85       	ldd	r20, Y+11	; 0x0b
    1b04:	5c 85       	ldd	r21, Y+12	; 0x0c
    1b06:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
    1b0a:	4b 01       	movw	r8, r22
    1b0c:	5c 01       	movw	r10, r24
    q3 += (qa * gz + qb * gy - qc * gx);
    1b0e:	29 81       	ldd	r18, Y+1	; 0x01
    1b10:	3a 81       	ldd	r19, Y+2	; 0x02
    1b12:	4b 81       	ldd	r20, Y+3	; 0x03
    1b14:	5c 81       	ldd	r21, Y+4	; 0x04
    1b16:	6d 89       	ldd	r22, Y+21	; 0x15
    1b18:	7e 89       	ldd	r23, Y+22	; 0x16
    1b1a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b1c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b1e:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    1b22:	69 83       	std	Y+1, r22	; 0x01
    1b24:	7a 83       	std	Y+2, r23	; 0x02
    1b26:	8b 83       	std	Y+3, r24	; 0x03
    1b28:	9c 83       	std	Y+4, r25	; 0x04
    1b2a:	a7 01       	movw	r20, r14
    1b2c:	96 01       	movw	r18, r12
    1b2e:	6d 85       	ldd	r22, Y+13	; 0x0d
    1b30:	7e 85       	ldd	r23, Y+14	; 0x0e
    1b32:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b34:	98 89       	ldd	r25, Y+16	; 0x10
    1b36:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    1b3a:	9b 01       	movw	r18, r22
    1b3c:	ac 01       	movw	r20, r24
    1b3e:	69 81       	ldd	r22, Y+1	; 0x01
    1b40:	7a 81       	ldd	r23, Y+2	; 0x02
    1b42:	8b 81       	ldd	r24, Y+3	; 0x03
    1b44:	9c 81       	ldd	r25, Y+4	; 0x04
    1b46:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
    1b4a:	6b 01       	movw	r12, r22
    1b4c:	7c 01       	movw	r14, r24
    1b4e:	29 85       	ldd	r18, Y+9	; 0x09
    1b50:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b52:	4b 85       	ldd	r20, Y+11	; 0x0b
    1b54:	5c 85       	ldd	r21, Y+12	; 0x0c
    1b56:	6d 81       	ldd	r22, Y+5	; 0x05
    1b58:	7e 81       	ldd	r23, Y+6	; 0x06
    1b5a:	8f 81       	ldd	r24, Y+7	; 0x07
    1b5c:	98 85       	ldd	r25, Y+8	; 0x08
    1b5e:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    1b62:	9b 01       	movw	r18, r22
    1b64:	ac 01       	movw	r20, r24
    1b66:	c7 01       	movw	r24, r14
    1b68:	b6 01       	movw	r22, r12
    1b6a:	0e 94 81 16 	call	0x2d02	; 0x2d02 <__subsf3>
    1b6e:	a3 01       	movw	r20, r6
    1b70:	92 01       	movw	r18, r4
    1b72:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
    1b76:	6b 01       	movw	r12, r22
    1b78:	7c 01       	movw	r14, r24

    // Normalise quaternion
    recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
    1b7a:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1b7c:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1b7e:	4f 8d       	ldd	r20, Y+31	; 0x1f
    1b80:	58 a1       	ldd	r21, Y+32	; 0x20
    1b82:	ca 01       	movw	r24, r20
    1b84:	b9 01       	movw	r22, r18
    1b86:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    1b8a:	2b 01       	movw	r4, r22
    1b8c:	3c 01       	movw	r6, r24
    1b8e:	29 89       	ldd	r18, Y+17	; 0x11
    1b90:	3a 89       	ldd	r19, Y+18	; 0x12
    1b92:	4b 89       	ldd	r20, Y+19	; 0x13
    1b94:	5c 89       	ldd	r21, Y+20	; 0x14
    1b96:	ca 01       	movw	r24, r20
    1b98:	b9 01       	movw	r22, r18
    1b9a:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    1b9e:	9b 01       	movw	r18, r22
    1ba0:	ac 01       	movw	r20, r24
    1ba2:	c3 01       	movw	r24, r6
    1ba4:	b2 01       	movw	r22, r4
    1ba6:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
    1baa:	2b 01       	movw	r4, r22
    1bac:	3c 01       	movw	r6, r24
    1bae:	a5 01       	movw	r20, r10
    1bb0:	94 01       	movw	r18, r8
    1bb2:	c5 01       	movw	r24, r10
    1bb4:	b4 01       	movw	r22, r8
    1bb6:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    1bba:	9b 01       	movw	r18, r22
    1bbc:	ac 01       	movw	r20, r24
    1bbe:	c3 01       	movw	r24, r6
    1bc0:	b2 01       	movw	r22, r4
    1bc2:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
    1bc6:	2b 01       	movw	r4, r22
    1bc8:	3c 01       	movw	r6, r24
    1bca:	a7 01       	movw	r20, r14
    1bcc:	96 01       	movw	r18, r12
    1bce:	c7 01       	movw	r24, r14
    1bd0:	b6 01       	movw	r22, r12
    1bd2:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    1bd6:	9b 01       	movw	r18, r22
    1bd8:	ac 01       	movw	r20, r24
    1bda:	c3 01       	movw	r24, r6
    1bdc:	b2 01       	movw	r22, r4
    1bde:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
    1be2:	0e 94 85 02 	call	0x50a	; 0x50a <invSqrt>
    1be6:	2b 01       	movw	r4, r22
    1be8:	3c 01       	movw	r6, r24
    q0 *= recipNorm;
    1bea:	9b 01       	movw	r18, r22
    1bec:	ac 01       	movw	r20, r24
    1bee:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1bf0:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1bf2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1bf4:	98 a1       	ldd	r25, Y+32	; 0x20
    1bf6:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    1bfa:	60 93 bf 01 	sts	0x01BF, r22	; 0x8001bf <q0>
    1bfe:	70 93 c0 01 	sts	0x01C0, r23	; 0x8001c0 <q0+0x1>
    1c02:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <q0+0x2>
    1c06:	90 93 c2 01 	sts	0x01C2, r25	; 0x8001c2 <q0+0x3>
    q1 *= recipNorm;
    1c0a:	a3 01       	movw	r20, r6
    1c0c:	92 01       	movw	r18, r4
    1c0e:	69 89       	ldd	r22, Y+17	; 0x11
    1c10:	7a 89       	ldd	r23, Y+18	; 0x12
    1c12:	8b 89       	ldd	r24, Y+19	; 0x13
    1c14:	9c 89       	ldd	r25, Y+20	; 0x14
    1c16:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    1c1a:	60 93 bb 01 	sts	0x01BB, r22	; 0x8001bb <q1>
    1c1e:	70 93 bc 01 	sts	0x01BC, r23	; 0x8001bc <q1+0x1>
    1c22:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <q1+0x2>
    1c26:	90 93 be 01 	sts	0x01BE, r25	; 0x8001be <q1+0x3>
    q2 *= recipNorm;
    1c2a:	a3 01       	movw	r20, r6
    1c2c:	92 01       	movw	r18, r4
    1c2e:	c5 01       	movw	r24, r10
    1c30:	b4 01       	movw	r22, r8
    1c32:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    1c36:	60 93 b7 01 	sts	0x01B7, r22	; 0x8001b7 <q2>
    1c3a:	70 93 b8 01 	sts	0x01B8, r23	; 0x8001b8 <q2+0x1>
    1c3e:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <q2+0x2>
    1c42:	90 93 ba 01 	sts	0x01BA, r25	; 0x8001ba <q2+0x3>
    q3 *= recipNorm;
    1c46:	a3 01       	movw	r20, r6
    1c48:	92 01       	movw	r18, r4
    1c4a:	c7 01       	movw	r24, r14
    1c4c:	b6 01       	movw	r22, r12
    1c4e:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    1c52:	60 93 b3 01 	sts	0x01B3, r22	; 0x8001b3 <q3>
    1c56:	70 93 b4 01 	sts	0x01B4, r23	; 0x8001b4 <q3+0x1>
    1c5a:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <q3+0x2>
    1c5e:	90 93 b6 01 	sts	0x01B6, r25	; 0x8001b6 <q3+0x3>
    anglesComputed = 0;
    1c62:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <__data_end>
}
    1c66:	cc 5a       	subi	r28, 0xAC	; 172
    1c68:	df 4f       	sbci	r29, 0xFF	; 255
    1c6a:	0f b6       	in	r0, 0x3f	; 63
    1c6c:	f8 94       	cli
    1c6e:	de bf       	out	0x3e, r29	; 62
    1c70:	0f be       	out	0x3f, r0	; 63
    1c72:	cd bf       	out	0x3d, r28	; 61
    1c74:	df 91       	pop	r29
    1c76:	cf 91       	pop	r28
    1c78:	1f 91       	pop	r17
    1c7a:	0f 91       	pop	r16
    1c7c:	ff 90       	pop	r15
    1c7e:	ef 90       	pop	r14
    1c80:	df 90       	pop	r13
    1c82:	cf 90       	pop	r12
    1c84:	bf 90       	pop	r11
    1c86:	af 90       	pop	r10
    1c88:	9f 90       	pop	r9
    1c8a:	8f 90       	pop	r8
    1c8c:	7f 90       	pop	r7
    1c8e:	6f 90       	pop	r6
    1c90:	5f 90       	pop	r5
    1c92:	4f 90       	pop	r4
    1c94:	3f 90       	pop	r3
    1c96:	2f 90       	pop	r2
    1c98:	08 95       	ret

00001c9a <computeAngles>:
}

//-------------------------------------------------------------------------------------------

void computeAngles()
{
    1c9a:	4f 92       	push	r4
    1c9c:	5f 92       	push	r5
    1c9e:	6f 92       	push	r6
    1ca0:	7f 92       	push	r7
    1ca2:	8f 92       	push	r8
    1ca4:	9f 92       	push	r9
    1ca6:	af 92       	push	r10
    1ca8:	bf 92       	push	r11
    1caa:	cf 92       	push	r12
    1cac:	df 92       	push	r13
    1cae:	ef 92       	push	r14
    1cb0:	ff 92       	push	r15
    1cb2:	cf 93       	push	r28
    1cb4:	df 93       	push	r29
    1cb6:	cd b7       	in	r28, 0x3d	; 61
    1cb8:	de b7       	in	r29, 0x3e	; 62
    1cba:	60 97       	sbiw	r28, 0x10	; 16
    1cbc:	0f b6       	in	r0, 0x3f	; 63
    1cbe:	f8 94       	cli
    1cc0:	de bf       	out	0x3e, r29	; 62
    1cc2:	0f be       	out	0x3f, r0	; 63
    1cc4:	cd bf       	out	0x3d, r28	; 61
    roll = atan2f(q0*q1 + q2*q3, 0.5f - q1*q1 - q2*q2);
    1cc6:	80 90 bb 01 	lds	r8, 0x01BB	; 0x8001bb <q1>
    1cca:	90 90 bc 01 	lds	r9, 0x01BC	; 0x8001bc <q1+0x1>
    1cce:	a0 90 bd 01 	lds	r10, 0x01BD	; 0x8001bd <q1+0x2>
    1cd2:	b0 90 be 01 	lds	r11, 0x01BE	; 0x8001be <q1+0x3>
    1cd6:	40 90 b7 01 	lds	r4, 0x01B7	; 0x8001b7 <q2>
    1cda:	50 90 b8 01 	lds	r5, 0x01B8	; 0x8001b8 <q2+0x1>
    1cde:	60 90 b9 01 	lds	r6, 0x01B9	; 0x8001b9 <q2+0x2>
    1ce2:	70 90 ba 01 	lds	r7, 0x01BA	; 0x8001ba <q2+0x3>
    1ce6:	a3 01       	movw	r20, r6
    1ce8:	92 01       	movw	r18, r4
    1cea:	c3 01       	movw	r24, r6
    1cec:	b2 01       	movw	r22, r4
    1cee:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    1cf2:	69 83       	std	Y+1, r22	; 0x01
    1cf4:	7a 83       	std	Y+2, r23	; 0x02
    1cf6:	8b 83       	std	Y+3, r24	; 0x03
    1cf8:	9c 83       	std	Y+4, r25	; 0x04
    1cfa:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <q0>
    1cfe:	90 91 c0 01 	lds	r25, 0x01C0	; 0x8001c0 <q0+0x1>
    1d02:	a0 91 c1 01 	lds	r26, 0x01C1	; 0x8001c1 <q0+0x2>
    1d06:	b0 91 c2 01 	lds	r27, 0x01C2	; 0x8001c2 <q0+0x3>
    1d0a:	8d 83       	std	Y+5, r24	; 0x05
    1d0c:	9e 83       	std	Y+6, r25	; 0x06
    1d0e:	af 83       	std	Y+7, r26	; 0x07
    1d10:	b8 87       	std	Y+8, r27	; 0x08
    1d12:	c0 90 b3 01 	lds	r12, 0x01B3	; 0x8001b3 <q3>
    1d16:	d0 90 b4 01 	lds	r13, 0x01B4	; 0x8001b4 <q3+0x1>
    1d1a:	e0 90 b5 01 	lds	r14, 0x01B5	; 0x8001b5 <q3+0x2>
    1d1e:	f0 90 b6 01 	lds	r15, 0x01B6	; 0x8001b6 <q3+0x3>
    1d22:	a5 01       	movw	r20, r10
    1d24:	94 01       	movw	r18, r8
    1d26:	c5 01       	movw	r24, r10
    1d28:	b4 01       	movw	r22, r8
    1d2a:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    1d2e:	9b 01       	movw	r18, r22
    1d30:	ac 01       	movw	r20, r24
    1d32:	60 e0       	ldi	r22, 0x00	; 0
    1d34:	70 e0       	ldi	r23, 0x00	; 0
    1d36:	80 e0       	ldi	r24, 0x00	; 0
    1d38:	9f e3       	ldi	r25, 0x3F	; 63
    1d3a:	0e 94 81 16 	call	0x2d02	; 0x2d02 <__subsf3>
    1d3e:	29 81       	ldd	r18, Y+1	; 0x01
    1d40:	3a 81       	ldd	r19, Y+2	; 0x02
    1d42:	4b 81       	ldd	r20, Y+3	; 0x03
    1d44:	5c 81       	ldd	r21, Y+4	; 0x04
    1d46:	0e 94 81 16 	call	0x2d02	; 0x2d02 <__subsf3>
    1d4a:	69 87       	std	Y+9, r22	; 0x09
    1d4c:	7a 87       	std	Y+10, r23	; 0x0a
    1d4e:	8b 87       	std	Y+11, r24	; 0x0b
    1d50:	9c 87       	std	Y+12, r25	; 0x0c
    1d52:	2d 81       	ldd	r18, Y+5	; 0x05
    1d54:	3e 81       	ldd	r19, Y+6	; 0x06
    1d56:	4f 81       	ldd	r20, Y+7	; 0x07
    1d58:	58 85       	ldd	r21, Y+8	; 0x08
    1d5a:	c5 01       	movw	r24, r10
    1d5c:	b4 01       	movw	r22, r8
    1d5e:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    1d62:	6d 87       	std	Y+13, r22	; 0x0d
    1d64:	7e 87       	std	Y+14, r23	; 0x0e
    1d66:	8f 87       	std	Y+15, r24	; 0x0f
    1d68:	98 8b       	std	Y+16, r25	; 0x10
    1d6a:	a7 01       	movw	r20, r14
    1d6c:	96 01       	movw	r18, r12
    1d6e:	c3 01       	movw	r24, r6
    1d70:	b2 01       	movw	r22, r4
    1d72:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    1d76:	9b 01       	movw	r18, r22
    1d78:	ac 01       	movw	r20, r24
    1d7a:	6d 85       	ldd	r22, Y+13	; 0x0d
    1d7c:	7e 85       	ldd	r23, Y+14	; 0x0e
    1d7e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d80:	98 89       	ldd	r25, Y+16	; 0x10
    1d82:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
    1d86:	29 85       	ldd	r18, Y+9	; 0x09
    1d88:	3a 85       	ldd	r19, Y+10	; 0x0a
    1d8a:	4b 85       	ldd	r20, Y+11	; 0x0b
    1d8c:	5c 85       	ldd	r21, Y+12	; 0x0c
    1d8e:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <atan2>
    1d92:	60 93 9f 01 	sts	0x019F, r22	; 0x80019f <roll>
    1d96:	70 93 a0 01 	sts	0x01A0, r23	; 0x8001a0 <roll+0x1>
    1d9a:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <roll+0x2>
    1d9e:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <roll+0x3>
    pitch = asinf(-2.0f * (q1*q3 - q0*q2));
    1da2:	a7 01       	movw	r20, r14
    1da4:	96 01       	movw	r18, r12
    1da6:	c5 01       	movw	r24, r10
    1da8:	b4 01       	movw	r22, r8
    1daa:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    1dae:	69 87       	std	Y+9, r22	; 0x09
    1db0:	7a 87       	std	Y+10, r23	; 0x0a
    1db2:	8b 87       	std	Y+11, r24	; 0x0b
    1db4:	9c 87       	std	Y+12, r25	; 0x0c
    1db6:	2d 81       	ldd	r18, Y+5	; 0x05
    1db8:	3e 81       	ldd	r19, Y+6	; 0x06
    1dba:	4f 81       	ldd	r20, Y+7	; 0x07
    1dbc:	58 85       	ldd	r21, Y+8	; 0x08
    1dbe:	c3 01       	movw	r24, r6
    1dc0:	b2 01       	movw	r22, r4
    1dc2:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    1dc6:	9b 01       	movw	r18, r22
    1dc8:	ac 01       	movw	r20, r24
    1dca:	69 85       	ldd	r22, Y+9	; 0x09
    1dcc:	7a 85       	ldd	r23, Y+10	; 0x0a
    1dce:	8b 85       	ldd	r24, Y+11	; 0x0b
    1dd0:	9c 85       	ldd	r25, Y+12	; 0x0c
    1dd2:	0e 94 81 16 	call	0x2d02	; 0x2d02 <__subsf3>
    1dd6:	20 e0       	ldi	r18, 0x00	; 0
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	40 e0       	ldi	r20, 0x00	; 0
    1ddc:	50 ec       	ldi	r21, 0xC0	; 192
    1dde:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    1de2:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <asin>
    1de6:	60 93 9b 01 	sts	0x019B, r22	; 0x80019b <pitch>
    1dea:	70 93 9c 01 	sts	0x019C, r23	; 0x80019c <pitch+0x1>
    1dee:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <pitch+0x2>
    1df2:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <pitch+0x3>
    yaw = atan2f(q1*q2 + q0*q3, 0.5f - q2*q2 - q3*q3);
    1df6:	29 81       	ldd	r18, Y+1	; 0x01
    1df8:	3a 81       	ldd	r19, Y+2	; 0x02
    1dfa:	4b 81       	ldd	r20, Y+3	; 0x03
    1dfc:	5c 81       	ldd	r21, Y+4	; 0x04
    1dfe:	60 e0       	ldi	r22, 0x00	; 0
    1e00:	70 e0       	ldi	r23, 0x00	; 0
    1e02:	80 e0       	ldi	r24, 0x00	; 0
    1e04:	9f e3       	ldi	r25, 0x3F	; 63
    1e06:	0e 94 81 16 	call	0x2d02	; 0x2d02 <__subsf3>
    1e0a:	69 83       	std	Y+1, r22	; 0x01
    1e0c:	7a 83       	std	Y+2, r23	; 0x02
    1e0e:	8b 83       	std	Y+3, r24	; 0x03
    1e10:	9c 83       	std	Y+4, r25	; 0x04
    1e12:	a7 01       	movw	r20, r14
    1e14:	96 01       	movw	r18, r12
    1e16:	c7 01       	movw	r24, r14
    1e18:	b6 01       	movw	r22, r12
    1e1a:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    1e1e:	9b 01       	movw	r18, r22
    1e20:	ac 01       	movw	r20, r24
    1e22:	69 81       	ldd	r22, Y+1	; 0x01
    1e24:	7a 81       	ldd	r23, Y+2	; 0x02
    1e26:	8b 81       	ldd	r24, Y+3	; 0x03
    1e28:	9c 81       	ldd	r25, Y+4	; 0x04
    1e2a:	0e 94 81 16 	call	0x2d02	; 0x2d02 <__subsf3>
    1e2e:	69 83       	std	Y+1, r22	; 0x01
    1e30:	7a 83       	std	Y+2, r23	; 0x02
    1e32:	8b 83       	std	Y+3, r24	; 0x03
    1e34:	9c 83       	std	Y+4, r25	; 0x04
    1e36:	a3 01       	movw	r20, r6
    1e38:	92 01       	movw	r18, r4
    1e3a:	c5 01       	movw	r24, r10
    1e3c:	b4 01       	movw	r22, r8
    1e3e:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    1e42:	4b 01       	movw	r8, r22
    1e44:	5c 01       	movw	r10, r24
    1e46:	a7 01       	movw	r20, r14
    1e48:	96 01       	movw	r18, r12
    1e4a:	6d 81       	ldd	r22, Y+5	; 0x05
    1e4c:	7e 81       	ldd	r23, Y+6	; 0x06
    1e4e:	8f 81       	ldd	r24, Y+7	; 0x07
    1e50:	98 85       	ldd	r25, Y+8	; 0x08
    1e52:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    1e56:	9b 01       	movw	r18, r22
    1e58:	ac 01       	movw	r20, r24
    1e5a:	c5 01       	movw	r24, r10
    1e5c:	b4 01       	movw	r22, r8
    1e5e:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
    1e62:	29 81       	ldd	r18, Y+1	; 0x01
    1e64:	3a 81       	ldd	r19, Y+2	; 0x02
    1e66:	4b 81       	ldd	r20, Y+3	; 0x03
    1e68:	5c 81       	ldd	r21, Y+4	; 0x04
    1e6a:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <atan2>
    1e6e:	60 93 97 01 	sts	0x0197, r22	; 0x800197 <yaw>
    1e72:	70 93 98 01 	sts	0x0198, r23	; 0x800198 <yaw+0x1>
    1e76:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <yaw+0x2>
    1e7a:	90 93 9a 01 	sts	0x019A, r25	; 0x80019a <yaw+0x3>
    anglesComputed = 1;
    1e7e:	81 e0       	ldi	r24, 0x01	; 1
    1e80:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <__data_end>
}
    1e84:	60 96       	adiw	r28, 0x10	; 16
    1e86:	0f b6       	in	r0, 0x3f	; 63
    1e88:	f8 94       	cli
    1e8a:	de bf       	out	0x3e, r29	; 62
    1e8c:	0f be       	out	0x3f, r0	; 63
    1e8e:	cd bf       	out	0x3d, r28	; 61
    1e90:	df 91       	pop	r29
    1e92:	cf 91       	pop	r28
    1e94:	ff 90       	pop	r15
    1e96:	ef 90       	pop	r14
    1e98:	df 90       	pop	r13
    1e9a:	cf 90       	pop	r12
    1e9c:	bf 90       	pop	r11
    1e9e:	af 90       	pop	r10
    1ea0:	9f 90       	pop	r9
    1ea2:	8f 90       	pop	r8
    1ea4:	7f 90       	pop	r7
    1ea6:	6f 90       	pop	r6
    1ea8:	5f 90       	pop	r5
    1eaa:	4f 90       	pop	r4
    1eac:	08 95       	ret

00001eae <getRoll>:

float getRoll() {
    if (!anglesComputed) computeAngles();
    1eae:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <__data_end>
    1eb2:	81 11       	cpse	r24, r1
    1eb4:	02 c0       	rjmp	.+4      	; 0x1eba <getRoll+0xc>
    1eb6:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <computeAngles>
    return roll * 57.29578f;
    1eba:	21 ee       	ldi	r18, 0xE1	; 225
    1ebc:	3e e2       	ldi	r19, 0x2E	; 46
    1ebe:	45 e6       	ldi	r20, 0x65	; 101
    1ec0:	52 e4       	ldi	r21, 0x42	; 66
    1ec2:	60 91 9f 01 	lds	r22, 0x019F	; 0x80019f <roll>
    1ec6:	70 91 a0 01 	lds	r23, 0x01A0	; 0x8001a0 <roll+0x1>
    1eca:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <roll+0x2>
    1ece:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <roll+0x3>
    1ed2:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
}
    1ed6:	08 95       	ret

00001ed8 <getPitch>:
float getPitch() {
    if (!anglesComputed) computeAngles();
    1ed8:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <__data_end>
    1edc:	81 11       	cpse	r24, r1
    1ede:	02 c0       	rjmp	.+4      	; 0x1ee4 <getPitch+0xc>
    1ee0:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <computeAngles>
    return pitch * 57.29578f;
    1ee4:	21 ee       	ldi	r18, 0xE1	; 225
    1ee6:	3e e2       	ldi	r19, 0x2E	; 46
    1ee8:	45 e6       	ldi	r20, 0x65	; 101
    1eea:	52 e4       	ldi	r21, 0x42	; 66
    1eec:	60 91 9b 01 	lds	r22, 0x019B	; 0x80019b <pitch>
    1ef0:	70 91 9c 01 	lds	r23, 0x019C	; 0x80019c <pitch+0x1>
    1ef4:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <pitch+0x2>
    1ef8:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <pitch+0x3>
    1efc:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
}
    1f00:	08 95       	ret

00001f02 <getYaw>:
float getYaw() {
    if (!anglesComputed) computeAngles();
    1f02:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <__data_end>
    1f06:	81 11       	cpse	r24, r1
    1f08:	02 c0       	rjmp	.+4      	; 0x1f0e <getYaw+0xc>
    1f0a:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <computeAngles>
    return yaw * 57.29578f + 180.0f;
    1f0e:	21 ee       	ldi	r18, 0xE1	; 225
    1f10:	3e e2       	ldi	r19, 0x2E	; 46
    1f12:	45 e6       	ldi	r20, 0x65	; 101
    1f14:	52 e4       	ldi	r21, 0x42	; 66
    1f16:	60 91 97 01 	lds	r22, 0x0197	; 0x800197 <yaw>
    1f1a:	70 91 98 01 	lds	r23, 0x0198	; 0x800198 <yaw+0x1>
    1f1e:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <yaw+0x2>
    1f22:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <yaw+0x3>
    1f26:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    1f2a:	20 e0       	ldi	r18, 0x00	; 0
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	44 e3       	ldi	r20, 0x34	; 52
    1f30:	53 e4       	ldi	r21, 0x43	; 67
    1f32:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__addsf3>
}
    1f36:	08 95       	ret

00001f38 <on_receive>:
void calibrate_gyro_accel(void);
void on_receive(int num_bytes);
void on_request();

void on_receive(int num_bytes)
{
    1f38:	cf 93       	push	r28
    1f3a:	df 93       	push	r29
    twi_request_address = wire_read();
    1f3c:	0e 94 0b 1b 	call	0x3616	; 0x3616 <wire_read>
    1f40:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <twi_request_address>
    for (; wire_available() && twi_request_address < REGISTER_LENGTH; twi_request_address++)
    1f44:	0b c0       	rjmp	.+22     	; 0x1f5c <on_receive+0x24>
    { REGISTER[twi_request_address] = wire_read(); }
    1f46:	d0 e0       	ldi	r29, 0x00	; 0
    1f48:	0e 94 0b 1b 	call	0x3616	; 0x3616 <wire_read>
    1f4c:	c4 53       	subi	r28, 0x34	; 52
    1f4e:	de 4f       	sbci	r29, 0xFE	; 254
    1f50:	88 83       	st	Y, r24
void on_request();

void on_receive(int num_bytes)
{
    twi_request_address = wire_read();
    for (; wire_available() && twi_request_address < REGISTER_LENGTH; twi_request_address++)
    1f52:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <twi_request_address>
    1f56:	8f 5f       	subi	r24, 0xFF	; 255
    1f58:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <twi_request_address>
    1f5c:	0e 94 03 1b 	call	0x3606	; 0x3606 <wire_available>
    1f60:	89 2b       	or	r24, r25
    1f62:	21 f0       	breq	.+8      	; 0x1f6c <on_receive+0x34>
    1f64:	c0 91 cb 01 	lds	r28, 0x01CB	; 0x8001cb <twi_request_address>
    1f68:	cd 30       	cpi	r28, 0x0D	; 13
    1f6a:	68 f3       	brcs	.-38     	; 0x1f46 <on_receive+0xe>
    { REGISTER[twi_request_address] = wire_read(); }
}
    1f6c:	df 91       	pop	r29
    1f6e:	cf 91       	pop	r28
    1f70:	08 95       	ret

00001f72 <on_request>:

void on_request()
{
    for (;wire_get_status() == TWI_STX && twi_request_address < REGISTER_LENGTH; twi_request_address++)
    1f72:	0b c0       	rjmp	.+22     	; 0x1f8a <on_request+0x18>
    { wire_write(REGISTER[twi_request_address]); }
    1f74:	f0 e0       	ldi	r31, 0x00	; 0
    1f76:	e4 53       	subi	r30, 0x34	; 52
    1f78:	fe 4f       	sbci	r31, 0xFE	; 254
    1f7a:	80 81       	ld	r24, Z
    1f7c:	0e 94 8f 1a 	call	0x351e	; 0x351e <wire_write>
    { REGISTER[twi_request_address] = wire_read(); }
}

void on_request()
{
    for (;wire_get_status() == TWI_STX && twi_request_address < REGISTER_LENGTH; twi_request_address++)
    1f80:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <twi_request_address>
    1f84:	8f 5f       	subi	r24, 0xFF	; 255
    1f86:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <twi_request_address>
    1f8a:	0e 94 6f 1a 	call	0x34de	; 0x34de <wire_get_status>
    1f8e:	84 30       	cpi	r24, 0x04	; 4
    1f90:	21 f4       	brne	.+8      	; 0x1f9a <on_request+0x28>
    1f92:	e0 91 cb 01 	lds	r30, 0x01CB	; 0x8001cb <twi_request_address>
    1f96:	ed 30       	cpi	r30, 0x0D	; 13
    1f98:	68 f3       	brcs	.-38     	; 0x1f74 <on_request+0x2>
    1f9a:	08 95       	ret

00001f9c <calibrate_gyro_accel>:
    { wire_write(REGISTER[twi_request_address]); }
}

void calibrate_gyro_accel(void)
{
    1f9c:	0f 93       	push	r16
    1f9e:	1f 93       	push	r17
    1fa0:	cf 93       	push	r28
    1fa2:	df 93       	push	r29
    1fa4:	cd b7       	in	r28, 0x3d	; 61
    1fa6:	de b7       	in	r29, 0x3e	; 62
    1fa8:	2c 97       	sbiw	r28, 0x0c	; 12
    1faa:	0f b6       	in	r0, 0x3f	; 63
    1fac:	f8 94       	cli
    1fae:	de bf       	out	0x3e, r29	; 62
    1fb0:	0f be       	out	0x3f, r0	; 63
    1fb2:	cd bf       	out	0x3d, r28	; 61
    int16_t values[6] = {0};
    1fb4:	8e 01       	movw	r16, r28
    1fb6:	0f 5f       	subi	r16, 0xFF	; 255
    1fb8:	1f 4f       	sbci	r17, 0xFF	; 255
    1fba:	8c e0       	ldi	r24, 0x0C	; 12
    1fbc:	f8 01       	movw	r30, r16
    1fbe:	11 92       	st	Z+, r1
    1fc0:	8a 95       	dec	r24
    1fc2:	e9 f7       	brne	.-6      	; 0x1fbe <calibrate_gyro_accel+0x22>
    
    #if DEBUG
    uart_puts("mpu6050 running calibration\n");
    1fc4:	80 e0       	ldi	r24, 0x00	; 0
    1fc6:	91 e0       	ldi	r25, 0x01	; 1
    1fc8:	0e 94 9c 1f 	call	0x3f38	; 0x3f38 <uart_puts>
    #endif
    
    mpu6050_run_calibration(values);
    1fcc:	c8 01       	movw	r24, r16
    1fce:	0e 94 48 16 	call	0x2c90	; 0x2c90 <mpu6050_run_calibration>
    save_mpu6050_calibration(values);
    1fd2:	c8 01       	movw	r24, r16
    1fd4:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <save_mpu6050_calibration>
    
    #if DEBUG
    uart_puts("mpu6050 calibration done\n");
    1fd8:	8d e1       	ldi	r24, 0x1D	; 29
    1fda:	91 e0       	ldi	r25, 0x01	; 1
    1fdc:	0e 94 9c 1f 	call	0x3f38	; 0x3f38 <uart_puts>
    #endif
    
    fetch_mpu6050_calibration(values);
    1fe0:	c8 01       	movw	r24, r16
    1fe2:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <fetch_mpu6050_calibration>
    mpu6050_set_x_accel_offset(values[0]);
    1fe6:	89 81       	ldd	r24, Y+1	; 0x01
    1fe8:	9a 81       	ldd	r25, Y+2	; 0x02
    1fea:	0e 94 9f 13 	call	0x273e	; 0x273e <mpu6050_set_x_accel_offset>
    mpu6050_set_y_accel_offset(values[1]);
    1fee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff2:	0e 94 a5 13 	call	0x274a	; 0x274a <mpu6050_set_y_accel_offset>
    mpu6050_set_z_accel_offset(values[2]);
    1ff6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff8:	9e 81       	ldd	r25, Y+6	; 0x06
    1ffa:	0e 94 ab 13 	call	0x2756	; 0x2756 <mpu6050_set_z_accel_offset>
    
    mpu6050_set_x_gyro_offset(values[3]);
    1ffe:	8f 81       	ldd	r24, Y+7	; 0x07
    2000:	98 85       	ldd	r25, Y+8	; 0x08
    2002:	0e 94 b1 13 	call	0x2762	; 0x2762 <mpu6050_set_x_gyro_offset>
    mpu6050_set_y_gyro_offset(values[4]);
    2006:	89 85       	ldd	r24, Y+9	; 0x09
    2008:	9a 85       	ldd	r25, Y+10	; 0x0a
    200a:	0e 94 b7 13 	call	0x276e	; 0x276e <mpu6050_set_y_gyro_offset>
    mpu6050_set_z_gyro_offset(values[5]);
    200e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2010:	9c 85       	ldd	r25, Y+12	; 0x0c
    2012:	0e 94 bd 13 	call	0x277a	; 0x277a <mpu6050_set_z_gyro_offset>
}
    2016:	2c 96       	adiw	r28, 0x0c	; 12
    2018:	0f b6       	in	r0, 0x3f	; 63
    201a:	f8 94       	cli
    201c:	de bf       	out	0x3e, r29	; 62
    201e:	0f be       	out	0x3f, r0	; 63
    2020:	cd bf       	out	0x3d, r28	; 61
    2022:	df 91       	pop	r29
    2024:	cf 91       	pop	r28
    2026:	1f 91       	pop	r17
    2028:	0f 91       	pop	r16
    202a:	08 95       	ret

0000202c <setup>:

void setup(void)
{
    202c:	cf 93       	push	r28
    202e:	df 93       	push	r29
    2030:	cd b7       	in	r28, 0x3d	; 61
    2032:	de b7       	in	r29, 0x3e	; 62
    2034:	2c 97       	sbiw	r28, 0x0c	; 12
    2036:	0f b6       	in	r0, 0x3f	; 63
    2038:	f8 94       	cli
    203a:	de bf       	out	0x3e, r29	; 62
    203c:	0f be       	out	0x3f, r0	; 63
    203e:	cd bf       	out	0x3d, r28	; 61
    DDRB |= (1 << PB5);
    2040:	25 9a       	sbi	0x04, 5	; 4
    
    REGISTER[IMU_STATUS_ADDRESS] = IMU_STATUS_INITIALIZING;
    2042:	81 e0       	ldi	r24, 0x01	; 1
    2044:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <REGISTER>
    
    sei();
    2048:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    204a:	2f ef       	ldi	r18, 0xFF	; 255
    204c:	81 ee       	ldi	r24, 0xE1	; 225
    204e:	94 e0       	ldi	r25, 0x04	; 4
    2050:	21 50       	subi	r18, 0x01	; 1
    2052:	80 40       	sbci	r24, 0x00	; 0
    2054:	90 40       	sbci	r25, 0x00	; 0
    2056:	e1 f7       	brne	.-8      	; 0x2050 <setup+0x24>
    2058:	00 c0       	rjmp	.+0      	; 0x205a <setup+0x2e>
    205a:	00 00       	nop
    
    _delay_ms(100);
    
    init_millis(F_CPU);
    205c:	60 e0       	ldi	r22, 0x00	; 0
    205e:	74 e2       	ldi	r23, 0x24	; 36
    2060:	84 ef       	ldi	r24, 0xF4	; 244
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	0e 94 fd 19 	call	0x33fa	; 0x33fa <init_millis>
    wire_init();
    2068:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <wire_init>
    wire_set_address(IMU_TWI_ADDRESS);
    206c:	81 e0       	ldi	r24, 0x01	; 1
    206e:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <wire_set_address>
    wire_set_on_receive(on_receive);
    2072:	8c e9       	ldi	r24, 0x9C	; 156
    2074:	9f e0       	ldi	r25, 0x0F	; 15
    2076:	0e 94 1f 1b 	call	0x363e	; 0x363e <wire_set_on_receive>
    wire_set_on_request(on_request);
    207a:	89 eb       	ldi	r24, 0xB9	; 185
    207c:	9f e0       	ldi	r25, 0x0F	; 15
    207e:	0e 94 24 1b 	call	0x3648	; 0x3648 <wire_set_on_request>
    
    #ifdef DEBUG
    uart_init(UART_BAUD_SELECT(UART_BAUD_RATE, F_CPU));
    2082:	80 e1       	ldi	r24, 0x10	; 16
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <uart_init>
    208a:	ef ef       	ldi	r30, 0xFF	; 255
    208c:	f1 ee       	ldi	r31, 0xE1	; 225
    208e:	24 e0       	ldi	r18, 0x04	; 4
    2090:	e1 50       	subi	r30, 0x01	; 1
    2092:	f0 40       	sbci	r31, 0x00	; 0
    2094:	20 40       	sbci	r18, 0x00	; 0
    2096:	e1 f7       	brne	.-8      	; 0x2090 <setup+0x64>
    2098:	00 c0       	rjmp	.+0      	; 0x209a <setup+0x6e>
    209a:	00 00       	nop
    #endif
    
    _delay_ms(100);
    
    #ifdef DEBUG
    int16_t mpu6050_offset_values[6] = {0};
    209c:	ce 01       	movw	r24, r28
    209e:	01 96       	adiw	r24, 0x01	; 1
    20a0:	2c e0       	ldi	r18, 0x0C	; 12
    20a2:	fc 01       	movw	r30, r24
    20a4:	11 92       	st	Z+, r1
    20a6:	2a 95       	dec	r18
    20a8:	e9 f7       	brne	.-6      	; 0x20a4 <setup+0x78>
    fetch_mpu6050_calibration(mpu6050_offset_values);
    20aa:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <fetch_mpu6050_calibration>
    sprintf(
    20ae:	8c 85       	ldd	r24, Y+12	; 0x0c
    20b0:	8f 93       	push	r24
    20b2:	8b 85       	ldd	r24, Y+11	; 0x0b
    20b4:	8f 93       	push	r24
    20b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    20b8:	8f 93       	push	r24
    20ba:	89 85       	ldd	r24, Y+9	; 0x09
    20bc:	8f 93       	push	r24
    20be:	88 85       	ldd	r24, Y+8	; 0x08
    20c0:	8f 93       	push	r24
    20c2:	8f 81       	ldd	r24, Y+7	; 0x07
    20c4:	8f 93       	push	r24
    20c6:	8e 81       	ldd	r24, Y+6	; 0x06
    20c8:	8f 93       	push	r24
    20ca:	8d 81       	ldd	r24, Y+5	; 0x05
    20cc:	8f 93       	push	r24
    20ce:	8c 81       	ldd	r24, Y+4	; 0x04
    20d0:	8f 93       	push	r24
    20d2:	8b 81       	ldd	r24, Y+3	; 0x03
    20d4:	8f 93       	push	r24
    20d6:	8a 81       	ldd	r24, Y+2	; 0x02
    20d8:	8f 93       	push	r24
    20da:	89 81       	ldd	r24, Y+1	; 0x01
    20dc:	8f 93       	push	r24
    20de:	87 e3       	ldi	r24, 0x37	; 55
    20e0:	91 e0       	ldi	r25, 0x01	; 1
    20e2:	9f 93       	push	r25
    20e4:	8f 93       	push	r24
    20e6:	8b ed       	ldi	r24, 0xDB	; 219
    20e8:	91 e0       	ldi	r25, 0x01	; 1
    20ea:	9f 93       	push	r25
    20ec:	8f 93       	push	r24
    20ee:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <sprintf>
    mpu6050_offset_values[2],
    mpu6050_offset_values[3],
    mpu6050_offset_values[4],
    mpu6050_offset_values[5]
    );
    uart_puts(BUFFER);
    20f2:	8b ed       	ldi	r24, 0xDB	; 219
    20f4:	91 e0       	ldi	r25, 0x01	; 1
    20f6:	0e 94 9c 1f 	call	0x3f38	; 0x3f38 <uart_puts>
    uart_puts("setup done\n");
    20fa:	85 e6       	ldi	r24, 0x65	; 101
    20fc:	91 e0       	ldi	r25, 0x01	; 1
    20fe:	0e 94 9c 1f 	call	0x3f38	; 0x3f38 <uart_puts>
    #endif
}
    2102:	0f b6       	in	r0, 0x3f	; 63
    2104:	f8 94       	cli
    2106:	de bf       	out	0x3e, r29	; 62
    2108:	0f be       	out	0x3f, r0	; 63
    210a:	cd bf       	out	0x3d, r28	; 61
    210c:	2c 96       	adiw	r28, 0x0c	; 12
    210e:	0f b6       	in	r0, 0x3f	; 63
    2110:	f8 94       	cli
    2112:	de bf       	out	0x3e, r29	; 62
    2114:	0f be       	out	0x3f, r0	; 63
    2116:	cd bf       	out	0x3d, r28	; 61
    2118:	df 91       	pop	r29
    211a:	cf 91       	pop	r28
    211c:	08 95       	ret

0000211e <setup_sensors>:

void setup_sensors(void)
{
    211e:	cf 93       	push	r28
    2120:	df 93       	push	r29
    2122:	cd b7       	in	r28, 0x3d	; 61
    2124:	de b7       	in	r29, 0x3e	; 62
    2126:	2c 97       	sbiw	r28, 0x0c	; 12
    2128:	0f b6       	in	r0, 0x3f	; 63
    212a:	f8 94       	cli
    212c:	de bf       	out	0x3e, r29	; 62
    212e:	0f be       	out	0x3f, r0	; 63
    2130:	cd bf       	out	0x3d, r28	; 61
    mpu6050_initialize();
    2132:	0e 94 18 13 	call	0x2630	; 0x2630 <mpu6050_initialize>
    int16_t values[6] = {0};
    2136:	ce 01       	movw	r24, r28
    2138:	01 96       	adiw	r24, 0x01	; 1
    213a:	2c e0       	ldi	r18, 0x0C	; 12
    213c:	fc 01       	movw	r30, r24
    213e:	11 92       	st	Z+, r1
    2140:	2a 95       	dec	r18
    2142:	e9 f7       	brne	.-6      	; 0x213e <setup_sensors+0x20>
    
    fetch_mpu6050_calibration(values);
    2144:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <fetch_mpu6050_calibration>
    mpu6050_set_x_accel_offset(values[0]);
    2148:	89 81       	ldd	r24, Y+1	; 0x01
    214a:	9a 81       	ldd	r25, Y+2	; 0x02
    214c:	0e 94 9f 13 	call	0x273e	; 0x273e <mpu6050_set_x_accel_offset>
    mpu6050_set_y_accel_offset(values[1]);
    2150:	8b 81       	ldd	r24, Y+3	; 0x03
    2152:	9c 81       	ldd	r25, Y+4	; 0x04
    2154:	0e 94 a5 13 	call	0x274a	; 0x274a <mpu6050_set_y_accel_offset>
    mpu6050_set_z_accel_offset(values[2]);
    2158:	8d 81       	ldd	r24, Y+5	; 0x05
    215a:	9e 81       	ldd	r25, Y+6	; 0x06
    215c:	0e 94 ab 13 	call	0x2756	; 0x2756 <mpu6050_set_z_accel_offset>
    
    mpu6050_set_x_gyro_offset(values[3]);
    2160:	8f 81       	ldd	r24, Y+7	; 0x07
    2162:	98 85       	ldd	r25, Y+8	; 0x08
    2164:	0e 94 b1 13 	call	0x2762	; 0x2762 <mpu6050_set_x_gyro_offset>
    mpu6050_set_y_gyro_offset(values[4]);
    2168:	89 85       	ldd	r24, Y+9	; 0x09
    216a:	9a 85       	ldd	r25, Y+10	; 0x0a
    216c:	0e 94 b7 13 	call	0x276e	; 0x276e <mpu6050_set_y_gyro_offset>
    mpu6050_set_z_gyro_offset(values[5]);
    2170:	8b 85       	ldd	r24, Y+11	; 0x0b
    2172:	9c 85       	ldd	r25, Y+12	; 0x0c
    2174:	0e 94 bd 13 	call	0x277a	; 0x277a <mpu6050_set_z_gyro_offset>
    
    #if DEBUG
    sprintf(BUFFER, "current millis %ld\n", millis());
    2178:	0e 94 16 1a 	call	0x342c	; 0x342c <millis>
    217c:	9f 93       	push	r25
    217e:	8f 93       	push	r24
    2180:	7f 93       	push	r23
    2182:	6f 93       	push	r22
    2184:	81 e7       	ldi	r24, 0x71	; 113
    2186:	91 e0       	ldi	r25, 0x01	; 1
    2188:	9f 93       	push	r25
    218a:	8f 93       	push	r24
    218c:	8b ed       	ldi	r24, 0xDB	; 219
    218e:	91 e0       	ldi	r25, 0x01	; 1
    2190:	9f 93       	push	r25
    2192:	8f 93       	push	r24
    2194:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <sprintf>
    uart_puts(BUFFER);
    2198:	8b ed       	ldi	r24, 0xDB	; 219
    219a:	91 e0       	ldi	r25, 0x01	; 1
    219c:	0e 94 9c 1f 	call	0x3f38	; 0x3f38 <uart_puts>
    #endif

    hcm5883l_initialize();
    21a0:	0e 94 97 12 	call	0x252e	; 0x252e <hcm5883l_initialize>

    mahony_init();
    21a4:	0e 94 26 02 	call	0x44c	; 0x44c <mahony_init>
    21a8:	ff ef       	ldi	r31, 0xFF	; 255
    21aa:	21 ee       	ldi	r18, 0xE1	; 225
    21ac:	84 e0       	ldi	r24, 0x04	; 4
    21ae:	f1 50       	subi	r31, 0x01	; 1
    21b0:	20 40       	sbci	r18, 0x00	; 0
    21b2:	80 40       	sbci	r24, 0x00	; 0
    21b4:	e1 f7       	brne	.-8      	; 0x21ae <setup_sensors+0x90>
    21b6:	00 c0       	rjmp	.+0      	; 0x21b8 <setup_sensors+0x9a>
    21b8:	00 00       	nop

    _delay_ms(100);
}
    21ba:	0f b6       	in	r0, 0x3f	; 63
    21bc:	f8 94       	cli
    21be:	de bf       	out	0x3e, r29	; 62
    21c0:	0f be       	out	0x3f, r0	; 63
    21c2:	cd bf       	out	0x3d, r28	; 61
    21c4:	2c 96       	adiw	r28, 0x0c	; 12
    21c6:	0f b6       	in	r0, 0x3f	; 63
    21c8:	f8 94       	cli
    21ca:	de bf       	out	0x3e, r29	; 62
    21cc:	0f be       	out	0x3f, r0	; 63
    21ce:	cd bf       	out	0x3d, r28	; 61
    21d0:	df 91       	pop	r29
    21d2:	cf 91       	pop	r28
    21d4:	08 95       	ret

000021d6 <calculate_roll_pitch_yaw>:

void calculate_roll_pitch_yaw()
{
    21d6:	4f 92       	push	r4
    21d8:	5f 92       	push	r5
    21da:	6f 92       	push	r6
    21dc:	7f 92       	push	r7
    21de:	af 92       	push	r10
    21e0:	bf 92       	push	r11
    21e2:	cf 92       	push	r12
    21e4:	df 92       	push	r13
    21e6:	ef 92       	push	r14
    21e8:	ff 92       	push	r15
    21ea:	0f 93       	push	r16
    21ec:	1f 93       	push	r17
    21ee:	cf 93       	push	r28
    21f0:	df 93       	push	r29
    21f2:	00 d0       	rcall	.+0      	; 0x21f4 <calculate_roll_pitch_yaw+0x1e>
    21f4:	00 d0       	rcall	.+0      	; 0x21f6 <calculate_roll_pitch_yaw+0x20>
    21f6:	cd b7       	in	r28, 0x3d	; 61
    21f8:	de b7       	in	r29, 0x3e	; 62
    mpu6050_get_motion_6(&ax, &ay, &az, &gx, &gy, &gz);
    21fa:	0f 2e       	mov	r0, r31
    21fc:	fa e3       	ldi	r31, 0x3A	; 58
    21fe:	ef 2e       	mov	r14, r31
    2200:	f3 e0       	ldi	r31, 0x03	; 3
    2202:	ff 2e       	mov	r15, r31
    2204:	f0 2d       	mov	r31, r0
    2206:	02 e3       	ldi	r16, 0x32	; 50
    2208:	13 e0       	ldi	r17, 0x03	; 3
    220a:	2e e3       	ldi	r18, 0x3E	; 62
    220c:	33 e0       	ldi	r19, 0x03	; 3
    220e:	44 e3       	ldi	r20, 0x34	; 52
    2210:	53 e0       	ldi	r21, 0x03	; 3
    2212:	60 e4       	ldi	r22, 0x40	; 64
    2214:	73 e0       	ldi	r23, 0x03	; 3
    2216:	88 e3       	ldi	r24, 0x38	; 56
    2218:	93 e0       	ldi	r25, 0x03	; 3
    221a:	0e 94 2b 13 	call	0x2656	; 0x2656 <mpu6050_get_motion_6>
    hcm5883l_get_heading(&mx, &my, &mz);
    221e:	4c e3       	ldi	r20, 0x3C	; 60
    2220:	53 e0       	ldi	r21, 0x03	; 3
    2222:	66 e3       	ldi	r22, 0x36	; 54
    2224:	73 e0       	ldi	r23, 0x03	; 3
    2226:	82 e4       	ldi	r24, 0x42	; 66
    2228:	93 e0       	ldi	r25, 0x03	; 3
    222a:	0e 94 a3 12 	call	0x2546	; 0x2546 <hcm5883l_get_heading>
    
    mahony_update(
    gz * 0.001,
    222e:	60 91 3a 03 	lds	r22, 0x033A	; 0x80033a <gz>
    2232:	70 91 3b 03 	lds	r23, 0x033B	; 0x80033b <gz+0x1>
    2236:	07 2e       	mov	r0, r23
    2238:	00 0c       	add	r0, r0
    223a:	88 0b       	sbc	r24, r24
    223c:	99 0b       	sbc	r25, r25
    223e:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <__floatsisf>
    2242:	2f e6       	ldi	r18, 0x6F	; 111
    2244:	32 e1       	ldi	r19, 0x12	; 18
    2246:	43 e8       	ldi	r20, 0x83	; 131
    2248:	5a e3       	ldi	r21, 0x3A	; 58
    224a:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    224e:	2b 01       	movw	r4, r22
    2250:	3c 01       	movw	r6, r24
void calculate_roll_pitch_yaw()
{
    mpu6050_get_motion_6(&ax, &ay, &az, &gx, &gy, &gz);
    hcm5883l_get_heading(&mx, &my, &mz);
    
    mahony_update(
    2252:	60 91 38 03 	lds	r22, 0x0338	; 0x800338 <ax>
    2256:	70 91 39 03 	lds	r23, 0x0339	; 0x800339 <ax+0x1>
    225a:	07 2e       	mov	r0, r23
    225c:	00 0c       	add	r0, r0
    225e:	88 0b       	sbc	r24, r24
    2260:	99 0b       	sbc	r25, r25
    2262:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <__floatsisf>
    2266:	2f e6       	ldi	r18, 0x6F	; 111
    2268:	32 e1       	ldi	r19, 0x12	; 18
    226a:	43 e8       	ldi	r20, 0x83	; 131
    226c:	5a e3       	ldi	r21, 0x3A	; 58
    226e:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    2272:	5b 01       	movw	r10, r22
    2274:	6c 01       	movw	r12, r24
    2276:	60 91 32 03 	lds	r22, 0x0332	; 0x800332 <gy>
    227a:	70 91 33 03 	lds	r23, 0x0333	; 0x800333 <gy+0x1>
    227e:	07 2e       	mov	r0, r23
    2280:	00 0c       	add	r0, r0
    2282:	88 0b       	sbc	r24, r24
    2284:	99 0b       	sbc	r25, r25
    2286:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <__floatsisf>
    228a:	2f e6       	ldi	r18, 0x6F	; 111
    228c:	32 e1       	ldi	r19, 0x12	; 18
    228e:	43 e8       	ldi	r20, 0x83	; 131
    2290:	5a e3       	ldi	r21, 0x3A	; 58
    2292:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    2296:	69 83       	std	Y+1, r22	; 0x01
    2298:	7a 83       	std	Y+2, r23	; 0x02
    229a:	8b 83       	std	Y+3, r24	; 0x03
    229c:	9c 83       	std	Y+4, r25	; 0x04
    229e:	60 91 3c 03 	lds	r22, 0x033C	; 0x80033c <mz>
    22a2:	70 91 3d 03 	lds	r23, 0x033D	; 0x80033d <mz+0x1>
    22a6:	07 2e       	mov	r0, r23
    22a8:	00 0c       	add	r0, r0
    22aa:	88 0b       	sbc	r24, r24
    22ac:	99 0b       	sbc	r25, r25
    22ae:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <__floatsisf>
    22b2:	2f e6       	ldi	r18, 0x6F	; 111
    22b4:	32 e1       	ldi	r19, 0x12	; 18
    22b6:	43 e8       	ldi	r20, 0x83	; 131
    22b8:	5a e3       	ldi	r21, 0x3A	; 58
    22ba:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    22be:	9f 93       	push	r25
    22c0:	8f 93       	push	r24
    22c2:	7f 93       	push	r23
    22c4:	6f 93       	push	r22
    22c6:	60 91 36 03 	lds	r22, 0x0336	; 0x800336 <my>
    22ca:	70 91 37 03 	lds	r23, 0x0337	; 0x800337 <my+0x1>
    22ce:	07 2e       	mov	r0, r23
    22d0:	00 0c       	add	r0, r0
    22d2:	88 0b       	sbc	r24, r24
    22d4:	99 0b       	sbc	r25, r25
    22d6:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <__floatsisf>
    22da:	2f e6       	ldi	r18, 0x6F	; 111
    22dc:	32 e1       	ldi	r19, 0x12	; 18
    22de:	43 e8       	ldi	r20, 0x83	; 131
    22e0:	5a e3       	ldi	r21, 0x3A	; 58
    22e2:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    22e6:	9f 93       	push	r25
    22e8:	8f 93       	push	r24
    22ea:	7f 93       	push	r23
    22ec:	6f 93       	push	r22
    22ee:	60 91 42 03 	lds	r22, 0x0342	; 0x800342 <mx>
    22f2:	70 91 43 03 	lds	r23, 0x0343	; 0x800343 <mx+0x1>
    22f6:	07 2e       	mov	r0, r23
    22f8:	00 0c       	add	r0, r0
    22fa:	88 0b       	sbc	r24, r24
    22fc:	99 0b       	sbc	r25, r25
    22fe:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <__floatsisf>
    2302:	2f e6       	ldi	r18, 0x6F	; 111
    2304:	32 e1       	ldi	r19, 0x12	; 18
    2306:	43 e8       	ldi	r20, 0x83	; 131
    2308:	5a e3       	ldi	r21, 0x3A	; 58
    230a:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    230e:	9f 93       	push	r25
    2310:	8f 93       	push	r24
    2312:	7f 93       	push	r23
    2314:	6f 93       	push	r22
    2316:	60 91 34 03 	lds	r22, 0x0334	; 0x800334 <az>
    231a:	70 91 35 03 	lds	r23, 0x0335	; 0x800335 <az+0x1>
    231e:	07 2e       	mov	r0, r23
    2320:	00 0c       	add	r0, r0
    2322:	88 0b       	sbc	r24, r24
    2324:	99 0b       	sbc	r25, r25
    2326:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <__floatsisf>
    232a:	2f e6       	ldi	r18, 0x6F	; 111
    232c:	32 e1       	ldi	r19, 0x12	; 18
    232e:	43 e8       	ldi	r20, 0x83	; 131
    2330:	5a e3       	ldi	r21, 0x3A	; 58
    2332:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    2336:	9f 93       	push	r25
    2338:	8f 93       	push	r24
    233a:	7f 93       	push	r23
    233c:	6f 93       	push	r22
    233e:	60 91 40 03 	lds	r22, 0x0340	; 0x800340 <ay>
    2342:	70 91 41 03 	lds	r23, 0x0341	; 0x800341 <ay+0x1>
    2346:	07 2e       	mov	r0, r23
    2348:	00 0c       	add	r0, r0
    234a:	88 0b       	sbc	r24, r24
    234c:	99 0b       	sbc	r25, r25
    234e:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <__floatsisf>
    2352:	2f e6       	ldi	r18, 0x6F	; 111
    2354:	32 e1       	ldi	r19, 0x12	; 18
    2356:	43 e8       	ldi	r20, 0x83	; 131
    2358:	5a e3       	ldi	r21, 0x3A	; 58
    235a:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    235e:	9f 93       	push	r25
    2360:	8f 93       	push	r24
    2362:	7f 93       	push	r23
    2364:	6f 93       	push	r22
    2366:	83 01       	movw	r16, r6
    2368:	72 01       	movw	r14, r4
    236a:	29 81       	ldd	r18, Y+1	; 0x01
    236c:	3a 81       	ldd	r19, Y+2	; 0x02
    236e:	4b 81       	ldd	r20, Y+3	; 0x03
    2370:	5c 81       	ldd	r21, Y+4	; 0x04
    2372:	c3 01       	movw	r24, r6
    2374:	b2 01       	movw	r22, r4
    2376:	0e 94 1d 07 	call	0xe3a	; 0xe3a <mahony_update>
    az * 0.001,
    mx * 0.001,
    my * 0.001,
    mz * 0.001);

    f.m_float = getRoll();
    237a:	0e 94 57 0f 	call	0x1eae	; 0x1eae <getRoll>
    237e:	26 2f       	mov	r18, r22
    2380:	46 2f       	mov	r20, r22
    2382:	57 2f       	mov	r21, r23
    2384:	68 2f       	mov	r22, r24
    2386:	79 2f       	mov	r23, r25
    2388:	ee e2       	ldi	r30, 0x2E	; 46
    238a:	f3 e0       	ldi	r31, 0x03	; 3
    238c:	40 83       	st	Z, r20
    238e:	51 83       	std	Z+1, r21	; 0x01
    2390:	62 83       	std	Z+2, r22	; 0x02
    2392:	73 83       	std	Z+3, r23	; 0x03
    REGISTER[IMU_ROLL_ADDRESS] = f.m_bytes[0];
    2394:	0c ec       	ldi	r16, 0xCC	; 204
    2396:	11 e0       	ldi	r17, 0x01	; 1
    2398:	f8 01       	movw	r30, r16
    239a:	21 83       	std	Z+1, r18	; 0x01
    REGISTER[IMU_ROLL_ADDRESS + 1] = f.m_bytes[1];
    239c:	80 91 2f 03 	lds	r24, 0x032F	; 0x80032f <f+0x1>
    23a0:	82 83       	std	Z+2, r24	; 0x02
    REGISTER[IMU_ROLL_ADDRESS + 2] = f.m_bytes[2];
    23a2:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <f+0x2>
    23a6:	83 83       	std	Z+3, r24	; 0x03
    REGISTER[IMU_ROLL_ADDRESS + 3] = f.m_bytes[3];
    23a8:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <f+0x3>
    23ac:	84 83       	std	Z+4, r24	; 0x04
    
    f.m_float = getPitch();
    23ae:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <getPitch>
    23b2:	26 2f       	mov	r18, r22
    23b4:	46 2f       	mov	r20, r22
    23b6:	57 2f       	mov	r21, r23
    23b8:	68 2f       	mov	r22, r24
    23ba:	79 2f       	mov	r23, r25
    23bc:	ee e2       	ldi	r30, 0x2E	; 46
    23be:	f3 e0       	ldi	r31, 0x03	; 3
    23c0:	40 83       	st	Z, r20
    23c2:	51 83       	std	Z+1, r21	; 0x01
    23c4:	62 83       	std	Z+2, r22	; 0x02
    23c6:	73 83       	std	Z+3, r23	; 0x03
    REGISTER[IMU_PITCH_ADDRESS] = f.m_bytes[0];
    23c8:	f8 01       	movw	r30, r16
    23ca:	25 83       	std	Z+5, r18	; 0x05
    REGISTER[IMU_PITCH_ADDRESS + 1] = f.m_bytes[1];
    23cc:	80 91 2f 03 	lds	r24, 0x032F	; 0x80032f <f+0x1>
    23d0:	86 83       	std	Z+6, r24	; 0x06
    REGISTER[IMU_PITCH_ADDRESS + 2] = f.m_bytes[2];
    23d2:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <f+0x2>
    23d6:	87 83       	std	Z+7, r24	; 0x07
    REGISTER[IMU_PITCH_ADDRESS + 3] = f.m_bytes[3];
    23d8:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <f+0x3>
    23dc:	80 87       	std	Z+8, r24	; 0x08
    
    f.m_float = getYaw();
    23de:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <getYaw>
    23e2:	26 2f       	mov	r18, r22
    23e4:	46 2f       	mov	r20, r22
    23e6:	57 2f       	mov	r21, r23
    23e8:	68 2f       	mov	r22, r24
    23ea:	79 2f       	mov	r23, r25
    23ec:	ee e2       	ldi	r30, 0x2E	; 46
    23ee:	f3 e0       	ldi	r31, 0x03	; 3
    23f0:	40 83       	st	Z, r20
    23f2:	51 83       	std	Z+1, r21	; 0x01
    23f4:	62 83       	std	Z+2, r22	; 0x02
    23f6:	73 83       	std	Z+3, r23	; 0x03
    REGISTER[IMU_YAW_ADDRESS] = f.m_bytes[0];
    23f8:	f8 01       	movw	r30, r16
    23fa:	21 87       	std	Z+9, r18	; 0x09
    REGISTER[IMU_YAW_ADDRESS + 1] = f.m_bytes[1];
    23fc:	80 91 2f 03 	lds	r24, 0x032F	; 0x80032f <f+0x1>
    2400:	82 87       	std	Z+10, r24	; 0x0a
    REGISTER[IMU_YAW_ADDRESS + 2] = f.m_bytes[2];
    2402:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <f+0x2>
    2406:	83 87       	std	Z+11, r24	; 0x0b
    REGISTER[IMU_YAW_ADDRESS + 3] = f.m_bytes[3];
    2408:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <f+0x3>
    240c:	84 87       	std	Z+12, r24	; 0x0c
    f.m_float = 0;
    240e:	ee e2       	ldi	r30, 0x2E	; 46
    2410:	f3 e0       	ldi	r31, 0x03	; 3
    2412:	10 82       	st	Z, r1
    2414:	11 82       	std	Z+1, r1	; 0x01
    2416:	12 82       	std	Z+2, r1	; 0x02
    2418:	13 82       	std	Z+3, r1	; 0x03
}
    241a:	0f b6       	in	r0, 0x3f	; 63
    241c:	f8 94       	cli
    241e:	de bf       	out	0x3e, r29	; 62
    2420:	0f be       	out	0x3f, r0	; 63
    2422:	cd bf       	out	0x3d, r28	; 61
    2424:	0f 90       	pop	r0
    2426:	0f 90       	pop	r0
    2428:	0f 90       	pop	r0
    242a:	0f 90       	pop	r0
    242c:	df 91       	pop	r29
    242e:	cf 91       	pop	r28
    2430:	1f 91       	pop	r17
    2432:	0f 91       	pop	r16
    2434:	ff 90       	pop	r15
    2436:	ef 90       	pop	r14
    2438:	df 90       	pop	r13
    243a:	cf 90       	pop	r12
    243c:	bf 90       	pop	r11
    243e:	af 90       	pop	r10
    2440:	7f 90       	pop	r7
    2442:	6f 90       	pop	r6
    2444:	5f 90       	pop	r5
    2446:	4f 90       	pop	r4
    2448:	08 95       	ret

0000244a <main>:

int main(void)
{
    REGISTER[IMU_STATUS_ADDRESS] = IMU_STATUS_INITIALIZING;
    244a:	cc ec       	ldi	r28, 0xCC	; 204
    244c:	d1 e0       	ldi	r29, 0x01	; 1
    244e:	81 e0       	ldi	r24, 0x01	; 1
    2450:	88 83       	st	Y, r24
    
    setup();
    2452:	0e 94 16 10 	call	0x202c	; 0x202c <setup>
    setup_sensors();
    2456:	0e 94 8f 10 	call	0x211e	; 0x211e <setup_sensors>
    
    REGISTER[IMU_STATUS_ADDRESS] = IMU_STATUS_READY_TO_START;
    245a:	83 e0       	ldi	r24, 0x03	; 3
    245c:	88 83       	st	Y, r24
    
    #ifdef DEBUG
    uart_puts("ready to start\n");
    245e:	85 e8       	ldi	r24, 0x85	; 133
    2460:	91 e0       	ldi	r25, 0x01	; 1
    2462:	0e 94 9c 1f 	call	0x3f38	; 0x3f38 <uart_puts>
    #endif
    
    long last_debug = 0;
    long last_imu = 0;
    2466:	81 2c       	mov	r8, r1
    2468:	91 2c       	mov	r9, r1
    246a:	54 01       	movw	r10, r8
    
    #ifdef DEBUG
    uart_puts("ready to start\n");
    #endif
    
    long last_debug = 0;
    246c:	c1 2c       	mov	r12, r1
    246e:	d1 2c       	mov	r13, r1
    2470:	76 01       	movw	r14, r12
        else if (REGISTER[IMU_STATUS_ADDRESS] == IMU_STATUS_CALIBRATING)
        {
            #ifdef DEBUG
            uart_puts("running calibration\n");
            #endif
            PORTB ^= (1 << PB5);
    2472:	10 e2       	ldi	r17, 0x20	; 32
            calibrate_gyro_accel();
            REGISTER[IMU_STATUS_ADDRESS] = IMU_STATUS_READY_TO_START;
    2474:	03 e0       	ldi	r16, 0x03	; 3
    long last_imu = 0;
    long delta = 0;
    
    while(1)
    {
        if (REGISTER[IMU_STATUS_ADDRESS] == IMU_STATUS_RUNNING)
    2476:	88 81       	ld	r24, Y
    2478:	8a 30       	cpi	r24, 0x0A	; 10
    247a:	81 f5       	brne	.+96     	; 0x24dc <main+0x92>
        {
            delta = millis() - last_imu;
    247c:	0e 94 16 1a 	call	0x342c	; 0x342c <millis>
            if (delta > 14)
    2480:	dc 01       	movw	r26, r24
    2482:	cb 01       	movw	r24, r22
    2484:	88 19       	sub	r24, r8
    2486:	99 09       	sbc	r25, r9
    2488:	aa 09       	sbc	r26, r10
    248a:	bb 09       	sbc	r27, r11
    248c:	0f 97       	sbiw	r24, 0x0f	; 15
    248e:	a1 05       	cpc	r26, r1
    2490:	b1 05       	cpc	r27, r1
    2492:	7c f0       	brlt	.+30     	; 0x24b2 <main+0x68>
            {
                calculate_roll_pitch_yaw();
    2494:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <calculate_roll_pitch_yaw>
                #if DEBUG
                count++;
    2498:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <count>
    249c:	90 91 da 01 	lds	r25, 0x01DA	; 0x8001da <count+0x1>
    24a0:	01 96       	adiw	r24, 0x01	; 1
    24a2:	90 93 da 01 	sts	0x01DA, r25	; 0x8001da <count+0x1>
    24a6:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <count>
                #endif
                last_imu = millis();
    24aa:	0e 94 16 1a 	call	0x342c	; 0x342c <millis>
    24ae:	4b 01       	movw	r8, r22
    24b0:	5c 01       	movw	r10, r24
            }
            delta = millis() - last_debug;
    24b2:	0e 94 16 1a 	call	0x342c	; 0x342c <millis>
            if (delta > 1000)
    24b6:	dc 01       	movw	r26, r24
    24b8:	cb 01       	movw	r24, r22
    24ba:	8c 19       	sub	r24, r12
    24bc:	9d 09       	sbc	r25, r13
    24be:	ae 09       	sbc	r26, r14
    24c0:	bf 09       	sbc	r27, r15
    24c2:	89 3e       	cpi	r24, 0xE9	; 233
    24c4:	93 40       	sbci	r25, 0x03	; 3
    24c6:	a1 05       	cpc	r26, r1
    24c8:	b1 05       	cpc	r27, r1
    24ca:	ac f2       	brlt	.-86     	; 0x2476 <main+0x2c>
            {
                PORTB ^= (1 << PB5);
    24cc:	85 b1       	in	r24, 0x05	; 5
    24ce:	81 27       	eor	r24, r17
    24d0:	85 b9       	out	0x05, r24	; 5
                last_debug = millis();
    24d2:	0e 94 16 1a 	call	0x342c	; 0x342c <millis>
    24d6:	6b 01       	movw	r12, r22
    24d8:	7c 01       	movw	r14, r24
    24da:	cd cf       	rjmp	.-102    	; 0x2476 <main+0x2c>
            }
        }
        else if (REGISTER[IMU_STATUS_ADDRESS] == IMU_STATUS_CALIBRATING)
    24dc:	88 81       	ld	r24, Y
    24de:	82 30       	cpi	r24, 0x02	; 2
    24e0:	51 f6       	brne	.-108    	; 0x2476 <main+0x2c>
        {
            #ifdef DEBUG
            uart_puts("running calibration\n");
    24e2:	88 e0       	ldi	r24, 0x08	; 8
    24e4:	91 e0       	ldi	r25, 0x01	; 1
    24e6:	0e 94 9c 1f 	call	0x3f38	; 0x3f38 <uart_puts>
            #endif
            PORTB ^= (1 << PB5);
    24ea:	85 b1       	in	r24, 0x05	; 5
    24ec:	81 27       	eor	r24, r17
    24ee:	85 b9       	out	0x05, r24	; 5
            calibrate_gyro_accel();
    24f0:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <calibrate_gyro_accel>
            REGISTER[IMU_STATUS_ADDRESS] = IMU_STATUS_READY_TO_START;
    24f4:	08 83       	st	Y, r16
            PORTB ^= (1 << PB5);
    24f6:	85 b1       	in	r24, 0x05	; 5
    24f8:	81 27       	eor	r24, r17
    24fa:	85 b9       	out	0x05, r24	; 5
            #ifdef DEBUG
            uart_puts("calibration done\n");
    24fc:	85 e2       	ldi	r24, 0x25	; 37
    24fe:	91 e0       	ldi	r25, 0x01	; 1
    2500:	0e 94 9c 1f 	call	0x3f38	; 0x3f38 <uart_puts>
    2504:	b8 cf       	rjmp	.-144    	; 0x2476 <main+0x2c>

00002506 <setGain>:
void setGain(uint8_t gain)
{
	// use this method to guarantee that bits 4-0 are set to zero, which is a
	// requirement specified in the datasheet; it's actually more efficient than
	// using the I2Cdev.writeBits method
	i2c_write_byte(HMC5883L_ADDRESS, HMC5883L_CONFIG_B, gain << (HMC5883L_CRB_GAIN_BIT - HMC5883L_CRB_GAIN_LENGTH + 1));
    2506:	48 2f       	mov	r20, r24
    2508:	42 95       	swap	r20
    250a:	44 0f       	add	r20, r20
    250c:	40 7e       	andi	r20, 0xE0	; 224
    250e:	61 e0       	ldi	r22, 0x01	; 1
    2510:	8e e1       	ldi	r24, 0x1E	; 30
    2512:	0e 94 16 1c 	call	0x382c	; 0x382c <i2c_write_byte>
    2516:	08 95       	ret

00002518 <setMode>:
* @see HMC5883L_RA_MODE
* @see HMC5883L_MODEREG_BIT
* @see HMC5883L_MODEREG_LENGTH
*/
void setMode(uint8_t newMode)
{
    2518:	cf 93       	push	r28
    251a:	c8 2f       	mov	r28, r24
	// use this method to guarantee that bits 7-2 are set to zero, which is a
	// requirement specified in the datasheet; it's actually more efficient than
	// using the I2Cdev.writeBits method
	i2c_write_byte(HMC5883L_ADDRESS, HMC5883L_MODE, newMode << (HMC5883L_MODEREG_BIT - HMC5883L_MODEREG_LENGTH + 1));
    251c:	48 2f       	mov	r20, r24
    251e:	62 e0       	ldi	r22, 0x02	; 2
    2520:	8e e1       	ldi	r24, 0x1E	; 30
    2522:	0e 94 16 1c 	call	0x382c	; 0x382c <i2c_write_byte>
	mode = newMode; // track to tell if we have to clear bit 7 after a read
    2526:	c0 93 44 03 	sts	0x0344, r28	; 0x800344 <mode>
}
    252a:	cf 91       	pop	r28
    252c:	08 95       	ret

0000252e <hcm5883l_initialize>:

void hcm5883l_initialize()
{
	// write CONFIG_A register
	i2c_write_byte(HMC5883L_ADDRESS, HMC5883L_CONFIG_A,
    252e:	40 e7       	ldi	r20, 0x70	; 112
    2530:	60 e0       	ldi	r22, 0x00	; 0
    2532:	8e e1       	ldi	r24, 0x1E	; 30
    2534:	0e 94 16 1c 	call	0x382c	; 0x382c <i2c_write_byte>
	(HMC5883L_AVERAGING_8 << (HMC5883L_CRA_AVERAGE_BIT - HMC5883L_CRA_AVERAGE_LENGTH + 1)) |
	(HMC5883L_RATE_15 << (HMC5883L_CRA_RATE_BIT - HMC5883L_CRA_RATE_LENGTH + 1)) |
	(HMC5883L_BIAS_NORMAL << (HMC5883L_CRA_BIAS_BIT - HMC5883L_CRA_BIAS_LENGTH + 1)));

	// write CONFIG_B register
	setGain(HMC5883L_GAIN_1090);
    2538:	81 e0       	ldi	r24, 0x01	; 1
    253a:	0e 94 83 12 	call	0x2506	; 0x2506 <setGain>

	// write MODE register
	setMode(HMC5883L_MODE_SINGLE);
    253e:	81 e0       	ldi	r24, 0x01	; 1
    2540:	0e 94 8c 12 	call	0x2518	; 0x2518 <setMode>
    2544:	08 95       	ret

00002546 <hcm5883l_get_heading>:
* @param y 16-bit signed integer container for Y-axis heading
* @param z 16-bit signed integer container for Z-axis heading
* @see HMC5883L_RA_DATAX_H
*/
void hcm5883l_get_heading(int16_t *x, int16_t *y, int16_t *z)
{
    2546:	cf 92       	push	r12
    2548:	df 92       	push	r13
    254a:	ef 92       	push	r14
    254c:	ff 92       	push	r15
    254e:	0f 93       	push	r16
    2550:	1f 93       	push	r17
    2552:	cf 93       	push	r28
    2554:	df 93       	push	r29
    2556:	6c 01       	movw	r12, r24
    2558:	7b 01       	movw	r14, r22
    255a:	ea 01       	movw	r28, r20
	i2c_read_bytes(
    255c:	08 ee       	ldi	r16, 0xE8	; 232
    255e:	13 e0       	ldi	r17, 0x03	; 3
    2560:	25 e4       	ldi	r18, 0x45	; 69
    2562:	33 e0       	ldi	r19, 0x03	; 3
    2564:	46 e0       	ldi	r20, 0x06	; 6
    2566:	63 e0       	ldi	r22, 0x03	; 3
    2568:	8e e1       	ldi	r24, 0x1E	; 30
    256a:	0e 94 29 1b 	call	0x3652	; 0x3652 <i2c_read_bytes>
        HMC5883L_DATAX_H,
        6,
        mag_buffer,
        I2CDEV_DEFAULT_READ_TIMEOUT
    );
	if (mode == HMC5883L_MODE_SINGLE)
    256e:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <mode>
    2572:	81 30       	cpi	r24, 0x01	; 1
    2574:	29 f4       	brne	.+10     	; 0x2580 <hcm5883l_get_heading+0x3a>
	{
		i2c_write_byte(HMC5883L_ADDRESS,
    2576:	41 e0       	ldi	r20, 0x01	; 1
    2578:	62 e0       	ldi	r22, 0x02	; 2
    257a:	8e e1       	ldi	r24, 0x1E	; 30
    257c:	0e 94 16 1c 	call	0x382c	; 0x382c <i2c_write_byte>
        HMC5883L_MODE,
        HMC5883L_MODE_SINGLE << (HMC5883L_MODEREG_BIT - HMC5883L_MODEREG_LENGTH + 1));
	}
	*x = (((int16_t)mag_buffer[0]) << 8) | mag_buffer[1];
    2580:	e5 e4       	ldi	r30, 0x45	; 69
    2582:	f3 e0       	ldi	r31, 0x03	; 3
    2584:	80 81       	ld	r24, Z
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	98 2f       	mov	r25, r24
    258a:	88 27       	eor	r24, r24
    258c:	21 81       	ldd	r18, Z+1	; 0x01
    258e:	82 2b       	or	r24, r18
    2590:	d6 01       	movw	r26, r12
    2592:	8d 93       	st	X+, r24
    2594:	9c 93       	st	X, r25
	*y = (((int16_t)mag_buffer[4]) << 8) | mag_buffer[5];
    2596:	84 81       	ldd	r24, Z+4	; 0x04
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	98 2f       	mov	r25, r24
    259c:	88 27       	eor	r24, r24
    259e:	25 81       	ldd	r18, Z+5	; 0x05
    25a0:	82 2b       	or	r24, r18
    25a2:	d7 01       	movw	r26, r14
    25a4:	8d 93       	st	X+, r24
    25a6:	9c 93       	st	X, r25
	*z = (((int16_t)mag_buffer[2]) << 8) | mag_buffer[3];
    25a8:	82 81       	ldd	r24, Z+2	; 0x02
    25aa:	90 e0       	ldi	r25, 0x00	; 0
    25ac:	98 2f       	mov	r25, r24
    25ae:	88 27       	eor	r24, r24
    25b0:	23 81       	ldd	r18, Z+3	; 0x03
    25b2:	82 2b       	or	r24, r18
    25b4:	99 83       	std	Y+1, r25	; 0x01
    25b6:	88 83       	st	Y, r24
    25b8:	df 91       	pop	r29
    25ba:	cf 91       	pop	r28
    25bc:	1f 91       	pop	r17
    25be:	0f 91       	pop	r16
    25c0:	ff 90       	pop	r15
    25c2:	ef 90       	pop	r14
    25c4:	df 90       	pop	r13
    25c6:	cf 90       	pop	r12
    25c8:	08 95       	ret

000025ca <mpu6050_set_clock_source>:
* @return True if connection is valid, false otherwise
*/
uint8_t mpu6050_test_connection(void)
{
    return mpu6050_who_am_i() == 0x34;
}
    25ca:	0f 93       	push	r16
    25cc:	08 2f       	mov	r16, r24
    25ce:	23 e0       	ldi	r18, 0x03	; 3
    25d0:	42 e0       	ldi	r20, 0x02	; 2
    25d2:	6b e6       	ldi	r22, 0x6B	; 107
    25d4:	88 e6       	ldi	r24, 0x68	; 104
    25d6:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <i2c_write_bits>
    25da:	0f 91       	pop	r16
    25dc:	08 95       	ret

000025de <mpu6050_set_full_scale_gyro_range>:
    25de:	0f 93       	push	r16
    25e0:	08 2f       	mov	r16, r24
    25e2:	22 e0       	ldi	r18, 0x02	; 2
    25e4:	44 e0       	ldi	r20, 0x04	; 4
    25e6:	6b e1       	ldi	r22, 0x1B	; 27
    25e8:	88 e6       	ldi	r24, 0x68	; 104
    25ea:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <i2c_write_bits>
    25ee:	0f 91       	pop	r16
    25f0:	08 95       	ret

000025f2 <mpu6050_set_full_scale_accel_range>:
    25f2:	0f 93       	push	r16
    25f4:	08 2f       	mov	r16, r24
    25f6:	22 e0       	ldi	r18, 0x02	; 2
    25f8:	44 e0       	ldi	r20, 0x04	; 4
    25fa:	6c e1       	ldi	r22, 0x1C	; 28
    25fc:	88 e6       	ldi	r24, 0x68	; 104
    25fe:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <i2c_write_bits>
    2602:	0f 91       	pop	r16
    2604:	08 95       	ret

00002606 <mpu6050_set_sleep_enabled>:
    2606:	28 2f       	mov	r18, r24
    2608:	46 e0       	ldi	r20, 0x06	; 6
    260a:	6b e6       	ldi	r22, 0x6B	; 107
    260c:	88 e6       	ldi	r24, 0x68	; 104
    260e:	0e 94 26 1c 	call	0x384c	; 0x384c <i2c_write_bit>
    2612:	08 95       	ret

00002614 <mpu6050_set_I2C_master_mode_enabled>:
    2614:	28 2f       	mov	r18, r24
    2616:	45 e0       	ldi	r20, 0x05	; 5
    2618:	6a e6       	ldi	r22, 0x6A	; 106
    261a:	88 e6       	ldi	r24, 0x68	; 104
    261c:	0e 94 26 1c 	call	0x384c	; 0x384c <i2c_write_bit>
    2620:	08 95       	ret

00002622 <mpu6050_set_I2C_bypass_enabled>:
    2622:	28 2f       	mov	r18, r24
    2624:	41 e0       	ldi	r20, 0x01	; 1
    2626:	67 e3       	ldi	r22, 0x37	; 55
    2628:	88 e6       	ldi	r24, 0x68	; 104
    262a:	0e 94 26 1c 	call	0x384c	; 0x384c <i2c_write_bit>
    262e:	08 95       	ret

00002630 <mpu6050_initialize>:
    2630:	80 e0       	ldi	r24, 0x00	; 0
    2632:	0e 94 0a 13 	call	0x2614	; 0x2614 <mpu6050_set_I2C_master_mode_enabled>
    2636:	81 e0       	ldi	r24, 0x01	; 1
    2638:	0e 94 11 13 	call	0x2622	; 0x2622 <mpu6050_set_I2C_bypass_enabled>
    263c:	81 e0       	ldi	r24, 0x01	; 1
    263e:	0e 94 e5 12 	call	0x25ca	; 0x25ca <mpu6050_set_clock_source>
    2642:	81 e0       	ldi	r24, 0x01	; 1
    2644:	0e 94 ef 12 	call	0x25de	; 0x25de <mpu6050_set_full_scale_gyro_range>
    2648:	82 e0       	ldi	r24, 0x02	; 2
    264a:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <mpu6050_set_full_scale_accel_range>
    264e:	80 e0       	ldi	r24, 0x00	; 0
    2650:	0e 94 03 13 	call	0x2606	; 0x2606 <mpu6050_set_sleep_enabled>
    2654:	08 95       	ret

00002656 <mpu6050_get_motion_6>:
    2656:	4f 92       	push	r4
    2658:	5f 92       	push	r5
    265a:	6f 92       	push	r6
    265c:	7f 92       	push	r7
    265e:	8f 92       	push	r8
    2660:	9f 92       	push	r9
    2662:	af 92       	push	r10
    2664:	bf 92       	push	r11
    2666:	cf 92       	push	r12
    2668:	df 92       	push	r13
    266a:	ef 92       	push	r14
    266c:	ff 92       	push	r15
    266e:	0f 93       	push	r16
    2670:	1f 93       	push	r17
    2672:	cf 93       	push	r28
    2674:	df 93       	push	r29
    2676:	cd b7       	in	r28, 0x3d	; 61
    2678:	de b7       	in	r29, 0x3e	; 62
    267a:	2e 97       	sbiw	r28, 0x0e	; 14
    267c:	0f b6       	in	r0, 0x3f	; 63
    267e:	f8 94       	cli
    2680:	de bf       	out	0x3e, r29	; 62
    2682:	0f be       	out	0x3f, r0	; 63
    2684:	cd bf       	out	0x3d, r28	; 61
    2686:	3c 01       	movw	r6, r24
    2688:	4b 01       	movw	r8, r22
    268a:	5a 01       	movw	r10, r20
    268c:	69 01       	movw	r12, r18
    268e:	28 01       	movw	r4, r16
    2690:	08 ee       	ldi	r16, 0xE8	; 232
    2692:	13 e0       	ldi	r17, 0x03	; 3
    2694:	9e 01       	movw	r18, r28
    2696:	2f 5f       	subi	r18, 0xFF	; 255
    2698:	3f 4f       	sbci	r19, 0xFF	; 255
    269a:	4e e0       	ldi	r20, 0x0E	; 14
    269c:	6b e3       	ldi	r22, 0x3B	; 59
    269e:	88 e6       	ldi	r24, 0x68	; 104
    26a0:	0e 94 29 1b 	call	0x3652	; 0x3652 <i2c_read_bytes>
    26a4:	89 81       	ldd	r24, Y+1	; 0x01
    26a6:	90 e0       	ldi	r25, 0x00	; 0
    26a8:	98 2f       	mov	r25, r24
    26aa:	88 27       	eor	r24, r24
    26ac:	2a 81       	ldd	r18, Y+2	; 0x02
    26ae:	82 2b       	or	r24, r18
    26b0:	f3 01       	movw	r30, r6
    26b2:	91 83       	std	Z+1, r25	; 0x01
    26b4:	80 83       	st	Z, r24
    26b6:	8b 81       	ldd	r24, Y+3	; 0x03
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	98 2f       	mov	r25, r24
    26bc:	88 27       	eor	r24, r24
    26be:	2c 81       	ldd	r18, Y+4	; 0x04
    26c0:	82 2b       	or	r24, r18
    26c2:	f4 01       	movw	r30, r8
    26c4:	91 83       	std	Z+1, r25	; 0x01
    26c6:	80 83       	st	Z, r24
    26c8:	8d 81       	ldd	r24, Y+5	; 0x05
    26ca:	90 e0       	ldi	r25, 0x00	; 0
    26cc:	98 2f       	mov	r25, r24
    26ce:	88 27       	eor	r24, r24
    26d0:	2e 81       	ldd	r18, Y+6	; 0x06
    26d2:	82 2b       	or	r24, r18
    26d4:	f5 01       	movw	r30, r10
    26d6:	91 83       	std	Z+1, r25	; 0x01
    26d8:	80 83       	st	Z, r24
    26da:	89 85       	ldd	r24, Y+9	; 0x09
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	98 2f       	mov	r25, r24
    26e0:	88 27       	eor	r24, r24
    26e2:	2a 85       	ldd	r18, Y+10	; 0x0a
    26e4:	82 2b       	or	r24, r18
    26e6:	f6 01       	movw	r30, r12
    26e8:	91 83       	std	Z+1, r25	; 0x01
    26ea:	80 83       	st	Z, r24
    26ec:	8b 85       	ldd	r24, Y+11	; 0x0b
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	98 2f       	mov	r25, r24
    26f2:	88 27       	eor	r24, r24
    26f4:	2c 85       	ldd	r18, Y+12	; 0x0c
    26f6:	82 2b       	or	r24, r18
    26f8:	f2 01       	movw	r30, r4
    26fa:	91 83       	std	Z+1, r25	; 0x01
    26fc:	80 83       	st	Z, r24
    26fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2700:	90 e0       	ldi	r25, 0x00	; 0
    2702:	98 2f       	mov	r25, r24
    2704:	88 27       	eor	r24, r24
    2706:	2e 85       	ldd	r18, Y+14	; 0x0e
    2708:	82 2b       	or	r24, r18
    270a:	f7 01       	movw	r30, r14
    270c:	91 83       	std	Z+1, r25	; 0x01
    270e:	80 83       	st	Z, r24
    2710:	2e 96       	adiw	r28, 0x0e	; 14
    2712:	0f b6       	in	r0, 0x3f	; 63
    2714:	f8 94       	cli
    2716:	de bf       	out	0x3e, r29	; 62
    2718:	0f be       	out	0x3f, r0	; 63
    271a:	cd bf       	out	0x3d, r28	; 61
    271c:	df 91       	pop	r29
    271e:	cf 91       	pop	r28
    2720:	1f 91       	pop	r17
    2722:	0f 91       	pop	r16
    2724:	ff 90       	pop	r15
    2726:	ef 90       	pop	r14
    2728:	df 90       	pop	r13
    272a:	cf 90       	pop	r12
    272c:	bf 90       	pop	r11
    272e:	af 90       	pop	r10
    2730:	9f 90       	pop	r9
    2732:	8f 90       	pop	r8
    2734:	7f 90       	pop	r7
    2736:	6f 90       	pop	r6
    2738:	5f 90       	pop	r5
    273a:	4f 90       	pop	r4
    273c:	08 95       	ret

0000273e <mpu6050_set_x_accel_offset>:


void mpu6050_set_x_accel_offset(int16_t offset) {
    i2c_write_word(MPU6050_ADDRESS, MPU6050_RA_XA_OFFS_H, offset);
    273e:	ac 01       	movw	r20, r24
    2740:	66 e0       	ldi	r22, 0x06	; 6
    2742:	88 e6       	ldi	r24, 0x68	; 104
    2744:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <i2c_write_word>
    2748:	08 95       	ret

0000274a <mpu6050_set_y_accel_offset>:
}

void mpu6050_set_y_accel_offset(int16_t offset) {
    i2c_write_word(MPU6050_ADDRESS, MPU6050_RA_YA_OFFS_H, offset);
    274a:	ac 01       	movw	r20, r24
    274c:	68 e0       	ldi	r22, 0x08	; 8
    274e:	88 e6       	ldi	r24, 0x68	; 104
    2750:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <i2c_write_word>
    2754:	08 95       	ret

00002756 <mpu6050_set_z_accel_offset>:
}


void mpu6050_set_z_accel_offset(int16_t offset) {
    i2c_write_word(MPU6050_ADDRESS, MPU6050_RA_ZA_OFFS_H, offset);
    2756:	ac 01       	movw	r20, r24
    2758:	6a e0       	ldi	r22, 0x0A	; 10
    275a:	88 e6       	ldi	r24, 0x68	; 104
    275c:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <i2c_write_word>
    2760:	08 95       	ret

00002762 <mpu6050_set_x_gyro_offset>:
}

void mpu6050_set_x_gyro_offset(int16_t offset) {
    i2c_write_word(MPU6050_ADDRESS, MPU6050_RA_XG_OFFS_USRH, offset);
    2762:	ac 01       	movw	r20, r24
    2764:	63 e1       	ldi	r22, 0x13	; 19
    2766:	88 e6       	ldi	r24, 0x68	; 104
    2768:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <i2c_write_word>
    276c:	08 95       	ret

0000276e <mpu6050_set_y_gyro_offset>:
}

void mpu6050_set_y_gyro_offset(int16_t offset) {
    i2c_write_word(MPU6050_ADDRESS, MPU6050_RA_YG_OFFS_USRH, offset);
    276e:	ac 01       	movw	r20, r24
    2770:	65 e1       	ldi	r22, 0x15	; 21
    2772:	88 e6       	ldi	r24, 0x68	; 104
    2774:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <i2c_write_word>
    2778:	08 95       	ret

0000277a <mpu6050_set_z_gyro_offset>:
}

void mpu6050_set_z_gyro_offset(int16_t offset) {
    i2c_write_word(MPU6050_ADDRESS, MPU6050_RA_ZG_OFFS_USRH, offset);
    277a:	ac 01       	movw	r20, r24
    277c:	67 e1       	ldi	r22, 0x17	; 23
    277e:	88 e6       	ldi	r24, 0x68	; 104
    2780:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <i2c_write_word>
    2784:	08 95       	ret

00002786 <meansensors>:
}

void meansensors(int* mean_values)
{
    2786:	4f 92       	push	r4
    2788:	5f 92       	push	r5
    278a:	6f 92       	push	r6
    278c:	7f 92       	push	r7
    278e:	8f 92       	push	r8
    2790:	9f 92       	push	r9
    2792:	af 92       	push	r10
    2794:	bf 92       	push	r11
    2796:	cf 92       	push	r12
    2798:	df 92       	push	r13
    279a:	ef 92       	push	r14
    279c:	ff 92       	push	r15
    279e:	0f 93       	push	r16
    27a0:	1f 93       	push	r17
    27a2:	cf 93       	push	r28
    27a4:	df 93       	push	r29
    27a6:	cd b7       	in	r28, 0x3d	; 61
    27a8:	de b7       	in	r29, 0x3e	; 62
    27aa:	a0 97       	sbiw	r28, 0x20	; 32
    27ac:	0f b6       	in	r0, 0x3f	; 63
    27ae:	f8 94       	cli
    27b0:	de bf       	out	0x3e, r29	; 62
    27b2:	0f be       	out	0x3f, r0	; 63
    27b4:	cd bf       	out	0x3d, r28	; 61
    27b6:	6c 01       	movw	r12, r24
        gz;

    while ( i < (buffersize + 101))
    {
        
        mpu6050_get_motion_6(&ax, &ay, &az, &gx, &gy, &gz);
    27b8:	9e 01       	movw	r18, r28
    27ba:	25 5f       	subi	r18, 0xF5	; 245
    27bc:	3f 4f       	sbci	r19, 0xFF	; 255
    27be:	79 01       	movw	r14, r18
    27c0:	8e 01       	movw	r16, r28
    27c2:	07 5f       	subi	r16, 0xF7	; 247
    27c4:	1f 4f       	sbci	r17, 0xFF	; 255
    27c6:	24 50       	subi	r18, 0x04	; 4
    27c8:	31 09       	sbc	r19, r1
    27ca:	ae 01       	movw	r20, r28
    27cc:	4b 5f       	subi	r20, 0xFB	; 251
    27ce:	5f 4f       	sbci	r21, 0xFF	; 255
    27d0:	be 01       	movw	r22, r28
    27d2:	6d 5f       	subi	r22, 0xFD	; 253
    27d4:	7f 4f       	sbci	r23, 0xFF	; 255
    27d6:	ce 01       	movw	r24, r28
    27d8:	01 96       	adiw	r24, 0x01	; 1
    27da:	0e 94 2b 13 	call	0x2656	; 0x2656 <mpu6050_get_motion_6>
    27de:	0f 2e       	mov	r0, r31
    27e0:	fc e9       	ldi	r31, 0x9C	; 156
    27e2:	8f 2e       	mov	r8, r31
    27e4:	99 24       	eor	r9, r9
    27e6:	9a 94       	dec	r9
    27e8:	a9 2c       	mov	r10, r9
    27ea:	b9 2c       	mov	r11, r9
    27ec:	f0 2d       	mov	r31, r0
        buff_ax = 0,
        buff_ay = 0,
        buff_az = 0,
        buff_gx = 0,
        buff_gy = 0,
        buff_gz = 0;
    27ee:	1d 8e       	std	Y+29, r1	; 0x1d
    27f0:	1e 8e       	std	Y+30, r1	; 0x1e
    27f2:	1f 8e       	std	Y+31, r1	; 0x1f
    27f4:	18 a2       	std	Y+32, r1	; 0x20
    long i = 0,
        buff_ax = 0,
        buff_ay = 0,
        buff_az = 0,
        buff_gx = 0,
        buff_gy = 0,
    27f6:	19 8e       	std	Y+25, r1	; 0x19
    27f8:	1a 8e       	std	Y+26, r1	; 0x1a
    27fa:	1b 8e       	std	Y+27, r1	; 0x1b
    27fc:	1c 8e       	std	Y+28, r1	; 0x1c
    int buffersize = 1000;
    long i = 0,
        buff_ax = 0,
        buff_ay = 0,
        buff_az = 0,
        buff_gx = 0,
    27fe:	1d 8a       	std	Y+21, r1	; 0x15
    2800:	1e 8a       	std	Y+22, r1	; 0x16
    2802:	1f 8a       	std	Y+23, r1	; 0x17
    2804:	18 8e       	std	Y+24, r1	; 0x18
{
    int buffersize = 1000;
    long i = 0,
        buff_ax = 0,
        buff_ay = 0,
        buff_az = 0,
    2806:	19 8a       	std	Y+17, r1	; 0x11
    2808:	1a 8a       	std	Y+18, r1	; 0x12
    280a:	1b 8a       	std	Y+19, r1	; 0x13
    280c:	1c 8a       	std	Y+20, r1	; 0x14
void meansensors(int* mean_values)
{
    int buffersize = 1000;
    long i = 0,
        buff_ax = 0,
        buff_ay = 0,
    280e:	41 2c       	mov	r4, r1
    2810:	51 2c       	mov	r5, r1
    2812:	32 01       	movw	r6, r4

void meansensors(int* mean_values)
{
    int buffersize = 1000;
    long i = 0,
        buff_ax = 0,
    2814:	1d 86       	std	Y+13, r1	; 0x0d
    2816:	1e 86       	std	Y+14, r1	; 0x0e
    2818:	1f 86       	std	Y+15, r1	; 0x0f
    281a:	18 8a       	std	Y+16, r1	; 0x10
    281c:	c0 c0       	rjmp	.+384    	; 0x299e <meansensors+0x218>
    {
        
        mpu6050_get_motion_6(&ax, &ay, &az, &gx, &gy, &gz);

        if (i > 100 && i <= (buffersize + 100)){ //First 100 measures are discarded
            buff_ax = buff_ax + ax;
    281e:	89 81       	ldd	r24, Y+1	; 0x01
    2820:	9a 81       	ldd	r25, Y+2	; 0x02
    2822:	09 2e       	mov	r0, r25
    2824:	00 0c       	add	r0, r0
    2826:	aa 0b       	sbc	r26, r26
    2828:	bb 0b       	sbc	r27, r27
    282a:	2d 85       	ldd	r18, Y+13	; 0x0d
    282c:	3e 85       	ldd	r19, Y+14	; 0x0e
    282e:	4f 85       	ldd	r20, Y+15	; 0x0f
    2830:	58 89       	ldd	r21, Y+16	; 0x10
    2832:	28 0f       	add	r18, r24
    2834:	39 1f       	adc	r19, r25
    2836:	4a 1f       	adc	r20, r26
    2838:	5b 1f       	adc	r21, r27
    283a:	2d 87       	std	Y+13, r18	; 0x0d
    283c:	3e 87       	std	Y+14, r19	; 0x0e
    283e:	4f 87       	std	Y+15, r20	; 0x0f
    2840:	58 8b       	std	Y+16, r21	; 0x10
            buff_ay = buff_ay + ay;
    2842:	8b 81       	ldd	r24, Y+3	; 0x03
    2844:	9c 81       	ldd	r25, Y+4	; 0x04
    2846:	09 2e       	mov	r0, r25
    2848:	00 0c       	add	r0, r0
    284a:	aa 0b       	sbc	r26, r26
    284c:	bb 0b       	sbc	r27, r27
    284e:	48 0e       	add	r4, r24
    2850:	59 1e       	adc	r5, r25
    2852:	6a 1e       	adc	r6, r26
    2854:	7b 1e       	adc	r7, r27
            buff_az = buff_az + az;
    2856:	8d 81       	ldd	r24, Y+5	; 0x05
    2858:	9e 81       	ldd	r25, Y+6	; 0x06
    285a:	09 2e       	mov	r0, r25
    285c:	00 0c       	add	r0, r0
    285e:	aa 0b       	sbc	r26, r26
    2860:	bb 0b       	sbc	r27, r27
    2862:	29 89       	ldd	r18, Y+17	; 0x11
    2864:	3a 89       	ldd	r19, Y+18	; 0x12
    2866:	4b 89       	ldd	r20, Y+19	; 0x13
    2868:	5c 89       	ldd	r21, Y+20	; 0x14
    286a:	28 0f       	add	r18, r24
    286c:	39 1f       	adc	r19, r25
    286e:	4a 1f       	adc	r20, r26
    2870:	5b 1f       	adc	r21, r27
    2872:	29 8b       	std	Y+17, r18	; 0x11
    2874:	3a 8b       	std	Y+18, r19	; 0x12
    2876:	4b 8b       	std	Y+19, r20	; 0x13
    2878:	5c 8b       	std	Y+20, r21	; 0x14

            buff_gx = buff_gx + gx;
    287a:	8f 81       	ldd	r24, Y+7	; 0x07
    287c:	98 85       	ldd	r25, Y+8	; 0x08
    287e:	09 2e       	mov	r0, r25
    2880:	00 0c       	add	r0, r0
    2882:	aa 0b       	sbc	r26, r26
    2884:	bb 0b       	sbc	r27, r27
    2886:	2d 89       	ldd	r18, Y+21	; 0x15
    2888:	3e 89       	ldd	r19, Y+22	; 0x16
    288a:	4f 89       	ldd	r20, Y+23	; 0x17
    288c:	58 8d       	ldd	r21, Y+24	; 0x18
    288e:	28 0f       	add	r18, r24
    2890:	39 1f       	adc	r19, r25
    2892:	4a 1f       	adc	r20, r26
    2894:	5b 1f       	adc	r21, r27
    2896:	2d 8b       	std	Y+21, r18	; 0x15
    2898:	3e 8b       	std	Y+22, r19	; 0x16
    289a:	4f 8b       	std	Y+23, r20	; 0x17
    289c:	58 8f       	std	Y+24, r21	; 0x18
            buff_gy = buff_gy + gy;
    289e:	89 85       	ldd	r24, Y+9	; 0x09
    28a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    28a2:	09 2e       	mov	r0, r25
    28a4:	00 0c       	add	r0, r0
    28a6:	aa 0b       	sbc	r26, r26
    28a8:	bb 0b       	sbc	r27, r27
    28aa:	29 8d       	ldd	r18, Y+25	; 0x19
    28ac:	3a 8d       	ldd	r19, Y+26	; 0x1a
    28ae:	4b 8d       	ldd	r20, Y+27	; 0x1b
    28b0:	5c 8d       	ldd	r21, Y+28	; 0x1c
    28b2:	28 0f       	add	r18, r24
    28b4:	39 1f       	adc	r19, r25
    28b6:	4a 1f       	adc	r20, r26
    28b8:	5b 1f       	adc	r21, r27
    28ba:	29 8f       	std	Y+25, r18	; 0x19
    28bc:	3a 8f       	std	Y+26, r19	; 0x1a
    28be:	4b 8f       	std	Y+27, r20	; 0x1b
    28c0:	5c 8f       	std	Y+28, r21	; 0x1c
            buff_gz = buff_gz + gz;
    28c2:	8b 85       	ldd	r24, Y+11	; 0x0b
    28c4:	9c 85       	ldd	r25, Y+12	; 0x0c
    28c6:	09 2e       	mov	r0, r25
    28c8:	00 0c       	add	r0, r0
    28ca:	aa 0b       	sbc	r26, r26
    28cc:	bb 0b       	sbc	r27, r27
    28ce:	2d 8d       	ldd	r18, Y+29	; 0x1d
    28d0:	3e 8d       	ldd	r19, Y+30	; 0x1e
    28d2:	4f 8d       	ldd	r20, Y+31	; 0x1f
    28d4:	58 a1       	ldd	r21, Y+32	; 0x20
    28d6:	28 0f       	add	r18, r24
    28d8:	39 1f       	adc	r19, r25
    28da:	4a 1f       	adc	r20, r26
    28dc:	5b 1f       	adc	r21, r27
    28de:	2d 8f       	std	Y+29, r18	; 0x1d
    28e0:	3e 8f       	std	Y+30, r19	; 0x1e
    28e2:	4f 8f       	std	Y+31, r20	; 0x1f
    28e4:	58 a3       	std	Y+32, r21	; 0x20
    28e6:	3f ef       	ldi	r19, 0xFF	; 255
    28e8:	83 1a       	sub	r8, r19
    28ea:	93 0a       	sbc	r9, r19
    28ec:	a3 0a       	sbc	r10, r19
    28ee:	b3 0a       	sbc	r11, r19
        }

        if (i == (buffersize + 100))
    28f0:	48 ee       	ldi	r20, 0xE8	; 232
    28f2:	84 16       	cp	r8, r20
    28f4:	43 e0       	ldi	r20, 0x03	; 3
    28f6:	94 06       	cpc	r9, r20
    28f8:	a1 04       	cpc	r10, r1
    28fa:	b1 04       	cpc	r11, r1
    28fc:	09 f0       	breq	.+2      	; 0x2900 <meansensors+0x17a>
    28fe:	4f c0       	rjmp	.+158    	; 0x299e <meansensors+0x218>
        {
            mean_values[0] = buff_ax / buffersize;
    2900:	0f 2e       	mov	r0, r31
    2902:	f8 ee       	ldi	r31, 0xE8	; 232
    2904:	8f 2e       	mov	r8, r31
    2906:	f3 e0       	ldi	r31, 0x03	; 3
    2908:	9f 2e       	mov	r9, r31
    290a:	a1 2c       	mov	r10, r1
    290c:	b1 2c       	mov	r11, r1
    290e:	f0 2d       	mov	r31, r0
    2910:	6d 85       	ldd	r22, Y+13	; 0x0d
    2912:	7e 85       	ldd	r23, Y+14	; 0x0e
    2914:	8f 85       	ldd	r24, Y+15	; 0x0f
    2916:	98 89       	ldd	r25, Y+16	; 0x10
    2918:	a5 01       	movw	r20, r10
    291a:	94 01       	movw	r18, r8
    291c:	0e 94 4a 23 	call	0x4694	; 0x4694 <__divmodsi4>
    2920:	f6 01       	movw	r30, r12
    2922:	31 83       	std	Z+1, r19	; 0x01
    2924:	20 83       	st	Z, r18
            mean_values[1] = buff_ay / buffersize;
    2926:	c3 01       	movw	r24, r6
    2928:	b2 01       	movw	r22, r4
    292a:	a5 01       	movw	r20, r10
    292c:	94 01       	movw	r18, r8
    292e:	0e 94 4a 23 	call	0x4694	; 0x4694 <__divmodsi4>
    2932:	f6 01       	movw	r30, r12
    2934:	33 83       	std	Z+3, r19	; 0x03
    2936:	22 83       	std	Z+2, r18	; 0x02
            mean_values[2] = buff_az / buffersize;
    2938:	69 89       	ldd	r22, Y+17	; 0x11
    293a:	7a 89       	ldd	r23, Y+18	; 0x12
    293c:	8b 89       	ldd	r24, Y+19	; 0x13
    293e:	9c 89       	ldd	r25, Y+20	; 0x14
    2940:	a5 01       	movw	r20, r10
    2942:	94 01       	movw	r18, r8
    2944:	0e 94 4a 23 	call	0x4694	; 0x4694 <__divmodsi4>
    2948:	f6 01       	movw	r30, r12
    294a:	35 83       	std	Z+5, r19	; 0x05
    294c:	24 83       	std	Z+4, r18	; 0x04
            mean_values[3] = buff_gx / buffersize;
    294e:	6d 89       	ldd	r22, Y+21	; 0x15
    2950:	7e 89       	ldd	r23, Y+22	; 0x16
    2952:	8f 89       	ldd	r24, Y+23	; 0x17
    2954:	98 8d       	ldd	r25, Y+24	; 0x18
    2956:	a5 01       	movw	r20, r10
    2958:	94 01       	movw	r18, r8
    295a:	0e 94 4a 23 	call	0x4694	; 0x4694 <__divmodsi4>
    295e:	f6 01       	movw	r30, r12
    2960:	37 83       	std	Z+7, r19	; 0x07
    2962:	26 83       	std	Z+6, r18	; 0x06
            mean_values[4] = buff_gy / buffersize;
    2964:	69 8d       	ldd	r22, Y+25	; 0x19
    2966:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2968:	8b 8d       	ldd	r24, Y+27	; 0x1b
    296a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    296c:	a5 01       	movw	r20, r10
    296e:	94 01       	movw	r18, r8
    2970:	0e 94 4a 23 	call	0x4694	; 0x4694 <__divmodsi4>
    2974:	f6 01       	movw	r30, r12
    2976:	31 87       	std	Z+9, r19	; 0x09
    2978:	20 87       	std	Z+8, r18	; 0x08
            mean_values[5] = buff_gz / buffersize;
    297a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    297c:	7e 8d       	ldd	r23, Y+30	; 0x1e
    297e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2980:	98 a1       	ldd	r25, Y+32	; 0x20
    2982:	a5 01       	movw	r20, r10
    2984:	94 01       	movw	r18, r8
    2986:	0e 94 4a 23 	call	0x4694	; 0x4694 <__divmodsi4>
    298a:	f6 01       	movw	r30, r12
    298c:	33 87       	std	Z+11, r19	; 0x0b
    298e:	22 87       	std	Z+10, r18	; 0x0a
    2990:	8f e3       	ldi	r24, 0x3F	; 63
    2992:	9c e9       	ldi	r25, 0x9C	; 156
    2994:	01 97       	sbiw	r24, 0x01	; 1
    2996:	f1 f7       	brne	.-4      	; 0x2994 <meansensors+0x20e>
    2998:	00 c0       	rjmp	.+0      	; 0x299a <meansensors+0x214>
    299a:	00 00       	nop
        }
        i++;
        _delay_ms(10);
    }
}
    299c:	22 c0       	rjmp	.+68     	; 0x29e2 <meansensors+0x25c>
    299e:	ef e3       	ldi	r30, 0x3F	; 63
    29a0:	fc e9       	ldi	r31, 0x9C	; 156
    29a2:	31 97       	sbiw	r30, 0x01	; 1
    29a4:	f1 f7       	brne	.-4      	; 0x29a2 <meansensors+0x21c>
    29a6:	00 c0       	rjmp	.+0      	; 0x29a8 <meansensors+0x222>
    29a8:	00 00       	nop
        gz;

    while ( i < (buffersize + 101))
    {
        
        mpu6050_get_motion_6(&ax, &ay, &az, &gx, &gy, &gz);
    29aa:	9e 01       	movw	r18, r28
    29ac:	25 5f       	subi	r18, 0xF5	; 245
    29ae:	3f 4f       	sbci	r19, 0xFF	; 255
    29b0:	79 01       	movw	r14, r18
    29b2:	8e 01       	movw	r16, r28
    29b4:	07 5f       	subi	r16, 0xF7	; 247
    29b6:	1f 4f       	sbci	r17, 0xFF	; 255
    29b8:	24 50       	subi	r18, 0x04	; 4
    29ba:	31 09       	sbc	r19, r1
    29bc:	ae 01       	movw	r20, r28
    29be:	4b 5f       	subi	r20, 0xFB	; 251
    29c0:	5f 4f       	sbci	r21, 0xFF	; 255
    29c2:	be 01       	movw	r22, r28
    29c4:	6d 5f       	subi	r22, 0xFD	; 253
    29c6:	7f 4f       	sbci	r23, 0xFF	; 255
    29c8:	ce 01       	movw	r24, r28
    29ca:	01 96       	adiw	r24, 0x01	; 1
    29cc:	0e 94 2b 13 	call	0x2656	; 0x2656 <mpu6050_get_motion_6>

        if (i > 100 && i <= (buffersize + 100)){ //First 100 measures are discarded
    29d0:	38 ee       	ldi	r19, 0xE8	; 232
    29d2:	83 16       	cp	r8, r19
    29d4:	33 e0       	ldi	r19, 0x03	; 3
    29d6:	93 06       	cpc	r9, r19
    29d8:	a1 04       	cpc	r10, r1
    29da:	b1 04       	cpc	r11, r1
    29dc:	08 f4       	brcc	.+2      	; 0x29e0 <meansensors+0x25a>
    29de:	1f cf       	rjmp	.-450    	; 0x281e <meansensors+0x98>
    29e0:	82 cf       	rjmp	.-252    	; 0x28e6 <meansensors+0x160>
            mean_values[5] = buff_gz / buffersize;
        }
        i++;
        _delay_ms(10);
    }
}
    29e2:	a0 96       	adiw	r28, 0x20	; 32
    29e4:	0f b6       	in	r0, 0x3f	; 63
    29e6:	f8 94       	cli
    29e8:	de bf       	out	0x3e, r29	; 62
    29ea:	0f be       	out	0x3f, r0	; 63
    29ec:	cd bf       	out	0x3d, r28	; 61
    29ee:	df 91       	pop	r29
    29f0:	cf 91       	pop	r28
    29f2:	1f 91       	pop	r17
    29f4:	0f 91       	pop	r16
    29f6:	ff 90       	pop	r15
    29f8:	ef 90       	pop	r14
    29fa:	df 90       	pop	r13
    29fc:	cf 90       	pop	r12
    29fe:	bf 90       	pop	r11
    2a00:	af 90       	pop	r10
    2a02:	9f 90       	pop	r9
    2a04:	8f 90       	pop	r8
    2a06:	7f 90       	pop	r7
    2a08:	6f 90       	pop	r6
    2a0a:	5f 90       	pop	r5
    2a0c:	4f 90       	pop	r4
    2a0e:	08 95       	ret

00002a10 <calibration>:

void calibration(int* mean_values, int16_t* values)
{
    2a10:	2f 92       	push	r2
    2a12:	3f 92       	push	r3
    2a14:	4f 92       	push	r4
    2a16:	5f 92       	push	r5
    2a18:	6f 92       	push	r6
    2a1a:	7f 92       	push	r7
    2a1c:	8f 92       	push	r8
    2a1e:	9f 92       	push	r9
    2a20:	af 92       	push	r10
    2a22:	bf 92       	push	r11
    2a24:	cf 92       	push	r12
    2a26:	df 92       	push	r13
    2a28:	ef 92       	push	r14
    2a2a:	ff 92       	push	r15
    2a2c:	0f 93       	push	r16
    2a2e:	1f 93       	push	r17
    2a30:	cf 93       	push	r28
    2a32:	df 93       	push	r29
    2a34:	ec 01       	movw	r28, r24
    2a36:	1b 01       	movw	r2, r22
        az_offset,
        gx_offset,
        gy_offset,
        gz_offset;
    
    ax_offset = -mean_values[0] / 8;
    2a38:	a8 80       	ld	r10, Y
    2a3a:	b9 80       	ldd	r11, Y+1	; 0x01
    2a3c:	b1 94       	neg	r11
    2a3e:	a1 94       	neg	r10
    2a40:	b1 08       	sbc	r11, r1
    2a42:	1a f4       	brpl	.+6      	; 0x2a4a <calibration+0x3a>
    2a44:	27 e0       	ldi	r18, 0x07	; 7
    2a46:	a2 0e       	add	r10, r18
    2a48:	b1 1c       	adc	r11, r1
    2a4a:	b5 94       	asr	r11
    2a4c:	a7 94       	ror	r10
    2a4e:	b5 94       	asr	r11
    2a50:	a7 94       	ror	r10
    2a52:	b5 94       	asr	r11
    2a54:	a7 94       	ror	r10
    ay_offset = -mean_values[1] / 8;
    2a56:	6a 80       	ldd	r6, Y+2	; 0x02
    2a58:	7b 80       	ldd	r7, Y+3	; 0x03
    2a5a:	71 94       	neg	r7
    2a5c:	61 94       	neg	r6
    2a5e:	71 08       	sbc	r7, r1
    2a60:	1a f4       	brpl	.+6      	; 0x2a68 <calibration+0x58>
    2a62:	47 e0       	ldi	r20, 0x07	; 7
    2a64:	64 0e       	add	r6, r20
    2a66:	71 1c       	adc	r7, r1
    2a68:	75 94       	asr	r7
    2a6a:	67 94       	ror	r6
    2a6c:	75 94       	asr	r7
    2a6e:	67 94       	ror	r6
    2a70:	75 94       	asr	r7
    2a72:	67 94       	ror	r6
    az_offset = (16384 - mean_values[2]) / 8;
    2a74:	2c 81       	ldd	r18, Y+4	; 0x04
    2a76:	3d 81       	ldd	r19, Y+5	; 0x05
    2a78:	80 e0       	ldi	r24, 0x00	; 0
    2a7a:	90 e4       	ldi	r25, 0x40	; 64
    2a7c:	82 1b       	sub	r24, r18
    2a7e:	93 0b       	sbc	r25, r19
    2a80:	2c 01       	movw	r4, r24
    2a82:	1a f4       	brpl	.+6      	; 0x2a8a <calibration+0x7a>
    2a84:	57 e0       	ldi	r21, 0x07	; 7
    2a86:	45 0e       	add	r4, r21
    2a88:	51 1c       	adc	r5, r1
    2a8a:	55 94       	asr	r5
    2a8c:	47 94       	ror	r4
    2a8e:	55 94       	asr	r5
    2a90:	47 94       	ror	r4
    2a92:	55 94       	asr	r5
    2a94:	47 94       	ror	r4

    gx_offset = -mean_values[3] / 4;
    2a96:	ce 80       	ldd	r12, Y+6	; 0x06
    2a98:	df 80       	ldd	r13, Y+7	; 0x07
    2a9a:	d1 94       	neg	r13
    2a9c:	c1 94       	neg	r12
    2a9e:	d1 08       	sbc	r13, r1
    2aa0:	1a f4       	brpl	.+6      	; 0x2aa8 <calibration+0x98>
    2aa2:	83 e0       	ldi	r24, 0x03	; 3
    2aa4:	c8 0e       	add	r12, r24
    2aa6:	d1 1c       	adc	r13, r1
    2aa8:	d5 94       	asr	r13
    2aaa:	c7 94       	ror	r12
    2aac:	d5 94       	asr	r13
    2aae:	c7 94       	ror	r12
    gy_offset = -mean_values[4] / 4;
    2ab0:	e8 84       	ldd	r14, Y+8	; 0x08
    2ab2:	f9 84       	ldd	r15, Y+9	; 0x09
    2ab4:	f1 94       	neg	r15
    2ab6:	e1 94       	neg	r14
    2ab8:	f1 08       	sbc	r15, r1
    2aba:	1a f4       	brpl	.+6      	; 0x2ac2 <calibration+0xb2>
    2abc:	e3 e0       	ldi	r30, 0x03	; 3
    2abe:	ee 0e       	add	r14, r30
    2ac0:	f1 1c       	adc	r15, r1
    2ac2:	f5 94       	asr	r15
    2ac4:	e7 94       	ror	r14
    2ac6:	f5 94       	asr	r15
    2ac8:	e7 94       	ror	r14
    gz_offset = -mean_values[5] / 4;
    2aca:	0a 85       	ldd	r16, Y+10	; 0x0a
    2acc:	1b 85       	ldd	r17, Y+11	; 0x0b
    2ace:	11 95       	neg	r17
    2ad0:	01 95       	neg	r16
    2ad2:	11 09       	sbc	r17, r1
    2ad4:	12 f4       	brpl	.+4      	; 0x2ada <calibration+0xca>
    2ad6:	0d 5f       	subi	r16, 0xFD	; 253
    2ad8:	1f 4f       	sbci	r17, 0xFF	; 255
    2ada:	15 95       	asr	r17
    2adc:	07 95       	ror	r16
    2ade:	15 95       	asr	r17
    2ae0:	07 95       	ror	r16
        else { ax_offset = ax_offset - mean_values[0] / acel_deadzone; }

        if (abs(mean_values[1]) <= acel_deadzone) { ready++; }
        else { ay_offset = ay_offset - mean_values[1] / acel_deadzone; }

        if (abs(16384 - mean_values[2]) <= acel_deadzone) { ready++; }
    2ae2:	81 2c       	mov	r8, r1
    2ae4:	68 94       	set
    2ae6:	99 24       	eor	r9, r9
    2ae8:	96 f8       	bld	r9, 6

    while (1)
    {
        int ready = 0;

        mpu6050_set_x_accel_offset(ax_offset);
    2aea:	c5 01       	movw	r24, r10
    2aec:	0e 94 9f 13 	call	0x273e	; 0x273e <mpu6050_set_x_accel_offset>
        mpu6050_set_y_accel_offset(ay_offset);
    2af0:	c3 01       	movw	r24, r6
    2af2:	0e 94 a5 13 	call	0x274a	; 0x274a <mpu6050_set_y_accel_offset>
        mpu6050_set_z_accel_offset(az_offset);
    2af6:	c2 01       	movw	r24, r4
    2af8:	0e 94 ab 13 	call	0x2756	; 0x2756 <mpu6050_set_z_accel_offset>

        mpu6050_set_x_gyro_offset(gx_offset);
    2afc:	c6 01       	movw	r24, r12
    2afe:	0e 94 b1 13 	call	0x2762	; 0x2762 <mpu6050_set_x_gyro_offset>
        mpu6050_set_y_gyro_offset(gy_offset);
    2b02:	c7 01       	movw	r24, r14
    2b04:	0e 94 b7 13 	call	0x276e	; 0x276e <mpu6050_set_y_gyro_offset>
        mpu6050_set_z_gyro_offset(gz_offset);
    2b08:	c8 01       	movw	r24, r16
    2b0a:	0e 94 bd 13 	call	0x277a	; 0x277a <mpu6050_set_z_gyro_offset>

        meansensors(mean_values);
    2b0e:	ce 01       	movw	r24, r28
    2b10:	0e 94 c3 13 	call	0x2786	; 0x2786 <meansensors>

        if (abs(mean_values[0]) <= acel_deadzone) { ready++; }
    2b14:	88 81       	ld	r24, Y
    2b16:	99 81       	ldd	r25, Y+1	; 0x01
    2b18:	9c 01       	movw	r18, r24
    2b1a:	99 23       	and	r25, r25
    2b1c:	24 f4       	brge	.+8      	; 0x2b26 <calibration+0x116>
    2b1e:	22 27       	eor	r18, r18
    2b20:	33 27       	eor	r19, r19
    2b22:	28 1b       	sub	r18, r24
    2b24:	39 0b       	sbc	r19, r25
    2b26:	29 30       	cpi	r18, 0x09	; 9
    2b28:	31 05       	cpc	r19, r1
    2b2a:	84 f0       	brlt	.+32     	; 0x2b4c <calibration+0x13c>
        else { ax_offset = ax_offset - mean_values[0] / acel_deadzone; }
    2b2c:	9c 01       	movw	r18, r24
    2b2e:	99 23       	and	r25, r25
    2b30:	14 f4       	brge	.+4      	; 0x2b36 <calibration+0x126>
    2b32:	29 5f       	subi	r18, 0xF9	; 249
    2b34:	3f 4f       	sbci	r19, 0xFF	; 255
    2b36:	35 95       	asr	r19
    2b38:	27 95       	ror	r18
    2b3a:	35 95       	asr	r19
    2b3c:	27 95       	ror	r18
    2b3e:	35 95       	asr	r19
    2b40:	27 95       	ror	r18
    2b42:	a2 1a       	sub	r10, r18
    2b44:	b3 0a       	sbc	r11, r19
    gy_offset = -mean_values[4] / 4;
    gz_offset = -mean_values[5] / 4;

    while (1)
    {
        int ready = 0;
    2b46:	80 e0       	ldi	r24, 0x00	; 0
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	02 c0       	rjmp	.+4      	; 0x2b50 <calibration+0x140>
        mpu6050_set_y_gyro_offset(gy_offset);
        mpu6050_set_z_gyro_offset(gz_offset);

        meansensors(mean_values);

        if (abs(mean_values[0]) <= acel_deadzone) { ready++; }
    2b4c:	81 e0       	ldi	r24, 0x01	; 1
    2b4e:	90 e0       	ldi	r25, 0x00	; 0
        else { ax_offset = ax_offset - mean_values[0] / acel_deadzone; }

        if (abs(mean_values[1]) <= acel_deadzone) { ready++; }
    2b50:	2a 81       	ldd	r18, Y+2	; 0x02
    2b52:	3b 81       	ldd	r19, Y+3	; 0x03
    2b54:	a9 01       	movw	r20, r18
    2b56:	33 23       	and	r19, r19
    2b58:	24 f4       	brge	.+8      	; 0x2b62 <calibration+0x152>
    2b5a:	44 27       	eor	r20, r20
    2b5c:	55 27       	eor	r21, r21
    2b5e:	42 1b       	sub	r20, r18
    2b60:	53 0b       	sbc	r21, r19
    2b62:	49 30       	cpi	r20, 0x09	; 9
    2b64:	51 05       	cpc	r21, r1
    2b66:	14 f4       	brge	.+4      	; 0x2b6c <calibration+0x15c>
    2b68:	01 96       	adiw	r24, 0x01	; 1
    2b6a:	0d c0       	rjmp	.+26     	; 0x2b86 <calibration+0x176>
        else { ay_offset = ay_offset - mean_values[1] / acel_deadzone; }
    2b6c:	a9 01       	movw	r20, r18
    2b6e:	33 23       	and	r19, r19
    2b70:	14 f4       	brge	.+4      	; 0x2b76 <calibration+0x166>
    2b72:	49 5f       	subi	r20, 0xF9	; 249
    2b74:	5f 4f       	sbci	r21, 0xFF	; 255
    2b76:	55 95       	asr	r21
    2b78:	47 95       	ror	r20
    2b7a:	55 95       	asr	r21
    2b7c:	47 95       	ror	r20
    2b7e:	55 95       	asr	r21
    2b80:	47 95       	ror	r20
    2b82:	64 1a       	sub	r6, r20
    2b84:	75 0a       	sbc	r7, r21

        if (abs(16384 - mean_values[2]) <= acel_deadzone) { ready++; }
    2b86:	2c 81       	ldd	r18, Y+4	; 0x04
    2b88:	3d 81       	ldd	r19, Y+5	; 0x05
    2b8a:	a4 01       	movw	r20, r8
    2b8c:	42 1b       	sub	r20, r18
    2b8e:	53 0b       	sbc	r21, r19
    2b90:	9a 01       	movw	r18, r20
    2b92:	22 f4       	brpl	.+8      	; 0x2b9c <calibration+0x18c>
    2b94:	44 27       	eor	r20, r20
    2b96:	55 27       	eor	r21, r21
    2b98:	42 1b       	sub	r20, r18
    2b9a:	53 0b       	sbc	r21, r19
    2b9c:	49 30       	cpi	r20, 0x09	; 9
    2b9e:	51 05       	cpc	r21, r1
    2ba0:	14 f4       	brge	.+4      	; 0x2ba6 <calibration+0x196>
    2ba2:	01 96       	adiw	r24, 0x01	; 1
    2ba4:	0d c0       	rjmp	.+26     	; 0x2bc0 <calibration+0x1b0>
        else { az_offset = az_offset + (16384 - mean_values[2]) / acel_deadzone; }
    2ba6:	a9 01       	movw	r20, r18
    2ba8:	33 23       	and	r19, r19
    2baa:	14 f4       	brge	.+4      	; 0x2bb0 <calibration+0x1a0>
    2bac:	49 5f       	subi	r20, 0xF9	; 249
    2bae:	5f 4f       	sbci	r21, 0xFF	; 255
    2bb0:	55 95       	asr	r21
    2bb2:	47 95       	ror	r20
    2bb4:	55 95       	asr	r21
    2bb6:	47 95       	ror	r20
    2bb8:	55 95       	asr	r21
    2bba:	47 95       	ror	r20
    2bbc:	44 0e       	add	r4, r20
    2bbe:	55 1e       	adc	r5, r21

        if (abs(mean_values[3]) <= giro_deadzone) { ready++; }
    2bc0:	2e 81       	ldd	r18, Y+6	; 0x06
    2bc2:	3f 81       	ldd	r19, Y+7	; 0x07
    2bc4:	a9 01       	movw	r20, r18
    2bc6:	33 23       	and	r19, r19
    2bc8:	24 f4       	brge	.+8      	; 0x2bd2 <calibration+0x1c2>
    2bca:	44 27       	eor	r20, r20
    2bcc:	55 27       	eor	r21, r21
    2bce:	42 1b       	sub	r20, r18
    2bd0:	53 0b       	sbc	r21, r19
    2bd2:	42 30       	cpi	r20, 0x02	; 2
    2bd4:	51 05       	cpc	r21, r1
    2bd6:	14 f4       	brge	.+4      	; 0x2bdc <calibration+0x1cc>
    2bd8:	01 96       	adiw	r24, 0x01	; 1
    2bda:	09 c0       	rjmp	.+18     	; 0x2bee <calibration+0x1de>
        else { gx_offset = gx_offset - mean_values[3] / (giro_deadzone + 1); }
    2bdc:	a9 01       	movw	r20, r18
    2bde:	33 23       	and	r19, r19
    2be0:	14 f4       	brge	.+4      	; 0x2be6 <calibration+0x1d6>
    2be2:	4f 5f       	subi	r20, 0xFF	; 255
    2be4:	5f 4f       	sbci	r21, 0xFF	; 255
    2be6:	55 95       	asr	r21
    2be8:	47 95       	ror	r20
    2bea:	c4 1a       	sub	r12, r20
    2bec:	d5 0a       	sbc	r13, r21

        if (abs(mean_values[4]) <= giro_deadzone) { ready++; }
    2bee:	28 85       	ldd	r18, Y+8	; 0x08
    2bf0:	39 85       	ldd	r19, Y+9	; 0x09
    2bf2:	a9 01       	movw	r20, r18
    2bf4:	33 23       	and	r19, r19
    2bf6:	24 f4       	brge	.+8      	; 0x2c00 <calibration+0x1f0>
    2bf8:	44 27       	eor	r20, r20
    2bfa:	55 27       	eor	r21, r21
    2bfc:	42 1b       	sub	r20, r18
    2bfe:	53 0b       	sbc	r21, r19
    2c00:	42 30       	cpi	r20, 0x02	; 2
    2c02:	51 05       	cpc	r21, r1
    2c04:	14 f4       	brge	.+4      	; 0x2c0a <calibration+0x1fa>
    2c06:	01 96       	adiw	r24, 0x01	; 1
    2c08:	09 c0       	rjmp	.+18     	; 0x2c1c <calibration+0x20c>
        else { gy_offset = gy_offset - mean_values[4] / (giro_deadzone + 1); }
    2c0a:	a9 01       	movw	r20, r18
    2c0c:	33 23       	and	r19, r19
    2c0e:	14 f4       	brge	.+4      	; 0x2c14 <calibration+0x204>
    2c10:	4f 5f       	subi	r20, 0xFF	; 255
    2c12:	5f 4f       	sbci	r21, 0xFF	; 255
    2c14:	55 95       	asr	r21
    2c16:	47 95       	ror	r20
    2c18:	e4 1a       	sub	r14, r20
    2c1a:	f5 0a       	sbc	r15, r21

        if (abs(mean_values[5]) <= giro_deadzone) { ready++; }
    2c1c:	2a 85       	ldd	r18, Y+10	; 0x0a
    2c1e:	3b 85       	ldd	r19, Y+11	; 0x0b
    2c20:	a9 01       	movw	r20, r18
    2c22:	33 23       	and	r19, r19
    2c24:	24 f4       	brge	.+8      	; 0x2c2e <calibration+0x21e>
    2c26:	44 27       	eor	r20, r20
    2c28:	55 27       	eor	r21, r21
    2c2a:	42 1b       	sub	r20, r18
    2c2c:	53 0b       	sbc	r21, r19
    2c2e:	42 30       	cpi	r20, 0x02	; 2
    2c30:	51 05       	cpc	r21, r1
    2c32:	14 f4       	brge	.+4      	; 0x2c38 <calibration+0x228>
    2c34:	01 96       	adiw	r24, 0x01	; 1
    2c36:	09 c0       	rjmp	.+18     	; 0x2c4a <calibration+0x23a>
        else { gz_offset = gz_offset - mean_values[5] / (giro_deadzone + 1); }
    2c38:	a9 01       	movw	r20, r18
    2c3a:	33 23       	and	r19, r19
    2c3c:	14 f4       	brge	.+4      	; 0x2c42 <calibration+0x232>
    2c3e:	4f 5f       	subi	r20, 0xFF	; 255
    2c40:	5f 4f       	sbci	r21, 0xFF	; 255
    2c42:	55 95       	asr	r21
    2c44:	47 95       	ror	r20
    2c46:	04 1b       	sub	r16, r20
    2c48:	15 0b       	sbc	r17, r21

        if (ready==6) break;
    2c4a:	06 97       	sbiw	r24, 0x06	; 6
    2c4c:	09 f0       	breq	.+2      	; 0x2c50 <calibration+0x240>
    2c4e:	4d cf       	rjmp	.-358    	; 0x2aea <calibration+0xda>
    }
    
    values[0] = ax_offset;
    2c50:	f1 01       	movw	r30, r2
    2c52:	b1 82       	std	Z+1, r11	; 0x01
    2c54:	a0 82       	st	Z, r10
    values[1] = ay_offset;
    2c56:	73 82       	std	Z+3, r7	; 0x03
    2c58:	62 82       	std	Z+2, r6	; 0x02
    values[2] = az_offset;
    2c5a:	55 82       	std	Z+5, r5	; 0x05
    2c5c:	44 82       	std	Z+4, r4	; 0x04
    values[3] = gx_offset;
    2c5e:	d7 82       	std	Z+7, r13	; 0x07
    2c60:	c6 82       	std	Z+6, r12	; 0x06
    values[4] = gy_offset;
    2c62:	f1 86       	std	Z+9, r15	; 0x09
    2c64:	e0 86       	std	Z+8, r14	; 0x08
    values[5] = gz_offset;
    2c66:	13 87       	std	Z+11, r17	; 0x0b
    2c68:	02 87       	std	Z+10, r16	; 0x0a
    
}
    2c6a:	df 91       	pop	r29
    2c6c:	cf 91       	pop	r28
    2c6e:	1f 91       	pop	r17
    2c70:	0f 91       	pop	r16
    2c72:	ff 90       	pop	r15
    2c74:	ef 90       	pop	r14
    2c76:	df 90       	pop	r13
    2c78:	cf 90       	pop	r12
    2c7a:	bf 90       	pop	r11
    2c7c:	af 90       	pop	r10
    2c7e:	9f 90       	pop	r9
    2c80:	8f 90       	pop	r8
    2c82:	7f 90       	pop	r7
    2c84:	6f 90       	pop	r6
    2c86:	5f 90       	pop	r5
    2c88:	4f 90       	pop	r4
    2c8a:	3f 90       	pop	r3
    2c8c:	2f 90       	pop	r2
    2c8e:	08 95       	ret

00002c90 <mpu6050_run_calibration>:

void mpu6050_run_calibration(int16_t* values)
{
    2c90:	0f 93       	push	r16
    2c92:	1f 93       	push	r17
    2c94:	cf 93       	push	r28
    2c96:	df 93       	push	r29
    2c98:	cd b7       	in	r28, 0x3d	; 61
    2c9a:	de b7       	in	r29, 0x3e	; 62
    2c9c:	2c 97       	sbiw	r28, 0x0c	; 12
    2c9e:	0f b6       	in	r0, 0x3f	; 63
    2ca0:	f8 94       	cli
    2ca2:	de bf       	out	0x3e, r29	; 62
    2ca4:	0f be       	out	0x3f, r0	; 63
    2ca6:	cd bf       	out	0x3d, r28	; 61
    2ca8:	8c 01       	movw	r16, r24
    mpu6050_set_x_accel_offset(0);
    2caa:	80 e0       	ldi	r24, 0x00	; 0
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	0e 94 9f 13 	call	0x273e	; 0x273e <mpu6050_set_x_accel_offset>
    mpu6050_set_y_accel_offset(0);
    2cb2:	80 e0       	ldi	r24, 0x00	; 0
    2cb4:	90 e0       	ldi	r25, 0x00	; 0
    2cb6:	0e 94 a5 13 	call	0x274a	; 0x274a <mpu6050_set_y_accel_offset>
    mpu6050_set_z_accel_offset(0);
    2cba:	80 e0       	ldi	r24, 0x00	; 0
    2cbc:	90 e0       	ldi	r25, 0x00	; 0
    2cbe:	0e 94 ab 13 	call	0x2756	; 0x2756 <mpu6050_set_z_accel_offset>

    mpu6050_set_x_gyro_offset(0);
    2cc2:	80 e0       	ldi	r24, 0x00	; 0
    2cc4:	90 e0       	ldi	r25, 0x00	; 0
    2cc6:	0e 94 b1 13 	call	0x2762	; 0x2762 <mpu6050_set_x_gyro_offset>
    mpu6050_set_y_gyro_offset(0);
    2cca:	80 e0       	ldi	r24, 0x00	; 0
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
    2cce:	0e 94 b7 13 	call	0x276e	; 0x276e <mpu6050_set_y_gyro_offset>
    mpu6050_set_z_gyro_offset(0);
    2cd2:	80 e0       	ldi	r24, 0x00	; 0
    2cd4:	90 e0       	ldi	r25, 0x00	; 0
    2cd6:	0e 94 bd 13 	call	0x277a	; 0x277a <mpu6050_set_z_gyro_offset>
    int state = 0;
    int mean_values[6];
    
    if (state == 0)
    {
        meansensors(mean_values);
    2cda:	ce 01       	movw	r24, r28
    2cdc:	01 96       	adiw	r24, 0x01	; 1
    2cde:	0e 94 c3 13 	call	0x2786	; 0x2786 <meansensors>
        state++;
    }
    
    if (state == 1)
    {
        calibration(mean_values, values);
    2ce2:	b8 01       	movw	r22, r16
    2ce4:	ce 01       	movw	r24, r28
    2ce6:	01 96       	adiw	r24, 0x01	; 1
    2ce8:	0e 94 08 15 	call	0x2a10	; 0x2a10 <calibration>
        state++;
    }
    2cec:	2c 96       	adiw	r28, 0x0c	; 12
    2cee:	0f b6       	in	r0, 0x3f	; 63
    2cf0:	f8 94       	cli
    2cf2:	de bf       	out	0x3e, r29	; 62
    2cf4:	0f be       	out	0x3f, r0	; 63
    2cf6:	cd bf       	out	0x3d, r28	; 61
    2cf8:	df 91       	pop	r29
    2cfa:	cf 91       	pop	r28
    2cfc:	1f 91       	pop	r17
    2cfe:	0f 91       	pop	r16
    2d00:	08 95       	ret

00002d02 <__subsf3>:
    2d02:	50 58       	subi	r21, 0x80	; 128

00002d04 <__addsf3>:
    2d04:	bb 27       	eor	r27, r27
    2d06:	aa 27       	eor	r26, r26
    2d08:	0e 94 99 16 	call	0x2d32	; 0x2d32 <__addsf3x>
    2d0c:	0c 94 c5 18 	jmp	0x318a	; 0x318a <__fp_round>
    2d10:	0e 94 b7 18 	call	0x316e	; 0x316e <__fp_pscA>
    2d14:	38 f0       	brcs	.+14     	; 0x2d24 <__addsf3+0x20>
    2d16:	0e 94 be 18 	call	0x317c	; 0x317c <__fp_pscB>
    2d1a:	20 f0       	brcs	.+8      	; 0x2d24 <__addsf3+0x20>
    2d1c:	39 f4       	brne	.+14     	; 0x2d2c <__addsf3+0x28>
    2d1e:	9f 3f       	cpi	r25, 0xFF	; 255
    2d20:	19 f4       	brne	.+6      	; 0x2d28 <__addsf3+0x24>
    2d22:	26 f4       	brtc	.+8      	; 0x2d2c <__addsf3+0x28>
    2d24:	0c 94 79 18 	jmp	0x30f2	; 0x30f2 <__fp_nan>
    2d28:	0e f4       	brtc	.+2      	; 0x2d2c <__addsf3+0x28>
    2d2a:	e0 95       	com	r30
    2d2c:	e7 fb       	bst	r30, 7
    2d2e:	0c 94 73 18 	jmp	0x30e6	; 0x30e6 <__fp_inf>

00002d32 <__addsf3x>:
    2d32:	e9 2f       	mov	r30, r25
    2d34:	0e 94 d6 18 	call	0x31ac	; 0x31ac <__fp_split3>
    2d38:	58 f3       	brcs	.-42     	; 0x2d10 <__addsf3+0xc>
    2d3a:	ba 17       	cp	r27, r26
    2d3c:	62 07       	cpc	r22, r18
    2d3e:	73 07       	cpc	r23, r19
    2d40:	84 07       	cpc	r24, r20
    2d42:	95 07       	cpc	r25, r21
    2d44:	20 f0       	brcs	.+8      	; 0x2d4e <__addsf3x+0x1c>
    2d46:	79 f4       	brne	.+30     	; 0x2d66 <__addsf3x+0x34>
    2d48:	a6 f5       	brtc	.+104    	; 0x2db2 <__addsf3x+0x80>
    2d4a:	0c 94 f8 18 	jmp	0x31f0	; 0x31f0 <__fp_zero>
    2d4e:	0e f4       	brtc	.+2      	; 0x2d52 <__addsf3x+0x20>
    2d50:	e0 95       	com	r30
    2d52:	0b 2e       	mov	r0, r27
    2d54:	ba 2f       	mov	r27, r26
    2d56:	a0 2d       	mov	r26, r0
    2d58:	0b 01       	movw	r0, r22
    2d5a:	b9 01       	movw	r22, r18
    2d5c:	90 01       	movw	r18, r0
    2d5e:	0c 01       	movw	r0, r24
    2d60:	ca 01       	movw	r24, r20
    2d62:	a0 01       	movw	r20, r0
    2d64:	11 24       	eor	r1, r1
    2d66:	ff 27       	eor	r31, r31
    2d68:	59 1b       	sub	r21, r25
    2d6a:	99 f0       	breq	.+38     	; 0x2d92 <__addsf3x+0x60>
    2d6c:	59 3f       	cpi	r21, 0xF9	; 249
    2d6e:	50 f4       	brcc	.+20     	; 0x2d84 <__addsf3x+0x52>
    2d70:	50 3e       	cpi	r21, 0xE0	; 224
    2d72:	68 f1       	brcs	.+90     	; 0x2dce <__addsf3x+0x9c>
    2d74:	1a 16       	cp	r1, r26
    2d76:	f0 40       	sbci	r31, 0x00	; 0
    2d78:	a2 2f       	mov	r26, r18
    2d7a:	23 2f       	mov	r18, r19
    2d7c:	34 2f       	mov	r19, r20
    2d7e:	44 27       	eor	r20, r20
    2d80:	58 5f       	subi	r21, 0xF8	; 248
    2d82:	f3 cf       	rjmp	.-26     	; 0x2d6a <__addsf3x+0x38>
    2d84:	46 95       	lsr	r20
    2d86:	37 95       	ror	r19
    2d88:	27 95       	ror	r18
    2d8a:	a7 95       	ror	r26
    2d8c:	f0 40       	sbci	r31, 0x00	; 0
    2d8e:	53 95       	inc	r21
    2d90:	c9 f7       	brne	.-14     	; 0x2d84 <__addsf3x+0x52>
    2d92:	7e f4       	brtc	.+30     	; 0x2db2 <__addsf3x+0x80>
    2d94:	1f 16       	cp	r1, r31
    2d96:	ba 0b       	sbc	r27, r26
    2d98:	62 0b       	sbc	r22, r18
    2d9a:	73 0b       	sbc	r23, r19
    2d9c:	84 0b       	sbc	r24, r20
    2d9e:	ba f0       	brmi	.+46     	; 0x2dce <__addsf3x+0x9c>
    2da0:	91 50       	subi	r25, 0x01	; 1
    2da2:	a1 f0       	breq	.+40     	; 0x2dcc <__addsf3x+0x9a>
    2da4:	ff 0f       	add	r31, r31
    2da6:	bb 1f       	adc	r27, r27
    2da8:	66 1f       	adc	r22, r22
    2daa:	77 1f       	adc	r23, r23
    2dac:	88 1f       	adc	r24, r24
    2dae:	c2 f7       	brpl	.-16     	; 0x2da0 <__addsf3x+0x6e>
    2db0:	0e c0       	rjmp	.+28     	; 0x2dce <__addsf3x+0x9c>
    2db2:	ba 0f       	add	r27, r26
    2db4:	62 1f       	adc	r22, r18
    2db6:	73 1f       	adc	r23, r19
    2db8:	84 1f       	adc	r24, r20
    2dba:	48 f4       	brcc	.+18     	; 0x2dce <__addsf3x+0x9c>
    2dbc:	87 95       	ror	r24
    2dbe:	77 95       	ror	r23
    2dc0:	67 95       	ror	r22
    2dc2:	b7 95       	ror	r27
    2dc4:	f7 95       	ror	r31
    2dc6:	9e 3f       	cpi	r25, 0xFE	; 254
    2dc8:	08 f0       	brcs	.+2      	; 0x2dcc <__addsf3x+0x9a>
    2dca:	b0 cf       	rjmp	.-160    	; 0x2d2c <__addsf3+0x28>
    2dcc:	93 95       	inc	r25
    2dce:	88 0f       	add	r24, r24
    2dd0:	08 f0       	brcs	.+2      	; 0x2dd4 <__addsf3x+0xa2>
    2dd2:	99 27       	eor	r25, r25
    2dd4:	ee 0f       	add	r30, r30
    2dd6:	97 95       	ror	r25
    2dd8:	87 95       	ror	r24
    2dda:	08 95       	ret

00002ddc <asin>:
    2ddc:	9f 93       	push	r25
    2dde:	9f 77       	andi	r25, 0x7F	; 127
    2de0:	ee e3       	ldi	r30, 0x3E	; 62
    2de2:	89 37       	cpi	r24, 0x79	; 121
    2de4:	9e 07       	cpc	r25, r30
    2de6:	28 f4       	brcc	.+10     	; 0x2df2 <asin+0x16>
    2de8:	e8 e6       	ldi	r30, 0x68	; 104
    2dea:	f0 e0       	ldi	r31, 0x00	; 0
    2dec:	0e 94 a3 18 	call	0x3146	; 0x3146 <__fp_powsodd>
    2df0:	0c c0       	rjmp	.+24     	; 0x2e0a <asin+0x2e>
    2df2:	0e 94 2f 18 	call	0x305e	; 0x305e <__fp_arccos>
    2df6:	90 58       	subi	r25, 0x80	; 128
    2df8:	a2 ea       	ldi	r26, 0xA2	; 162
    2dfa:	2a ed       	ldi	r18, 0xDA	; 218
    2dfc:	3f e0       	ldi	r19, 0x0F	; 15
    2dfe:	49 ec       	ldi	r20, 0xC9	; 201
    2e00:	5f e3       	ldi	r21, 0x3F	; 63
    2e02:	0e 94 99 16 	call	0x2d32	; 0x2d32 <__addsf3x>
    2e06:	0e 94 c5 18 	call	0x318a	; 0x318a <__fp_round>
    2e0a:	0f 90       	pop	r0
    2e0c:	07 fc       	sbrc	r0, 7
    2e0e:	90 58       	subi	r25, 0x80	; 128
    2e10:	08 95       	ret
    2e12:	0e 94 b7 18 	call	0x316e	; 0x316e <__fp_pscA>
    2e16:	60 f0       	brcs	.+24     	; 0x2e30 <asin+0x54>
    2e18:	80 e8       	ldi	r24, 0x80	; 128
    2e1a:	91 e0       	ldi	r25, 0x01	; 1
    2e1c:	09 f4       	brne	.+2      	; 0x2e20 <asin+0x44>
    2e1e:	9e ef       	ldi	r25, 0xFE	; 254
    2e20:	0e 94 be 18 	call	0x317c	; 0x317c <__fp_pscB>
    2e24:	28 f0       	brcs	.+10     	; 0x2e30 <asin+0x54>
    2e26:	40 e8       	ldi	r20, 0x80	; 128
    2e28:	51 e0       	ldi	r21, 0x01	; 1
    2e2a:	71 f4       	brne	.+28     	; 0x2e48 <atan2+0x10>
    2e2c:	5e ef       	ldi	r21, 0xFE	; 254
    2e2e:	0c c0       	rjmp	.+24     	; 0x2e48 <atan2+0x10>
    2e30:	0c 94 79 18 	jmp	0x30f2	; 0x30f2 <__fp_nan>
    2e34:	0c 94 f8 18 	jmp	0x31f0	; 0x31f0 <__fp_zero>

00002e38 <atan2>:
    2e38:	e9 2f       	mov	r30, r25
    2e3a:	e0 78       	andi	r30, 0x80	; 128
    2e3c:	0e 94 d6 18 	call	0x31ac	; 0x31ac <__fp_split3>
    2e40:	40 f3       	brcs	.-48     	; 0x2e12 <asin+0x36>
    2e42:	09 2e       	mov	r0, r25
    2e44:	05 2a       	or	r0, r21
    2e46:	b1 f3       	breq	.-20     	; 0x2e34 <asin+0x58>
    2e48:	26 17       	cp	r18, r22
    2e4a:	37 07       	cpc	r19, r23
    2e4c:	48 07       	cpc	r20, r24
    2e4e:	59 07       	cpc	r21, r25
    2e50:	38 f0       	brcs	.+14     	; 0x2e60 <atan2+0x28>
    2e52:	0e 2e       	mov	r0, r30
    2e54:	07 f8       	bld	r0, 7
    2e56:	e0 25       	eor	r30, r0
    2e58:	69 f0       	breq	.+26     	; 0x2e74 <atan2+0x3c>
    2e5a:	e0 25       	eor	r30, r0
    2e5c:	e0 64       	ori	r30, 0x40	; 64
    2e5e:	0a c0       	rjmp	.+20     	; 0x2e74 <atan2+0x3c>
    2e60:	ef 63       	ori	r30, 0x3F	; 63
    2e62:	07 f8       	bld	r0, 7
    2e64:	00 94       	com	r0
    2e66:	07 fa       	bst	r0, 7
    2e68:	db 01       	movw	r26, r22
    2e6a:	b9 01       	movw	r22, r18
    2e6c:	9d 01       	movw	r18, r26
    2e6e:	dc 01       	movw	r26, r24
    2e70:	ca 01       	movw	r24, r20
    2e72:	ad 01       	movw	r20, r26
    2e74:	ef 93       	push	r30
    2e76:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <__divsf3_pse>
    2e7a:	0e 94 c5 18 	call	0x318a	; 0x318a <__fp_round>
    2e7e:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <atan>
    2e82:	5f 91       	pop	r21
    2e84:	55 23       	and	r21, r21
    2e86:	39 f0       	breq	.+14     	; 0x2e96 <atan2+0x5e>
    2e88:	2b ed       	ldi	r18, 0xDB	; 219
    2e8a:	3f e0       	ldi	r19, 0x0F	; 15
    2e8c:	49 e4       	ldi	r20, 0x49	; 73
    2e8e:	50 fd       	sbrc	r21, 0
    2e90:	49 ec       	ldi	r20, 0xC9	; 201
    2e92:	0c 94 82 16 	jmp	0x2d04	; 0x2d04 <__addsf3>
    2e96:	08 95       	ret

00002e98 <atan>:
    2e98:	df 93       	push	r29
    2e9a:	dd 27       	eor	r29, r29
    2e9c:	b9 2f       	mov	r27, r25
    2e9e:	bf 77       	andi	r27, 0x7F	; 127
    2ea0:	40 e8       	ldi	r20, 0x80	; 128
    2ea2:	5f e3       	ldi	r21, 0x3F	; 63
    2ea4:	16 16       	cp	r1, r22
    2ea6:	17 06       	cpc	r1, r23
    2ea8:	48 07       	cpc	r20, r24
    2eaa:	5b 07       	cpc	r21, r27
    2eac:	18 f4       	brcc	.+6      	; 0x2eb4 <atan+0x1c>
    2eae:	d9 2f       	mov	r29, r25
    2eb0:	0e 94 04 19 	call	0x3208	; 0x3208 <inverse>
    2eb4:	9f 93       	push	r25
    2eb6:	8f 93       	push	r24
    2eb8:	7f 93       	push	r23
    2eba:	6f 93       	push	r22
    2ebc:	0e 94 bf 19 	call	0x337e	; 0x337e <square>
    2ec0:	ec e7       	ldi	r30, 0x7C	; 124
    2ec2:	f0 e0       	ldi	r31, 0x00	; 0
    2ec4:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <__fp_powser>
    2ec8:	0e 94 c5 18 	call	0x318a	; 0x318a <__fp_round>
    2ecc:	2f 91       	pop	r18
    2ece:	3f 91       	pop	r19
    2ed0:	4f 91       	pop	r20
    2ed2:	5f 91       	pop	r21
    2ed4:	0e 94 1f 19 	call	0x323e	; 0x323e <__mulsf3x>
    2ed8:	dd 23       	and	r29, r29
    2eda:	51 f0       	breq	.+20     	; 0x2ef0 <atan+0x58>
    2edc:	90 58       	subi	r25, 0x80	; 128
    2ede:	a2 ea       	ldi	r26, 0xA2	; 162
    2ee0:	2a ed       	ldi	r18, 0xDA	; 218
    2ee2:	3f e0       	ldi	r19, 0x0F	; 15
    2ee4:	49 ec       	ldi	r20, 0xC9	; 201
    2ee6:	5f e3       	ldi	r21, 0x3F	; 63
    2ee8:	d0 78       	andi	r29, 0x80	; 128
    2eea:	5d 27       	eor	r21, r29
    2eec:	0e 94 99 16 	call	0x2d32	; 0x2d32 <__addsf3x>
    2ef0:	df 91       	pop	r29
    2ef2:	0c 94 c5 18 	jmp	0x318a	; 0x318a <__fp_round>

00002ef6 <__cmpsf2>:
    2ef6:	0e 94 4f 18 	call	0x309e	; 0x309e <__fp_cmp>
    2efa:	08 f4       	brcc	.+2      	; 0x2efe <__cmpsf2+0x8>
    2efc:	81 e0       	ldi	r24, 0x01	; 1
    2efe:	08 95       	ret

00002f00 <__divsf3>:
    2f00:	0e 94 94 17 	call	0x2f28	; 0x2f28 <__divsf3x>
    2f04:	0c 94 c5 18 	jmp	0x318a	; 0x318a <__fp_round>
    2f08:	0e 94 be 18 	call	0x317c	; 0x317c <__fp_pscB>
    2f0c:	58 f0       	brcs	.+22     	; 0x2f24 <__divsf3+0x24>
    2f0e:	0e 94 b7 18 	call	0x316e	; 0x316e <__fp_pscA>
    2f12:	40 f0       	brcs	.+16     	; 0x2f24 <__divsf3+0x24>
    2f14:	29 f4       	brne	.+10     	; 0x2f20 <__divsf3+0x20>
    2f16:	5f 3f       	cpi	r21, 0xFF	; 255
    2f18:	29 f0       	breq	.+10     	; 0x2f24 <__divsf3+0x24>
    2f1a:	0c 94 73 18 	jmp	0x30e6	; 0x30e6 <__fp_inf>
    2f1e:	51 11       	cpse	r21, r1
    2f20:	0c 94 f9 18 	jmp	0x31f2	; 0x31f2 <__fp_szero>
    2f24:	0c 94 79 18 	jmp	0x30f2	; 0x30f2 <__fp_nan>

00002f28 <__divsf3x>:
    2f28:	0e 94 d6 18 	call	0x31ac	; 0x31ac <__fp_split3>
    2f2c:	68 f3       	brcs	.-38     	; 0x2f08 <__divsf3+0x8>

00002f2e <__divsf3_pse>:
    2f2e:	99 23       	and	r25, r25
    2f30:	b1 f3       	breq	.-20     	; 0x2f1e <__divsf3+0x1e>
    2f32:	55 23       	and	r21, r21
    2f34:	91 f3       	breq	.-28     	; 0x2f1a <__divsf3+0x1a>
    2f36:	95 1b       	sub	r25, r21
    2f38:	55 0b       	sbc	r21, r21
    2f3a:	bb 27       	eor	r27, r27
    2f3c:	aa 27       	eor	r26, r26
    2f3e:	62 17       	cp	r22, r18
    2f40:	73 07       	cpc	r23, r19
    2f42:	84 07       	cpc	r24, r20
    2f44:	38 f0       	brcs	.+14     	; 0x2f54 <__divsf3_pse+0x26>
    2f46:	9f 5f       	subi	r25, 0xFF	; 255
    2f48:	5f 4f       	sbci	r21, 0xFF	; 255
    2f4a:	22 0f       	add	r18, r18
    2f4c:	33 1f       	adc	r19, r19
    2f4e:	44 1f       	adc	r20, r20
    2f50:	aa 1f       	adc	r26, r26
    2f52:	a9 f3       	breq	.-22     	; 0x2f3e <__divsf3_pse+0x10>
    2f54:	35 d0       	rcall	.+106    	; 0x2fc0 <__divsf3_pse+0x92>
    2f56:	0e 2e       	mov	r0, r30
    2f58:	3a f0       	brmi	.+14     	; 0x2f68 <__divsf3_pse+0x3a>
    2f5a:	e0 e8       	ldi	r30, 0x80	; 128
    2f5c:	32 d0       	rcall	.+100    	; 0x2fc2 <__divsf3_pse+0x94>
    2f5e:	91 50       	subi	r25, 0x01	; 1
    2f60:	50 40       	sbci	r21, 0x00	; 0
    2f62:	e6 95       	lsr	r30
    2f64:	00 1c       	adc	r0, r0
    2f66:	ca f7       	brpl	.-14     	; 0x2f5a <__divsf3_pse+0x2c>
    2f68:	2b d0       	rcall	.+86     	; 0x2fc0 <__divsf3_pse+0x92>
    2f6a:	fe 2f       	mov	r31, r30
    2f6c:	29 d0       	rcall	.+82     	; 0x2fc0 <__divsf3_pse+0x92>
    2f6e:	66 0f       	add	r22, r22
    2f70:	77 1f       	adc	r23, r23
    2f72:	88 1f       	adc	r24, r24
    2f74:	bb 1f       	adc	r27, r27
    2f76:	26 17       	cp	r18, r22
    2f78:	37 07       	cpc	r19, r23
    2f7a:	48 07       	cpc	r20, r24
    2f7c:	ab 07       	cpc	r26, r27
    2f7e:	b0 e8       	ldi	r27, 0x80	; 128
    2f80:	09 f0       	breq	.+2      	; 0x2f84 <__divsf3_pse+0x56>
    2f82:	bb 0b       	sbc	r27, r27
    2f84:	80 2d       	mov	r24, r0
    2f86:	bf 01       	movw	r22, r30
    2f88:	ff 27       	eor	r31, r31
    2f8a:	93 58       	subi	r25, 0x83	; 131
    2f8c:	5f 4f       	sbci	r21, 0xFF	; 255
    2f8e:	3a f0       	brmi	.+14     	; 0x2f9e <__divsf3_pse+0x70>
    2f90:	9e 3f       	cpi	r25, 0xFE	; 254
    2f92:	51 05       	cpc	r21, r1
    2f94:	78 f0       	brcs	.+30     	; 0x2fb4 <__divsf3_pse+0x86>
    2f96:	0c 94 73 18 	jmp	0x30e6	; 0x30e6 <__fp_inf>
    2f9a:	0c 94 f9 18 	jmp	0x31f2	; 0x31f2 <__fp_szero>
    2f9e:	5f 3f       	cpi	r21, 0xFF	; 255
    2fa0:	e4 f3       	brlt	.-8      	; 0x2f9a <__divsf3_pse+0x6c>
    2fa2:	98 3e       	cpi	r25, 0xE8	; 232
    2fa4:	d4 f3       	brlt	.-12     	; 0x2f9a <__divsf3_pse+0x6c>
    2fa6:	86 95       	lsr	r24
    2fa8:	77 95       	ror	r23
    2faa:	67 95       	ror	r22
    2fac:	b7 95       	ror	r27
    2fae:	f7 95       	ror	r31
    2fb0:	9f 5f       	subi	r25, 0xFF	; 255
    2fb2:	c9 f7       	brne	.-14     	; 0x2fa6 <__divsf3_pse+0x78>
    2fb4:	88 0f       	add	r24, r24
    2fb6:	91 1d       	adc	r25, r1
    2fb8:	96 95       	lsr	r25
    2fba:	87 95       	ror	r24
    2fbc:	97 f9       	bld	r25, 7
    2fbe:	08 95       	ret
    2fc0:	e1 e0       	ldi	r30, 0x01	; 1
    2fc2:	66 0f       	add	r22, r22
    2fc4:	77 1f       	adc	r23, r23
    2fc6:	88 1f       	adc	r24, r24
    2fc8:	bb 1f       	adc	r27, r27
    2fca:	62 17       	cp	r22, r18
    2fcc:	73 07       	cpc	r23, r19
    2fce:	84 07       	cpc	r24, r20
    2fd0:	ba 07       	cpc	r27, r26
    2fd2:	20 f0       	brcs	.+8      	; 0x2fdc <__divsf3_pse+0xae>
    2fd4:	62 1b       	sub	r22, r18
    2fd6:	73 0b       	sbc	r23, r19
    2fd8:	84 0b       	sbc	r24, r20
    2fda:	ba 0b       	sbc	r27, r26
    2fdc:	ee 1f       	adc	r30, r30
    2fde:	88 f7       	brcc	.-30     	; 0x2fc2 <__divsf3_pse+0x94>
    2fe0:	e0 95       	com	r30
    2fe2:	08 95       	ret

00002fe4 <__floatunsisf>:
    2fe4:	e8 94       	clt
    2fe6:	09 c0       	rjmp	.+18     	; 0x2ffa <__floatsisf+0x12>

00002fe8 <__floatsisf>:
    2fe8:	97 fb       	bst	r25, 7
    2fea:	3e f4       	brtc	.+14     	; 0x2ffa <__floatsisf+0x12>
    2fec:	90 95       	com	r25
    2fee:	80 95       	com	r24
    2ff0:	70 95       	com	r23
    2ff2:	61 95       	neg	r22
    2ff4:	7f 4f       	sbci	r23, 0xFF	; 255
    2ff6:	8f 4f       	sbci	r24, 0xFF	; 255
    2ff8:	9f 4f       	sbci	r25, 0xFF	; 255
    2ffa:	99 23       	and	r25, r25
    2ffc:	a9 f0       	breq	.+42     	; 0x3028 <__floatsisf+0x40>
    2ffe:	f9 2f       	mov	r31, r25
    3000:	96 e9       	ldi	r25, 0x96	; 150
    3002:	bb 27       	eor	r27, r27
    3004:	93 95       	inc	r25
    3006:	f6 95       	lsr	r31
    3008:	87 95       	ror	r24
    300a:	77 95       	ror	r23
    300c:	67 95       	ror	r22
    300e:	b7 95       	ror	r27
    3010:	f1 11       	cpse	r31, r1
    3012:	f8 cf       	rjmp	.-16     	; 0x3004 <__floatsisf+0x1c>
    3014:	fa f4       	brpl	.+62     	; 0x3054 <__floatsisf+0x6c>
    3016:	bb 0f       	add	r27, r27
    3018:	11 f4       	brne	.+4      	; 0x301e <__floatsisf+0x36>
    301a:	60 ff       	sbrs	r22, 0
    301c:	1b c0       	rjmp	.+54     	; 0x3054 <__floatsisf+0x6c>
    301e:	6f 5f       	subi	r22, 0xFF	; 255
    3020:	7f 4f       	sbci	r23, 0xFF	; 255
    3022:	8f 4f       	sbci	r24, 0xFF	; 255
    3024:	9f 4f       	sbci	r25, 0xFF	; 255
    3026:	16 c0       	rjmp	.+44     	; 0x3054 <__floatsisf+0x6c>
    3028:	88 23       	and	r24, r24
    302a:	11 f0       	breq	.+4      	; 0x3030 <__floatsisf+0x48>
    302c:	96 e9       	ldi	r25, 0x96	; 150
    302e:	11 c0       	rjmp	.+34     	; 0x3052 <__floatsisf+0x6a>
    3030:	77 23       	and	r23, r23
    3032:	21 f0       	breq	.+8      	; 0x303c <__floatsisf+0x54>
    3034:	9e e8       	ldi	r25, 0x8E	; 142
    3036:	87 2f       	mov	r24, r23
    3038:	76 2f       	mov	r23, r22
    303a:	05 c0       	rjmp	.+10     	; 0x3046 <__floatsisf+0x5e>
    303c:	66 23       	and	r22, r22
    303e:	71 f0       	breq	.+28     	; 0x305c <__floatsisf+0x74>
    3040:	96 e8       	ldi	r25, 0x86	; 134
    3042:	86 2f       	mov	r24, r22
    3044:	70 e0       	ldi	r23, 0x00	; 0
    3046:	60 e0       	ldi	r22, 0x00	; 0
    3048:	2a f0       	brmi	.+10     	; 0x3054 <__floatsisf+0x6c>
    304a:	9a 95       	dec	r25
    304c:	66 0f       	add	r22, r22
    304e:	77 1f       	adc	r23, r23
    3050:	88 1f       	adc	r24, r24
    3052:	da f7       	brpl	.-10     	; 0x304a <__floatsisf+0x62>
    3054:	88 0f       	add	r24, r24
    3056:	96 95       	lsr	r25
    3058:	87 95       	ror	r24
    305a:	97 f9       	bld	r25, 7
    305c:	08 95       	ret

0000305e <__fp_arccos>:
    305e:	df 93       	push	r29
    3060:	cf 93       	push	r28
    3062:	1f 93       	push	r17
    3064:	0f 93       	push	r16
    3066:	8b 01       	movw	r16, r22
    3068:	ec 01       	movw	r28, r24
    306a:	e9 ea       	ldi	r30, 0xA9	; 169
    306c:	f0 e0       	ldi	r31, 0x00	; 0
    306e:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <__fp_powser>
    3072:	0e 94 c5 18 	call	0x318a	; 0x318a <__fp_round>
    3076:	98 01       	movw	r18, r16
    3078:	ae 01       	movw	r20, r28
    307a:	8b 01       	movw	r16, r22
    307c:	ec 01       	movw	r28, r24
    307e:	60 e0       	ldi	r22, 0x00	; 0
    3080:	70 e0       	ldi	r23, 0x00	; 0
    3082:	80 e8       	ldi	r24, 0x80	; 128
    3084:	9f e3       	ldi	r25, 0x3F	; 63
    3086:	0e 94 81 16 	call	0x2d02	; 0x2d02 <__subsf3>
    308a:	0e 94 7f 19 	call	0x32fe	; 0x32fe <sqrt>
    308e:	98 01       	movw	r18, r16
    3090:	ae 01       	movw	r20, r28
    3092:	0f 91       	pop	r16
    3094:	1f 91       	pop	r17
    3096:	cf 91       	pop	r28
    3098:	df 91       	pop	r29
    309a:	0c 94 1f 19 	jmp	0x323e	; 0x323e <__mulsf3x>

0000309e <__fp_cmp>:
    309e:	99 0f       	add	r25, r25
    30a0:	00 08       	sbc	r0, r0
    30a2:	55 0f       	add	r21, r21
    30a4:	aa 0b       	sbc	r26, r26
    30a6:	e0 e8       	ldi	r30, 0x80	; 128
    30a8:	fe ef       	ldi	r31, 0xFE	; 254
    30aa:	16 16       	cp	r1, r22
    30ac:	17 06       	cpc	r1, r23
    30ae:	e8 07       	cpc	r30, r24
    30b0:	f9 07       	cpc	r31, r25
    30b2:	c0 f0       	brcs	.+48     	; 0x30e4 <__fp_cmp+0x46>
    30b4:	12 16       	cp	r1, r18
    30b6:	13 06       	cpc	r1, r19
    30b8:	e4 07       	cpc	r30, r20
    30ba:	f5 07       	cpc	r31, r21
    30bc:	98 f0       	brcs	.+38     	; 0x30e4 <__fp_cmp+0x46>
    30be:	62 1b       	sub	r22, r18
    30c0:	73 0b       	sbc	r23, r19
    30c2:	84 0b       	sbc	r24, r20
    30c4:	95 0b       	sbc	r25, r21
    30c6:	39 f4       	brne	.+14     	; 0x30d6 <__fp_cmp+0x38>
    30c8:	0a 26       	eor	r0, r26
    30ca:	61 f0       	breq	.+24     	; 0x30e4 <__fp_cmp+0x46>
    30cc:	23 2b       	or	r18, r19
    30ce:	24 2b       	or	r18, r20
    30d0:	25 2b       	or	r18, r21
    30d2:	21 f4       	brne	.+8      	; 0x30dc <__fp_cmp+0x3e>
    30d4:	08 95       	ret
    30d6:	0a 26       	eor	r0, r26
    30d8:	09 f4       	brne	.+2      	; 0x30dc <__fp_cmp+0x3e>
    30da:	a1 40       	sbci	r26, 0x01	; 1
    30dc:	a6 95       	lsr	r26
    30de:	8f ef       	ldi	r24, 0xFF	; 255
    30e0:	81 1d       	adc	r24, r1
    30e2:	81 1d       	adc	r24, r1
    30e4:	08 95       	ret

000030e6 <__fp_inf>:
    30e6:	97 f9       	bld	r25, 7
    30e8:	9f 67       	ori	r25, 0x7F	; 127
    30ea:	80 e8       	ldi	r24, 0x80	; 128
    30ec:	70 e0       	ldi	r23, 0x00	; 0
    30ee:	60 e0       	ldi	r22, 0x00	; 0
    30f0:	08 95       	ret

000030f2 <__fp_nan>:
    30f2:	9f ef       	ldi	r25, 0xFF	; 255
    30f4:	80 ec       	ldi	r24, 0xC0	; 192
    30f6:	08 95       	ret

000030f8 <__fp_powser>:
    30f8:	df 93       	push	r29
    30fa:	cf 93       	push	r28
    30fc:	1f 93       	push	r17
    30fe:	0f 93       	push	r16
    3100:	ff 92       	push	r15
    3102:	ef 92       	push	r14
    3104:	df 92       	push	r13
    3106:	7b 01       	movw	r14, r22
    3108:	8c 01       	movw	r16, r24
    310a:	68 94       	set
    310c:	06 c0       	rjmp	.+12     	; 0x311a <__fp_powser+0x22>
    310e:	da 2e       	mov	r13, r26
    3110:	ef 01       	movw	r28, r30
    3112:	0e 94 1f 19 	call	0x323e	; 0x323e <__mulsf3x>
    3116:	fe 01       	movw	r30, r28
    3118:	e8 94       	clt
    311a:	a5 91       	lpm	r26, Z+
    311c:	25 91       	lpm	r18, Z+
    311e:	35 91       	lpm	r19, Z+
    3120:	45 91       	lpm	r20, Z+
    3122:	55 91       	lpm	r21, Z+
    3124:	a6 f3       	brts	.-24     	; 0x310e <__fp_powser+0x16>
    3126:	ef 01       	movw	r28, r30
    3128:	0e 94 99 16 	call	0x2d32	; 0x2d32 <__addsf3x>
    312c:	fe 01       	movw	r30, r28
    312e:	97 01       	movw	r18, r14
    3130:	a8 01       	movw	r20, r16
    3132:	da 94       	dec	r13
    3134:	69 f7       	brne	.-38     	; 0x3110 <__fp_powser+0x18>
    3136:	df 90       	pop	r13
    3138:	ef 90       	pop	r14
    313a:	ff 90       	pop	r15
    313c:	0f 91       	pop	r16
    313e:	1f 91       	pop	r17
    3140:	cf 91       	pop	r28
    3142:	df 91       	pop	r29
    3144:	08 95       	ret

00003146 <__fp_powsodd>:
    3146:	9f 93       	push	r25
    3148:	8f 93       	push	r24
    314a:	7f 93       	push	r23
    314c:	6f 93       	push	r22
    314e:	ff 93       	push	r31
    3150:	ef 93       	push	r30
    3152:	9b 01       	movw	r18, r22
    3154:	ac 01       	movw	r20, r24
    3156:	0e 94 0c 19 	call	0x3218	; 0x3218 <__mulsf3>
    315a:	ef 91       	pop	r30
    315c:	ff 91       	pop	r31
    315e:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <__fp_powser>
    3162:	2f 91       	pop	r18
    3164:	3f 91       	pop	r19
    3166:	4f 91       	pop	r20
    3168:	5f 91       	pop	r21
    316a:	0c 94 0c 19 	jmp	0x3218	; 0x3218 <__mulsf3>

0000316e <__fp_pscA>:
    316e:	00 24       	eor	r0, r0
    3170:	0a 94       	dec	r0
    3172:	16 16       	cp	r1, r22
    3174:	17 06       	cpc	r1, r23
    3176:	18 06       	cpc	r1, r24
    3178:	09 06       	cpc	r0, r25
    317a:	08 95       	ret

0000317c <__fp_pscB>:
    317c:	00 24       	eor	r0, r0
    317e:	0a 94       	dec	r0
    3180:	12 16       	cp	r1, r18
    3182:	13 06       	cpc	r1, r19
    3184:	14 06       	cpc	r1, r20
    3186:	05 06       	cpc	r0, r21
    3188:	08 95       	ret

0000318a <__fp_round>:
    318a:	09 2e       	mov	r0, r25
    318c:	03 94       	inc	r0
    318e:	00 0c       	add	r0, r0
    3190:	11 f4       	brne	.+4      	; 0x3196 <__fp_round+0xc>
    3192:	88 23       	and	r24, r24
    3194:	52 f0       	brmi	.+20     	; 0x31aa <__fp_round+0x20>
    3196:	bb 0f       	add	r27, r27
    3198:	40 f4       	brcc	.+16     	; 0x31aa <__fp_round+0x20>
    319a:	bf 2b       	or	r27, r31
    319c:	11 f4       	brne	.+4      	; 0x31a2 <__fp_round+0x18>
    319e:	60 ff       	sbrs	r22, 0
    31a0:	04 c0       	rjmp	.+8      	; 0x31aa <__fp_round+0x20>
    31a2:	6f 5f       	subi	r22, 0xFF	; 255
    31a4:	7f 4f       	sbci	r23, 0xFF	; 255
    31a6:	8f 4f       	sbci	r24, 0xFF	; 255
    31a8:	9f 4f       	sbci	r25, 0xFF	; 255
    31aa:	08 95       	ret

000031ac <__fp_split3>:
    31ac:	57 fd       	sbrc	r21, 7
    31ae:	90 58       	subi	r25, 0x80	; 128
    31b0:	44 0f       	add	r20, r20
    31b2:	55 1f       	adc	r21, r21
    31b4:	59 f0       	breq	.+22     	; 0x31cc <__fp_splitA+0x10>
    31b6:	5f 3f       	cpi	r21, 0xFF	; 255
    31b8:	71 f0       	breq	.+28     	; 0x31d6 <__fp_splitA+0x1a>
    31ba:	47 95       	ror	r20

000031bc <__fp_splitA>:
    31bc:	88 0f       	add	r24, r24
    31be:	97 fb       	bst	r25, 7
    31c0:	99 1f       	adc	r25, r25
    31c2:	61 f0       	breq	.+24     	; 0x31dc <__fp_splitA+0x20>
    31c4:	9f 3f       	cpi	r25, 0xFF	; 255
    31c6:	79 f0       	breq	.+30     	; 0x31e6 <__fp_splitA+0x2a>
    31c8:	87 95       	ror	r24
    31ca:	08 95       	ret
    31cc:	12 16       	cp	r1, r18
    31ce:	13 06       	cpc	r1, r19
    31d0:	14 06       	cpc	r1, r20
    31d2:	55 1f       	adc	r21, r21
    31d4:	f2 cf       	rjmp	.-28     	; 0x31ba <__fp_split3+0xe>
    31d6:	46 95       	lsr	r20
    31d8:	f1 df       	rcall	.-30     	; 0x31bc <__fp_splitA>
    31da:	08 c0       	rjmp	.+16     	; 0x31ec <__fp_splitA+0x30>
    31dc:	16 16       	cp	r1, r22
    31de:	17 06       	cpc	r1, r23
    31e0:	18 06       	cpc	r1, r24
    31e2:	99 1f       	adc	r25, r25
    31e4:	f1 cf       	rjmp	.-30     	; 0x31c8 <__fp_splitA+0xc>
    31e6:	86 95       	lsr	r24
    31e8:	71 05       	cpc	r23, r1
    31ea:	61 05       	cpc	r22, r1
    31ec:	08 94       	sec
    31ee:	08 95       	ret

000031f0 <__fp_zero>:
    31f0:	e8 94       	clt

000031f2 <__fp_szero>:
    31f2:	bb 27       	eor	r27, r27
    31f4:	66 27       	eor	r22, r22
    31f6:	77 27       	eor	r23, r23
    31f8:	cb 01       	movw	r24, r22
    31fa:	97 f9       	bld	r25, 7
    31fc:	08 95       	ret

000031fe <__gesf2>:
    31fe:	0e 94 4f 18 	call	0x309e	; 0x309e <__fp_cmp>
    3202:	08 f4       	brcc	.+2      	; 0x3206 <__gesf2+0x8>
    3204:	8f ef       	ldi	r24, 0xFF	; 255
    3206:	08 95       	ret

00003208 <inverse>:
    3208:	9b 01       	movw	r18, r22
    320a:	ac 01       	movw	r20, r24
    320c:	60 e0       	ldi	r22, 0x00	; 0
    320e:	70 e0       	ldi	r23, 0x00	; 0
    3210:	80 e8       	ldi	r24, 0x80	; 128
    3212:	9f e3       	ldi	r25, 0x3F	; 63
    3214:	0c 94 80 17 	jmp	0x2f00	; 0x2f00 <__divsf3>

00003218 <__mulsf3>:
    3218:	0e 94 1f 19 	call	0x323e	; 0x323e <__mulsf3x>
    321c:	0c 94 c5 18 	jmp	0x318a	; 0x318a <__fp_round>
    3220:	0e 94 b7 18 	call	0x316e	; 0x316e <__fp_pscA>
    3224:	38 f0       	brcs	.+14     	; 0x3234 <__mulsf3+0x1c>
    3226:	0e 94 be 18 	call	0x317c	; 0x317c <__fp_pscB>
    322a:	20 f0       	brcs	.+8      	; 0x3234 <__mulsf3+0x1c>
    322c:	95 23       	and	r25, r21
    322e:	11 f0       	breq	.+4      	; 0x3234 <__mulsf3+0x1c>
    3230:	0c 94 73 18 	jmp	0x30e6	; 0x30e6 <__fp_inf>
    3234:	0c 94 79 18 	jmp	0x30f2	; 0x30f2 <__fp_nan>
    3238:	11 24       	eor	r1, r1
    323a:	0c 94 f9 18 	jmp	0x31f2	; 0x31f2 <__fp_szero>

0000323e <__mulsf3x>:
    323e:	0e 94 d6 18 	call	0x31ac	; 0x31ac <__fp_split3>
    3242:	70 f3       	brcs	.-36     	; 0x3220 <__mulsf3+0x8>

00003244 <__mulsf3_pse>:
    3244:	95 9f       	mul	r25, r21
    3246:	c1 f3       	breq	.-16     	; 0x3238 <__mulsf3+0x20>
    3248:	95 0f       	add	r25, r21
    324a:	50 e0       	ldi	r21, 0x00	; 0
    324c:	55 1f       	adc	r21, r21
    324e:	62 9f       	mul	r22, r18
    3250:	f0 01       	movw	r30, r0
    3252:	72 9f       	mul	r23, r18
    3254:	bb 27       	eor	r27, r27
    3256:	f0 0d       	add	r31, r0
    3258:	b1 1d       	adc	r27, r1
    325a:	63 9f       	mul	r22, r19
    325c:	aa 27       	eor	r26, r26
    325e:	f0 0d       	add	r31, r0
    3260:	b1 1d       	adc	r27, r1
    3262:	aa 1f       	adc	r26, r26
    3264:	64 9f       	mul	r22, r20
    3266:	66 27       	eor	r22, r22
    3268:	b0 0d       	add	r27, r0
    326a:	a1 1d       	adc	r26, r1
    326c:	66 1f       	adc	r22, r22
    326e:	82 9f       	mul	r24, r18
    3270:	22 27       	eor	r18, r18
    3272:	b0 0d       	add	r27, r0
    3274:	a1 1d       	adc	r26, r1
    3276:	62 1f       	adc	r22, r18
    3278:	73 9f       	mul	r23, r19
    327a:	b0 0d       	add	r27, r0
    327c:	a1 1d       	adc	r26, r1
    327e:	62 1f       	adc	r22, r18
    3280:	83 9f       	mul	r24, r19
    3282:	a0 0d       	add	r26, r0
    3284:	61 1d       	adc	r22, r1
    3286:	22 1f       	adc	r18, r18
    3288:	74 9f       	mul	r23, r20
    328a:	33 27       	eor	r19, r19
    328c:	a0 0d       	add	r26, r0
    328e:	61 1d       	adc	r22, r1
    3290:	23 1f       	adc	r18, r19
    3292:	84 9f       	mul	r24, r20
    3294:	60 0d       	add	r22, r0
    3296:	21 1d       	adc	r18, r1
    3298:	82 2f       	mov	r24, r18
    329a:	76 2f       	mov	r23, r22
    329c:	6a 2f       	mov	r22, r26
    329e:	11 24       	eor	r1, r1
    32a0:	9f 57       	subi	r25, 0x7F	; 127
    32a2:	50 40       	sbci	r21, 0x00	; 0
    32a4:	9a f0       	brmi	.+38     	; 0x32cc <__mulsf3_pse+0x88>
    32a6:	f1 f0       	breq	.+60     	; 0x32e4 <__mulsf3_pse+0xa0>
    32a8:	88 23       	and	r24, r24
    32aa:	4a f0       	brmi	.+18     	; 0x32be <__mulsf3_pse+0x7a>
    32ac:	ee 0f       	add	r30, r30
    32ae:	ff 1f       	adc	r31, r31
    32b0:	bb 1f       	adc	r27, r27
    32b2:	66 1f       	adc	r22, r22
    32b4:	77 1f       	adc	r23, r23
    32b6:	88 1f       	adc	r24, r24
    32b8:	91 50       	subi	r25, 0x01	; 1
    32ba:	50 40       	sbci	r21, 0x00	; 0
    32bc:	a9 f7       	brne	.-22     	; 0x32a8 <__mulsf3_pse+0x64>
    32be:	9e 3f       	cpi	r25, 0xFE	; 254
    32c0:	51 05       	cpc	r21, r1
    32c2:	80 f0       	brcs	.+32     	; 0x32e4 <__mulsf3_pse+0xa0>
    32c4:	0c 94 73 18 	jmp	0x30e6	; 0x30e6 <__fp_inf>
    32c8:	0c 94 f9 18 	jmp	0x31f2	; 0x31f2 <__fp_szero>
    32cc:	5f 3f       	cpi	r21, 0xFF	; 255
    32ce:	e4 f3       	brlt	.-8      	; 0x32c8 <__mulsf3_pse+0x84>
    32d0:	98 3e       	cpi	r25, 0xE8	; 232
    32d2:	d4 f3       	brlt	.-12     	; 0x32c8 <__mulsf3_pse+0x84>
    32d4:	86 95       	lsr	r24
    32d6:	77 95       	ror	r23
    32d8:	67 95       	ror	r22
    32da:	b7 95       	ror	r27
    32dc:	f7 95       	ror	r31
    32de:	e7 95       	ror	r30
    32e0:	9f 5f       	subi	r25, 0xFF	; 255
    32e2:	c1 f7       	brne	.-16     	; 0x32d4 <__mulsf3_pse+0x90>
    32e4:	fe 2b       	or	r31, r30
    32e6:	88 0f       	add	r24, r24
    32e8:	91 1d       	adc	r25, r1
    32ea:	96 95       	lsr	r25
    32ec:	87 95       	ror	r24
    32ee:	97 f9       	bld	r25, 7
    32f0:	08 95       	ret
    32f2:	19 f4       	brne	.+6      	; 0x32fa <__mulsf3_pse+0xb6>
    32f4:	16 f4       	brtc	.+4      	; 0x32fa <__mulsf3_pse+0xb6>
    32f6:	0c 94 79 18 	jmp	0x30f2	; 0x30f2 <__fp_nan>
    32fa:	0c 94 c3 19 	jmp	0x3386	; 0x3386 <__fp_mpack>

000032fe <sqrt>:
    32fe:	0e 94 de 18 	call	0x31bc	; 0x31bc <__fp_splitA>
    3302:	b8 f3       	brcs	.-18     	; 0x32f2 <__mulsf3_pse+0xae>
    3304:	99 23       	and	r25, r25
    3306:	c9 f3       	breq	.-14     	; 0x32fa <__mulsf3_pse+0xb6>
    3308:	b6 f3       	brts	.-20     	; 0x32f6 <__mulsf3_pse+0xb2>
    330a:	9f 57       	subi	r25, 0x7F	; 127
    330c:	55 0b       	sbc	r21, r21
    330e:	87 ff       	sbrs	r24, 7
    3310:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <__fp_norm2>
    3314:	00 24       	eor	r0, r0
    3316:	a0 e6       	ldi	r26, 0x60	; 96
    3318:	40 ea       	ldi	r20, 0xA0	; 160
    331a:	90 01       	movw	r18, r0
    331c:	80 58       	subi	r24, 0x80	; 128
    331e:	56 95       	lsr	r21
    3320:	97 95       	ror	r25
    3322:	28 f4       	brcc	.+10     	; 0x332e <sqrt+0x30>
    3324:	80 5c       	subi	r24, 0xC0	; 192
    3326:	66 0f       	add	r22, r22
    3328:	77 1f       	adc	r23, r23
    332a:	88 1f       	adc	r24, r24
    332c:	20 f0       	brcs	.+8      	; 0x3336 <sqrt+0x38>
    332e:	26 17       	cp	r18, r22
    3330:	37 07       	cpc	r19, r23
    3332:	48 07       	cpc	r20, r24
    3334:	30 f4       	brcc	.+12     	; 0x3342 <sqrt+0x44>
    3336:	62 1b       	sub	r22, r18
    3338:	73 0b       	sbc	r23, r19
    333a:	84 0b       	sbc	r24, r20
    333c:	20 29       	or	r18, r0
    333e:	31 29       	or	r19, r1
    3340:	4a 2b       	or	r20, r26
    3342:	a6 95       	lsr	r26
    3344:	17 94       	ror	r1
    3346:	07 94       	ror	r0
    3348:	20 25       	eor	r18, r0
    334a:	31 25       	eor	r19, r1
    334c:	4a 27       	eor	r20, r26
    334e:	58 f7       	brcc	.-42     	; 0x3326 <sqrt+0x28>
    3350:	66 0f       	add	r22, r22
    3352:	77 1f       	adc	r23, r23
    3354:	88 1f       	adc	r24, r24
    3356:	20 f0       	brcs	.+8      	; 0x3360 <sqrt+0x62>
    3358:	26 17       	cp	r18, r22
    335a:	37 07       	cpc	r19, r23
    335c:	48 07       	cpc	r20, r24
    335e:	30 f4       	brcc	.+12     	; 0x336c <sqrt+0x6e>
    3360:	62 0b       	sbc	r22, r18
    3362:	73 0b       	sbc	r23, r19
    3364:	84 0b       	sbc	r24, r20
    3366:	20 0d       	add	r18, r0
    3368:	31 1d       	adc	r19, r1
    336a:	41 1d       	adc	r20, r1
    336c:	a0 95       	com	r26
    336e:	81 f7       	brne	.-32     	; 0x3350 <sqrt+0x52>
    3370:	b9 01       	movw	r22, r18
    3372:	84 2f       	mov	r24, r20
    3374:	91 58       	subi	r25, 0x81	; 129
    3376:	88 0f       	add	r24, r24
    3378:	96 95       	lsr	r25
    337a:	87 95       	ror	r24
    337c:	08 95       	ret

0000337e <square>:
    337e:	9b 01       	movw	r18, r22
    3380:	ac 01       	movw	r20, r24
    3382:	0c 94 0c 19 	jmp	0x3218	; 0x3218 <__mulsf3>

00003386 <__fp_mpack>:
    3386:	9f 3f       	cpi	r25, 0xFF	; 255
    3388:	31 f0       	breq	.+12     	; 0x3396 <__fp_mpack_finite+0xc>

0000338a <__fp_mpack_finite>:
    338a:	91 50       	subi	r25, 0x01	; 1
    338c:	20 f4       	brcc	.+8      	; 0x3396 <__fp_mpack_finite+0xc>
    338e:	87 95       	ror	r24
    3390:	77 95       	ror	r23
    3392:	67 95       	ror	r22
    3394:	b7 95       	ror	r27
    3396:	88 0f       	add	r24, r24
    3398:	91 1d       	adc	r25, r1
    339a:	96 95       	lsr	r25
    339c:	87 95       	ror	r24
    339e:	97 f9       	bld	r25, 7
    33a0:	08 95       	ret

000033a2 <__fp_norm2>:
    33a2:	91 50       	subi	r25, 0x01	; 1
    33a4:	50 40       	sbci	r21, 0x00	; 0
    33a6:	66 0f       	add	r22, r22
    33a8:	77 1f       	adc	r23, r23
    33aa:	88 1f       	adc	r24, r24
    33ac:	d2 f7       	brpl	.-12     	; 0x33a2 <__fp_norm2>
    33ae:	08 95       	ret

000033b0 <__vector_11>:

volatile unsigned long timer1_millis;
//NOTE: A unsigned long holds values from 0 to 4,294,967,295 (2^32 - 1). It will roll over to 0 after reaching its maximum value.

ISR(TIMER1_COMPA_vect)
{
    33b0:	1f 92       	push	r1
    33b2:	0f 92       	push	r0
    33b4:	0f b6       	in	r0, 0x3f	; 63
    33b6:	0f 92       	push	r0
    33b8:	11 24       	eor	r1, r1
    33ba:	8f 93       	push	r24
    33bc:	9f 93       	push	r25
    33be:	af 93       	push	r26
    33c0:	bf 93       	push	r27
	timer1_millis++;
    33c2:	80 91 4b 03 	lds	r24, 0x034B	; 0x80034b <timer1_millis>
    33c6:	90 91 4c 03 	lds	r25, 0x034C	; 0x80034c <timer1_millis+0x1>
    33ca:	a0 91 4d 03 	lds	r26, 0x034D	; 0x80034d <timer1_millis+0x2>
    33ce:	b0 91 4e 03 	lds	r27, 0x034E	; 0x80034e <timer1_millis+0x3>
    33d2:	01 96       	adiw	r24, 0x01	; 1
    33d4:	a1 1d       	adc	r26, r1
    33d6:	b1 1d       	adc	r27, r1
    33d8:	80 93 4b 03 	sts	0x034B, r24	; 0x80034b <timer1_millis>
    33dc:	90 93 4c 03 	sts	0x034C, r25	; 0x80034c <timer1_millis+0x1>
    33e0:	a0 93 4d 03 	sts	0x034D, r26	; 0x80034d <timer1_millis+0x2>
    33e4:	b0 93 4e 03 	sts	0x034E, r27	; 0x80034e <timer1_millis+0x3>
}
    33e8:	bf 91       	pop	r27
    33ea:	af 91       	pop	r26
    33ec:	9f 91       	pop	r25
    33ee:	8f 91       	pop	r24
    33f0:	0f 90       	pop	r0
    33f2:	0f be       	out	0x3f, r0	; 63
    33f4:	0f 90       	pop	r0
    33f6:	1f 90       	pop	r1
    33f8:	18 95       	reti

000033fa <init_millis>:

void init_millis(unsigned long f_cpu)
{
	unsigned long ctc_match_overflow;
	
	ctc_match_overflow = ((f_cpu / 1000) / 8); //when timer1 is this value, 1ms has passed
    33fa:	20 e4       	ldi	r18, 0x40	; 64
    33fc:	3f e1       	ldi	r19, 0x1F	; 31
    33fe:	40 e0       	ldi	r20, 0x00	; 0
    3400:	50 e0       	ldi	r21, 0x00	; 0
    3402:	0e 94 28 23 	call	0x4650	; 0x4650 <__udivmodsi4>
	
	// (Set timer to clear when matching ctc_match_overflow) | (Set clock divisor to 8)
	TCCR1B |= (1 << WGM12) | (1 << CS11);
    3406:	e1 e8       	ldi	r30, 0x81	; 129
    3408:	f0 e0       	ldi	r31, 0x00	; 0
    340a:	80 81       	ld	r24, Z
    340c:	8a 60       	ori	r24, 0x0A	; 10
    340e:	80 83       	st	Z, r24
	
	// high byte first, then low byte
	OCR1AH = (ctc_match_overflow >> 8);
    3410:	bb 27       	eor	r27, r27
    3412:	a5 2f       	mov	r26, r21
    3414:	94 2f       	mov	r25, r20
    3416:	83 2f       	mov	r24, r19
    3418:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
	OCR1AL = ctc_match_overflow;
    341c:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	
	// Enable the compare match interrupt
	TIMSK1 |= (1 << OCIE1A);
    3420:	ef e6       	ldi	r30, 0x6F	; 111
    3422:	f0 e0       	ldi	r31, 0x00	; 0
    3424:	80 81       	ld	r24, Z
    3426:	82 60       	ori	r24, 0x02	; 2
    3428:	80 83       	st	Z, r24
    342a:	08 95       	ret

0000342c <millis>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    342c:	f8 94       	cli
{
	unsigned long millis_return;
	
	// Ensure this cannot be disrupted
	ATOMIC_BLOCK(ATOMIC_FORCEON) {
		millis_return = timer1_millis;
    342e:	60 91 4b 03 	lds	r22, 0x034B	; 0x80034b <timer1_millis>
    3432:	70 91 4c 03 	lds	r23, 0x034C	; 0x80034c <timer1_millis+0x1>
    3436:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <timer1_millis+0x2>
    343a:	90 91 4e 03 	lds	r25, 0x034E	; 0x80034e <timer1_millis+0x3>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    343e:	78 94       	sei
	}
	return millis_return;
    3440:	08 95       	ret

00003442 <wire_on_receive_service>:
        w &= mask;
        w >>= (bit_start - length + 1);
        *data = w;
    }
    return count;
}
    3442:	cf 93       	push	r28
    3444:	df 93       	push	r29
    3446:	ec 01       	movw	r28, r24
    3448:	e0 91 77 02 	lds	r30, 0x0277	; 0x800277 <user_on_receive>
    344c:	f0 91 78 02 	lds	r31, 0x0278	; 0x800278 <user_on_receive+0x1>
    3450:	30 97       	sbiw	r30, 0x00	; 0
    3452:	01 f1       	breq	.+64     	; 0x3494 <wire_on_receive_service+0x52>
    3454:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <rx_buffer_index>
    3458:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <rx_buffer_length>
    345c:	98 17       	cp	r25, r24
    345e:	d0 f0       	brcs	.+52     	; 0x3494 <wire_on_receive_service+0x52>
    3460:	16 16       	cp	r1, r22
    3462:	17 06       	cpc	r1, r23
    3464:	8c f4       	brge	.+34     	; 0x3488 <wire_on_receive_service+0x46>
    3466:	20 e0       	ldi	r18, 0x00	; 0
    3468:	30 e0       	ldi	r19, 0x00	; 0
    346a:	90 e0       	ldi	r25, 0x00	; 0
    346c:	de 01       	movw	r26, r28
    346e:	a9 0f       	add	r26, r25
    3470:	b1 1d       	adc	r27, r1
    3472:	4c 91       	ld	r20, X
    3474:	d9 01       	movw	r26, r18
    3476:	a1 5b       	subi	r26, 0xB1	; 177
    3478:	bc 4f       	sbci	r27, 0xFC	; 252
    347a:	4c 93       	st	X, r20
    347c:	9f 5f       	subi	r25, 0xFF	; 255
    347e:	29 2f       	mov	r18, r25
    3480:	30 e0       	ldi	r19, 0x00	; 0
    3482:	26 17       	cp	r18, r22
    3484:	37 07       	cpc	r19, r23
    3486:	94 f3       	brlt	.-28     	; 0x346c <wire_on_receive_service+0x2a>
    3488:	cb 01       	movw	r24, r22
    348a:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <rx_buffer_index>
    348e:	60 93 75 02 	sts	0x0275, r22	; 0x800275 <rx_buffer_length>
    3492:	09 95       	icall
    3494:	df 91       	pop	r29
    3496:	cf 91       	pop	r28
    3498:	08 95       	ret

0000349a <wire_on_request_service>:
    349a:	e0 91 79 02 	lds	r30, 0x0279	; 0x800279 <user_on_request>
    349e:	f0 91 7a 02 	lds	r31, 0x027A	; 0x80027a <user_on_request+0x1>
    34a2:	30 97       	sbiw	r30, 0x00	; 0
    34a4:	29 f0       	breq	.+10     	; 0x34b0 <wire_on_request_service+0x16>
    34a6:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <tx_buffer_index>
    34aa:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <tx_buffer_length>
    34ae:	09 95       	icall
    34b0:	08 95       	ret

000034b2 <wire_init>:
    34b2:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <rx_buffer_index>
    34b6:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <rx_buffer_length>
    34ba:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <tx_buffer_index>
    34be:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <tx_buffer_length>
    34c2:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <twi_init>
    34c6:	8d e4       	ldi	r24, 0x4D	; 77
    34c8:	9a e1       	ldi	r25, 0x1A	; 26
    34ca:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <twi_attach_slave_tx_event>
    34ce:	81 e2       	ldi	r24, 0x21	; 33
    34d0:	9a e1       	ldi	r25, 0x1A	; 26
    34d2:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <twi_attach_slave_rx_event>
    34d6:	08 95       	ret

000034d8 <wire_set_address>:
    34d8:	0e 94 fd 1c 	call	0x39fa	; 0x39fa <twi_set_address>
    34dc:	08 95       	ret

000034de <wire_get_status>:
    34de:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <twi_get_state>
    34e2:	08 95       	ret

000034e4 <wire_begin_transmission>:
    34e4:	91 e0       	ldi	r25, 0x01	; 1
    34e6:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <transmitting>
    34ea:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <tx_address>
    34ee:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <tx_buffer_index>
    34f2:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <tx_buffer_length>
    34f6:	08 95       	ret

000034f8 <wire_end_transmission>:
    34f8:	0f 93       	push	r16
    34fa:	08 2f       	mov	r16, r24
    34fc:	21 e0       	ldi	r18, 0x01	; 1
    34fe:	40 91 72 02 	lds	r20, 0x0272	; 0x800272 <tx_buffer_length>
    3502:	6f e6       	ldi	r22, 0x6F	; 111
    3504:	73 e0       	ldi	r23, 0x03	; 3
    3506:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <tx_address>
    350a:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <twi_write>
    350e:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <tx_buffer_index>
    3512:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <tx_buffer_length>
    3516:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <transmitting>
    351a:	0f 91       	pop	r16
    351c:	08 95       	ret

0000351e <wire_write>:
    351e:	cf 93       	push	r28
    3520:	df 93       	push	r29
    3522:	1f 92       	push	r1
    3524:	cd b7       	in	r28, 0x3d	; 61
    3526:	de b7       	in	r29, 0x3e	; 62
    3528:	89 83       	std	Y+1, r24	; 0x01
    352a:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <transmitting>
    352e:	88 23       	and	r24, r24
    3530:	a1 f0       	breq	.+40     	; 0x355a <wire_write+0x3c>
    3532:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <tx_buffer_length>
    3536:	80 32       	cpi	r24, 0x20	; 32
    3538:	c0 f4       	brcc	.+48     	; 0x356a <wire_write+0x4c>
    353a:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <tx_buffer_index>
    353e:	e8 2f       	mov	r30, r24
    3540:	f0 e0       	ldi	r31, 0x00	; 0
    3542:	e1 59       	subi	r30, 0x91	; 145
    3544:	fc 4f       	sbci	r31, 0xFC	; 252
    3546:	99 81       	ldd	r25, Y+1	; 0x01
    3548:	90 83       	st	Z, r25
    354a:	8f 5f       	subi	r24, 0xFF	; 255
    354c:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <tx_buffer_index>
    3550:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <tx_buffer_length>
    3554:	81 e0       	ldi	r24, 0x01	; 1
    3556:	90 e0       	ldi	r25, 0x00	; 0
    3558:	0a c0       	rjmp	.+20     	; 0x356e <wire_write+0x50>
    355a:	61 e0       	ldi	r22, 0x01	; 1
    355c:	ce 01       	movw	r24, r28
    355e:	01 96       	adiw	r24, 0x01	; 1
    3560:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <twi_transmit>
    3564:	81 e0       	ldi	r24, 0x01	; 1
    3566:	90 e0       	ldi	r25, 0x00	; 0
    3568:	02 c0       	rjmp	.+4      	; 0x356e <wire_write+0x50>
    356a:	80 e0       	ldi	r24, 0x00	; 0
    356c:	90 e0       	ldi	r25, 0x00	; 0
    356e:	0f 90       	pop	r0
    3570:	df 91       	pop	r29
    3572:	cf 91       	pop	r28
    3574:	08 95       	ret

00003576 <wire_request_from>:
    3576:	8f 92       	push	r8
    3578:	9f 92       	push	r9
    357a:	af 92       	push	r10
    357c:	bf 92       	push	r11
    357e:	ef 92       	push	r14
    3580:	0f 93       	push	r16
    3582:	1f 93       	push	r17
    3584:	cf 93       	push	r28
    3586:	df 93       	push	r29
    3588:	18 2f       	mov	r17, r24
    358a:	d6 2f       	mov	r29, r22
    358c:	49 01       	movw	r8, r18
    358e:	5a 01       	movw	r10, r20
    3590:	00 23       	and	r16, r16
    3592:	09 f1       	breq	.+66     	; 0x35d6 <wire_request_from+0x60>
    3594:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <wire_begin_transmission>
    3598:	04 30       	cpi	r16, 0x04	; 4
    359a:	08 f0       	brcs	.+2      	; 0x359e <wire_request_from+0x28>
    359c:	03 e0       	ldi	r16, 0x03	; 3
    359e:	cf ef       	ldi	r28, 0xFF	; 255
    35a0:	c0 0f       	add	r28, r16
    35a2:	00 23       	and	r16, r16
    35a4:	a9 f0       	breq	.+42     	; 0x35d0 <wire_request_from+0x5a>
    35a6:	8c 2f       	mov	r24, r28
    35a8:	88 0f       	add	r24, r24
    35aa:	88 0f       	add	r24, r24
    35ac:	88 0f       	add	r24, r24
    35ae:	a5 01       	movw	r20, r10
    35b0:	94 01       	movw	r18, r8
    35b2:	04 c0       	rjmp	.+8      	; 0x35bc <wire_request_from+0x46>
    35b4:	56 95       	lsr	r21
    35b6:	47 95       	ror	r20
    35b8:	37 95       	ror	r19
    35ba:	27 95       	ror	r18
    35bc:	8a 95       	dec	r24
    35be:	d2 f7       	brpl	.-12     	; 0x35b4 <wire_request_from+0x3e>
    35c0:	da 01       	movw	r26, r20
    35c2:	c9 01       	movw	r24, r18
    35c4:	0e 94 8f 1a 	call	0x351e	; 0x351e <wire_write>
    35c8:	8c 2f       	mov	r24, r28
    35ca:	c1 50       	subi	r28, 0x01	; 1
    35cc:	81 11       	cpse	r24, r1
    35ce:	eb cf       	rjmp	.-42     	; 0x35a6 <wire_request_from+0x30>
    35d0:	80 e0       	ldi	r24, 0x00	; 0
    35d2:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <wire_end_transmission>
    35d6:	4d 2f       	mov	r20, r29
    35d8:	d1 32       	cpi	r29, 0x21	; 33
    35da:	08 f0       	brcs	.+2      	; 0x35de <wire_request_from+0x68>
    35dc:	40 e2       	ldi	r20, 0x20	; 32
    35de:	2e 2d       	mov	r18, r14
    35e0:	6f e4       	ldi	r22, 0x4F	; 79
    35e2:	73 e0       	ldi	r23, 0x03	; 3
    35e4:	81 2f       	mov	r24, r17
    35e6:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <twi_read>
    35ea:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <rx_buffer_index>
    35ee:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <rx_buffer_length>
    35f2:	df 91       	pop	r29
    35f4:	cf 91       	pop	r28
    35f6:	1f 91       	pop	r17
    35f8:	0f 91       	pop	r16
    35fa:	ef 90       	pop	r14
    35fc:	bf 90       	pop	r11
    35fe:	af 90       	pop	r10
    3600:	9f 90       	pop	r9
    3602:	8f 90       	pop	r8
    3604:	08 95       	ret

00003606 <wire_available>:
    3606:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <rx_buffer_length>
    360a:	90 e0       	ldi	r25, 0x00	; 0
    360c:	20 91 76 02 	lds	r18, 0x0276	; 0x800276 <rx_buffer_index>
    3610:	82 1b       	sub	r24, r18
    3612:	91 09       	sbc	r25, r1
    3614:	08 95       	ret

00003616 <wire_read>:
    3616:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <rx_buffer_index>
    361a:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <rx_buffer_length>
    361e:	98 17       	cp	r25, r24
    3620:	50 f4       	brcc	.+20     	; 0x3636 <wire_read+0x20>
    3622:	e9 2f       	mov	r30, r25
    3624:	f0 e0       	ldi	r31, 0x00	; 0
    3626:	e1 5b       	subi	r30, 0xB1	; 177
    3628:	fc 4f       	sbci	r31, 0xFC	; 252
    362a:	20 81       	ld	r18, Z
    362c:	30 e0       	ldi	r19, 0x00	; 0
    362e:	9f 5f       	subi	r25, 0xFF	; 255
    3630:	90 93 76 02 	sts	0x0276, r25	; 0x800276 <rx_buffer_index>
    3634:	02 c0       	rjmp	.+4      	; 0x363a <wire_read+0x24>
    3636:	2f ef       	ldi	r18, 0xFF	; 255
    3638:	3f ef       	ldi	r19, 0xFF	; 255
    363a:	c9 01       	movw	r24, r18
    363c:	08 95       	ret

0000363e <wire_set_on_receive>:
    363e:	90 93 78 02 	sts	0x0278, r25	; 0x800278 <user_on_receive+0x1>
    3642:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <user_on_receive>
    3646:	08 95       	ret

00003648 <wire_set_on_request>:
    3648:	90 93 7a 02 	sts	0x027A, r25	; 0x80027a <user_on_request+0x1>
    364c:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <user_on_request>
    3650:	08 95       	ret

00003652 <i2c_read_bytes>:
    3652:	2f 92       	push	r2
    3654:	3f 92       	push	r3
    3656:	4f 92       	push	r4
    3658:	5f 92       	push	r5
    365a:	6f 92       	push	r6
    365c:	7f 92       	push	r7
    365e:	8f 92       	push	r8
    3660:	9f 92       	push	r9
    3662:	af 92       	push	r10
    3664:	bf 92       	push	r11
    3666:	cf 92       	push	r12
    3668:	df 92       	push	r13
    366a:	ef 92       	push	r14
    366c:	ff 92       	push	r15
    366e:	0f 93       	push	r16
    3670:	1f 93       	push	r17
    3672:	cf 93       	push	r28
    3674:	df 93       	push	r29
    3676:	cd b7       	in	r28, 0x3d	; 61
    3678:	de b7       	in	r29, 0x3e	; 62
    367a:	28 97       	sbiw	r28, 0x08	; 8
    367c:	0f b6       	in	r0, 0x3f	; 63
    367e:	f8 94       	cli
    3680:	de bf       	out	0x3e, r29	; 62
    3682:	0f be       	out	0x3f, r0	; 63
    3684:	cd bf       	out	0x3d, r28	; 61
    3686:	f8 2e       	mov	r15, r24
    3688:	6d 83       	std	Y+5, r22	; 0x05
    368a:	84 2e       	mov	r8, r20
    368c:	59 01       	movw	r10, r18
    368e:	68 01       	movw	r12, r16
    3690:	0e 94 16 1a 	call	0x342c	; 0x342c <millis>
    3694:	2b 01       	movw	r4, r22
    3696:	3c 01       	movw	r6, r24
    3698:	88 20       	and	r8, r8
    369a:	09 f4       	brne	.+2      	; 0x369e <i2c_read_bytes+0x4c>
    369c:	5a c0       	rjmp	.+180    	; 0x3752 <i2c_read_bytes+0x100>
    369e:	91 2c       	mov	r9, r1
    36a0:	10 e0       	ldi	r17, 0x00	; 0
    36a2:	28 2c       	mov	r2, r8
    36a4:	31 2c       	mov	r3, r1
    36a6:	96 01       	movw	r18, r12
    36a8:	40 e0       	ldi	r20, 0x00	; 0
    36aa:	50 e0       	ldi	r21, 0x00	; 0
    36ac:	29 83       	std	Y+1, r18	; 0x01
    36ae:	3a 83       	std	Y+2, r19	; 0x02
    36b0:	4b 83       	std	Y+3, r20	; 0x03
    36b2:	5c 83       	std	Y+4, r21	; 0x04
    36b4:	8e 82       	std	Y+6, r8	; 0x06
    36b6:	8f 2d       	mov	r24, r15
    36b8:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <wire_begin_transmission>
    36bc:	8d 81       	ldd	r24, Y+5	; 0x05
    36be:	0e 94 8f 1a 	call	0x351e	; 0x351e <wire_write>
    36c2:	81 e0       	ldi	r24, 0x01	; 1
    36c4:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <wire_end_transmission>
    36c8:	8f 2d       	mov	r24, r15
    36ca:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <wire_begin_transmission>
    36ce:	c1 01       	movw	r24, r2
    36d0:	89 19       	sub	r24, r9
    36d2:	91 09       	sbc	r25, r1
    36d4:	80 97       	sbiw	r24, 0x20	; 32
    36d6:	1c f4       	brge	.+6      	; 0x36de <i2c_read_bytes+0x8c>
    36d8:	68 2d       	mov	r22, r8
    36da:	69 19       	sub	r22, r9
    36dc:	01 c0       	rjmp	.+2      	; 0x36e0 <i2c_read_bytes+0x8e>
    36de:	60 e2       	ldi	r22, 0x20	; 32
    36e0:	ee 24       	eor	r14, r14
    36e2:	e3 94       	inc	r14
    36e4:	00 e0       	ldi	r16, 0x00	; 0
    36e6:	20 e0       	ldi	r18, 0x00	; 0
    36e8:	30 e0       	ldi	r19, 0x00	; 0
    36ea:	a9 01       	movw	r20, r18
    36ec:	8f 2d       	mov	r24, r15
    36ee:	0e 94 bb 1a 	call	0x3576	; 0x3576 <wire_request_from>
    36f2:	0d c0       	rjmp	.+26     	; 0x370e <i2c_read_bytes+0xbc>
    36f4:	a5 01       	movw	r20, r10
    36f6:	41 0f       	add	r20, r17
    36f8:	51 1d       	adc	r21, r1
    36fa:	17 fd       	sbrc	r17, 7
    36fc:	5a 95       	dec	r21
    36fe:	58 87       	std	Y+8, r21	; 0x08
    3700:	4f 83       	std	Y+7, r20	; 0x07
    3702:	0e 94 0b 1b 	call	0x3616	; 0x3616 <wire_read>
    3706:	af 81       	ldd	r26, Y+7	; 0x07
    3708:	b8 85       	ldd	r27, Y+8	; 0x08
    370a:	8c 93       	st	X, r24
    370c:	1f 5f       	subi	r17, 0xFF	; 255
    370e:	0e 94 03 1b 	call	0x3606	; 0x3606 <wire_available>
    3712:	89 2b       	or	r24, r25
    3714:	a1 f0       	breq	.+40     	; 0x373e <i2c_read_bytes+0xec>
    3716:	c1 14       	cp	r12, r1
    3718:	d1 04       	cpc	r13, r1
    371a:	61 f3       	breq	.-40     	; 0x36f4 <i2c_read_bytes+0xa2>
    371c:	0e 94 16 1a 	call	0x342c	; 0x342c <millis>
    3720:	dc 01       	movw	r26, r24
    3722:	cb 01       	movw	r24, r22
    3724:	84 19       	sub	r24, r4
    3726:	95 09       	sbc	r25, r5
    3728:	a6 09       	sbc	r26, r6
    372a:	b7 09       	sbc	r27, r7
    372c:	29 81       	ldd	r18, Y+1	; 0x01
    372e:	3a 81       	ldd	r19, Y+2	; 0x02
    3730:	4b 81       	ldd	r20, Y+3	; 0x03
    3732:	5c 81       	ldd	r21, Y+4	; 0x04
    3734:	82 17       	cp	r24, r18
    3736:	93 07       	cpc	r25, r19
    3738:	a4 07       	cpc	r26, r20
    373a:	b5 07       	cpc	r27, r21
    373c:	d8 f2       	brcs	.-74     	; 0x36f4 <i2c_read_bytes+0xa2>
    373e:	8e 81       	ldd	r24, Y+6	; 0x06
    3740:	30 e2       	ldi	r19, 0x20	; 32
    3742:	38 15       	cp	r19, r8
    3744:	08 f4       	brcc	.+2      	; 0x3748 <i2c_read_bytes+0xf6>
    3746:	80 e2       	ldi	r24, 0x20	; 32
    3748:	98 0e       	add	r9, r24
    374a:	98 14       	cp	r9, r8
    374c:	08 f4       	brcc	.+2      	; 0x3750 <i2c_read_bytes+0xfe>
    374e:	b3 cf       	rjmp	.-154    	; 0x36b6 <i2c_read_bytes+0x64>
    3750:	01 c0       	rjmp	.+2      	; 0x3754 <i2c_read_bytes+0x102>
    3752:	10 e0       	ldi	r17, 0x00	; 0
    3754:	c1 14       	cp	r12, r1
    3756:	d1 04       	cpc	r13, r1
    3758:	c9 f0       	breq	.+50     	; 0x378c <i2c_read_bytes+0x13a>
    375a:	0e 94 16 1a 	call	0x342c	; 0x342c <millis>
    375e:	ab 01       	movw	r20, r22
    3760:	bc 01       	movw	r22, r24
    3762:	44 19       	sub	r20, r4
    3764:	55 09       	sbc	r21, r5
    3766:	66 09       	sbc	r22, r6
    3768:	77 09       	sbc	r23, r7
    376a:	c6 01       	movw	r24, r12
    376c:	a0 e0       	ldi	r26, 0x00	; 0
    376e:	b0 e0       	ldi	r27, 0x00	; 0
    3770:	48 17       	cp	r20, r24
    3772:	59 07       	cpc	r21, r25
    3774:	6a 07       	cpc	r22, r26
    3776:	7b 07       	cpc	r23, r27
    3778:	48 f0       	brcs	.+18     	; 0x378c <i2c_read_bytes+0x13a>
    377a:	91 2c       	mov	r9, r1
    377c:	81 2f       	mov	r24, r17
    377e:	01 2e       	mov	r0, r17
    3780:	00 0c       	add	r0, r0
    3782:	99 0b       	sbc	r25, r25
    3784:	88 15       	cp	r24, r8
    3786:	99 05       	cpc	r25, r9
    3788:	0c f4       	brge	.+2      	; 0x378c <i2c_read_bytes+0x13a>
    378a:	1f ef       	ldi	r17, 0xFF	; 255
    378c:	81 2f       	mov	r24, r17
    378e:	28 96       	adiw	r28, 0x08	; 8
    3790:	0f b6       	in	r0, 0x3f	; 63
    3792:	f8 94       	cli
    3794:	de bf       	out	0x3e, r29	; 62
    3796:	0f be       	out	0x3f, r0	; 63
    3798:	cd bf       	out	0x3d, r28	; 61
    379a:	df 91       	pop	r29
    379c:	cf 91       	pop	r28
    379e:	1f 91       	pop	r17
    37a0:	0f 91       	pop	r16
    37a2:	ff 90       	pop	r15
    37a4:	ef 90       	pop	r14
    37a6:	df 90       	pop	r13
    37a8:	cf 90       	pop	r12
    37aa:	bf 90       	pop	r11
    37ac:	af 90       	pop	r10
    37ae:	9f 90       	pop	r9
    37b0:	8f 90       	pop	r8
    37b2:	7f 90       	pop	r7
    37b4:	6f 90       	pop	r6
    37b6:	5f 90       	pop	r5
    37b8:	4f 90       	pop	r4
    37ba:	3f 90       	pop	r3
    37bc:	2f 90       	pop	r2
    37be:	08 95       	ret

000037c0 <i2c_read_byte>:
    37c0:	0f 93       	push	r16
    37c2:	1f 93       	push	r17
    37c4:	89 01       	movw	r16, r18
    37c6:	9a 01       	movw	r18, r20
    37c8:	41 e0       	ldi	r20, 0x01	; 1
    37ca:	0e 94 29 1b 	call	0x3652	; 0x3652 <i2c_read_bytes>
    37ce:	1f 91       	pop	r17
    37d0:	0f 91       	pop	r16
    37d2:	08 95       	ret

000037d4 <i2c_write_bytes>:
* @param length Number of bytes to write
* @param data Buffer to copy new data from
* @return Status of operation (true = success)
*/
uint8_t i2c_write_bytes(uint8_t dev_address, uint8_t reg_address, uint8_t length, uint8_t* data)
{
    37d4:	ef 92       	push	r14
    37d6:	ff 92       	push	r15
    37d8:	0f 93       	push	r16
    37da:	1f 93       	push	r17
    37dc:	cf 93       	push	r28
    37de:	df 93       	push	r29
    37e0:	c6 2f       	mov	r28, r22
    37e2:	14 2f       	mov	r17, r20
    37e4:	79 01       	movw	r14, r18
    
    uint8_t status = 0;
    wire_begin_transmission(dev_address);
    37e6:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <wire_begin_transmission>
    wire_write((uint8_t) reg_address);
    37ea:	8c 2f       	mov	r24, r28
    37ec:	0e 94 8f 1a 	call	0x351e	; 0x351e <wire_write>
    for (uint8_t i = 0; i < length; i++)
    37f0:	11 23       	and	r17, r17
    37f2:	71 f0       	breq	.+28     	; 0x3810 <i2c_write_bytes+0x3c>
    37f4:	e7 01       	movw	r28, r14
    37f6:	11 50       	subi	r17, 0x01	; 1
    37f8:	01 2f       	mov	r16, r17
    37fa:	10 e0       	ldi	r17, 0x00	; 0
    37fc:	0f 5f       	subi	r16, 0xFF	; 255
    37fe:	1f 4f       	sbci	r17, 0xFF	; 255
    3800:	0e 0d       	add	r16, r14
    3802:	1f 1d       	adc	r17, r15
    {
        wire_write((uint8_t) data[i]);
    3804:	89 91       	ld	r24, Y+
    3806:	0e 94 8f 1a 	call	0x351e	; 0x351e <wire_write>
{
    
    uint8_t status = 0;
    wire_begin_transmission(dev_address);
    wire_write((uint8_t) reg_address);
    for (uint8_t i = 0; i < length; i++)
    380a:	c0 17       	cp	r28, r16
    380c:	d1 07       	cpc	r29, r17
    380e:	d1 f7       	brne	.-12     	; 0x3804 <i2c_write_bytes+0x30>
    {
        wire_write((uint8_t) data[i]);
    }
    status = wire_end_transmission(1);
    3810:	81 e0       	ldi	r24, 0x01	; 1
    3812:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <wire_end_transmission>
    return status == 0;
    3816:	91 e0       	ldi	r25, 0x01	; 1
    3818:	81 11       	cpse	r24, r1
    381a:	90 e0       	ldi	r25, 0x00	; 0
}
    381c:	89 2f       	mov	r24, r25
    381e:	df 91       	pop	r29
    3820:	cf 91       	pop	r28
    3822:	1f 91       	pop	r17
    3824:	0f 91       	pop	r16
    3826:	ff 90       	pop	r15
    3828:	ef 90       	pop	r14
    382a:	08 95       	ret

0000382c <i2c_write_byte>:
* @param reg_address Register address to write to
* @param data New byte value to write
* @return Status of operation (true = success)
*/
uint8_t i2c_write_byte(uint8_t dev_address, uint8_t reg_address, uint8_t data)
{
    382c:	cf 93       	push	r28
    382e:	df 93       	push	r29
    3830:	1f 92       	push	r1
    3832:	cd b7       	in	r28, 0x3d	; 61
    3834:	de b7       	in	r29, 0x3e	; 62
    3836:	49 83       	std	Y+1, r20	; 0x01
    return i2c_write_bytes(dev_address, reg_address, 1, &data);
    3838:	9e 01       	movw	r18, r28
    383a:	2f 5f       	subi	r18, 0xFF	; 255
    383c:	3f 4f       	sbci	r19, 0xFF	; 255
    383e:	41 e0       	ldi	r20, 0x01	; 1
    3840:	0e 94 ea 1b 	call	0x37d4	; 0x37d4 <i2c_write_bytes>
}
    3844:	0f 90       	pop	r0
    3846:	df 91       	pop	r29
    3848:	cf 91       	pop	r28
    384a:	08 95       	ret

0000384c <i2c_write_bit>:
* @param bit_num Bit position to write (0-7)
* @param value New bit value to write
* @return Status of operation (true = success)
*/
uint8_t i2c_write_bit(uint8_t dev_address, uint8_t reg_address, uint8_t bit_num, uint8_t data)
{
    384c:	ef 92       	push	r14
    384e:	ff 92       	push	r15
    3850:	0f 93       	push	r16
    3852:	1f 93       	push	r17
    3854:	cf 93       	push	r28
    3856:	df 93       	push	r29
    3858:	1f 92       	push	r1
    385a:	cd b7       	in	r28, 0x3d	; 61
    385c:	de b7       	in	r29, 0x3e	; 62
    385e:	18 2f       	mov	r17, r24
    3860:	06 2f       	mov	r16, r22
    3862:	f4 2e       	mov	r15, r20
    3864:	e2 2e       	mov	r14, r18
    uint8_t b;
    i2c_read_byte(dev_address, reg_address, &b, I2CDEV_DEFAULT_READ_TIMEOUT);
    3866:	28 ee       	ldi	r18, 0xE8	; 232
    3868:	33 e0       	ldi	r19, 0x03	; 3
    386a:	ae 01       	movw	r20, r28
    386c:	4f 5f       	subi	r20, 0xFF	; 255
    386e:	5f 4f       	sbci	r21, 0xFF	; 255
    3870:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <i2c_read_byte>
    b = (data != 0) ? (b | (1 << bit_num)) : (b & ~(1 << bit_num));
    3874:	ee 20       	and	r14, r14
    3876:	51 f0       	breq	.+20     	; 0x388c <i2c_write_bit+0x40>
    3878:	41 e0       	ldi	r20, 0x01	; 1
    387a:	50 e0       	ldi	r21, 0x00	; 0
    387c:	02 c0       	rjmp	.+4      	; 0x3882 <i2c_write_bit+0x36>
    387e:	44 0f       	add	r20, r20
    3880:	55 1f       	adc	r21, r21
    3882:	fa 94       	dec	r15
    3884:	e2 f7       	brpl	.-8      	; 0x387e <i2c_write_bit+0x32>
    3886:	89 81       	ldd	r24, Y+1	; 0x01
    3888:	48 2b       	or	r20, r24
    388a:	0a c0       	rjmp	.+20     	; 0x38a0 <i2c_write_bit+0x54>
    388c:	41 e0       	ldi	r20, 0x01	; 1
    388e:	50 e0       	ldi	r21, 0x00	; 0
    3890:	02 c0       	rjmp	.+4      	; 0x3896 <i2c_write_bit+0x4a>
    3892:	44 0f       	add	r20, r20
    3894:	55 1f       	adc	r21, r21
    3896:	fa 94       	dec	r15
    3898:	e2 f7       	brpl	.-8      	; 0x3892 <i2c_write_bit+0x46>
    389a:	40 95       	com	r20
    389c:	89 81       	ldd	r24, Y+1	; 0x01
    389e:	48 23       	and	r20, r24
    38a0:	49 83       	std	Y+1, r20	; 0x01
    return i2c_write_byte(dev_address, reg_address, b);
    38a2:	60 2f       	mov	r22, r16
    38a4:	81 2f       	mov	r24, r17
    38a6:	0e 94 16 1c 	call	0x382c	; 0x382c <i2c_write_byte>
}
    38aa:	0f 90       	pop	r0
    38ac:	df 91       	pop	r29
    38ae:	cf 91       	pop	r28
    38b0:	1f 91       	pop	r17
    38b2:	0f 91       	pop	r16
    38b4:	ff 90       	pop	r15
    38b6:	ef 90       	pop	r14
    38b8:	08 95       	ret

000038ba <i2c_write_bits>:
* @param length Number of bits to write (not more than 8)
* @param data Right-aligned value to write
* @return Status of operation (true = success)
*/
uint8_t i2c_write_bits(uint8_t dev_address, uint8_t reg_address, uint8_t bit_start, uint8_t length, uint8_t data)
{
    38ba:	df 92       	push	r13
    38bc:	ef 92       	push	r14
    38be:	ff 92       	push	r15
    38c0:	0f 93       	push	r16
    38c2:	1f 93       	push	r17
    38c4:	cf 93       	push	r28
    38c6:	df 93       	push	r29
    38c8:	1f 92       	push	r1
    38ca:	cd b7       	in	r28, 0x3d	; 61
    38cc:	de b7       	in	r29, 0x3e	; 62
    38ce:	18 2f       	mov	r17, r24
    38d0:	f6 2e       	mov	r15, r22
    38d2:	e4 2e       	mov	r14, r20
    38d4:	d2 2e       	mov	r13, r18
    uint8_t b;
    if (i2c_read_byte(dev_address, reg_address, &b, I2CDEV_DEFAULT_READ_TIMEOUT) != 0)
    38d6:	28 ee       	ldi	r18, 0xE8	; 232
    38d8:	33 e0       	ldi	r19, 0x03	; 3
    38da:	ae 01       	movw	r20, r28
    38dc:	4f 5f       	subi	r20, 0xFF	; 255
    38de:	5f 4f       	sbci	r21, 0xFF	; 255
    38e0:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <i2c_read_byte>
    38e4:	88 23       	and	r24, r24
    38e6:	41 f1       	breq	.+80     	; 0x3938 <i2c_write_bits+0x7e>
    {
        uint8_t mask = ((1 << length) - 1) << (bit_start - length + 1);
    38e8:	2e 2d       	mov	r18, r14
    38ea:	30 e0       	ldi	r19, 0x00	; 0
    38ec:	2d 19       	sub	r18, r13
    38ee:	31 09       	sbc	r19, r1
    38f0:	2f 5f       	subi	r18, 0xFF	; 255
    38f2:	3f 4f       	sbci	r19, 0xFF	; 255
    38f4:	81 e0       	ldi	r24, 0x01	; 1
    38f6:	90 e0       	ldi	r25, 0x00	; 0
    38f8:	02 c0       	rjmp	.+4      	; 0x38fe <i2c_write_bits+0x44>
    38fa:	88 0f       	add	r24, r24
    38fc:	99 1f       	adc	r25, r25
    38fe:	da 94       	dec	r13
    3900:	e2 f7       	brpl	.-8      	; 0x38fa <i2c_write_bits+0x40>
    3902:	01 97       	sbiw	r24, 0x01	; 1
    3904:	02 2e       	mov	r0, r18
    3906:	02 c0       	rjmp	.+4      	; 0x390c <i2c_write_bits+0x52>
    3908:	88 0f       	add	r24, r24
    390a:	99 1f       	adc	r25, r25
    390c:	0a 94       	dec	r0
    390e:	e2 f7       	brpl	.-8      	; 0x3908 <i2c_write_bits+0x4e>
        data <<= (bit_start - length + 1);
    3910:	40 2f       	mov	r20, r16
    3912:	50 e0       	ldi	r21, 0x00	; 0
    3914:	ba 01       	movw	r22, r20
    3916:	02 c0       	rjmp	.+4      	; 0x391c <i2c_write_bits+0x62>
    3918:	66 0f       	add	r22, r22
    391a:	77 1f       	adc	r23, r23
    391c:	2a 95       	dec	r18
    391e:	e2 f7       	brpl	.-8      	; 0x3918 <i2c_write_bits+0x5e>
        data &= mask;
        b &= ~(mask);
        b |= data;
    3920:	48 2f       	mov	r20, r24
    3922:	40 95       	com	r20
    3924:	99 81       	ldd	r25, Y+1	; 0x01
    3926:	49 23       	and	r20, r25
    3928:	86 23       	and	r24, r22
    392a:	48 2b       	or	r20, r24
    392c:	49 83       	std	Y+1, r20	; 0x01
        return i2c_write_byte(dev_address, reg_address, b);
    392e:	6f 2d       	mov	r22, r15
    3930:	81 2f       	mov	r24, r17
    3932:	0e 94 16 1c 	call	0x382c	; 0x382c <i2c_write_byte>
    3936:	01 c0       	rjmp	.+2      	; 0x393a <i2c_write_bits+0x80>
    }
    else { return 0; }
    3938:	80 e0       	ldi	r24, 0x00	; 0
}
    393a:	0f 90       	pop	r0
    393c:	df 91       	pop	r29
    393e:	cf 91       	pop	r28
    3940:	1f 91       	pop	r17
    3942:	0f 91       	pop	r16
    3944:	ff 90       	pop	r15
    3946:	ef 90       	pop	r14
    3948:	df 90       	pop	r13
    394a:	08 95       	ret

0000394c <i2c_write_words>:
* @param length Number of words to write
* @param data Buffer to copy new data from
* @return Status of operation (true = success)
*/
uint8_t i2c_write_words(uint8_t dev_address, uint8_t reg_address, uint8_t length, uint16_t* data)
{
    394c:	ef 92       	push	r14
    394e:	ff 92       	push	r15
    3950:	0f 93       	push	r16
    3952:	1f 93       	push	r17
    3954:	cf 93       	push	r28
    3956:	df 93       	push	r29
    3958:	c6 2f       	mov	r28, r22
    395a:	e4 2e       	mov	r14, r20
    395c:	02 2f       	mov	r16, r18
    395e:	13 2f       	mov	r17, r19
    uint8_t status = 0;
    wire_begin_transmission(dev_address);
    3960:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <wire_begin_transmission>
    wire_write(reg_address);
    3964:	8c 2f       	mov	r24, r28
    3966:	0e 94 8f 1a 	call	0x351e	; 0x351e <wire_write>
    for (uint8_t i = 0; i < length; i++)
    396a:	ee 20       	and	r14, r14
    396c:	69 f0       	breq	.+26     	; 0x3988 <i2c_write_words+0x3c>
    396e:	c0 2f       	mov	r28, r16
    3970:	d1 2f       	mov	r29, r17
    3972:	f1 2c       	mov	r15, r1
    {
        wire_write((uint8_t)(data[i] >> 8));
    3974:	89 81       	ldd	r24, Y+1	; 0x01
    3976:	0e 94 8f 1a 	call	0x351e	; 0x351e <wire_write>
        wire_write((uint8_t)data[i]);
    397a:	88 81       	ld	r24, Y
    397c:	22 96       	adiw	r28, 0x02	; 2
    397e:	0e 94 8f 1a 	call	0x351e	; 0x351e <wire_write>
uint8_t i2c_write_words(uint8_t dev_address, uint8_t reg_address, uint8_t length, uint16_t* data)
{
    uint8_t status = 0;
    wire_begin_transmission(dev_address);
    wire_write(reg_address);
    for (uint8_t i = 0; i < length; i++)
    3982:	f3 94       	inc	r15
    3984:	ef 10       	cpse	r14, r15
    3986:	f6 cf       	rjmp	.-20     	; 0x3974 <i2c_write_words+0x28>
    {
        wire_write((uint8_t)(data[i] >> 8));
        wire_write((uint8_t)data[i]);
    }
    status = wire_end_transmission(1);
    3988:	81 e0       	ldi	r24, 0x01	; 1
    398a:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <wire_end_transmission>
    return status == 0;
    398e:	91 e0       	ldi	r25, 0x01	; 1
    3990:	81 11       	cpse	r24, r1
    3992:	90 e0       	ldi	r25, 0x00	; 0
    3994:	89 2f       	mov	r24, r25
    3996:	df 91       	pop	r29
    3998:	cf 91       	pop	r28
    399a:	1f 91       	pop	r17
    399c:	0f 91       	pop	r16
    399e:	ff 90       	pop	r15
    39a0:	ef 90       	pop	r14
    39a2:	08 95       	ret

000039a4 <i2c_write_word>:
* @param reg_address Register address to write to
* @param data New word value to write
* @return Status of operation (true = success)
*/
uint8_t i2c_write_word(uint8_t dev_address, uint8_t reg_address, uint16_t data)
{
    39a4:	cf 93       	push	r28
    39a6:	df 93       	push	r29
    39a8:	00 d0       	rcall	.+0      	; 0x39aa <i2c_write_word+0x6>
    39aa:	cd b7       	in	r28, 0x3d	; 61
    39ac:	de b7       	in	r29, 0x3e	; 62
    39ae:	5a 83       	std	Y+2, r21	; 0x02
    39b0:	49 83       	std	Y+1, r20	; 0x01
    return i2c_write_words(dev_address, reg_address, 1, &data);
    39b2:	9e 01       	movw	r18, r28
    39b4:	2f 5f       	subi	r18, 0xFF	; 255
    39b6:	3f 4f       	sbci	r19, 0xFF	; 255
    39b8:	41 e0       	ldi	r20, 0x01	; 1
    39ba:	0e 94 a6 1c 	call	0x394c	; 0x394c <i2c_write_words>
}
    39be:	0f 90       	pop	r0
    39c0:	0f 90       	pop	r0
    39c2:	df 91       	pop	r29
    39c4:	cf 91       	pop	r28
    39c6:	08 95       	ret

000039c8 <twi_init>:
}

void twi_reply(uint8_t ack)
{
    if (ack) { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA); }
    else { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT); }
    39c8:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <twi_state>
    39cc:	81 e0       	ldi	r24, 0x01	; 1
    39ce:	80 93 e7 02 	sts	0x02E7, r24	; 0x8002e7 <twi_send_stop>
    39d2:	10 92 e6 02 	sts	0x02E6, r1	; 0x8002e6 <twi_in_rep_start>
    39d6:	e9 eb       	ldi	r30, 0xB9	; 185
    39d8:	f0 e0       	ldi	r31, 0x00	; 0
    39da:	80 81       	ld	r24, Z
    39dc:	8e 7f       	andi	r24, 0xFE	; 254
    39de:	80 83       	st	Z, r24
    39e0:	80 81       	ld	r24, Z
    39e2:	8d 7f       	andi	r24, 0xFD	; 253
    39e4:	80 83       	st	Z, r24
    39e6:	88 e4       	ldi	r24, 0x48	; 72
    39e8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    39ec:	85 e4       	ldi	r24, 0x45	; 69
    39ee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    39f2:	08 95       	ret

000039f4 <twi_get_state>:
    39f4:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <twi_state>
    39f8:	08 95       	ret

000039fa <twi_set_address>:
    39fa:	88 0f       	add	r24, r24
    39fc:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
    3a00:	08 95       	ret

00003a02 <twi_attach_slave_rx_event>:
    3a02:	90 93 e1 02 	sts	0x02E1, r25	; 0x8002e1 <twi_on_slave_receive+0x1>
    3a06:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <twi_on_slave_receive>
    3a0a:	08 95       	ret

00003a0c <twi_attach_slave_tx_event>:
    3a0c:	90 93 e3 02 	sts	0x02E3, r25	; 0x8002e3 <twi_on_slave_transmit+0x1>
    3a10:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <twi_on_slave_transmit>
    3a14:	08 95       	ret

00003a16 <twi_read>:
    3a16:	41 32       	cpi	r20, 0x21	; 33
    3a18:	08 f0       	brcs	.+2      	; 0x3a1c <twi_read+0x6>
    3a1a:	4c c0       	rjmp	.+152    	; 0x3ab4 <twi_read+0x9e>
    3a1c:	90 91 e8 02 	lds	r25, 0x02E8	; 0x8002e8 <twi_state>
    3a20:	91 11       	cpse	r25, r1
    3a22:	fc cf       	rjmp	.-8      	; 0x3a1c <twi_read+0x6>
    3a24:	31 e0       	ldi	r19, 0x01	; 1
    3a26:	30 93 e8 02 	sts	0x02E8, r19	; 0x8002e8 <twi_state>
    3a2a:	20 93 e7 02 	sts	0x02E7, r18	; 0x8002e7 <twi_send_stop>
    3a2e:	2f ef       	ldi	r18, 0xFF	; 255
    3a30:	20 93 e4 02 	sts	0x02E4, r18	; 0x8002e4 <twi_error>
    3a34:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <twi_master_buffer_index>
    3a38:	24 0f       	add	r18, r20
    3a3a:	20 93 be 02 	sts	0x02BE, r18	; 0x8002be <twi_master_buffer_length>
    3a3e:	30 93 e5 02 	sts	0x02E5, r19	; 0x8002e5 <twi_slarw>
    3a42:	20 91 e5 02 	lds	r18, 0x02E5	; 0x8002e5 <twi_slarw>
    3a46:	88 0f       	add	r24, r24
    3a48:	82 2b       	or	r24, r18
    3a4a:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <twi_slarw>
    3a4e:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <twi_in_rep_start>
    3a52:	81 30       	cpi	r24, 0x01	; 1
    3a54:	81 f4       	brne	.+32     	; 0x3a76 <twi_read+0x60>
    3a56:	10 92 e6 02 	sts	0x02E6, r1	; 0x8002e6 <twi_in_rep_start>
    3a5a:	ab eb       	ldi	r26, 0xBB	; 187
    3a5c:	b0 e0       	ldi	r27, 0x00	; 0
    3a5e:	ec eb       	ldi	r30, 0xBC	; 188
    3a60:	f0 e0       	ldi	r31, 0x00	; 0
    3a62:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <twi_slarw>
    3a66:	8c 93       	st	X, r24
    3a68:	80 81       	ld	r24, Z
    3a6a:	83 fd       	sbrc	r24, 3
    3a6c:	fa cf       	rjmp	.-12     	; 0x3a62 <twi_read+0x4c>
    3a6e:	85 ec       	ldi	r24, 0xC5	; 197
    3a70:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    3a74:	03 c0       	rjmp	.+6      	; 0x3a7c <twi_read+0x66>
    3a76:	85 ee       	ldi	r24, 0xE5	; 229
    3a78:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    3a7c:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <twi_state>
    3a80:	81 30       	cpi	r24, 0x01	; 1
    3a82:	e1 f3       	breq	.-8      	; 0x3a7c <twi_read+0x66>
    3a84:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <twi_master_buffer_index>
    3a88:	84 17       	cp	r24, r20
    3a8a:	10 f4       	brcc	.+4      	; 0x3a90 <twi_read+0x7a>
    3a8c:	40 91 bf 02 	lds	r20, 0x02BF	; 0x8002bf <twi_master_buffer_index>
    3a90:	44 23       	and	r20, r20
    3a92:	89 f0       	breq	.+34     	; 0x3ab6 <twi_read+0xa0>
    3a94:	e0 ec       	ldi	r30, 0xC0	; 192
    3a96:	f2 e0       	ldi	r31, 0x02	; 2
    3a98:	a6 2f       	mov	r26, r22
    3a9a:	b7 2f       	mov	r27, r23
    3a9c:	2f ef       	ldi	r18, 0xFF	; 255
    3a9e:	24 0f       	add	r18, r20
    3aa0:	30 e0       	ldi	r19, 0x00	; 0
    3aa2:	2f 53       	subi	r18, 0x3F	; 63
    3aa4:	3d 4f       	sbci	r19, 0xFD	; 253
    3aa6:	81 91       	ld	r24, Z+
    3aa8:	8d 93       	st	X+, r24
    3aaa:	e2 17       	cp	r30, r18
    3aac:	f3 07       	cpc	r31, r19
    3aae:	d9 f7       	brne	.-10     	; 0x3aa6 <twi_read+0x90>
    3ab0:	94 2f       	mov	r25, r20
    3ab2:	01 c0       	rjmp	.+2      	; 0x3ab6 <twi_read+0xa0>
    3ab4:	90 e0       	ldi	r25, 0x00	; 0
    3ab6:	89 2f       	mov	r24, r25
    3ab8:	08 95       	ret

00003aba <twi_write>:
    3aba:	0f 93       	push	r16
    3abc:	41 32       	cpi	r20, 0x21	; 33
    3abe:	08 f0       	brcs	.+2      	; 0x3ac2 <twi_write+0x8>
    3ac0:	54 c0       	rjmp	.+168    	; 0x3b6a <twi_write+0xb0>
    3ac2:	30 91 e8 02 	lds	r19, 0x02E8	; 0x8002e8 <twi_state>
    3ac6:	31 11       	cpse	r19, r1
    3ac8:	fc cf       	rjmp	.-8      	; 0x3ac2 <twi_write+0x8>
    3aca:	92 e0       	ldi	r25, 0x02	; 2
    3acc:	90 93 e8 02 	sts	0x02E8, r25	; 0x8002e8 <twi_state>
    3ad0:	00 93 e7 02 	sts	0x02E7, r16	; 0x8002e7 <twi_send_stop>
    3ad4:	9f ef       	ldi	r25, 0xFF	; 255
    3ad6:	90 93 e4 02 	sts	0x02E4, r25	; 0x8002e4 <twi_error>
    3ada:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <twi_master_buffer_index>
    3ade:	40 93 be 02 	sts	0x02BE, r20	; 0x8002be <twi_master_buffer_length>
    3ae2:	44 23       	and	r20, r20
    3ae4:	71 f0       	breq	.+28     	; 0x3b02 <twi_write+0x48>
    3ae6:	fb 01       	movw	r30, r22
    3ae8:	a0 ec       	ldi	r26, 0xC0	; 192
    3aea:	b2 e0       	ldi	r27, 0x02	; 2
    3aec:	41 50       	subi	r20, 0x01	; 1
    3aee:	50 e0       	ldi	r21, 0x00	; 0
    3af0:	4f 5f       	subi	r20, 0xFF	; 255
    3af2:	5f 4f       	sbci	r21, 0xFF	; 255
    3af4:	64 0f       	add	r22, r20
    3af6:	75 1f       	adc	r23, r21
    3af8:	91 91       	ld	r25, Z+
    3afa:	9d 93       	st	X+, r25
    3afc:	e6 17       	cp	r30, r22
    3afe:	f7 07       	cpc	r31, r23
    3b00:	d9 f7       	brne	.-10     	; 0x3af8 <twi_write+0x3e>
    3b02:	10 92 e5 02 	sts	0x02E5, r1	; 0x8002e5 <twi_slarw>
    3b06:	90 91 e5 02 	lds	r25, 0x02E5	; 0x8002e5 <twi_slarw>
    3b0a:	88 0f       	add	r24, r24
    3b0c:	89 2b       	or	r24, r25
    3b0e:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <twi_slarw>
    3b12:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <twi_in_rep_start>
    3b16:	88 23       	and	r24, r24
    3b18:	69 f0       	breq	.+26     	; 0x3b34 <twi_write+0x7a>
    3b1a:	10 92 e6 02 	sts	0x02E6, r1	; 0x8002e6 <twi_in_rep_start>
    3b1e:	ab eb       	ldi	r26, 0xBB	; 187
    3b20:	b0 e0       	ldi	r27, 0x00	; 0
    3b22:	ec eb       	ldi	r30, 0xBC	; 188
    3b24:	f0 e0       	ldi	r31, 0x00	; 0
    3b26:	90 91 e5 02 	lds	r25, 0x02E5	; 0x8002e5 <twi_slarw>
    3b2a:	9c 93       	st	X, r25
    3b2c:	90 81       	ld	r25, Z
    3b2e:	93 fd       	sbrc	r25, 3
    3b30:	fa cf       	rjmp	.-12     	; 0x3b26 <twi_write+0x6c>
    3b32:	03 c0       	rjmp	.+6      	; 0x3b3a <twi_write+0x80>
    3b34:	85 ee       	ldi	r24, 0xE5	; 229
    3b36:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    3b3a:	22 23       	and	r18, r18
    3b3c:	41 f0       	breq	.+16     	; 0x3b4e <twi_write+0x94>
    3b3e:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <twi_state>
    3b42:	82 30       	cpi	r24, 0x02	; 2
    3b44:	21 f4       	brne	.+8      	; 0x3b4e <twi_write+0x94>
    3b46:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <twi_state>
    3b4a:	82 30       	cpi	r24, 0x02	; 2
    3b4c:	e1 f3       	breq	.-8      	; 0x3b46 <twi_write+0x8c>
    3b4e:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <twi_error>
    3b52:	8f 3f       	cpi	r24, 0xFF	; 255
    3b54:	79 f0       	breq	.+30     	; 0x3b74 <twi_write+0xba>
    3b56:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <twi_error>
    3b5a:	80 32       	cpi	r24, 0x20	; 32
    3b5c:	41 f0       	breq	.+16     	; 0x3b6e <twi_write+0xb4>
    3b5e:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <twi_error>
    3b62:	80 33       	cpi	r24, 0x30	; 48
    3b64:	31 f0       	breq	.+12     	; 0x3b72 <twi_write+0xb8>
    3b66:	34 e0       	ldi	r19, 0x04	; 4
    3b68:	05 c0       	rjmp	.+10     	; 0x3b74 <twi_write+0xba>
    3b6a:	31 e0       	ldi	r19, 0x01	; 1
    3b6c:	03 c0       	rjmp	.+6      	; 0x3b74 <twi_write+0xba>
    3b6e:	32 e0       	ldi	r19, 0x02	; 2
    3b70:	01 c0       	rjmp	.+2      	; 0x3b74 <twi_write+0xba>
    3b72:	33 e0       	ldi	r19, 0x03	; 3
    3b74:	83 2f       	mov	r24, r19
    3b76:	0f 91       	pop	r16
    3b78:	08 95       	ret

00003b7a <twi_transmit>:
    3b7a:	40 91 9c 02 	lds	r20, 0x029C	; 0x80029c <twi_tx_buffer_length>
    3b7e:	26 2f       	mov	r18, r22
    3b80:	30 e0       	ldi	r19, 0x00	; 0
    3b82:	24 0f       	add	r18, r20
    3b84:	31 1d       	adc	r19, r1
    3b86:	21 32       	cpi	r18, 0x21	; 33
    3b88:	31 05       	cpc	r19, r1
    3b8a:	ec f4       	brge	.+58     	; 0x3bc6 <twi_transmit+0x4c>
    3b8c:	20 91 e8 02 	lds	r18, 0x02E8	; 0x8002e8 <twi_state>
    3b90:	24 30       	cpi	r18, 0x04	; 4
    3b92:	d9 f4       	brne	.+54     	; 0x3bca <twi_transmit+0x50>
    3b94:	66 23       	and	r22, r22
    3b96:	81 f0       	breq	.+32     	; 0x3bb8 <twi_transmit+0x3e>
    3b98:	a8 2f       	mov	r26, r24
    3b9a:	b9 2f       	mov	r27, r25
    3b9c:	80 e0       	ldi	r24, 0x00	; 0
    3b9e:	90 e0       	ldi	r25, 0x00	; 0
    3ba0:	30 91 9c 02 	lds	r19, 0x029C	; 0x80029c <twi_tx_buffer_length>
    3ba4:	2d 91       	ld	r18, X+
    3ba6:	fc 01       	movw	r30, r24
    3ba8:	e2 56       	subi	r30, 0x62	; 98
    3baa:	fd 4f       	sbci	r31, 0xFD	; 253
    3bac:	e3 0f       	add	r30, r19
    3bae:	f1 1d       	adc	r31, r1
    3bb0:	20 83       	st	Z, r18
    3bb2:	01 96       	adiw	r24, 0x01	; 1
    3bb4:	86 17       	cp	r24, r22
    3bb6:	a0 f3       	brcs	.-24     	; 0x3ba0 <twi_transmit+0x26>
    3bb8:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <twi_tx_buffer_length>
    3bbc:	68 0f       	add	r22, r24
    3bbe:	60 93 9c 02 	sts	0x029C, r22	; 0x80029c <twi_tx_buffer_length>
    3bc2:	80 e0       	ldi	r24, 0x00	; 0
    3bc4:	08 95       	ret
    3bc6:	81 e0       	ldi	r24, 0x01	; 1
    3bc8:	08 95       	ret
    3bca:	82 e0       	ldi	r24, 0x02	; 2
    3bcc:	08 95       	ret

00003bce <twi_stop>:
    3bce:	85 ed       	ldi	r24, 0xD5	; 213
    3bd0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    3bd4:	ec eb       	ldi	r30, 0xBC	; 188
    3bd6:	f0 e0       	ldi	r31, 0x00	; 0
    3bd8:	80 81       	ld	r24, Z
    3bda:	84 fd       	sbrc	r24, 4
    3bdc:	fd cf       	rjmp	.-6      	; 0x3bd8 <twi_stop+0xa>
    3bde:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <twi_state>
    3be2:	08 95       	ret

00003be4 <twi_release_bus>:
}

void twi_release_bus(void)
{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    3be4:	85 ec       	ldi	r24, 0xC5	; 197
    3be6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    twi_state = TWI_READY;
    3bea:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <twi_state>
    3bee:	08 95       	ret

00003bf0 <__vector_24>:
}

ISR(TWI_vect)
{
    3bf0:	1f 92       	push	r1
    3bf2:	0f 92       	push	r0
    3bf4:	0f b6       	in	r0, 0x3f	; 63
    3bf6:	0f 92       	push	r0
    3bf8:	11 24       	eor	r1, r1
    3bfa:	2f 93       	push	r18
    3bfc:	3f 93       	push	r19
    3bfe:	4f 93       	push	r20
    3c00:	5f 93       	push	r21
    3c02:	6f 93       	push	r22
    3c04:	7f 93       	push	r23
    3c06:	8f 93       	push	r24
    3c08:	9f 93       	push	r25
    3c0a:	af 93       	push	r26
    3c0c:	bf 93       	push	r27
    3c0e:	ef 93       	push	r30
    3c10:	ff 93       	push	r31
    switch(TW_STATUS)
    3c12:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    3c16:	e8 2f       	mov	r30, r24
    3c18:	e8 7f       	andi	r30, 0xF8	; 248
    3c1a:	8e 2f       	mov	r24, r30
    3c1c:	90 e0       	ldi	r25, 0x00	; 0
    3c1e:	89 3c       	cpi	r24, 0xC9	; 201
    3c20:	91 05       	cpc	r25, r1
    3c22:	08 f0       	brcs	.+2      	; 0x3c26 <__vector_24+0x36>
    3c24:	f5 c0       	rjmp	.+490    	; 0x3e10 <__vector_24+0x220>
    3c26:	fc 01       	movw	r30, r24
    3c28:	e7 59       	subi	r30, 0x97	; 151
    3c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c2c:	0c 94 69 23 	jmp	0x46d2	; 0x46d2 <__tablejump2__>
    {
        // MASTER
        case TW_START: // start condition transmitted
        case TW_REP_START: // repeated start condition transmitted
        {
            TWDR = twi_slarw;
    3c30:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <twi_slarw>
    3c34:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    twi_state = TWI_READY;
}

void twi_reply(uint8_t ack)
{
    if (ack) { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA); }
    3c38:	85 ec       	ldi	r24, 0xC5	; 197
    3c3a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    3c3e:	e8 c0       	rjmp	.+464    	; 0x3e10 <__vector_24+0x220>
        
        // MASTER TRANSMITTER
        case TW_MT_SLA_ACK: // SLA+W transmitted, ACK received
        case TW_MT_DATA_ACK: // data transmitted, ACK received
        {
            if (twi_master_buffer_index < twi_master_buffer_length)
    3c40:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <twi_master_buffer_index>
    3c44:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <twi_master_buffer_length>
    3c48:	98 17       	cp	r25, r24
    3c4a:	80 f4       	brcc	.+32     	; 0x3c6c <__vector_24+0x7c>
            {
                TWDR = twi_master_buffer[twi_master_buffer_index++];
    3c4c:	e0 91 bf 02 	lds	r30, 0x02BF	; 0x8002bf <twi_master_buffer_index>
    3c50:	81 e0       	ldi	r24, 0x01	; 1
    3c52:	8e 0f       	add	r24, r30
    3c54:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <twi_master_buffer_index>
    3c58:	f0 e0       	ldi	r31, 0x00	; 0
    3c5a:	e0 54       	subi	r30, 0x40	; 64
    3c5c:	fd 4f       	sbci	r31, 0xFD	; 253
    3c5e:	80 81       	ld	r24, Z
    3c60:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    twi_state = TWI_READY;
}

void twi_reply(uint8_t ack)
{
    if (ack) { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA); }
    3c64:	85 ec       	ldi	r24, 0xC5	; 197
    3c66:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    3c6a:	d2 c0       	rjmp	.+420    	; 0x3e10 <__vector_24+0x220>
                TWDR = twi_master_buffer[twi_master_buffer_index++];
                twi_reply(1);
            }
            else
            {
                if (twi_send_stop) { twi_stop(); }
    3c6c:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <twi_send_stop>
    3c70:	88 23       	and	r24, r24
    3c72:	19 f0       	breq	.+6      	; 0x3c7a <__vector_24+0x8a>
    3c74:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <twi_stop>
    3c78:	cb c0       	rjmp	.+406    	; 0x3e10 <__vector_24+0x220>
                else
                {
                    twi_in_rep_start = 1;
    3c7a:	81 e0       	ldi	r24, 0x01	; 1
    3c7c:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <twi_in_rep_start>
                    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    3c80:	84 ea       	ldi	r24, 0xA4	; 164
    3c82:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
                    twi_state = TWI_READY;
    3c86:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <twi_state>
    3c8a:	c2 c0       	rjmp	.+388    	; 0x3e10 <__vector_24+0x220>
            }
        }
        break;
        case TW_MT_SLA_NACK:  // SLA+W transmitted, NACK received
        {
            twi_error = TW_MT_SLA_NACK;
    3c8c:	80 e2       	ldi	r24, 0x20	; 32
    3c8e:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <twi_error>
            twi_stop();
    3c92:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <twi_stop>
        }
        break;
    3c96:	bc c0       	rjmp	.+376    	; 0x3e10 <__vector_24+0x220>
        case TW_MT_DATA_NACK: // data transmitted, NACK received
        {
            twi_error = TW_MT_DATA_NACK;
    3c98:	80 e3       	ldi	r24, 0x30	; 48
    3c9a:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <twi_error>
            twi_stop();
    3c9e:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <twi_stop>
        }
        break;
    3ca2:	b6 c0       	rjmp	.+364    	; 0x3e10 <__vector_24+0x220>
        case TW_MT_ARB_LOST: // arbitration lost in SLA+W or data
        {
            twi_error = TW_MT_ARB_LOST;
    3ca4:	88 e3       	ldi	r24, 0x38	; 56
    3ca6:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <twi_error>
            twi_release_bus();
    3caa:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <twi_release_bus>
        }
        break;
    3cae:	b0 c0       	rjmp	.+352    	; 0x3e10 <__vector_24+0x220>
        
        // MASTER RECEIVER
        case TW_MR_DATA_ACK: // data received, ACK returned
        twi_master_buffer[twi_master_buffer_index++] = TWDR;
    3cb0:	e0 91 bf 02 	lds	r30, 0x02BF	; 0x8002bf <twi_master_buffer_index>
    3cb4:	81 e0       	ldi	r24, 0x01	; 1
    3cb6:	8e 0f       	add	r24, r30
    3cb8:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <twi_master_buffer_index>
    3cbc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    3cc0:	f0 e0       	ldi	r31, 0x00	; 0
    3cc2:	e0 54       	subi	r30, 0x40	; 64
    3cc4:	fd 4f       	sbci	r31, 0xFD	; 253
    3cc6:	80 83       	st	Z, r24
        /* fall through */
        case TW_MR_SLA_ACK:  // SLA+R transmitted, ACK received
        {
            if (twi_master_buffer_index < twi_master_buffer_length) { twi_reply(1); }
    3cc8:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <twi_master_buffer_index>
    3ccc:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <twi_master_buffer_length>
    3cd0:	98 17       	cp	r25, r24
    3cd2:	20 f4       	brcc	.+8      	; 0x3cdc <__vector_24+0xec>
    twi_state = TWI_READY;
}

void twi_reply(uint8_t ack)
{
    if (ack) { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA); }
    3cd4:	85 ec       	ldi	r24, 0xC5	; 197
    3cd6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    3cda:	9a c0       	rjmp	.+308    	; 0x3e10 <__vector_24+0x220>
    else { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT); }
    3cdc:	85 e8       	ldi	r24, 0x85	; 133
    3cde:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    3ce2:	96 c0       	rjmp	.+300    	; 0x3e10 <__vector_24+0x220>
            else { twi_reply(0); }
        }
        break;
        case TW_MR_DATA_NACK: // data received, NACK returned
        {
            twi_master_buffer[twi_master_buffer_index++] = TWDR;
    3ce4:	e0 91 bf 02 	lds	r30, 0x02BF	; 0x8002bf <twi_master_buffer_index>
    3ce8:	81 e0       	ldi	r24, 0x01	; 1
    3cea:	8e 0f       	add	r24, r30
    3cec:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <twi_master_buffer_index>
    3cf0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    3cf4:	f0 e0       	ldi	r31, 0x00	; 0
    3cf6:	e0 54       	subi	r30, 0x40	; 64
    3cf8:	fd 4f       	sbci	r31, 0xFD	; 253
    3cfa:	80 83       	st	Z, r24
            if (twi_send_stop) { twi_stop(); }
    3cfc:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <twi_send_stop>
    3d00:	88 23       	and	r24, r24
    3d02:	19 f0       	breq	.+6      	; 0x3d0a <__vector_24+0x11a>
    3d04:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <twi_stop>
    3d08:	83 c0       	rjmp	.+262    	; 0x3e10 <__vector_24+0x220>
            else {
                twi_in_rep_start = 1;
    3d0a:	81 e0       	ldi	r24, 0x01	; 1
    3d0c:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <twi_in_rep_start>
                TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    3d10:	84 ea       	ldi	r24, 0xA4	; 164
    3d12:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
                twi_state = TWI_READY;
    3d16:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <twi_state>
    3d1a:	7a c0       	rjmp	.+244    	; 0x3e10 <__vector_24+0x220>
            }
        }
        break;
        case TW_MR_SLA_NACK: // SLA+R transmitted, NACK received
        {
            twi_stop();
    3d1c:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <twi_stop>
        }
        break;
    3d20:	77 c0       	rjmp	.+238    	; 0x3e10 <__vector_24+0x220>
        case TW_SR_SLA_ACK: // SLA+W received, ACK returned
        case TW_SR_GCALL_ACK: // general call received, ACK returned
        case TW_SR_ARB_LOST_SLA_ACK:   // arbitration lost in SLA+RW, SLA+W received, ACK returned
        case TW_SR_ARB_LOST_GCALL_ACK: // arbitration lost in SLA+RW, general call received, ACK returned
        {
            twi_state = TWI_SRX;
    3d22:	83 e0       	ldi	r24, 0x03	; 3
    3d24:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <twi_state>
            twi_rx_buffer_index = 0;
    3d28:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <twi_rx_buffer_index>
    twi_state = TWI_READY;
}

void twi_reply(uint8_t ack)
{
    if (ack) { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA); }
    3d2c:	85 ec       	ldi	r24, 0xC5	; 197
    3d2e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    3d32:	6e c0       	rjmp	.+220    	; 0x3e10 <__vector_24+0x220>
        }
        break;
        case TW_SR_DATA_ACK: // data received, ACK returned
        case TW_SR_GCALL_DATA_ACK: // general call data received, ACK returned
        {
            if (twi_rx_buffer_index < TWI_BUFFER_LENGTH) {
    3d34:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <twi_rx_buffer_index>
    3d38:	80 32       	cpi	r24, 0x20	; 32
    3d3a:	80 f4       	brcc	.+32     	; 0x3d5c <__vector_24+0x16c>
                
                twi_rx_buffer[twi_rx_buffer_index++] = TWDR;
    3d3c:	e0 91 7b 02 	lds	r30, 0x027B	; 0x80027b <twi_rx_buffer_index>
    3d40:	81 e0       	ldi	r24, 0x01	; 1
    3d42:	8e 0f       	add	r24, r30
    3d44:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <twi_rx_buffer_index>
    3d48:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    3d4c:	f0 e0       	ldi	r31, 0x00	; 0
    3d4e:	e4 58       	subi	r30, 0x84	; 132
    3d50:	fd 4f       	sbci	r31, 0xFD	; 253
    3d52:	80 83       	st	Z, r24
    twi_state = TWI_READY;
}

void twi_reply(uint8_t ack)
{
    if (ack) { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA); }
    3d54:	85 ec       	ldi	r24, 0xC5	; 197
    3d56:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    3d5a:	5a c0       	rjmp	.+180    	; 0x3e10 <__vector_24+0x220>
    else { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT); }
    3d5c:	85 e8       	ldi	r24, 0x85	; 133
    3d5e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    3d62:	56 c0       	rjmp	.+172    	; 0x3e10 <__vector_24+0x220>
            
        }
        break;
        case TW_SR_STOP: // stop or repeated start condition received while selected
        {
            twi_release_bus();
    3d64:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <twi_release_bus>
            if(twi_rx_buffer_index < TWI_BUFFER_LENGTH) { twi_rx_buffer[twi_rx_buffer_index] = '\0'; }
    3d68:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <twi_rx_buffer_index>
    3d6c:	80 32       	cpi	r24, 0x20	; 32
    3d6e:	30 f4       	brcc	.+12     	; 0x3d7c <__vector_24+0x18c>
    3d70:	e0 91 7b 02 	lds	r30, 0x027B	; 0x80027b <twi_rx_buffer_index>
    3d74:	f0 e0       	ldi	r31, 0x00	; 0
    3d76:	e4 58       	subi	r30, 0x84	; 132
    3d78:	fd 4f       	sbci	r31, 0xFD	; 253
    3d7a:	10 82       	st	Z, r1
            twi_on_slave_receive(twi_rx_buffer, twi_rx_buffer_index);
    3d7c:	60 91 7b 02 	lds	r22, 0x027B	; 0x80027b <twi_rx_buffer_index>
    3d80:	70 e0       	ldi	r23, 0x00	; 0
    3d82:	e0 91 e0 02 	lds	r30, 0x02E0	; 0x8002e0 <twi_on_slave_receive>
    3d86:	f0 91 e1 02 	lds	r31, 0x02E1	; 0x8002e1 <twi_on_slave_receive+0x1>
    3d8a:	8c e7       	ldi	r24, 0x7C	; 124
    3d8c:	92 e0       	ldi	r25, 0x02	; 2
    3d8e:	09 95       	icall
            twi_rx_buffer_index = 0;
    3d90:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <twi_rx_buffer_index>
        }
        break;
    3d94:	3d c0       	rjmp	.+122    	; 0x3e10 <__vector_24+0x220>
}

void twi_reply(uint8_t ack)
{
    if (ack) { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA); }
    else { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT); }
    3d96:	85 e8       	ldi	r24, 0x85	; 133
    3d98:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    3d9c:	39 c0       	rjmp	.+114    	; 0x3e10 <__vector_24+0x220>
        // SLAVE TRANSMITTER
        case TW_ST_SLA_ACK: // SLA+R received, ACK returned
        case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost in SLA+RW, SLA+R received, ACK returned
        {
            
            twi_state = TWI_STX;
    3d9e:	84 e0       	ldi	r24, 0x04	; 4
    3da0:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <twi_state>
            twi_tx_buffer_index = 0;
    3da4:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <twi_tx_buffer_index>
            twi_tx_buffer_length = 0;
    3da8:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <twi_tx_buffer_length>
            twi_on_slave_transmit();
    3dac:	e0 91 e2 02 	lds	r30, 0x02E2	; 0x8002e2 <twi_on_slave_transmit>
    3db0:	f0 91 e3 02 	lds	r31, 0x02E3	; 0x8002e3 <twi_on_slave_transmit+0x1>
    3db4:	09 95       	icall
            if (0 == twi_tx_buffer_length) {
    3db6:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <twi_tx_buffer_length>
    3dba:	81 11       	cpse	r24, r1
    3dbc:	05 c0       	rjmp	.+10     	; 0x3dc8 <__vector_24+0x1d8>
                twi_tx_buffer_length = 1;
    3dbe:	81 e0       	ldi	r24, 0x01	; 1
    3dc0:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <twi_tx_buffer_length>
                twi_tx_buffer[0] = 0x00;
    3dc4:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <twi_tx_buffer>
            }
        }
        /* fall through */
        case TW_ST_DATA_ACK: // data transmitted, ACK received
        {
            TWDR = twi_tx_buffer[twi_tx_buffer_index++];
    3dc8:	e0 91 9d 02 	lds	r30, 0x029D	; 0x80029d <twi_tx_buffer_index>
    3dcc:	81 e0       	ldi	r24, 0x01	; 1
    3dce:	8e 0f       	add	r24, r30
    3dd0:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <twi_tx_buffer_index>
    3dd4:	f0 e0       	ldi	r31, 0x00	; 0
    3dd6:	e2 56       	subi	r30, 0x62	; 98
    3dd8:	fd 4f       	sbci	r31, 0xFD	; 253
    3dda:	80 81       	ld	r24, Z
    3ddc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
            if (twi_tx_buffer_index < twi_tx_buffer_length) { twi_reply(1); }
    3de0:	90 91 9d 02 	lds	r25, 0x029D	; 0x80029d <twi_tx_buffer_index>
    3de4:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <twi_tx_buffer_length>
    3de8:	98 17       	cp	r25, r24
    3dea:	20 f4       	brcc	.+8      	; 0x3df4 <__vector_24+0x204>
    twi_state = TWI_READY;
}

void twi_reply(uint8_t ack)
{
    if (ack) { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA); }
    3dec:	85 ec       	ldi	r24, 0xC5	; 197
    3dee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    3df2:	0e c0       	rjmp	.+28     	; 0x3e10 <__vector_24+0x220>
    else { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT); }
    3df4:	85 e8       	ldi	r24, 0x85	; 133
    3df6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    3dfa:	0a c0       	rjmp	.+20     	; 0x3e10 <__vector_24+0x220>
    twi_state = TWI_READY;
}

void twi_reply(uint8_t ack)
{
    if (ack) { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA); }
    3dfc:	85 ec       	ldi	r24, 0xC5	; 197
    3dfe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
        break;
        case TW_ST_DATA_NACK: // data transmitted, NACK received
        case TW_ST_LAST_DATA: // last data byte transmitted, ACK received
        {
            twi_reply(1);
            twi_state = TWI_READY;
    3e02:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <twi_state>
        }
        break;
    3e06:	04 c0       	rjmp	.+8      	; 0x3e10 <__vector_24+0x220>
        // MISC
        case TW_NO_INFO:   // no state information available
        break;
        case TW_BUS_ERROR: // illegal start or stop condition
        {
            twi_error = TW_BUS_ERROR;
    3e08:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <twi_error>
            twi_stop();
    3e0c:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <twi_stop>
        }
        break;
    }
    3e10:	ff 91       	pop	r31
    3e12:	ef 91       	pop	r30
    3e14:	bf 91       	pop	r27
    3e16:	af 91       	pop	r26
    3e18:	9f 91       	pop	r25
    3e1a:	8f 91       	pop	r24
    3e1c:	7f 91       	pop	r23
    3e1e:	6f 91       	pop	r22
    3e20:	5f 91       	pop	r21
    3e22:	4f 91       	pop	r20
    3e24:	3f 91       	pop	r19
    3e26:	2f 91       	pop	r18
    3e28:	0f 90       	pop	r0
    3e2a:	0f be       	out	0x3f, r0	; 63
    3e2c:	0f 90       	pop	r0
    3e2e:	1f 90       	pop	r1
    3e30:	18 95       	reti

00003e32 <__vector_18>:
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
    
    return (UART_LastRxError << 8) + data;

}/* uart_getc */
    3e32:	1f 92       	push	r1
    3e34:	0f 92       	push	r0
    3e36:	0f b6       	in	r0, 0x3f	; 63
    3e38:	0f 92       	push	r0
    3e3a:	11 24       	eor	r1, r1
    3e3c:	2f 93       	push	r18
    3e3e:	8f 93       	push	r24
    3e40:	9f 93       	push	r25
    3e42:	ef 93       	push	r30
    3e44:	ff 93       	push	r31
    3e46:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    3e4a:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    3e4e:	88 71       	andi	r24, 0x18	; 24
    3e50:	e0 91 eb 02 	lds	r30, 0x02EB	; 0x8002eb <UART_RxHead>
    3e54:	ef 5f       	subi	r30, 0xFF	; 255
    3e56:	ef 71       	andi	r30, 0x1F	; 31
    3e58:	90 91 ea 02 	lds	r25, 0x02EA	; 0x8002ea <UART_RxTail>
    3e5c:	e9 17       	cp	r30, r25
    3e5e:	39 f0       	breq	.+14     	; 0x3e6e <__vector_18+0x3c>
    3e60:	e0 93 eb 02 	sts	0x02EB, r30	; 0x8002eb <UART_RxHead>
    3e64:	f0 e0       	ldi	r31, 0x00	; 0
    3e66:	e2 51       	subi	r30, 0x12	; 18
    3e68:	fd 4f       	sbci	r31, 0xFD	; 253
    3e6a:	20 83       	st	Z, r18
    3e6c:	01 c0       	rjmp	.+2      	; 0x3e70 <__vector_18+0x3e>
    3e6e:	82 e0       	ldi	r24, 0x02	; 2
    3e70:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <UART_LastRxError>
    3e74:	ff 91       	pop	r31
    3e76:	ef 91       	pop	r30
    3e78:	9f 91       	pop	r25
    3e7a:	8f 91       	pop	r24
    3e7c:	2f 91       	pop	r18
    3e7e:	0f 90       	pop	r0
    3e80:	0f be       	out	0x3f, r0	; 63
    3e82:	0f 90       	pop	r0
    3e84:	1f 90       	pop	r1
    3e86:	18 95       	reti

00003e88 <__vector_19>:
    3e88:	1f 92       	push	r1
    3e8a:	0f 92       	push	r0
    3e8c:	0f b6       	in	r0, 0x3f	; 63
    3e8e:	0f 92       	push	r0
    3e90:	11 24       	eor	r1, r1
    3e92:	8f 93       	push	r24
    3e94:	9f 93       	push	r25
    3e96:	ef 93       	push	r30
    3e98:	ff 93       	push	r31
    3e9a:	90 91 ed 02 	lds	r25, 0x02ED	; 0x8002ed <UART_TxHead>
    3e9e:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <UART_TxTail>
    3ea2:	98 17       	cp	r25, r24
    3ea4:	69 f0       	breq	.+26     	; 0x3ec0 <__vector_19+0x38>
    3ea6:	e0 91 ec 02 	lds	r30, 0x02EC	; 0x8002ec <UART_TxTail>
    3eaa:	ef 5f       	subi	r30, 0xFF	; 255
    3eac:	ef 71       	andi	r30, 0x1F	; 31
    3eae:	e0 93 ec 02 	sts	0x02EC, r30	; 0x8002ec <UART_TxTail>
    3eb2:	f0 e0       	ldi	r31, 0x00	; 0
    3eb4:	e2 5f       	subi	r30, 0xF2	; 242
    3eb6:	fc 4f       	sbci	r31, 0xFC	; 252
    3eb8:	80 81       	ld	r24, Z
    3eba:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    3ebe:	05 c0       	rjmp	.+10     	; 0x3eca <__vector_19+0x42>
    3ec0:	e1 ec       	ldi	r30, 0xC1	; 193
    3ec2:	f0 e0       	ldi	r31, 0x00	; 0
    3ec4:	80 81       	ld	r24, Z
    3ec6:	8f 7d       	andi	r24, 0xDF	; 223
    3ec8:	80 83       	st	Z, r24
    3eca:	ff 91       	pop	r31
    3ecc:	ef 91       	pop	r30
    3ece:	9f 91       	pop	r25
    3ed0:	8f 91       	pop	r24
    3ed2:	0f 90       	pop	r0
    3ed4:	0f be       	out	0x3f, r0	; 63
    3ed6:	0f 90       	pop	r0
    3ed8:	1f 90       	pop	r1
    3eda:	18 95       	reti

00003edc <uart_init>:
    3edc:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <UART_TxHead>
    3ee0:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <UART_TxTail>
    3ee4:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <UART_RxHead>
    3ee8:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <UART_RxTail>
    3eec:	99 23       	and	r25, r25
    3eee:	24 f4       	brge	.+8      	; 0x3ef8 <uart_init+0x1c>
    3ef0:	22 e0       	ldi	r18, 0x02	; 2
    3ef2:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    3ef6:	9f 77       	andi	r25, 0x7F	; 127
    3ef8:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    3efc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    3f00:	88 e9       	ldi	r24, 0x98	; 152
    3f02:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    3f06:	86 e0       	ldi	r24, 0x06	; 6
    3f08:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    3f0c:	08 95       	ret

00003f0e <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
    3f0e:	20 91 ed 02 	lds	r18, 0x02ED	; 0x8002ed <UART_TxHead>
    3f12:	2f 5f       	subi	r18, 0xFF	; 255
    3f14:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
    3f16:	90 91 ec 02 	lds	r25, 0x02EC	; 0x8002ec <UART_TxTail>
    3f1a:	29 17       	cp	r18, r25
    3f1c:	e1 f3       	breq	.-8      	; 0x3f16 <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
    3f1e:	e2 2f       	mov	r30, r18
    3f20:	f0 e0       	ldi	r31, 0x00	; 0
    3f22:	e2 5f       	subi	r30, 0xF2	; 242
    3f24:	fc 4f       	sbci	r31, 0xFC	; 252
    3f26:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
    3f28:	20 93 ed 02 	sts	0x02ED, r18	; 0x8002ed <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
    3f2c:	e1 ec       	ldi	r30, 0xC1	; 193
    3f2e:	f0 e0       	ldi	r31, 0x00	; 0
    3f30:	80 81       	ld	r24, Z
    3f32:	80 62       	ori	r24, 0x20	; 32
    3f34:	80 83       	st	Z, r24
    3f36:	08 95       	ret

00003f38 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    3f38:	cf 93       	push	r28
    3f3a:	df 93       	push	r29
    3f3c:	ec 01       	movw	r28, r24
    while (*s) 
    3f3e:	88 81       	ld	r24, Y
    3f40:	88 23       	and	r24, r24
    3f42:	31 f0       	breq	.+12     	; 0x3f50 <uart_puts+0x18>
    3f44:	21 96       	adiw	r28, 0x01	; 1
      uart_putc(*s++);
    3f46:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
    3f4a:	89 91       	ld	r24, Y+
    3f4c:	81 11       	cpse	r24, r1
    3f4e:	fb cf       	rjmp	.-10     	; 0x3f46 <uart_puts+0xe>
      uart_putc(*s++);

}/* uart_puts */
    3f50:	df 91       	pop	r29
    3f52:	cf 91       	pop	r28
    3f54:	08 95       	ret

00003f56 <vfprintf>:
    3f56:	a0 e1       	ldi	r26, 0x10	; 16
    3f58:	b0 e0       	ldi	r27, 0x00	; 0
    3f5a:	e1 eb       	ldi	r30, 0xB1	; 177
    3f5c:	ff e1       	ldi	r31, 0x1F	; 31
    3f5e:	0c 94 6f 23 	jmp	0x46de	; 0x46de <__prologue_saves__>
    3f62:	7c 01       	movw	r14, r24
    3f64:	1b 01       	movw	r2, r22
    3f66:	6a 01       	movw	r12, r20
    3f68:	fc 01       	movw	r30, r24
    3f6a:	17 82       	std	Z+7, r1	; 0x07
    3f6c:	16 82       	std	Z+6, r1	; 0x06
    3f6e:	83 81       	ldd	r24, Z+3	; 0x03
    3f70:	81 ff       	sbrs	r24, 1
    3f72:	44 c3       	rjmp	.+1672   	; 0x45fc <vfprintf+0x6a6>
    3f74:	9e 01       	movw	r18, r28
    3f76:	2f 5f       	subi	r18, 0xFF	; 255
    3f78:	3f 4f       	sbci	r19, 0xFF	; 255
    3f7a:	39 01       	movw	r6, r18
    3f7c:	f7 01       	movw	r30, r14
    3f7e:	93 81       	ldd	r25, Z+3	; 0x03
    3f80:	f1 01       	movw	r30, r2
    3f82:	93 fd       	sbrc	r25, 3
    3f84:	85 91       	lpm	r24, Z+
    3f86:	93 ff       	sbrs	r25, 3
    3f88:	81 91       	ld	r24, Z+
    3f8a:	1f 01       	movw	r2, r30
    3f8c:	88 23       	and	r24, r24
    3f8e:	09 f4       	brne	.+2      	; 0x3f92 <vfprintf+0x3c>
    3f90:	31 c3       	rjmp	.+1634   	; 0x45f4 <vfprintf+0x69e>
    3f92:	85 32       	cpi	r24, 0x25	; 37
    3f94:	39 f4       	brne	.+14     	; 0x3fa4 <vfprintf+0x4e>
    3f96:	93 fd       	sbrc	r25, 3
    3f98:	85 91       	lpm	r24, Z+
    3f9a:	93 ff       	sbrs	r25, 3
    3f9c:	81 91       	ld	r24, Z+
    3f9e:	1f 01       	movw	r2, r30
    3fa0:	85 32       	cpi	r24, 0x25	; 37
    3fa2:	39 f4       	brne	.+14     	; 0x3fb2 <vfprintf+0x5c>
    3fa4:	b7 01       	movw	r22, r14
    3fa6:	90 e0       	ldi	r25, 0x00	; 0
    3fa8:	0e 94 94 24 	call	0x4928	; 0x4928 <fputc>
    3fac:	56 01       	movw	r10, r12
    3fae:	65 01       	movw	r12, r10
    3fb0:	e5 cf       	rjmp	.-54     	; 0x3f7c <vfprintf+0x26>
    3fb2:	10 e0       	ldi	r17, 0x00	; 0
    3fb4:	51 2c       	mov	r5, r1
    3fb6:	91 2c       	mov	r9, r1
    3fb8:	ff e1       	ldi	r31, 0x1F	; 31
    3fba:	f9 15       	cp	r31, r9
    3fbc:	d8 f0       	brcs	.+54     	; 0x3ff4 <vfprintf+0x9e>
    3fbe:	8b 32       	cpi	r24, 0x2B	; 43
    3fc0:	79 f0       	breq	.+30     	; 0x3fe0 <vfprintf+0x8a>
    3fc2:	38 f4       	brcc	.+14     	; 0x3fd2 <vfprintf+0x7c>
    3fc4:	80 32       	cpi	r24, 0x20	; 32
    3fc6:	79 f0       	breq	.+30     	; 0x3fe6 <vfprintf+0x90>
    3fc8:	83 32       	cpi	r24, 0x23	; 35
    3fca:	a1 f4       	brne	.+40     	; 0x3ff4 <vfprintf+0x9e>
    3fcc:	f9 2d       	mov	r31, r9
    3fce:	f0 61       	ori	r31, 0x10	; 16
    3fd0:	2e c0       	rjmp	.+92     	; 0x402e <vfprintf+0xd8>
    3fd2:	8d 32       	cpi	r24, 0x2D	; 45
    3fd4:	61 f0       	breq	.+24     	; 0x3fee <vfprintf+0x98>
    3fd6:	80 33       	cpi	r24, 0x30	; 48
    3fd8:	69 f4       	brne	.+26     	; 0x3ff4 <vfprintf+0x9e>
    3fda:	29 2d       	mov	r18, r9
    3fdc:	21 60       	ori	r18, 0x01	; 1
    3fde:	2d c0       	rjmp	.+90     	; 0x403a <vfprintf+0xe4>
    3fe0:	39 2d       	mov	r19, r9
    3fe2:	32 60       	ori	r19, 0x02	; 2
    3fe4:	93 2e       	mov	r9, r19
    3fe6:	89 2d       	mov	r24, r9
    3fe8:	84 60       	ori	r24, 0x04	; 4
    3fea:	98 2e       	mov	r9, r24
    3fec:	2a c0       	rjmp	.+84     	; 0x4042 <vfprintf+0xec>
    3fee:	e9 2d       	mov	r30, r9
    3ff0:	e8 60       	ori	r30, 0x08	; 8
    3ff2:	15 c0       	rjmp	.+42     	; 0x401e <vfprintf+0xc8>
    3ff4:	97 fc       	sbrc	r9, 7
    3ff6:	2d c0       	rjmp	.+90     	; 0x4052 <vfprintf+0xfc>
    3ff8:	20 ed       	ldi	r18, 0xD0	; 208
    3ffa:	28 0f       	add	r18, r24
    3ffc:	2a 30       	cpi	r18, 0x0A	; 10
    3ffe:	88 f4       	brcc	.+34     	; 0x4022 <vfprintf+0xcc>
    4000:	96 fe       	sbrs	r9, 6
    4002:	06 c0       	rjmp	.+12     	; 0x4010 <vfprintf+0xba>
    4004:	3a e0       	ldi	r19, 0x0A	; 10
    4006:	13 9f       	mul	r17, r19
    4008:	20 0d       	add	r18, r0
    400a:	11 24       	eor	r1, r1
    400c:	12 2f       	mov	r17, r18
    400e:	19 c0       	rjmp	.+50     	; 0x4042 <vfprintf+0xec>
    4010:	8a e0       	ldi	r24, 0x0A	; 10
    4012:	58 9e       	mul	r5, r24
    4014:	20 0d       	add	r18, r0
    4016:	11 24       	eor	r1, r1
    4018:	52 2e       	mov	r5, r18
    401a:	e9 2d       	mov	r30, r9
    401c:	e0 62       	ori	r30, 0x20	; 32
    401e:	9e 2e       	mov	r9, r30
    4020:	10 c0       	rjmp	.+32     	; 0x4042 <vfprintf+0xec>
    4022:	8e 32       	cpi	r24, 0x2E	; 46
    4024:	31 f4       	brne	.+12     	; 0x4032 <vfprintf+0xdc>
    4026:	96 fc       	sbrc	r9, 6
    4028:	e5 c2       	rjmp	.+1482   	; 0x45f4 <vfprintf+0x69e>
    402a:	f9 2d       	mov	r31, r9
    402c:	f0 64       	ori	r31, 0x40	; 64
    402e:	9f 2e       	mov	r9, r31
    4030:	08 c0       	rjmp	.+16     	; 0x4042 <vfprintf+0xec>
    4032:	8c 36       	cpi	r24, 0x6C	; 108
    4034:	21 f4       	brne	.+8      	; 0x403e <vfprintf+0xe8>
    4036:	29 2d       	mov	r18, r9
    4038:	20 68       	ori	r18, 0x80	; 128
    403a:	92 2e       	mov	r9, r18
    403c:	02 c0       	rjmp	.+4      	; 0x4042 <vfprintf+0xec>
    403e:	88 36       	cpi	r24, 0x68	; 104
    4040:	41 f4       	brne	.+16     	; 0x4052 <vfprintf+0xfc>
    4042:	f1 01       	movw	r30, r2
    4044:	93 fd       	sbrc	r25, 3
    4046:	85 91       	lpm	r24, Z+
    4048:	93 ff       	sbrs	r25, 3
    404a:	81 91       	ld	r24, Z+
    404c:	1f 01       	movw	r2, r30
    404e:	81 11       	cpse	r24, r1
    4050:	b3 cf       	rjmp	.-154    	; 0x3fb8 <vfprintf+0x62>
    4052:	9b eb       	ldi	r25, 0xBB	; 187
    4054:	98 0f       	add	r25, r24
    4056:	93 30       	cpi	r25, 0x03	; 3
    4058:	20 f4       	brcc	.+8      	; 0x4062 <vfprintf+0x10c>
    405a:	99 2d       	mov	r25, r9
    405c:	90 61       	ori	r25, 0x10	; 16
    405e:	80 5e       	subi	r24, 0xE0	; 224
    4060:	07 c0       	rjmp	.+14     	; 0x4070 <vfprintf+0x11a>
    4062:	9b e9       	ldi	r25, 0x9B	; 155
    4064:	98 0f       	add	r25, r24
    4066:	93 30       	cpi	r25, 0x03	; 3
    4068:	08 f0       	brcs	.+2      	; 0x406c <vfprintf+0x116>
    406a:	66 c1       	rjmp	.+716    	; 0x4338 <vfprintf+0x3e2>
    406c:	99 2d       	mov	r25, r9
    406e:	9f 7e       	andi	r25, 0xEF	; 239
    4070:	96 ff       	sbrs	r25, 6
    4072:	16 e0       	ldi	r17, 0x06	; 6
    4074:	9f 73       	andi	r25, 0x3F	; 63
    4076:	99 2e       	mov	r9, r25
    4078:	85 36       	cpi	r24, 0x65	; 101
    407a:	19 f4       	brne	.+6      	; 0x4082 <vfprintf+0x12c>
    407c:	90 64       	ori	r25, 0x40	; 64
    407e:	99 2e       	mov	r9, r25
    4080:	08 c0       	rjmp	.+16     	; 0x4092 <vfprintf+0x13c>
    4082:	86 36       	cpi	r24, 0x66	; 102
    4084:	21 f4       	brne	.+8      	; 0x408e <vfprintf+0x138>
    4086:	39 2f       	mov	r19, r25
    4088:	30 68       	ori	r19, 0x80	; 128
    408a:	93 2e       	mov	r9, r19
    408c:	02 c0       	rjmp	.+4      	; 0x4092 <vfprintf+0x13c>
    408e:	11 11       	cpse	r17, r1
    4090:	11 50       	subi	r17, 0x01	; 1
    4092:	97 fe       	sbrs	r9, 7
    4094:	07 c0       	rjmp	.+14     	; 0x40a4 <vfprintf+0x14e>
    4096:	1c 33       	cpi	r17, 0x3C	; 60
    4098:	50 f4       	brcc	.+20     	; 0x40ae <vfprintf+0x158>
    409a:	44 24       	eor	r4, r4
    409c:	43 94       	inc	r4
    409e:	41 0e       	add	r4, r17
    40a0:	27 e0       	ldi	r18, 0x07	; 7
    40a2:	0b c0       	rjmp	.+22     	; 0x40ba <vfprintf+0x164>
    40a4:	18 30       	cpi	r17, 0x08	; 8
    40a6:	38 f0       	brcs	.+14     	; 0x40b6 <vfprintf+0x160>
    40a8:	27 e0       	ldi	r18, 0x07	; 7
    40aa:	17 e0       	ldi	r17, 0x07	; 7
    40ac:	05 c0       	rjmp	.+10     	; 0x40b8 <vfprintf+0x162>
    40ae:	27 e0       	ldi	r18, 0x07	; 7
    40b0:	9c e3       	ldi	r25, 0x3C	; 60
    40b2:	49 2e       	mov	r4, r25
    40b4:	02 c0       	rjmp	.+4      	; 0x40ba <vfprintf+0x164>
    40b6:	21 2f       	mov	r18, r17
    40b8:	41 2c       	mov	r4, r1
    40ba:	56 01       	movw	r10, r12
    40bc:	84 e0       	ldi	r24, 0x04	; 4
    40be:	a8 0e       	add	r10, r24
    40c0:	b1 1c       	adc	r11, r1
    40c2:	f6 01       	movw	r30, r12
    40c4:	60 81       	ld	r22, Z
    40c6:	71 81       	ldd	r23, Z+1	; 0x01
    40c8:	82 81       	ldd	r24, Z+2	; 0x02
    40ca:	93 81       	ldd	r25, Z+3	; 0x03
    40cc:	04 2d       	mov	r16, r4
    40ce:	a3 01       	movw	r20, r6
    40d0:	0e 94 a6 23 	call	0x474c	; 0x474c <__ftoa_engine>
    40d4:	6c 01       	movw	r12, r24
    40d6:	f9 81       	ldd	r31, Y+1	; 0x01
    40d8:	fc 87       	std	Y+12, r31	; 0x0c
    40da:	f0 ff       	sbrs	r31, 0
    40dc:	02 c0       	rjmp	.+4      	; 0x40e2 <vfprintf+0x18c>
    40de:	f3 ff       	sbrs	r31, 3
    40e0:	06 c0       	rjmp	.+12     	; 0x40ee <vfprintf+0x198>
    40e2:	91 fc       	sbrc	r9, 1
    40e4:	06 c0       	rjmp	.+12     	; 0x40f2 <vfprintf+0x19c>
    40e6:	92 fe       	sbrs	r9, 2
    40e8:	06 c0       	rjmp	.+12     	; 0x40f6 <vfprintf+0x1a0>
    40ea:	00 e2       	ldi	r16, 0x20	; 32
    40ec:	05 c0       	rjmp	.+10     	; 0x40f8 <vfprintf+0x1a2>
    40ee:	0d e2       	ldi	r16, 0x2D	; 45
    40f0:	03 c0       	rjmp	.+6      	; 0x40f8 <vfprintf+0x1a2>
    40f2:	0b e2       	ldi	r16, 0x2B	; 43
    40f4:	01 c0       	rjmp	.+2      	; 0x40f8 <vfprintf+0x1a2>
    40f6:	00 e0       	ldi	r16, 0x00	; 0
    40f8:	8c 85       	ldd	r24, Y+12	; 0x0c
    40fa:	8c 70       	andi	r24, 0x0C	; 12
    40fc:	19 f0       	breq	.+6      	; 0x4104 <vfprintf+0x1ae>
    40fe:	01 11       	cpse	r16, r1
    4100:	5a c2       	rjmp	.+1204   	; 0x45b6 <vfprintf+0x660>
    4102:	9b c2       	rjmp	.+1334   	; 0x463a <vfprintf+0x6e4>
    4104:	97 fe       	sbrs	r9, 7
    4106:	10 c0       	rjmp	.+32     	; 0x4128 <vfprintf+0x1d2>
    4108:	4c 0c       	add	r4, r12
    410a:	fc 85       	ldd	r31, Y+12	; 0x0c
    410c:	f4 ff       	sbrs	r31, 4
    410e:	04 c0       	rjmp	.+8      	; 0x4118 <vfprintf+0x1c2>
    4110:	8a 81       	ldd	r24, Y+2	; 0x02
    4112:	81 33       	cpi	r24, 0x31	; 49
    4114:	09 f4       	brne	.+2      	; 0x4118 <vfprintf+0x1c2>
    4116:	4a 94       	dec	r4
    4118:	14 14       	cp	r1, r4
    411a:	74 f5       	brge	.+92     	; 0x4178 <vfprintf+0x222>
    411c:	28 e0       	ldi	r18, 0x08	; 8
    411e:	24 15       	cp	r18, r4
    4120:	78 f5       	brcc	.+94     	; 0x4180 <vfprintf+0x22a>
    4122:	88 e0       	ldi	r24, 0x08	; 8
    4124:	48 2e       	mov	r4, r24
    4126:	2c c0       	rjmp	.+88     	; 0x4180 <vfprintf+0x22a>
    4128:	96 fc       	sbrc	r9, 6
    412a:	2a c0       	rjmp	.+84     	; 0x4180 <vfprintf+0x22a>
    412c:	81 2f       	mov	r24, r17
    412e:	90 e0       	ldi	r25, 0x00	; 0
    4130:	8c 15       	cp	r24, r12
    4132:	9d 05       	cpc	r25, r13
    4134:	9c f0       	brlt	.+38     	; 0x415c <vfprintf+0x206>
    4136:	3c ef       	ldi	r19, 0xFC	; 252
    4138:	c3 16       	cp	r12, r19
    413a:	3f ef       	ldi	r19, 0xFF	; 255
    413c:	d3 06       	cpc	r13, r19
    413e:	74 f0       	brlt	.+28     	; 0x415c <vfprintf+0x206>
    4140:	89 2d       	mov	r24, r9
    4142:	80 68       	ori	r24, 0x80	; 128
    4144:	98 2e       	mov	r9, r24
    4146:	0a c0       	rjmp	.+20     	; 0x415c <vfprintf+0x206>
    4148:	e2 e0       	ldi	r30, 0x02	; 2
    414a:	f0 e0       	ldi	r31, 0x00	; 0
    414c:	ec 0f       	add	r30, r28
    414e:	fd 1f       	adc	r31, r29
    4150:	e1 0f       	add	r30, r17
    4152:	f1 1d       	adc	r31, r1
    4154:	80 81       	ld	r24, Z
    4156:	80 33       	cpi	r24, 0x30	; 48
    4158:	19 f4       	brne	.+6      	; 0x4160 <vfprintf+0x20a>
    415a:	11 50       	subi	r17, 0x01	; 1
    415c:	11 11       	cpse	r17, r1
    415e:	f4 cf       	rjmp	.-24     	; 0x4148 <vfprintf+0x1f2>
    4160:	97 fe       	sbrs	r9, 7
    4162:	0e c0       	rjmp	.+28     	; 0x4180 <vfprintf+0x22a>
    4164:	44 24       	eor	r4, r4
    4166:	43 94       	inc	r4
    4168:	41 0e       	add	r4, r17
    416a:	81 2f       	mov	r24, r17
    416c:	90 e0       	ldi	r25, 0x00	; 0
    416e:	c8 16       	cp	r12, r24
    4170:	d9 06       	cpc	r13, r25
    4172:	2c f4       	brge	.+10     	; 0x417e <vfprintf+0x228>
    4174:	1c 19       	sub	r17, r12
    4176:	04 c0       	rjmp	.+8      	; 0x4180 <vfprintf+0x22a>
    4178:	44 24       	eor	r4, r4
    417a:	43 94       	inc	r4
    417c:	01 c0       	rjmp	.+2      	; 0x4180 <vfprintf+0x22a>
    417e:	10 e0       	ldi	r17, 0x00	; 0
    4180:	97 fe       	sbrs	r9, 7
    4182:	06 c0       	rjmp	.+12     	; 0x4190 <vfprintf+0x23a>
    4184:	1c 14       	cp	r1, r12
    4186:	1d 04       	cpc	r1, r13
    4188:	34 f4       	brge	.+12     	; 0x4196 <vfprintf+0x240>
    418a:	c6 01       	movw	r24, r12
    418c:	01 96       	adiw	r24, 0x01	; 1
    418e:	05 c0       	rjmp	.+10     	; 0x419a <vfprintf+0x244>
    4190:	85 e0       	ldi	r24, 0x05	; 5
    4192:	90 e0       	ldi	r25, 0x00	; 0
    4194:	02 c0       	rjmp	.+4      	; 0x419a <vfprintf+0x244>
    4196:	81 e0       	ldi	r24, 0x01	; 1
    4198:	90 e0       	ldi	r25, 0x00	; 0
    419a:	01 11       	cpse	r16, r1
    419c:	01 96       	adiw	r24, 0x01	; 1
    419e:	11 23       	and	r17, r17
    41a0:	31 f0       	breq	.+12     	; 0x41ae <vfprintf+0x258>
    41a2:	21 2f       	mov	r18, r17
    41a4:	30 e0       	ldi	r19, 0x00	; 0
    41a6:	2f 5f       	subi	r18, 0xFF	; 255
    41a8:	3f 4f       	sbci	r19, 0xFF	; 255
    41aa:	82 0f       	add	r24, r18
    41ac:	93 1f       	adc	r25, r19
    41ae:	25 2d       	mov	r18, r5
    41b0:	30 e0       	ldi	r19, 0x00	; 0
    41b2:	82 17       	cp	r24, r18
    41b4:	93 07       	cpc	r25, r19
    41b6:	14 f4       	brge	.+4      	; 0x41bc <vfprintf+0x266>
    41b8:	58 1a       	sub	r5, r24
    41ba:	01 c0       	rjmp	.+2      	; 0x41be <vfprintf+0x268>
    41bc:	51 2c       	mov	r5, r1
    41be:	89 2d       	mov	r24, r9
    41c0:	89 70       	andi	r24, 0x09	; 9
    41c2:	49 f4       	brne	.+18     	; 0x41d6 <vfprintf+0x280>
    41c4:	55 20       	and	r5, r5
    41c6:	39 f0       	breq	.+14     	; 0x41d6 <vfprintf+0x280>
    41c8:	b7 01       	movw	r22, r14
    41ca:	80 e2       	ldi	r24, 0x20	; 32
    41cc:	90 e0       	ldi	r25, 0x00	; 0
    41ce:	0e 94 94 24 	call	0x4928	; 0x4928 <fputc>
    41d2:	5a 94       	dec	r5
    41d4:	f7 cf       	rjmp	.-18     	; 0x41c4 <vfprintf+0x26e>
    41d6:	00 23       	and	r16, r16
    41d8:	29 f0       	breq	.+10     	; 0x41e4 <vfprintf+0x28e>
    41da:	b7 01       	movw	r22, r14
    41dc:	80 2f       	mov	r24, r16
    41de:	90 e0       	ldi	r25, 0x00	; 0
    41e0:	0e 94 94 24 	call	0x4928	; 0x4928 <fputc>
    41e4:	93 fc       	sbrc	r9, 3
    41e6:	09 c0       	rjmp	.+18     	; 0x41fa <vfprintf+0x2a4>
    41e8:	55 20       	and	r5, r5
    41ea:	39 f0       	breq	.+14     	; 0x41fa <vfprintf+0x2a4>
    41ec:	b7 01       	movw	r22, r14
    41ee:	80 e3       	ldi	r24, 0x30	; 48
    41f0:	90 e0       	ldi	r25, 0x00	; 0
    41f2:	0e 94 94 24 	call	0x4928	; 0x4928 <fputc>
    41f6:	5a 94       	dec	r5
    41f8:	f7 cf       	rjmp	.-18     	; 0x41e8 <vfprintf+0x292>
    41fa:	97 fe       	sbrs	r9, 7
    41fc:	4c c0       	rjmp	.+152    	; 0x4296 <vfprintf+0x340>
    41fe:	46 01       	movw	r8, r12
    4200:	d7 fe       	sbrs	r13, 7
    4202:	02 c0       	rjmp	.+4      	; 0x4208 <vfprintf+0x2b2>
    4204:	81 2c       	mov	r8, r1
    4206:	91 2c       	mov	r9, r1
    4208:	c6 01       	movw	r24, r12
    420a:	88 19       	sub	r24, r8
    420c:	99 09       	sbc	r25, r9
    420e:	f3 01       	movw	r30, r6
    4210:	e8 0f       	add	r30, r24
    4212:	f9 1f       	adc	r31, r25
    4214:	fe 87       	std	Y+14, r31	; 0x0e
    4216:	ed 87       	std	Y+13, r30	; 0x0d
    4218:	96 01       	movw	r18, r12
    421a:	24 19       	sub	r18, r4
    421c:	31 09       	sbc	r19, r1
    421e:	38 8b       	std	Y+16, r19	; 0x10
    4220:	2f 87       	std	Y+15, r18	; 0x0f
    4222:	01 2f       	mov	r16, r17
    4224:	10 e0       	ldi	r17, 0x00	; 0
    4226:	11 95       	neg	r17
    4228:	01 95       	neg	r16
    422a:	11 09       	sbc	r17, r1
    422c:	3f ef       	ldi	r19, 0xFF	; 255
    422e:	83 16       	cp	r8, r19
    4230:	93 06       	cpc	r9, r19
    4232:	29 f4       	brne	.+10     	; 0x423e <vfprintf+0x2e8>
    4234:	b7 01       	movw	r22, r14
    4236:	8e e2       	ldi	r24, 0x2E	; 46
    4238:	90 e0       	ldi	r25, 0x00	; 0
    423a:	0e 94 94 24 	call	0x4928	; 0x4928 <fputc>
    423e:	c8 14       	cp	r12, r8
    4240:	d9 04       	cpc	r13, r9
    4242:	4c f0       	brlt	.+18     	; 0x4256 <vfprintf+0x300>
    4244:	8f 85       	ldd	r24, Y+15	; 0x0f
    4246:	98 89       	ldd	r25, Y+16	; 0x10
    4248:	88 15       	cp	r24, r8
    424a:	99 05       	cpc	r25, r9
    424c:	24 f4       	brge	.+8      	; 0x4256 <vfprintf+0x300>
    424e:	ed 85       	ldd	r30, Y+13	; 0x0d
    4250:	fe 85       	ldd	r31, Y+14	; 0x0e
    4252:	81 81       	ldd	r24, Z+1	; 0x01
    4254:	01 c0       	rjmp	.+2      	; 0x4258 <vfprintf+0x302>
    4256:	80 e3       	ldi	r24, 0x30	; 48
    4258:	f1 e0       	ldi	r31, 0x01	; 1
    425a:	8f 1a       	sub	r8, r31
    425c:	91 08       	sbc	r9, r1
    425e:	2d 85       	ldd	r18, Y+13	; 0x0d
    4260:	3e 85       	ldd	r19, Y+14	; 0x0e
    4262:	2f 5f       	subi	r18, 0xFF	; 255
    4264:	3f 4f       	sbci	r19, 0xFF	; 255
    4266:	3e 87       	std	Y+14, r19	; 0x0e
    4268:	2d 87       	std	Y+13, r18	; 0x0d
    426a:	80 16       	cp	r8, r16
    426c:	91 06       	cpc	r9, r17
    426e:	2c f0       	brlt	.+10     	; 0x427a <vfprintf+0x324>
    4270:	b7 01       	movw	r22, r14
    4272:	90 e0       	ldi	r25, 0x00	; 0
    4274:	0e 94 94 24 	call	0x4928	; 0x4928 <fputc>
    4278:	d9 cf       	rjmp	.-78     	; 0x422c <vfprintf+0x2d6>
    427a:	c8 14       	cp	r12, r8
    427c:	d9 04       	cpc	r13, r9
    427e:	41 f4       	brne	.+16     	; 0x4290 <vfprintf+0x33a>
    4280:	9a 81       	ldd	r25, Y+2	; 0x02
    4282:	96 33       	cpi	r25, 0x36	; 54
    4284:	20 f4       	brcc	.+8      	; 0x428e <vfprintf+0x338>
    4286:	95 33       	cpi	r25, 0x35	; 53
    4288:	19 f4       	brne	.+6      	; 0x4290 <vfprintf+0x33a>
    428a:	3c 85       	ldd	r19, Y+12	; 0x0c
    428c:	34 ff       	sbrs	r19, 4
    428e:	81 e3       	ldi	r24, 0x31	; 49
    4290:	b7 01       	movw	r22, r14
    4292:	90 e0       	ldi	r25, 0x00	; 0
    4294:	4e c0       	rjmp	.+156    	; 0x4332 <vfprintf+0x3dc>
    4296:	8a 81       	ldd	r24, Y+2	; 0x02
    4298:	81 33       	cpi	r24, 0x31	; 49
    429a:	19 f0       	breq	.+6      	; 0x42a2 <vfprintf+0x34c>
    429c:	9c 85       	ldd	r25, Y+12	; 0x0c
    429e:	9f 7e       	andi	r25, 0xEF	; 239
    42a0:	9c 87       	std	Y+12, r25	; 0x0c
    42a2:	b7 01       	movw	r22, r14
    42a4:	90 e0       	ldi	r25, 0x00	; 0
    42a6:	0e 94 94 24 	call	0x4928	; 0x4928 <fputc>
    42aa:	11 11       	cpse	r17, r1
    42ac:	05 c0       	rjmp	.+10     	; 0x42b8 <vfprintf+0x362>
    42ae:	94 fc       	sbrc	r9, 4
    42b0:	18 c0       	rjmp	.+48     	; 0x42e2 <vfprintf+0x38c>
    42b2:	85 e6       	ldi	r24, 0x65	; 101
    42b4:	90 e0       	ldi	r25, 0x00	; 0
    42b6:	17 c0       	rjmp	.+46     	; 0x42e6 <vfprintf+0x390>
    42b8:	b7 01       	movw	r22, r14
    42ba:	8e e2       	ldi	r24, 0x2E	; 46
    42bc:	90 e0       	ldi	r25, 0x00	; 0
    42be:	0e 94 94 24 	call	0x4928	; 0x4928 <fputc>
    42c2:	1e 5f       	subi	r17, 0xFE	; 254
    42c4:	82 e0       	ldi	r24, 0x02	; 2
    42c6:	01 e0       	ldi	r16, 0x01	; 1
    42c8:	08 0f       	add	r16, r24
    42ca:	f3 01       	movw	r30, r6
    42cc:	e8 0f       	add	r30, r24
    42ce:	f1 1d       	adc	r31, r1
    42d0:	80 81       	ld	r24, Z
    42d2:	b7 01       	movw	r22, r14
    42d4:	90 e0       	ldi	r25, 0x00	; 0
    42d6:	0e 94 94 24 	call	0x4928	; 0x4928 <fputc>
    42da:	80 2f       	mov	r24, r16
    42dc:	01 13       	cpse	r16, r17
    42de:	f3 cf       	rjmp	.-26     	; 0x42c6 <vfprintf+0x370>
    42e0:	e6 cf       	rjmp	.-52     	; 0x42ae <vfprintf+0x358>
    42e2:	85 e4       	ldi	r24, 0x45	; 69
    42e4:	90 e0       	ldi	r25, 0x00	; 0
    42e6:	b7 01       	movw	r22, r14
    42e8:	0e 94 94 24 	call	0x4928	; 0x4928 <fputc>
    42ec:	d7 fc       	sbrc	r13, 7
    42ee:	06 c0       	rjmp	.+12     	; 0x42fc <vfprintf+0x3a6>
    42f0:	c1 14       	cp	r12, r1
    42f2:	d1 04       	cpc	r13, r1
    42f4:	41 f4       	brne	.+16     	; 0x4306 <vfprintf+0x3b0>
    42f6:	ec 85       	ldd	r30, Y+12	; 0x0c
    42f8:	e4 ff       	sbrs	r30, 4
    42fa:	05 c0       	rjmp	.+10     	; 0x4306 <vfprintf+0x3b0>
    42fc:	d1 94       	neg	r13
    42fe:	c1 94       	neg	r12
    4300:	d1 08       	sbc	r13, r1
    4302:	8d e2       	ldi	r24, 0x2D	; 45
    4304:	01 c0       	rjmp	.+2      	; 0x4308 <vfprintf+0x3b2>
    4306:	8b e2       	ldi	r24, 0x2B	; 43
    4308:	b7 01       	movw	r22, r14
    430a:	90 e0       	ldi	r25, 0x00	; 0
    430c:	0e 94 94 24 	call	0x4928	; 0x4928 <fputc>
    4310:	80 e3       	ldi	r24, 0x30	; 48
    4312:	2a e0       	ldi	r18, 0x0A	; 10
    4314:	c2 16       	cp	r12, r18
    4316:	d1 04       	cpc	r13, r1
    4318:	2c f0       	brlt	.+10     	; 0x4324 <vfprintf+0x3ce>
    431a:	8f 5f       	subi	r24, 0xFF	; 255
    431c:	fa e0       	ldi	r31, 0x0A	; 10
    431e:	cf 1a       	sub	r12, r31
    4320:	d1 08       	sbc	r13, r1
    4322:	f7 cf       	rjmp	.-18     	; 0x4312 <vfprintf+0x3bc>
    4324:	b7 01       	movw	r22, r14
    4326:	90 e0       	ldi	r25, 0x00	; 0
    4328:	0e 94 94 24 	call	0x4928	; 0x4928 <fputc>
    432c:	b7 01       	movw	r22, r14
    432e:	c6 01       	movw	r24, r12
    4330:	c0 96       	adiw	r24, 0x30	; 48
    4332:	0e 94 94 24 	call	0x4928	; 0x4928 <fputc>
    4336:	54 c1       	rjmp	.+680    	; 0x45e0 <vfprintf+0x68a>
    4338:	83 36       	cpi	r24, 0x63	; 99
    433a:	31 f0       	breq	.+12     	; 0x4348 <vfprintf+0x3f2>
    433c:	83 37       	cpi	r24, 0x73	; 115
    433e:	79 f0       	breq	.+30     	; 0x435e <vfprintf+0x408>
    4340:	83 35       	cpi	r24, 0x53	; 83
    4342:	09 f0       	breq	.+2      	; 0x4346 <vfprintf+0x3f0>
    4344:	56 c0       	rjmp	.+172    	; 0x43f2 <vfprintf+0x49c>
    4346:	20 c0       	rjmp	.+64     	; 0x4388 <vfprintf+0x432>
    4348:	56 01       	movw	r10, r12
    434a:	32 e0       	ldi	r19, 0x02	; 2
    434c:	a3 0e       	add	r10, r19
    434e:	b1 1c       	adc	r11, r1
    4350:	f6 01       	movw	r30, r12
    4352:	80 81       	ld	r24, Z
    4354:	89 83       	std	Y+1, r24	; 0x01
    4356:	01 e0       	ldi	r16, 0x01	; 1
    4358:	10 e0       	ldi	r17, 0x00	; 0
    435a:	63 01       	movw	r12, r6
    435c:	12 c0       	rjmp	.+36     	; 0x4382 <vfprintf+0x42c>
    435e:	56 01       	movw	r10, r12
    4360:	f2 e0       	ldi	r31, 0x02	; 2
    4362:	af 0e       	add	r10, r31
    4364:	b1 1c       	adc	r11, r1
    4366:	f6 01       	movw	r30, r12
    4368:	c0 80       	ld	r12, Z
    436a:	d1 80       	ldd	r13, Z+1	; 0x01
    436c:	96 fe       	sbrs	r9, 6
    436e:	03 c0       	rjmp	.+6      	; 0x4376 <vfprintf+0x420>
    4370:	61 2f       	mov	r22, r17
    4372:	70 e0       	ldi	r23, 0x00	; 0
    4374:	02 c0       	rjmp	.+4      	; 0x437a <vfprintf+0x424>
    4376:	6f ef       	ldi	r22, 0xFF	; 255
    4378:	7f ef       	ldi	r23, 0xFF	; 255
    437a:	c6 01       	movw	r24, r12
    437c:	0e 94 89 24 	call	0x4912	; 0x4912 <strnlen>
    4380:	8c 01       	movw	r16, r24
    4382:	f9 2d       	mov	r31, r9
    4384:	ff 77       	andi	r31, 0x7F	; 127
    4386:	14 c0       	rjmp	.+40     	; 0x43b0 <vfprintf+0x45a>
    4388:	56 01       	movw	r10, r12
    438a:	22 e0       	ldi	r18, 0x02	; 2
    438c:	a2 0e       	add	r10, r18
    438e:	b1 1c       	adc	r11, r1
    4390:	f6 01       	movw	r30, r12
    4392:	c0 80       	ld	r12, Z
    4394:	d1 80       	ldd	r13, Z+1	; 0x01
    4396:	96 fe       	sbrs	r9, 6
    4398:	03 c0       	rjmp	.+6      	; 0x43a0 <vfprintf+0x44a>
    439a:	61 2f       	mov	r22, r17
    439c:	70 e0       	ldi	r23, 0x00	; 0
    439e:	02 c0       	rjmp	.+4      	; 0x43a4 <vfprintf+0x44e>
    43a0:	6f ef       	ldi	r22, 0xFF	; 255
    43a2:	7f ef       	ldi	r23, 0xFF	; 255
    43a4:	c6 01       	movw	r24, r12
    43a6:	0e 94 7e 24 	call	0x48fc	; 0x48fc <strnlen_P>
    43aa:	8c 01       	movw	r16, r24
    43ac:	f9 2d       	mov	r31, r9
    43ae:	f0 68       	ori	r31, 0x80	; 128
    43b0:	9f 2e       	mov	r9, r31
    43b2:	f3 fd       	sbrc	r31, 3
    43b4:	1a c0       	rjmp	.+52     	; 0x43ea <vfprintf+0x494>
    43b6:	85 2d       	mov	r24, r5
    43b8:	90 e0       	ldi	r25, 0x00	; 0
    43ba:	08 17       	cp	r16, r24
    43bc:	19 07       	cpc	r17, r25
    43be:	a8 f4       	brcc	.+42     	; 0x43ea <vfprintf+0x494>
    43c0:	b7 01       	movw	r22, r14
    43c2:	80 e2       	ldi	r24, 0x20	; 32
    43c4:	90 e0       	ldi	r25, 0x00	; 0
    43c6:	0e 94 94 24 	call	0x4928	; 0x4928 <fputc>
    43ca:	5a 94       	dec	r5
    43cc:	f4 cf       	rjmp	.-24     	; 0x43b6 <vfprintf+0x460>
    43ce:	f6 01       	movw	r30, r12
    43d0:	97 fc       	sbrc	r9, 7
    43d2:	85 91       	lpm	r24, Z+
    43d4:	97 fe       	sbrs	r9, 7
    43d6:	81 91       	ld	r24, Z+
    43d8:	6f 01       	movw	r12, r30
    43da:	b7 01       	movw	r22, r14
    43dc:	90 e0       	ldi	r25, 0x00	; 0
    43de:	0e 94 94 24 	call	0x4928	; 0x4928 <fputc>
    43e2:	51 10       	cpse	r5, r1
    43e4:	5a 94       	dec	r5
    43e6:	01 50       	subi	r16, 0x01	; 1
    43e8:	11 09       	sbc	r17, r1
    43ea:	01 15       	cp	r16, r1
    43ec:	11 05       	cpc	r17, r1
    43ee:	79 f7       	brne	.-34     	; 0x43ce <vfprintf+0x478>
    43f0:	f7 c0       	rjmp	.+494    	; 0x45e0 <vfprintf+0x68a>
    43f2:	84 36       	cpi	r24, 0x64	; 100
    43f4:	11 f0       	breq	.+4      	; 0x43fa <vfprintf+0x4a4>
    43f6:	89 36       	cpi	r24, 0x69	; 105
    43f8:	61 f5       	brne	.+88     	; 0x4452 <vfprintf+0x4fc>
    43fa:	56 01       	movw	r10, r12
    43fc:	97 fe       	sbrs	r9, 7
    43fe:	09 c0       	rjmp	.+18     	; 0x4412 <vfprintf+0x4bc>
    4400:	24 e0       	ldi	r18, 0x04	; 4
    4402:	a2 0e       	add	r10, r18
    4404:	b1 1c       	adc	r11, r1
    4406:	f6 01       	movw	r30, r12
    4408:	60 81       	ld	r22, Z
    440a:	71 81       	ldd	r23, Z+1	; 0x01
    440c:	82 81       	ldd	r24, Z+2	; 0x02
    440e:	93 81       	ldd	r25, Z+3	; 0x03
    4410:	0a c0       	rjmp	.+20     	; 0x4426 <vfprintf+0x4d0>
    4412:	f2 e0       	ldi	r31, 0x02	; 2
    4414:	af 0e       	add	r10, r31
    4416:	b1 1c       	adc	r11, r1
    4418:	f6 01       	movw	r30, r12
    441a:	60 81       	ld	r22, Z
    441c:	71 81       	ldd	r23, Z+1	; 0x01
    441e:	07 2e       	mov	r0, r23
    4420:	00 0c       	add	r0, r0
    4422:	88 0b       	sbc	r24, r24
    4424:	99 0b       	sbc	r25, r25
    4426:	f9 2d       	mov	r31, r9
    4428:	ff 76       	andi	r31, 0x6F	; 111
    442a:	9f 2e       	mov	r9, r31
    442c:	97 ff       	sbrs	r25, 7
    442e:	09 c0       	rjmp	.+18     	; 0x4442 <vfprintf+0x4ec>
    4430:	90 95       	com	r25
    4432:	80 95       	com	r24
    4434:	70 95       	com	r23
    4436:	61 95       	neg	r22
    4438:	7f 4f       	sbci	r23, 0xFF	; 255
    443a:	8f 4f       	sbci	r24, 0xFF	; 255
    443c:	9f 4f       	sbci	r25, 0xFF	; 255
    443e:	f0 68       	ori	r31, 0x80	; 128
    4440:	9f 2e       	mov	r9, r31
    4442:	2a e0       	ldi	r18, 0x0A	; 10
    4444:	30 e0       	ldi	r19, 0x00	; 0
    4446:	a3 01       	movw	r20, r6
    4448:	0e 94 f2 24 	call	0x49e4	; 0x49e4 <__ultoa_invert>
    444c:	c8 2e       	mov	r12, r24
    444e:	c6 18       	sub	r12, r6
    4450:	3f c0       	rjmp	.+126    	; 0x44d0 <vfprintf+0x57a>
    4452:	09 2d       	mov	r16, r9
    4454:	85 37       	cpi	r24, 0x75	; 117
    4456:	21 f4       	brne	.+8      	; 0x4460 <vfprintf+0x50a>
    4458:	0f 7e       	andi	r16, 0xEF	; 239
    445a:	2a e0       	ldi	r18, 0x0A	; 10
    445c:	30 e0       	ldi	r19, 0x00	; 0
    445e:	1d c0       	rjmp	.+58     	; 0x449a <vfprintf+0x544>
    4460:	09 7f       	andi	r16, 0xF9	; 249
    4462:	8f 36       	cpi	r24, 0x6F	; 111
    4464:	91 f0       	breq	.+36     	; 0x448a <vfprintf+0x534>
    4466:	18 f4       	brcc	.+6      	; 0x446e <vfprintf+0x518>
    4468:	88 35       	cpi	r24, 0x58	; 88
    446a:	59 f0       	breq	.+22     	; 0x4482 <vfprintf+0x52c>
    446c:	c3 c0       	rjmp	.+390    	; 0x45f4 <vfprintf+0x69e>
    446e:	80 37       	cpi	r24, 0x70	; 112
    4470:	19 f0       	breq	.+6      	; 0x4478 <vfprintf+0x522>
    4472:	88 37       	cpi	r24, 0x78	; 120
    4474:	11 f0       	breq	.+4      	; 0x447a <vfprintf+0x524>
    4476:	be c0       	rjmp	.+380    	; 0x45f4 <vfprintf+0x69e>
    4478:	00 61       	ori	r16, 0x10	; 16
    447a:	04 ff       	sbrs	r16, 4
    447c:	09 c0       	rjmp	.+18     	; 0x4490 <vfprintf+0x53a>
    447e:	04 60       	ori	r16, 0x04	; 4
    4480:	07 c0       	rjmp	.+14     	; 0x4490 <vfprintf+0x53a>
    4482:	94 fe       	sbrs	r9, 4
    4484:	08 c0       	rjmp	.+16     	; 0x4496 <vfprintf+0x540>
    4486:	06 60       	ori	r16, 0x06	; 6
    4488:	06 c0       	rjmp	.+12     	; 0x4496 <vfprintf+0x540>
    448a:	28 e0       	ldi	r18, 0x08	; 8
    448c:	30 e0       	ldi	r19, 0x00	; 0
    448e:	05 c0       	rjmp	.+10     	; 0x449a <vfprintf+0x544>
    4490:	20 e1       	ldi	r18, 0x10	; 16
    4492:	30 e0       	ldi	r19, 0x00	; 0
    4494:	02 c0       	rjmp	.+4      	; 0x449a <vfprintf+0x544>
    4496:	20 e1       	ldi	r18, 0x10	; 16
    4498:	32 e0       	ldi	r19, 0x02	; 2
    449a:	56 01       	movw	r10, r12
    449c:	07 ff       	sbrs	r16, 7
    449e:	09 c0       	rjmp	.+18     	; 0x44b2 <vfprintf+0x55c>
    44a0:	84 e0       	ldi	r24, 0x04	; 4
    44a2:	a8 0e       	add	r10, r24
    44a4:	b1 1c       	adc	r11, r1
    44a6:	f6 01       	movw	r30, r12
    44a8:	60 81       	ld	r22, Z
    44aa:	71 81       	ldd	r23, Z+1	; 0x01
    44ac:	82 81       	ldd	r24, Z+2	; 0x02
    44ae:	93 81       	ldd	r25, Z+3	; 0x03
    44b0:	08 c0       	rjmp	.+16     	; 0x44c2 <vfprintf+0x56c>
    44b2:	f2 e0       	ldi	r31, 0x02	; 2
    44b4:	af 0e       	add	r10, r31
    44b6:	b1 1c       	adc	r11, r1
    44b8:	f6 01       	movw	r30, r12
    44ba:	60 81       	ld	r22, Z
    44bc:	71 81       	ldd	r23, Z+1	; 0x01
    44be:	80 e0       	ldi	r24, 0x00	; 0
    44c0:	90 e0       	ldi	r25, 0x00	; 0
    44c2:	a3 01       	movw	r20, r6
    44c4:	0e 94 f2 24 	call	0x49e4	; 0x49e4 <__ultoa_invert>
    44c8:	c8 2e       	mov	r12, r24
    44ca:	c6 18       	sub	r12, r6
    44cc:	0f 77       	andi	r16, 0x7F	; 127
    44ce:	90 2e       	mov	r9, r16
    44d0:	96 fe       	sbrs	r9, 6
    44d2:	0b c0       	rjmp	.+22     	; 0x44ea <vfprintf+0x594>
    44d4:	09 2d       	mov	r16, r9
    44d6:	0e 7f       	andi	r16, 0xFE	; 254
    44d8:	c1 16       	cp	r12, r17
    44da:	50 f4       	brcc	.+20     	; 0x44f0 <vfprintf+0x59a>
    44dc:	94 fe       	sbrs	r9, 4
    44de:	0a c0       	rjmp	.+20     	; 0x44f4 <vfprintf+0x59e>
    44e0:	92 fc       	sbrc	r9, 2
    44e2:	08 c0       	rjmp	.+16     	; 0x44f4 <vfprintf+0x59e>
    44e4:	09 2d       	mov	r16, r9
    44e6:	0e 7e       	andi	r16, 0xEE	; 238
    44e8:	05 c0       	rjmp	.+10     	; 0x44f4 <vfprintf+0x59e>
    44ea:	dc 2c       	mov	r13, r12
    44ec:	09 2d       	mov	r16, r9
    44ee:	03 c0       	rjmp	.+6      	; 0x44f6 <vfprintf+0x5a0>
    44f0:	dc 2c       	mov	r13, r12
    44f2:	01 c0       	rjmp	.+2      	; 0x44f6 <vfprintf+0x5a0>
    44f4:	d1 2e       	mov	r13, r17
    44f6:	04 ff       	sbrs	r16, 4
    44f8:	0d c0       	rjmp	.+26     	; 0x4514 <vfprintf+0x5be>
    44fa:	fe 01       	movw	r30, r28
    44fc:	ec 0d       	add	r30, r12
    44fe:	f1 1d       	adc	r31, r1
    4500:	80 81       	ld	r24, Z
    4502:	80 33       	cpi	r24, 0x30	; 48
    4504:	11 f4       	brne	.+4      	; 0x450a <vfprintf+0x5b4>
    4506:	09 7e       	andi	r16, 0xE9	; 233
    4508:	09 c0       	rjmp	.+18     	; 0x451c <vfprintf+0x5c6>
    450a:	02 ff       	sbrs	r16, 2
    450c:	06 c0       	rjmp	.+12     	; 0x451a <vfprintf+0x5c4>
    450e:	d3 94       	inc	r13
    4510:	d3 94       	inc	r13
    4512:	04 c0       	rjmp	.+8      	; 0x451c <vfprintf+0x5c6>
    4514:	80 2f       	mov	r24, r16
    4516:	86 78       	andi	r24, 0x86	; 134
    4518:	09 f0       	breq	.+2      	; 0x451c <vfprintf+0x5c6>
    451a:	d3 94       	inc	r13
    451c:	03 fd       	sbrc	r16, 3
    451e:	11 c0       	rjmp	.+34     	; 0x4542 <vfprintf+0x5ec>
    4520:	00 ff       	sbrs	r16, 0
    4522:	06 c0       	rjmp	.+12     	; 0x4530 <vfprintf+0x5da>
    4524:	1c 2d       	mov	r17, r12
    4526:	d5 14       	cp	r13, r5
    4528:	80 f4       	brcc	.+32     	; 0x454a <vfprintf+0x5f4>
    452a:	15 0d       	add	r17, r5
    452c:	1d 19       	sub	r17, r13
    452e:	0d c0       	rjmp	.+26     	; 0x454a <vfprintf+0x5f4>
    4530:	d5 14       	cp	r13, r5
    4532:	58 f4       	brcc	.+22     	; 0x454a <vfprintf+0x5f4>
    4534:	b7 01       	movw	r22, r14
    4536:	80 e2       	ldi	r24, 0x20	; 32
    4538:	90 e0       	ldi	r25, 0x00	; 0
    453a:	0e 94 94 24 	call	0x4928	; 0x4928 <fputc>
    453e:	d3 94       	inc	r13
    4540:	f7 cf       	rjmp	.-18     	; 0x4530 <vfprintf+0x5da>
    4542:	d5 14       	cp	r13, r5
    4544:	10 f4       	brcc	.+4      	; 0x454a <vfprintf+0x5f4>
    4546:	5d 18       	sub	r5, r13
    4548:	01 c0       	rjmp	.+2      	; 0x454c <vfprintf+0x5f6>
    454a:	51 2c       	mov	r5, r1
    454c:	04 ff       	sbrs	r16, 4
    454e:	10 c0       	rjmp	.+32     	; 0x4570 <vfprintf+0x61a>
    4550:	b7 01       	movw	r22, r14
    4552:	80 e3       	ldi	r24, 0x30	; 48
    4554:	90 e0       	ldi	r25, 0x00	; 0
    4556:	0e 94 94 24 	call	0x4928	; 0x4928 <fputc>
    455a:	02 ff       	sbrs	r16, 2
    455c:	17 c0       	rjmp	.+46     	; 0x458c <vfprintf+0x636>
    455e:	01 fd       	sbrc	r16, 1
    4560:	03 c0       	rjmp	.+6      	; 0x4568 <vfprintf+0x612>
    4562:	88 e7       	ldi	r24, 0x78	; 120
    4564:	90 e0       	ldi	r25, 0x00	; 0
    4566:	02 c0       	rjmp	.+4      	; 0x456c <vfprintf+0x616>
    4568:	88 e5       	ldi	r24, 0x58	; 88
    456a:	90 e0       	ldi	r25, 0x00	; 0
    456c:	b7 01       	movw	r22, r14
    456e:	0c c0       	rjmp	.+24     	; 0x4588 <vfprintf+0x632>
    4570:	80 2f       	mov	r24, r16
    4572:	86 78       	andi	r24, 0x86	; 134
    4574:	59 f0       	breq	.+22     	; 0x458c <vfprintf+0x636>
    4576:	01 ff       	sbrs	r16, 1
    4578:	02 c0       	rjmp	.+4      	; 0x457e <vfprintf+0x628>
    457a:	8b e2       	ldi	r24, 0x2B	; 43
    457c:	01 c0       	rjmp	.+2      	; 0x4580 <vfprintf+0x62a>
    457e:	80 e2       	ldi	r24, 0x20	; 32
    4580:	07 fd       	sbrc	r16, 7
    4582:	8d e2       	ldi	r24, 0x2D	; 45
    4584:	b7 01       	movw	r22, r14
    4586:	90 e0       	ldi	r25, 0x00	; 0
    4588:	0e 94 94 24 	call	0x4928	; 0x4928 <fputc>
    458c:	c1 16       	cp	r12, r17
    458e:	38 f4       	brcc	.+14     	; 0x459e <vfprintf+0x648>
    4590:	b7 01       	movw	r22, r14
    4592:	80 e3       	ldi	r24, 0x30	; 48
    4594:	90 e0       	ldi	r25, 0x00	; 0
    4596:	0e 94 94 24 	call	0x4928	; 0x4928 <fputc>
    459a:	11 50       	subi	r17, 0x01	; 1
    459c:	f7 cf       	rjmp	.-18     	; 0x458c <vfprintf+0x636>
    459e:	ca 94       	dec	r12
    45a0:	f3 01       	movw	r30, r6
    45a2:	ec 0d       	add	r30, r12
    45a4:	f1 1d       	adc	r31, r1
    45a6:	80 81       	ld	r24, Z
    45a8:	b7 01       	movw	r22, r14
    45aa:	90 e0       	ldi	r25, 0x00	; 0
    45ac:	0e 94 94 24 	call	0x4928	; 0x4928 <fputc>
    45b0:	c1 10       	cpse	r12, r1
    45b2:	f5 cf       	rjmp	.-22     	; 0x459e <vfprintf+0x648>
    45b4:	15 c0       	rjmp	.+42     	; 0x45e0 <vfprintf+0x68a>
    45b6:	f4 e0       	ldi	r31, 0x04	; 4
    45b8:	f5 15       	cp	r31, r5
    45ba:	60 f5       	brcc	.+88     	; 0x4614 <vfprintf+0x6be>
    45bc:	84 e0       	ldi	r24, 0x04	; 4
    45be:	58 1a       	sub	r5, r24
    45c0:	93 fe       	sbrs	r9, 3
    45c2:	1f c0       	rjmp	.+62     	; 0x4602 <vfprintf+0x6ac>
    45c4:	01 11       	cpse	r16, r1
    45c6:	27 c0       	rjmp	.+78     	; 0x4616 <vfprintf+0x6c0>
    45c8:	2c 85       	ldd	r18, Y+12	; 0x0c
    45ca:	23 ff       	sbrs	r18, 3
    45cc:	2a c0       	rjmp	.+84     	; 0x4622 <vfprintf+0x6cc>
    45ce:	04 e6       	ldi	r16, 0x64	; 100
    45d0:	12 e0       	ldi	r17, 0x02	; 2
    45d2:	39 2d       	mov	r19, r9
    45d4:	30 71       	andi	r19, 0x10	; 16
    45d6:	93 2e       	mov	r9, r19
    45d8:	f8 01       	movw	r30, r16
    45da:	84 91       	lpm	r24, Z
    45dc:	81 11       	cpse	r24, r1
    45de:	24 c0       	rjmp	.+72     	; 0x4628 <vfprintf+0x6d2>
    45e0:	55 20       	and	r5, r5
    45e2:	09 f4       	brne	.+2      	; 0x45e6 <vfprintf+0x690>
    45e4:	e4 cc       	rjmp	.-1592   	; 0x3fae <vfprintf+0x58>
    45e6:	b7 01       	movw	r22, r14
    45e8:	80 e2       	ldi	r24, 0x20	; 32
    45ea:	90 e0       	ldi	r25, 0x00	; 0
    45ec:	0e 94 94 24 	call	0x4928	; 0x4928 <fputc>
    45f0:	5a 94       	dec	r5
    45f2:	f6 cf       	rjmp	.-20     	; 0x45e0 <vfprintf+0x68a>
    45f4:	f7 01       	movw	r30, r14
    45f6:	86 81       	ldd	r24, Z+6	; 0x06
    45f8:	97 81       	ldd	r25, Z+7	; 0x07
    45fa:	26 c0       	rjmp	.+76     	; 0x4648 <vfprintf+0x6f2>
    45fc:	8f ef       	ldi	r24, 0xFF	; 255
    45fe:	9f ef       	ldi	r25, 0xFF	; 255
    4600:	23 c0       	rjmp	.+70     	; 0x4648 <vfprintf+0x6f2>
    4602:	b7 01       	movw	r22, r14
    4604:	80 e2       	ldi	r24, 0x20	; 32
    4606:	90 e0       	ldi	r25, 0x00	; 0
    4608:	0e 94 94 24 	call	0x4928	; 0x4928 <fputc>
    460c:	5a 94       	dec	r5
    460e:	51 10       	cpse	r5, r1
    4610:	f8 cf       	rjmp	.-16     	; 0x4602 <vfprintf+0x6ac>
    4612:	d8 cf       	rjmp	.-80     	; 0x45c4 <vfprintf+0x66e>
    4614:	51 2c       	mov	r5, r1
    4616:	b7 01       	movw	r22, r14
    4618:	80 2f       	mov	r24, r16
    461a:	90 e0       	ldi	r25, 0x00	; 0
    461c:	0e 94 94 24 	call	0x4928	; 0x4928 <fputc>
    4620:	d3 cf       	rjmp	.-90     	; 0x45c8 <vfprintf+0x672>
    4622:	08 e6       	ldi	r16, 0x68	; 104
    4624:	12 e0       	ldi	r17, 0x02	; 2
    4626:	d5 cf       	rjmp	.-86     	; 0x45d2 <vfprintf+0x67c>
    4628:	91 10       	cpse	r9, r1
    462a:	80 52       	subi	r24, 0x20	; 32
    462c:	b7 01       	movw	r22, r14
    462e:	90 e0       	ldi	r25, 0x00	; 0
    4630:	0e 94 94 24 	call	0x4928	; 0x4928 <fputc>
    4634:	0f 5f       	subi	r16, 0xFF	; 255
    4636:	1f 4f       	sbci	r17, 0xFF	; 255
    4638:	cf cf       	rjmp	.-98     	; 0x45d8 <vfprintf+0x682>
    463a:	23 e0       	ldi	r18, 0x03	; 3
    463c:	25 15       	cp	r18, r5
    463e:	10 f4       	brcc	.+4      	; 0x4644 <vfprintf+0x6ee>
    4640:	83 e0       	ldi	r24, 0x03	; 3
    4642:	bd cf       	rjmp	.-134    	; 0x45be <vfprintf+0x668>
    4644:	51 2c       	mov	r5, r1
    4646:	c0 cf       	rjmp	.-128    	; 0x45c8 <vfprintf+0x672>
    4648:	60 96       	adiw	r28, 0x10	; 16
    464a:	e2 e1       	ldi	r30, 0x12	; 18
    464c:	0c 94 8b 23 	jmp	0x4716	; 0x4716 <__epilogue_restores__>

00004650 <__udivmodsi4>:
    4650:	a1 e2       	ldi	r26, 0x21	; 33
    4652:	1a 2e       	mov	r1, r26
    4654:	aa 1b       	sub	r26, r26
    4656:	bb 1b       	sub	r27, r27
    4658:	fd 01       	movw	r30, r26
    465a:	0d c0       	rjmp	.+26     	; 0x4676 <__udivmodsi4_ep>

0000465c <__udivmodsi4_loop>:
    465c:	aa 1f       	adc	r26, r26
    465e:	bb 1f       	adc	r27, r27
    4660:	ee 1f       	adc	r30, r30
    4662:	ff 1f       	adc	r31, r31
    4664:	a2 17       	cp	r26, r18
    4666:	b3 07       	cpc	r27, r19
    4668:	e4 07       	cpc	r30, r20
    466a:	f5 07       	cpc	r31, r21
    466c:	20 f0       	brcs	.+8      	; 0x4676 <__udivmodsi4_ep>
    466e:	a2 1b       	sub	r26, r18
    4670:	b3 0b       	sbc	r27, r19
    4672:	e4 0b       	sbc	r30, r20
    4674:	f5 0b       	sbc	r31, r21

00004676 <__udivmodsi4_ep>:
    4676:	66 1f       	adc	r22, r22
    4678:	77 1f       	adc	r23, r23
    467a:	88 1f       	adc	r24, r24
    467c:	99 1f       	adc	r25, r25
    467e:	1a 94       	dec	r1
    4680:	69 f7       	brne	.-38     	; 0x465c <__udivmodsi4_loop>
    4682:	60 95       	com	r22
    4684:	70 95       	com	r23
    4686:	80 95       	com	r24
    4688:	90 95       	com	r25
    468a:	9b 01       	movw	r18, r22
    468c:	ac 01       	movw	r20, r24
    468e:	bd 01       	movw	r22, r26
    4690:	cf 01       	movw	r24, r30
    4692:	08 95       	ret

00004694 <__divmodsi4>:
    4694:	05 2e       	mov	r0, r21
    4696:	97 fb       	bst	r25, 7
    4698:	1e f4       	brtc	.+6      	; 0x46a0 <__divmodsi4+0xc>
    469a:	00 94       	com	r0
    469c:	0e 94 61 23 	call	0x46c2	; 0x46c2 <__negsi2>
    46a0:	57 fd       	sbrc	r21, 7
    46a2:	07 d0       	rcall	.+14     	; 0x46b2 <__divmodsi4_neg2>
    46a4:	0e 94 28 23 	call	0x4650	; 0x4650 <__udivmodsi4>
    46a8:	07 fc       	sbrc	r0, 7
    46aa:	03 d0       	rcall	.+6      	; 0x46b2 <__divmodsi4_neg2>
    46ac:	4e f4       	brtc	.+18     	; 0x46c0 <__divmodsi4_exit>
    46ae:	0c 94 61 23 	jmp	0x46c2	; 0x46c2 <__negsi2>

000046b2 <__divmodsi4_neg2>:
    46b2:	50 95       	com	r21
    46b4:	40 95       	com	r20
    46b6:	30 95       	com	r19
    46b8:	21 95       	neg	r18
    46ba:	3f 4f       	sbci	r19, 0xFF	; 255
    46bc:	4f 4f       	sbci	r20, 0xFF	; 255
    46be:	5f 4f       	sbci	r21, 0xFF	; 255

000046c0 <__divmodsi4_exit>:
    46c0:	08 95       	ret

000046c2 <__negsi2>:
    46c2:	90 95       	com	r25
    46c4:	80 95       	com	r24
    46c6:	70 95       	com	r23
    46c8:	61 95       	neg	r22
    46ca:	7f 4f       	sbci	r23, 0xFF	; 255
    46cc:	8f 4f       	sbci	r24, 0xFF	; 255
    46ce:	9f 4f       	sbci	r25, 0xFF	; 255
    46d0:	08 95       	ret

000046d2 <__tablejump2__>:
    46d2:	ee 0f       	add	r30, r30
    46d4:	ff 1f       	adc	r31, r31
    46d6:	05 90       	lpm	r0, Z+
    46d8:	f4 91       	lpm	r31, Z
    46da:	e0 2d       	mov	r30, r0
    46dc:	09 94       	ijmp

000046de <__prologue_saves__>:
    46de:	2f 92       	push	r2
    46e0:	3f 92       	push	r3
    46e2:	4f 92       	push	r4
    46e4:	5f 92       	push	r5
    46e6:	6f 92       	push	r6
    46e8:	7f 92       	push	r7
    46ea:	8f 92       	push	r8
    46ec:	9f 92       	push	r9
    46ee:	af 92       	push	r10
    46f0:	bf 92       	push	r11
    46f2:	cf 92       	push	r12
    46f4:	df 92       	push	r13
    46f6:	ef 92       	push	r14
    46f8:	ff 92       	push	r15
    46fa:	0f 93       	push	r16
    46fc:	1f 93       	push	r17
    46fe:	cf 93       	push	r28
    4700:	df 93       	push	r29
    4702:	cd b7       	in	r28, 0x3d	; 61
    4704:	de b7       	in	r29, 0x3e	; 62
    4706:	ca 1b       	sub	r28, r26
    4708:	db 0b       	sbc	r29, r27
    470a:	0f b6       	in	r0, 0x3f	; 63
    470c:	f8 94       	cli
    470e:	de bf       	out	0x3e, r29	; 62
    4710:	0f be       	out	0x3f, r0	; 63
    4712:	cd bf       	out	0x3d, r28	; 61
    4714:	09 94       	ijmp

00004716 <__epilogue_restores__>:
    4716:	2a 88       	ldd	r2, Y+18	; 0x12
    4718:	39 88       	ldd	r3, Y+17	; 0x11
    471a:	48 88       	ldd	r4, Y+16	; 0x10
    471c:	5f 84       	ldd	r5, Y+15	; 0x0f
    471e:	6e 84       	ldd	r6, Y+14	; 0x0e
    4720:	7d 84       	ldd	r7, Y+13	; 0x0d
    4722:	8c 84       	ldd	r8, Y+12	; 0x0c
    4724:	9b 84       	ldd	r9, Y+11	; 0x0b
    4726:	aa 84       	ldd	r10, Y+10	; 0x0a
    4728:	b9 84       	ldd	r11, Y+9	; 0x09
    472a:	c8 84       	ldd	r12, Y+8	; 0x08
    472c:	df 80       	ldd	r13, Y+7	; 0x07
    472e:	ee 80       	ldd	r14, Y+6	; 0x06
    4730:	fd 80       	ldd	r15, Y+5	; 0x05
    4732:	0c 81       	ldd	r16, Y+4	; 0x04
    4734:	1b 81       	ldd	r17, Y+3	; 0x03
    4736:	aa 81       	ldd	r26, Y+2	; 0x02
    4738:	b9 81       	ldd	r27, Y+1	; 0x01
    473a:	ce 0f       	add	r28, r30
    473c:	d1 1d       	adc	r29, r1
    473e:	0f b6       	in	r0, 0x3f	; 63
    4740:	f8 94       	cli
    4742:	de bf       	out	0x3e, r29	; 62
    4744:	0f be       	out	0x3f, r0	; 63
    4746:	cd bf       	out	0x3d, r28	; 61
    4748:	ed 01       	movw	r28, r26
    474a:	08 95       	ret

0000474c <__ftoa_engine>:
    474c:	28 30       	cpi	r18, 0x08	; 8
    474e:	08 f0       	brcs	.+2      	; 0x4752 <__ftoa_engine+0x6>
    4750:	27 e0       	ldi	r18, 0x07	; 7
    4752:	33 27       	eor	r19, r19
    4754:	da 01       	movw	r26, r20
    4756:	99 0f       	add	r25, r25
    4758:	31 1d       	adc	r19, r1
    475a:	87 fd       	sbrc	r24, 7
    475c:	91 60       	ori	r25, 0x01	; 1
    475e:	00 96       	adiw	r24, 0x00	; 0
    4760:	61 05       	cpc	r22, r1
    4762:	71 05       	cpc	r23, r1
    4764:	39 f4       	brne	.+14     	; 0x4774 <__ftoa_engine+0x28>
    4766:	32 60       	ori	r19, 0x02	; 2
    4768:	2e 5f       	subi	r18, 0xFE	; 254
    476a:	3d 93       	st	X+, r19
    476c:	30 e3       	ldi	r19, 0x30	; 48
    476e:	2a 95       	dec	r18
    4770:	e1 f7       	brne	.-8      	; 0x476a <__ftoa_engine+0x1e>
    4772:	08 95       	ret
    4774:	9f 3f       	cpi	r25, 0xFF	; 255
    4776:	30 f0       	brcs	.+12     	; 0x4784 <__ftoa_engine+0x38>
    4778:	80 38       	cpi	r24, 0x80	; 128
    477a:	71 05       	cpc	r23, r1
    477c:	61 05       	cpc	r22, r1
    477e:	09 f0       	breq	.+2      	; 0x4782 <__ftoa_engine+0x36>
    4780:	3c 5f       	subi	r19, 0xFC	; 252
    4782:	3c 5f       	subi	r19, 0xFC	; 252
    4784:	3d 93       	st	X+, r19
    4786:	91 30       	cpi	r25, 0x01	; 1
    4788:	08 f0       	brcs	.+2      	; 0x478c <__ftoa_engine+0x40>
    478a:	80 68       	ori	r24, 0x80	; 128
    478c:	91 1d       	adc	r25, r1
    478e:	df 93       	push	r29
    4790:	cf 93       	push	r28
    4792:	1f 93       	push	r17
    4794:	0f 93       	push	r16
    4796:	ff 92       	push	r15
    4798:	ef 92       	push	r14
    479a:	19 2f       	mov	r17, r25
    479c:	98 7f       	andi	r25, 0xF8	; 248
    479e:	96 95       	lsr	r25
    47a0:	e9 2f       	mov	r30, r25
    47a2:	96 95       	lsr	r25
    47a4:	96 95       	lsr	r25
    47a6:	e9 0f       	add	r30, r25
    47a8:	ff 27       	eor	r31, r31
    47aa:	ea 53       	subi	r30, 0x3A	; 58
    47ac:	fd 4f       	sbci	r31, 0xFD	; 253
    47ae:	99 27       	eor	r25, r25
    47b0:	33 27       	eor	r19, r19
    47b2:	ee 24       	eor	r14, r14
    47b4:	ff 24       	eor	r15, r15
    47b6:	a7 01       	movw	r20, r14
    47b8:	e7 01       	movw	r28, r14
    47ba:	05 90       	lpm	r0, Z+
    47bc:	08 94       	sec
    47be:	07 94       	ror	r0
    47c0:	28 f4       	brcc	.+10     	; 0x47cc <__ftoa_engine+0x80>
    47c2:	36 0f       	add	r19, r22
    47c4:	e7 1e       	adc	r14, r23
    47c6:	f8 1e       	adc	r15, r24
    47c8:	49 1f       	adc	r20, r25
    47ca:	51 1d       	adc	r21, r1
    47cc:	66 0f       	add	r22, r22
    47ce:	77 1f       	adc	r23, r23
    47d0:	88 1f       	adc	r24, r24
    47d2:	99 1f       	adc	r25, r25
    47d4:	06 94       	lsr	r0
    47d6:	a1 f7       	brne	.-24     	; 0x47c0 <__ftoa_engine+0x74>
    47d8:	05 90       	lpm	r0, Z+
    47da:	07 94       	ror	r0
    47dc:	28 f4       	brcc	.+10     	; 0x47e8 <__ftoa_engine+0x9c>
    47de:	e7 0e       	add	r14, r23
    47e0:	f8 1e       	adc	r15, r24
    47e2:	49 1f       	adc	r20, r25
    47e4:	56 1f       	adc	r21, r22
    47e6:	c1 1d       	adc	r28, r1
    47e8:	77 0f       	add	r23, r23
    47ea:	88 1f       	adc	r24, r24
    47ec:	99 1f       	adc	r25, r25
    47ee:	66 1f       	adc	r22, r22
    47f0:	06 94       	lsr	r0
    47f2:	a1 f7       	brne	.-24     	; 0x47dc <__ftoa_engine+0x90>
    47f4:	05 90       	lpm	r0, Z+
    47f6:	07 94       	ror	r0
    47f8:	28 f4       	brcc	.+10     	; 0x4804 <__ftoa_engine+0xb8>
    47fa:	f8 0e       	add	r15, r24
    47fc:	49 1f       	adc	r20, r25
    47fe:	56 1f       	adc	r21, r22
    4800:	c7 1f       	adc	r28, r23
    4802:	d1 1d       	adc	r29, r1
    4804:	88 0f       	add	r24, r24
    4806:	99 1f       	adc	r25, r25
    4808:	66 1f       	adc	r22, r22
    480a:	77 1f       	adc	r23, r23
    480c:	06 94       	lsr	r0
    480e:	a1 f7       	brne	.-24     	; 0x47f8 <__ftoa_engine+0xac>
    4810:	05 90       	lpm	r0, Z+
    4812:	07 94       	ror	r0
    4814:	20 f4       	brcc	.+8      	; 0x481e <__ftoa_engine+0xd2>
    4816:	49 0f       	add	r20, r25
    4818:	56 1f       	adc	r21, r22
    481a:	c7 1f       	adc	r28, r23
    481c:	d8 1f       	adc	r29, r24
    481e:	99 0f       	add	r25, r25
    4820:	66 1f       	adc	r22, r22
    4822:	77 1f       	adc	r23, r23
    4824:	88 1f       	adc	r24, r24
    4826:	06 94       	lsr	r0
    4828:	a9 f7       	brne	.-22     	; 0x4814 <__ftoa_engine+0xc8>
    482a:	84 91       	lpm	r24, Z
    482c:	10 95       	com	r17
    482e:	17 70       	andi	r17, 0x07	; 7
    4830:	41 f0       	breq	.+16     	; 0x4842 <__ftoa_engine+0xf6>
    4832:	d6 95       	lsr	r29
    4834:	c7 95       	ror	r28
    4836:	57 95       	ror	r21
    4838:	47 95       	ror	r20
    483a:	f7 94       	ror	r15
    483c:	e7 94       	ror	r14
    483e:	1a 95       	dec	r17
    4840:	c1 f7       	brne	.-16     	; 0x4832 <__ftoa_engine+0xe6>
    4842:	ec e6       	ldi	r30, 0x6C	; 108
    4844:	f2 e0       	ldi	r31, 0x02	; 2
    4846:	68 94       	set
    4848:	15 90       	lpm	r1, Z+
    484a:	15 91       	lpm	r17, Z+
    484c:	35 91       	lpm	r19, Z+
    484e:	65 91       	lpm	r22, Z+
    4850:	95 91       	lpm	r25, Z+
    4852:	05 90       	lpm	r0, Z+
    4854:	7f e2       	ldi	r23, 0x2F	; 47
    4856:	73 95       	inc	r23
    4858:	e1 18       	sub	r14, r1
    485a:	f1 0a       	sbc	r15, r17
    485c:	43 0b       	sbc	r20, r19
    485e:	56 0b       	sbc	r21, r22
    4860:	c9 0b       	sbc	r28, r25
    4862:	d0 09       	sbc	r29, r0
    4864:	c0 f7       	brcc	.-16     	; 0x4856 <__ftoa_engine+0x10a>
    4866:	e1 0c       	add	r14, r1
    4868:	f1 1e       	adc	r15, r17
    486a:	43 1f       	adc	r20, r19
    486c:	56 1f       	adc	r21, r22
    486e:	c9 1f       	adc	r28, r25
    4870:	d0 1d       	adc	r29, r0
    4872:	7e f4       	brtc	.+30     	; 0x4892 <__ftoa_engine+0x146>
    4874:	70 33       	cpi	r23, 0x30	; 48
    4876:	11 f4       	brne	.+4      	; 0x487c <__ftoa_engine+0x130>
    4878:	8a 95       	dec	r24
    487a:	e6 cf       	rjmp	.-52     	; 0x4848 <__ftoa_engine+0xfc>
    487c:	e8 94       	clt
    487e:	01 50       	subi	r16, 0x01	; 1
    4880:	30 f0       	brcs	.+12     	; 0x488e <__ftoa_engine+0x142>
    4882:	08 0f       	add	r16, r24
    4884:	0a f4       	brpl	.+2      	; 0x4888 <__ftoa_engine+0x13c>
    4886:	00 27       	eor	r16, r16
    4888:	02 17       	cp	r16, r18
    488a:	08 f4       	brcc	.+2      	; 0x488e <__ftoa_engine+0x142>
    488c:	20 2f       	mov	r18, r16
    488e:	23 95       	inc	r18
    4890:	02 2f       	mov	r16, r18
    4892:	7a 33       	cpi	r23, 0x3A	; 58
    4894:	28 f0       	brcs	.+10     	; 0x48a0 <__ftoa_engine+0x154>
    4896:	79 e3       	ldi	r23, 0x39	; 57
    4898:	7d 93       	st	X+, r23
    489a:	2a 95       	dec	r18
    489c:	e9 f7       	brne	.-6      	; 0x4898 <__ftoa_engine+0x14c>
    489e:	10 c0       	rjmp	.+32     	; 0x48c0 <__ftoa_engine+0x174>
    48a0:	7d 93       	st	X+, r23
    48a2:	2a 95       	dec	r18
    48a4:	89 f6       	brne	.-94     	; 0x4848 <__ftoa_engine+0xfc>
    48a6:	06 94       	lsr	r0
    48a8:	97 95       	ror	r25
    48aa:	67 95       	ror	r22
    48ac:	37 95       	ror	r19
    48ae:	17 95       	ror	r17
    48b0:	17 94       	ror	r1
    48b2:	e1 18       	sub	r14, r1
    48b4:	f1 0a       	sbc	r15, r17
    48b6:	43 0b       	sbc	r20, r19
    48b8:	56 0b       	sbc	r21, r22
    48ba:	c9 0b       	sbc	r28, r25
    48bc:	d0 09       	sbc	r29, r0
    48be:	98 f0       	brcs	.+38     	; 0x48e6 <__ftoa_engine+0x19a>
    48c0:	23 95       	inc	r18
    48c2:	7e 91       	ld	r23, -X
    48c4:	73 95       	inc	r23
    48c6:	7a 33       	cpi	r23, 0x3A	; 58
    48c8:	08 f0       	brcs	.+2      	; 0x48cc <__ftoa_engine+0x180>
    48ca:	70 e3       	ldi	r23, 0x30	; 48
    48cc:	7c 93       	st	X, r23
    48ce:	20 13       	cpse	r18, r16
    48d0:	b8 f7       	brcc	.-18     	; 0x48c0 <__ftoa_engine+0x174>
    48d2:	7e 91       	ld	r23, -X
    48d4:	70 61       	ori	r23, 0x10	; 16
    48d6:	7d 93       	st	X+, r23
    48d8:	30 f0       	brcs	.+12     	; 0x48e6 <__ftoa_engine+0x19a>
    48da:	83 95       	inc	r24
    48dc:	71 e3       	ldi	r23, 0x31	; 49
    48de:	7d 93       	st	X+, r23
    48e0:	70 e3       	ldi	r23, 0x30	; 48
    48e2:	2a 95       	dec	r18
    48e4:	e1 f7       	brne	.-8      	; 0x48de <__ftoa_engine+0x192>
    48e6:	11 24       	eor	r1, r1
    48e8:	ef 90       	pop	r14
    48ea:	ff 90       	pop	r15
    48ec:	0f 91       	pop	r16
    48ee:	1f 91       	pop	r17
    48f0:	cf 91       	pop	r28
    48f2:	df 91       	pop	r29
    48f4:	99 27       	eor	r25, r25
    48f6:	87 fd       	sbrc	r24, 7
    48f8:	90 95       	com	r25
    48fa:	08 95       	ret

000048fc <strnlen_P>:
    48fc:	fc 01       	movw	r30, r24
    48fe:	05 90       	lpm	r0, Z+
    4900:	61 50       	subi	r22, 0x01	; 1
    4902:	70 40       	sbci	r23, 0x00	; 0
    4904:	01 10       	cpse	r0, r1
    4906:	d8 f7       	brcc	.-10     	; 0x48fe <strnlen_P+0x2>
    4908:	80 95       	com	r24
    490a:	90 95       	com	r25
    490c:	8e 0f       	add	r24, r30
    490e:	9f 1f       	adc	r25, r31
    4910:	08 95       	ret

00004912 <strnlen>:
    4912:	fc 01       	movw	r30, r24
    4914:	61 50       	subi	r22, 0x01	; 1
    4916:	70 40       	sbci	r23, 0x00	; 0
    4918:	01 90       	ld	r0, Z+
    491a:	01 10       	cpse	r0, r1
    491c:	d8 f7       	brcc	.-10     	; 0x4914 <strnlen+0x2>
    491e:	80 95       	com	r24
    4920:	90 95       	com	r25
    4922:	8e 0f       	add	r24, r30
    4924:	9f 1f       	adc	r25, r31
    4926:	08 95       	ret

00004928 <fputc>:
    4928:	0f 93       	push	r16
    492a:	1f 93       	push	r17
    492c:	cf 93       	push	r28
    492e:	df 93       	push	r29
    4930:	fb 01       	movw	r30, r22
    4932:	23 81       	ldd	r18, Z+3	; 0x03
    4934:	21 fd       	sbrc	r18, 1
    4936:	03 c0       	rjmp	.+6      	; 0x493e <fputc+0x16>
    4938:	8f ef       	ldi	r24, 0xFF	; 255
    493a:	9f ef       	ldi	r25, 0xFF	; 255
    493c:	2c c0       	rjmp	.+88     	; 0x4996 <fputc+0x6e>
    493e:	22 ff       	sbrs	r18, 2
    4940:	16 c0       	rjmp	.+44     	; 0x496e <fputc+0x46>
    4942:	46 81       	ldd	r20, Z+6	; 0x06
    4944:	57 81       	ldd	r21, Z+7	; 0x07
    4946:	24 81       	ldd	r18, Z+4	; 0x04
    4948:	35 81       	ldd	r19, Z+5	; 0x05
    494a:	42 17       	cp	r20, r18
    494c:	53 07       	cpc	r21, r19
    494e:	44 f4       	brge	.+16     	; 0x4960 <fputc+0x38>
    4950:	a0 81       	ld	r26, Z
    4952:	b1 81       	ldd	r27, Z+1	; 0x01
    4954:	9d 01       	movw	r18, r26
    4956:	2f 5f       	subi	r18, 0xFF	; 255
    4958:	3f 4f       	sbci	r19, 0xFF	; 255
    495a:	31 83       	std	Z+1, r19	; 0x01
    495c:	20 83       	st	Z, r18
    495e:	8c 93       	st	X, r24
    4960:	26 81       	ldd	r18, Z+6	; 0x06
    4962:	37 81       	ldd	r19, Z+7	; 0x07
    4964:	2f 5f       	subi	r18, 0xFF	; 255
    4966:	3f 4f       	sbci	r19, 0xFF	; 255
    4968:	37 83       	std	Z+7, r19	; 0x07
    496a:	26 83       	std	Z+6, r18	; 0x06
    496c:	14 c0       	rjmp	.+40     	; 0x4996 <fputc+0x6e>
    496e:	8b 01       	movw	r16, r22
    4970:	ec 01       	movw	r28, r24
    4972:	fb 01       	movw	r30, r22
    4974:	00 84       	ldd	r0, Z+8	; 0x08
    4976:	f1 85       	ldd	r31, Z+9	; 0x09
    4978:	e0 2d       	mov	r30, r0
    497a:	09 95       	icall
    497c:	89 2b       	or	r24, r25
    497e:	e1 f6       	brne	.-72     	; 0x4938 <fputc+0x10>
    4980:	d8 01       	movw	r26, r16
    4982:	16 96       	adiw	r26, 0x06	; 6
    4984:	8d 91       	ld	r24, X+
    4986:	9c 91       	ld	r25, X
    4988:	17 97       	sbiw	r26, 0x07	; 7
    498a:	01 96       	adiw	r24, 0x01	; 1
    498c:	17 96       	adiw	r26, 0x07	; 7
    498e:	9c 93       	st	X, r25
    4990:	8e 93       	st	-X, r24
    4992:	16 97       	sbiw	r26, 0x06	; 6
    4994:	ce 01       	movw	r24, r28
    4996:	df 91       	pop	r29
    4998:	cf 91       	pop	r28
    499a:	1f 91       	pop	r17
    499c:	0f 91       	pop	r16
    499e:	08 95       	ret

000049a0 <sprintf>:
    49a0:	ae e0       	ldi	r26, 0x0E	; 14
    49a2:	b0 e0       	ldi	r27, 0x00	; 0
    49a4:	e6 ed       	ldi	r30, 0xD6	; 214
    49a6:	f4 e2       	ldi	r31, 0x24	; 36
    49a8:	0c 94 7d 23 	jmp	0x46fa	; 0x46fa <__prologue_saves__+0x1c>
    49ac:	0d 89       	ldd	r16, Y+21	; 0x15
    49ae:	1e 89       	ldd	r17, Y+22	; 0x16
    49b0:	86 e0       	ldi	r24, 0x06	; 6
    49b2:	8c 83       	std	Y+4, r24	; 0x04
    49b4:	1a 83       	std	Y+2, r17	; 0x02
    49b6:	09 83       	std	Y+1, r16	; 0x01
    49b8:	8f ef       	ldi	r24, 0xFF	; 255
    49ba:	9f e7       	ldi	r25, 0x7F	; 127
    49bc:	9e 83       	std	Y+6, r25	; 0x06
    49be:	8d 83       	std	Y+5, r24	; 0x05
    49c0:	ae 01       	movw	r20, r28
    49c2:	47 5e       	subi	r20, 0xE7	; 231
    49c4:	5f 4f       	sbci	r21, 0xFF	; 255
    49c6:	6f 89       	ldd	r22, Y+23	; 0x17
    49c8:	78 8d       	ldd	r23, Y+24	; 0x18
    49ca:	ce 01       	movw	r24, r28
    49cc:	01 96       	adiw	r24, 0x01	; 1
    49ce:	0e 94 ab 1f 	call	0x3f56	; 0x3f56 <vfprintf>
    49d2:	ef 81       	ldd	r30, Y+7	; 0x07
    49d4:	f8 85       	ldd	r31, Y+8	; 0x08
    49d6:	e0 0f       	add	r30, r16
    49d8:	f1 1f       	adc	r31, r17
    49da:	10 82       	st	Z, r1
    49dc:	2e 96       	adiw	r28, 0x0e	; 14
    49de:	e4 e0       	ldi	r30, 0x04	; 4
    49e0:	0c 94 99 23 	jmp	0x4732	; 0x4732 <__epilogue_restores__+0x1c>

000049e4 <__ultoa_invert>:
    49e4:	fa 01       	movw	r30, r20
    49e6:	aa 27       	eor	r26, r26
    49e8:	28 30       	cpi	r18, 0x08	; 8
    49ea:	51 f1       	breq	.+84     	; 0x4a40 <__ultoa_invert+0x5c>
    49ec:	20 31       	cpi	r18, 0x10	; 16
    49ee:	81 f1       	breq	.+96     	; 0x4a50 <__ultoa_invert+0x6c>
    49f0:	e8 94       	clt
    49f2:	6f 93       	push	r22
    49f4:	6e 7f       	andi	r22, 0xFE	; 254
    49f6:	6e 5f       	subi	r22, 0xFE	; 254
    49f8:	7f 4f       	sbci	r23, 0xFF	; 255
    49fa:	8f 4f       	sbci	r24, 0xFF	; 255
    49fc:	9f 4f       	sbci	r25, 0xFF	; 255
    49fe:	af 4f       	sbci	r26, 0xFF	; 255
    4a00:	b1 e0       	ldi	r27, 0x01	; 1
    4a02:	3e d0       	rcall	.+124    	; 0x4a80 <__ultoa_invert+0x9c>
    4a04:	b4 e0       	ldi	r27, 0x04	; 4
    4a06:	3c d0       	rcall	.+120    	; 0x4a80 <__ultoa_invert+0x9c>
    4a08:	67 0f       	add	r22, r23
    4a0a:	78 1f       	adc	r23, r24
    4a0c:	89 1f       	adc	r24, r25
    4a0e:	9a 1f       	adc	r25, r26
    4a10:	a1 1d       	adc	r26, r1
    4a12:	68 0f       	add	r22, r24
    4a14:	79 1f       	adc	r23, r25
    4a16:	8a 1f       	adc	r24, r26
    4a18:	91 1d       	adc	r25, r1
    4a1a:	a1 1d       	adc	r26, r1
    4a1c:	6a 0f       	add	r22, r26
    4a1e:	71 1d       	adc	r23, r1
    4a20:	81 1d       	adc	r24, r1
    4a22:	91 1d       	adc	r25, r1
    4a24:	a1 1d       	adc	r26, r1
    4a26:	20 d0       	rcall	.+64     	; 0x4a68 <__ultoa_invert+0x84>
    4a28:	09 f4       	brne	.+2      	; 0x4a2c <__ultoa_invert+0x48>
    4a2a:	68 94       	set
    4a2c:	3f 91       	pop	r19
    4a2e:	2a e0       	ldi	r18, 0x0A	; 10
    4a30:	26 9f       	mul	r18, r22
    4a32:	11 24       	eor	r1, r1
    4a34:	30 19       	sub	r19, r0
    4a36:	30 5d       	subi	r19, 0xD0	; 208
    4a38:	31 93       	st	Z+, r19
    4a3a:	de f6       	brtc	.-74     	; 0x49f2 <__ultoa_invert+0xe>
    4a3c:	cf 01       	movw	r24, r30
    4a3e:	08 95       	ret
    4a40:	46 2f       	mov	r20, r22
    4a42:	47 70       	andi	r20, 0x07	; 7
    4a44:	40 5d       	subi	r20, 0xD0	; 208
    4a46:	41 93       	st	Z+, r20
    4a48:	b3 e0       	ldi	r27, 0x03	; 3
    4a4a:	0f d0       	rcall	.+30     	; 0x4a6a <__ultoa_invert+0x86>
    4a4c:	c9 f7       	brne	.-14     	; 0x4a40 <__ultoa_invert+0x5c>
    4a4e:	f6 cf       	rjmp	.-20     	; 0x4a3c <__ultoa_invert+0x58>
    4a50:	46 2f       	mov	r20, r22
    4a52:	4f 70       	andi	r20, 0x0F	; 15
    4a54:	40 5d       	subi	r20, 0xD0	; 208
    4a56:	4a 33       	cpi	r20, 0x3A	; 58
    4a58:	18 f0       	brcs	.+6      	; 0x4a60 <__ultoa_invert+0x7c>
    4a5a:	49 5d       	subi	r20, 0xD9	; 217
    4a5c:	31 fd       	sbrc	r19, 1
    4a5e:	40 52       	subi	r20, 0x20	; 32
    4a60:	41 93       	st	Z+, r20
    4a62:	02 d0       	rcall	.+4      	; 0x4a68 <__ultoa_invert+0x84>
    4a64:	a9 f7       	brne	.-22     	; 0x4a50 <__ultoa_invert+0x6c>
    4a66:	ea cf       	rjmp	.-44     	; 0x4a3c <__ultoa_invert+0x58>
    4a68:	b4 e0       	ldi	r27, 0x04	; 4
    4a6a:	a6 95       	lsr	r26
    4a6c:	97 95       	ror	r25
    4a6e:	87 95       	ror	r24
    4a70:	77 95       	ror	r23
    4a72:	67 95       	ror	r22
    4a74:	ba 95       	dec	r27
    4a76:	c9 f7       	brne	.-14     	; 0x4a6a <__ultoa_invert+0x86>
    4a78:	00 97       	sbiw	r24, 0x00	; 0
    4a7a:	61 05       	cpc	r22, r1
    4a7c:	71 05       	cpc	r23, r1
    4a7e:	08 95       	ret
    4a80:	9b 01       	movw	r18, r22
    4a82:	ac 01       	movw	r20, r24
    4a84:	0a 2e       	mov	r0, r26
    4a86:	06 94       	lsr	r0
    4a88:	57 95       	ror	r21
    4a8a:	47 95       	ror	r20
    4a8c:	37 95       	ror	r19
    4a8e:	27 95       	ror	r18
    4a90:	ba 95       	dec	r27
    4a92:	c9 f7       	brne	.-14     	; 0x4a86 <__ultoa_invert+0xa2>
    4a94:	62 0f       	add	r22, r18
    4a96:	73 1f       	adc	r23, r19
    4a98:	84 1f       	adc	r24, r20
    4a9a:	95 1f       	adc	r25, r21
    4a9c:	a0 1d       	adc	r26, r0
    4a9e:	08 95       	ret

00004aa0 <eeprom_read_word>:
    4aa0:	a8 e1       	ldi	r26, 0x18	; 24
    4aa2:	b0 e0       	ldi	r27, 0x00	; 0
    4aa4:	42 e0       	ldi	r20, 0x02	; 2
    4aa6:	50 e0       	ldi	r21, 0x00	; 0
    4aa8:	0c 94 5d 25 	jmp	0x4aba	; 0x4aba <eeprom_read_blraw>

00004aac <eeprom_write_word>:
    4aac:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <eeprom_write_byte>
    4ab0:	27 2f       	mov	r18, r23
    4ab2:	0c 94 6c 25 	jmp	0x4ad8	; 0x4ad8 <eeprom_write_r18>

00004ab6 <eeprom_read_block>:
    4ab6:	dc 01       	movw	r26, r24
    4ab8:	cb 01       	movw	r24, r22

00004aba <eeprom_read_blraw>:
    4aba:	fc 01       	movw	r30, r24
    4abc:	f9 99       	sbic	0x1f, 1	; 31
    4abe:	fe cf       	rjmp	.-4      	; 0x4abc <eeprom_read_blraw+0x2>
    4ac0:	06 c0       	rjmp	.+12     	; 0x4ace <eeprom_read_blraw+0x14>
    4ac2:	f2 bd       	out	0x22, r31	; 34
    4ac4:	e1 bd       	out	0x21, r30	; 33
    4ac6:	f8 9a       	sbi	0x1f, 0	; 31
    4ac8:	31 96       	adiw	r30, 0x01	; 1
    4aca:	00 b4       	in	r0, 0x20	; 32
    4acc:	0d 92       	st	X+, r0
    4ace:	41 50       	subi	r20, 0x01	; 1
    4ad0:	50 40       	sbci	r21, 0x00	; 0
    4ad2:	b8 f7       	brcc	.-18     	; 0x4ac2 <eeprom_read_blraw+0x8>
    4ad4:	08 95       	ret

00004ad6 <eeprom_write_byte>:
    4ad6:	26 2f       	mov	r18, r22

00004ad8 <eeprom_write_r18>:
    4ad8:	f9 99       	sbic	0x1f, 1	; 31
    4ada:	fe cf       	rjmp	.-4      	; 0x4ad8 <eeprom_write_r18>
    4adc:	1f ba       	out	0x1f, r1	; 31
    4ade:	92 bd       	out	0x22, r25	; 34
    4ae0:	81 bd       	out	0x21, r24	; 33
    4ae2:	20 bd       	out	0x20, r18	; 32
    4ae4:	0f b6       	in	r0, 0x3f	; 63
    4ae6:	f8 94       	cli
    4ae8:	fa 9a       	sbi	0x1f, 2	; 31
    4aea:	f9 9a       	sbi	0x1f, 1	; 31
    4aec:	0f be       	out	0x3f, r0	; 63
    4aee:	01 96       	adiw	r24, 0x01	; 1
    4af0:	08 95       	ret

00004af2 <_exit>:
    4af2:	f8 94       	cli

00004af4 <__stop_program>:
    4af4:	ff cf       	rjmp	.-2      	; 0x4af4 <__stop_program>
