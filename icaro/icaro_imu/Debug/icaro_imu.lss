
icaro_imu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00004854  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000047e0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000118  00800100  00800100  00004854  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004854  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000048b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000438  00000000  00000000  000048f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000044ca  00000000  00000000  00004d28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001464  00000000  00000000  000091f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002500  00000000  00000000  0000a656  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d98  00000000  00000000  0000cb58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ed0  00000000  00000000  0000d8f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004437  00000000  00000000  0000e7c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000358  00000000  00000000  00012bf7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b3 01 	jmp	0x366	; 0x366 <__ctors_end>
       4:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__bad_interrupt>
       8:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__bad_interrupt>
       c:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__bad_interrupt>
      10:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__bad_interrupt>
      14:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__bad_interrupt>
      18:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__bad_interrupt>
      1c:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__bad_interrupt>
      20:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__bad_interrupt>
      24:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__bad_interrupt>
      28:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__bad_interrupt>
      2c:	0c 94 01 19 	jmp	0x3202	; 0x3202 <__vector_11>
      30:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__bad_interrupt>
      34:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__bad_interrupt>
      38:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__bad_interrupt>
      3c:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__bad_interrupt>
      40:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__bad_interrupt>
      44:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__bad_interrupt>
      48:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__bad_interrupt>
      4c:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__bad_interrupt>
      50:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__bad_interrupt>
      54:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__bad_interrupt>
      58:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__bad_interrupt>
      5c:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__bad_interrupt>
      60:	0c 94 21 1d 	jmp	0x3a42	; 0x3a42 <__vector_24>
      64:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__bad_interrupt>
      68:	03 6e       	ori	r16, 0xE3	; 227
      6a:	db 36       	cpi	r29, 0x6B	; 107
      6c:	3d 9a       	sbi	0x07, 5	; 7
      6e:	99 99       	sbic	0x13, 1	; 19
      70:	99 3d       	cpi	r25, 0xD9	; 217
      72:	ab aa       	std	Y+51, r10	; 0x33
      74:	aa 2a       	or	r10, r26
      76:	3e 00       	.word	0x003e	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	08 4a       	sbci	r16, 0xA8	; 168
      7e:	d7 3b       	cpi	r29, 0xB7	; 183
      80:	3b ce       	rjmp	.-906    	; 0xfffffcf8 <__eeprom_end+0xff7efcf8>
      82:	01 6e       	ori	r16, 0xE1	; 225
      84:	84 bc       	out	0x24, r8	; 36
      86:	bf fd       	.word	0xfdbf	; ????
      88:	c1 2f       	mov	r28, r17
      8a:	3d 6c       	ori	r19, 0xCD	; 205
      8c:	74 31       	cpi	r23, 0x14	; 20
      8e:	9a bd       	out	0x2a, r25	; 42
      90:	56 83       	std	Z+6, r21	; 0x06
      92:	3d da       	rcall	.-2950   	; 0xfffff50e <__eeprom_end+0xff7ef50e>
      94:	3d 00       	.word	0x003d	; ????
      96:	c7 7f       	andi	r28, 0xF7	; 247
      98:	11 be       	out	0x31, r1	; 49
      9a:	d9 e4       	ldi	r29, 0x49	; 73
      9c:	bb 4c       	sbci	r27, 0xCB	; 203
      9e:	3e 91       	ld	r19, -X
      a0:	6b aa       	std	Y+51, r6	; 0x33
      a2:	aa be       	out	0x3a, r10	; 58
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	3f 07       	cpc	r19, r31
      aa:	2c 7a       	andi	r18, 0xAC	; 172
      ac:	a5 ba       	out	0x15, r10	; 21
      ae:	6c c5       	rjmp	.+2776   	; 0xb88 <__stack+0x289>
      b0:	90 da       	rcall	.-2784   	; 0xfffff5d2 <__eeprom_end+0xff7ef5d2>
      b2:	3b 93       	.word	0x933b	; ????
      b4:	65 fc       	sbrc	r6, 5
      b6:	8b bc       	out	0x2b, r8	; 43
      b8:	53 f8       	bld	r5, 3
      ba:	10 fd       	sbrc	r17, 0
      bc:	3c 56       	subi	r19, 0x6C	; 108
      be:	92 83       	std	Z+2, r25	; 0x02
      c0:	4d bd       	out	0x2d, r20	; 45
      c2:	87 9d       	mul	r24, r7
      c4:	3a b6       	in	r3, 0x3a	; 58
      c6:	3d cb       	rjmp	.-2438   	; 0xfffff742 <__eeprom_end+0xff7ef742>
      c8:	c9 bf       	out	0x39, r28	; 57
      ca:	5b be       	out	0x3b, r5	; 59
      cc:	73 da       	rcall	.-2842   	; 0xfffff5b4 <__eeprom_end+0xff7ef5b4>
      ce:	0f c9       	rjmp	.-3554   	; 0xfffff2ee <__eeprom_end+0xff7ef2ee>
      d0:	3f 00       	.word	0x003f	; ????
      d2:	2d 1e       	adc	r2, r29
      d4:	31 1e       	adc	r3, r17
      d6:	31 1e       	adc	r3, r17
      d8:	31 1e       	adc	r3, r17
      da:	31 1e       	adc	r3, r17
      dc:	31 1e       	adc	r3, r17
      de:	31 1e       	adc	r3, r17
      e0:	31 1e       	adc	r3, r17
      e2:	41 1d       	adc	r20, r1
      e4:	31 1e       	adc	r3, r17
      e6:	31 1e       	adc	r3, r17
      e8:	31 1e       	adc	r3, r17
      ea:	31 1e       	adc	r3, r17
      ec:	31 1e       	adc	r3, r17
      ee:	31 1e       	adc	r3, r17
      f0:	31 1e       	adc	r3, r17
      f2:	41 1d       	adc	r20, r1
      f4:	31 1e       	adc	r3, r17
      f6:	31 1e       	adc	r3, r17
      f8:	31 1e       	adc	r3, r17
      fa:	31 1e       	adc	r3, r17
      fc:	31 1e       	adc	r3, r17
      fe:	31 1e       	adc	r3, r17
     100:	31 1e       	adc	r3, r17
     102:	49 1d       	adc	r20, r9
     104:	31 1e       	adc	r3, r17
     106:	31 1e       	adc	r3, r17
     108:	31 1e       	adc	r3, r17
     10a:	31 1e       	adc	r3, r17
     10c:	31 1e       	adc	r3, r17
     10e:	31 1e       	adc	r3, r17
     110:	31 1e       	adc	r3, r17
     112:	6f 1d       	adc	r22, r15
     114:	31 1e       	adc	r3, r17
     116:	31 1e       	adc	r3, r17
     118:	31 1e       	adc	r3, r17
     11a:	31 1e       	adc	r3, r17
     11c:	31 1e       	adc	r3, r17
     11e:	31 1e       	adc	r3, r17
     120:	31 1e       	adc	r3, r17
     122:	49 1d       	adc	r20, r9
     124:	31 1e       	adc	r3, r17
     126:	31 1e       	adc	r3, r17
     128:	31 1e       	adc	r3, r17
     12a:	31 1e       	adc	r3, r17
     12c:	31 1e       	adc	r3, r17
     12e:	31 1e       	adc	r3, r17
     130:	31 1e       	adc	r3, r17
     132:	75 1d       	adc	r23, r5
     134:	31 1e       	adc	r3, r17
     136:	31 1e       	adc	r3, r17
     138:	31 1e       	adc	r3, r17
     13a:	31 1e       	adc	r3, r17
     13c:	31 1e       	adc	r3, r17
     13e:	31 1e       	adc	r3, r17
     140:	31 1e       	adc	r3, r17
     142:	7b 1d       	adc	r23, r11
     144:	31 1e       	adc	r3, r17
     146:	31 1e       	adc	r3, r17
     148:	31 1e       	adc	r3, r17
     14a:	31 1e       	adc	r3, r17
     14c:	31 1e       	adc	r3, r17
     14e:	31 1e       	adc	r3, r17
     150:	31 1e       	adc	r3, r17
     152:	8d 1d       	adc	r24, r13
     154:	31 1e       	adc	r3, r17
     156:	31 1e       	adc	r3, r17
     158:	31 1e       	adc	r3, r17
     15a:	31 1e       	adc	r3, r17
     15c:	31 1e       	adc	r3, r17
     15e:	31 1e       	adc	r3, r17
     160:	31 1e       	adc	r3, r17
     162:	b7 1d       	adc	r27, r7
     164:	31 1e       	adc	r3, r17
     166:	31 1e       	adc	r3, r17
     168:	31 1e       	adc	r3, r17
     16a:	31 1e       	adc	r3, r17
     16c:	31 1e       	adc	r3, r17
     16e:	31 1e       	adc	r3, r17
     170:	31 1e       	adc	r3, r17
     172:	81 1d       	adc	r24, r1
     174:	31 1e       	adc	r3, r17
     176:	31 1e       	adc	r3, r17
     178:	31 1e       	adc	r3, r17
     17a:	31 1e       	adc	r3, r17
     17c:	31 1e       	adc	r3, r17
     17e:	31 1e       	adc	r3, r17
     180:	31 1e       	adc	r3, r17
     182:	9b 1d       	adc	r25, r11
     184:	31 1e       	adc	r3, r17
     186:	31 1e       	adc	r3, r17
     188:	31 1e       	adc	r3, r17
     18a:	31 1e       	adc	r3, r17
     18c:	31 1e       	adc	r3, r17
     18e:	31 1e       	adc	r3, r17
     190:	31 1e       	adc	r3, r17
     192:	ba 1d       	adc	r27, r10
     194:	31 1e       	adc	r3, r17
     196:	31 1e       	adc	r3, r17
     198:	31 1e       	adc	r3, r17
     19a:	31 1e       	adc	r3, r17
     19c:	31 1e       	adc	r3, r17
     19e:	31 1e       	adc	r3, r17
     1a0:	31 1e       	adc	r3, r17
     1a2:	ba 1d       	adc	r27, r10
     1a4:	31 1e       	adc	r3, r17
     1a6:	31 1e       	adc	r3, r17
     1a8:	31 1e       	adc	r3, r17
     1aa:	31 1e       	adc	r3, r17
     1ac:	31 1e       	adc	r3, r17
     1ae:	31 1e       	adc	r3, r17
     1b0:	31 1e       	adc	r3, r17
     1b2:	ba 1d       	adc	r27, r10
     1b4:	31 1e       	adc	r3, r17
     1b6:	31 1e       	adc	r3, r17
     1b8:	31 1e       	adc	r3, r17
     1ba:	31 1e       	adc	r3, r17
     1bc:	31 1e       	adc	r3, r17
     1be:	31 1e       	adc	r3, r17
     1c0:	31 1e       	adc	r3, r17
     1c2:	ba 1d       	adc	r27, r10
     1c4:	31 1e       	adc	r3, r17
     1c6:	31 1e       	adc	r3, r17
     1c8:	31 1e       	adc	r3, r17
     1ca:	31 1e       	adc	r3, r17
     1cc:	31 1e       	adc	r3, r17
     1ce:	31 1e       	adc	r3, r17
     1d0:	31 1e       	adc	r3, r17
     1d2:	c3 1d       	adc	r28, r3
     1d4:	31 1e       	adc	r3, r17
     1d6:	31 1e       	adc	r3, r17
     1d8:	31 1e       	adc	r3, r17
     1da:	31 1e       	adc	r3, r17
     1dc:	31 1e       	adc	r3, r17
     1de:	31 1e       	adc	r3, r17
     1e0:	31 1e       	adc	r3, r17
     1e2:	f4 1d       	adc	r31, r4
     1e4:	31 1e       	adc	r3, r17
     1e6:	31 1e       	adc	r3, r17
     1e8:	31 1e       	adc	r3, r17
     1ea:	31 1e       	adc	r3, r17
     1ec:	31 1e       	adc	r3, r17
     1ee:	31 1e       	adc	r3, r17
     1f0:	31 1e       	adc	r3, r17
     1f2:	c3 1d       	adc	r28, r3
     1f4:	31 1e       	adc	r3, r17
     1f6:	31 1e       	adc	r3, r17
     1f8:	31 1e       	adc	r3, r17
     1fa:	31 1e       	adc	r3, r17
     1fc:	31 1e       	adc	r3, r17
     1fe:	31 1e       	adc	r3, r17
     200:	31 1e       	adc	r3, r17
     202:	f4 1d       	adc	r31, r4
     204:	31 1e       	adc	r3, r17
     206:	31 1e       	adc	r3, r17
     208:	31 1e       	adc	r3, r17
     20a:	31 1e       	adc	r3, r17
     20c:	31 1e       	adc	r3, r17
     20e:	31 1e       	adc	r3, r17
     210:	31 1e       	adc	r3, r17
     212:	db 1d       	adc	r29, r11
     214:	31 1e       	adc	r3, r17
     216:	31 1e       	adc	r3, r17
     218:	31 1e       	adc	r3, r17
     21a:	31 1e       	adc	r3, r17
     21c:	31 1e       	adc	r3, r17
     21e:	31 1e       	adc	r3, r17
     220:	31 1e       	adc	r3, r17
     222:	f8 1d       	adc	r31, r8
     224:	31 1e       	adc	r3, r17
     226:	31 1e       	adc	r3, r17
     228:	31 1e       	adc	r3, r17
     22a:	31 1e       	adc	r3, r17
     22c:	31 1e       	adc	r3, r17
     22e:	31 1e       	adc	r3, r17
     230:	31 1e       	adc	r3, r17
     232:	f8 1d       	adc	r31, r8
     234:	31 1e       	adc	r3, r17
     236:	31 1e       	adc	r3, r17
     238:	31 1e       	adc	r3, r17
     23a:	31 1e       	adc	r3, r17
     23c:	31 1e       	adc	r3, r17
     23e:	31 1e       	adc	r3, r17
     240:	31 1e       	adc	r3, r17
     242:	0d 1e       	adc	r0, r29
     244:	31 1e       	adc	r3, r17
     246:	31 1e       	adc	r3, r17
     248:	31 1e       	adc	r3, r17
     24a:	31 1e       	adc	r3, r17
     24c:	31 1e       	adc	r3, r17
     24e:	31 1e       	adc	r3, r17
     250:	31 1e       	adc	r3, r17
     252:	27 1e       	adc	r2, r23
     254:	31 1e       	adc	r3, r17
     256:	31 1e       	adc	r3, r17
     258:	31 1e       	adc	r3, r17
     25a:	31 1e       	adc	r3, r17
     25c:	31 1e       	adc	r3, r17
     25e:	31 1e       	adc	r3, r17
     260:	31 1e       	adc	r3, r17
     262:	27 1e       	adc	r2, r23

00000264 <__trampolines_end>:
     264:	6e 61       	ori	r22, 0x1E	; 30
     266:	6e 00       	.word	0x006e	; ????

00000268 <__c.2332>:
     268:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     278:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     288:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     298:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     2a8:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     2b8:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     2c8:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     2d8:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     2e8:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     2f8:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     308:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     318:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     328:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     338:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     348:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     358:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000366 <__ctors_end>:
     366:	11 24       	eor	r1, r1
     368:	1f be       	out	0x3f, r1	; 63
     36a:	cf ef       	ldi	r28, 0xFF	; 255
     36c:	d8 e0       	ldi	r29, 0x08	; 8
     36e:	de bf       	out	0x3e, r29	; 62
     370:	cd bf       	out	0x3d, r28	; 61

00000372 <__do_clear_bss>:
     372:	22 e0       	ldi	r18, 0x02	; 2
     374:	a0 e0       	ldi	r26, 0x00	; 0
     376:	b1 e0       	ldi	r27, 0x01	; 1
     378:	01 c0       	rjmp	.+2      	; 0x37c <.do_clear_bss_start>

0000037a <.do_clear_bss_loop>:
     37a:	1d 92       	st	X+, r1

0000037c <.do_clear_bss_start>:
     37c:	a8 31       	cpi	r26, 0x18	; 24
     37e:	b2 07       	cpc	r27, r18
     380:	e1 f7       	brne	.-8      	; 0x37a <.do_clear_bss_loop>
     382:	0e 94 76 11 	call	0x22ec	; 0x22ec <main>
     386:	0c 94 ee 23 	jmp	0x47dc	; 0x47dc <_exit>

0000038a <__bad_interrupt>:
     38a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000038e <fetch_mpu6050_calibration>:
#include <avr/eeprom.h>

#include "eeprom.h"

void fetch_mpu6050_calibration(int16_t* values)
{       
     38e:	cf 93       	push	r28
     390:	df 93       	push	r29
     392:	ec 01       	movw	r28, r24
    values[0] = eeprom_read_word((uint16_t*)AX_OFFSET_ADDRESS);
     394:	80 e0       	ldi	r24, 0x00	; 0
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	0e 94 c5 23 	call	0x478a	; 0x478a <eeprom_read_word>
     39c:	99 83       	std	Y+1, r25	; 0x01
     39e:	88 83       	st	Y, r24
    values[1] = eeprom_read_word((uint16_t*)AY_OFFSET_ADDRESS);
     3a0:	82 e0       	ldi	r24, 0x02	; 2
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	0e 94 c5 23 	call	0x478a	; 0x478a <eeprom_read_word>
     3a8:	9b 83       	std	Y+3, r25	; 0x03
     3aa:	8a 83       	std	Y+2, r24	; 0x02
    values[2] = eeprom_read_word((uint16_t*)AZ_OFFSET_ADDRESS);
     3ac:	84 e0       	ldi	r24, 0x04	; 4
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	0e 94 c5 23 	call	0x478a	; 0x478a <eeprom_read_word>
     3b4:	9d 83       	std	Y+5, r25	; 0x05
     3b6:	8c 83       	std	Y+4, r24	; 0x04
    
    values[3] = eeprom_read_word((uint16_t*)GX_OFFSET_ADDRESS);
     3b8:	86 e0       	ldi	r24, 0x06	; 6
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	0e 94 c5 23 	call	0x478a	; 0x478a <eeprom_read_word>
     3c0:	9f 83       	std	Y+7, r25	; 0x07
     3c2:	8e 83       	std	Y+6, r24	; 0x06
    values[4] = eeprom_read_word((uint16_t*)GY_OFFSET_ADDRESS);
     3c4:	88 e0       	ldi	r24, 0x08	; 8
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	0e 94 c5 23 	call	0x478a	; 0x478a <eeprom_read_word>
     3cc:	99 87       	std	Y+9, r25	; 0x09
     3ce:	88 87       	std	Y+8, r24	; 0x08
    values[5] = eeprom_read_word((uint16_t*)GZ_OFFSET_ADDRESS);
     3d0:	8a e0       	ldi	r24, 0x0A	; 10
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	0e 94 c5 23 	call	0x478a	; 0x478a <eeprom_read_word>
     3d8:	9b 87       	std	Y+11, r25	; 0x0b
     3da:	8a 87       	std	Y+10, r24	; 0x0a
}
     3dc:	df 91       	pop	r29
     3de:	cf 91       	pop	r28
     3e0:	08 95       	ret

000003e2 <save_mpu6050_calibration>:

void save_mpu6050_calibration(int16_t* values)
{
     3e2:	cf 93       	push	r28
     3e4:	df 93       	push	r29
     3e6:	ec 01       	movw	r28, r24
    eeprom_write_word((uint16_t*)AX_OFFSET_ADDRESS, values[0]);
     3e8:	68 81       	ld	r22, Y
     3ea:	79 81       	ldd	r23, Y+1	; 0x01
     3ec:	80 e0       	ldi	r24, 0x00	; 0
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	0e 94 cb 23 	call	0x4796	; 0x4796 <eeprom_write_word>
    eeprom_write_word((uint16_t*)AY_OFFSET_ADDRESS, values[1]);
     3f4:	6a 81       	ldd	r22, Y+2	; 0x02
     3f6:	7b 81       	ldd	r23, Y+3	; 0x03
     3f8:	82 e0       	ldi	r24, 0x02	; 2
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	0e 94 cb 23 	call	0x4796	; 0x4796 <eeprom_write_word>
    eeprom_write_word((uint16_t*)AZ_OFFSET_ADDRESS, values[2]);
     400:	6c 81       	ldd	r22, Y+4	; 0x04
     402:	7d 81       	ldd	r23, Y+5	; 0x05
     404:	84 e0       	ldi	r24, 0x04	; 4
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	0e 94 cb 23 	call	0x4796	; 0x4796 <eeprom_write_word>
    
    eeprom_write_word((uint16_t*)GY_OFFSET_ADDRESS, values[3]);
     40c:	6e 81       	ldd	r22, Y+6	; 0x06
     40e:	7f 81       	ldd	r23, Y+7	; 0x07
     410:	88 e0       	ldi	r24, 0x08	; 8
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	0e 94 cb 23 	call	0x4796	; 0x4796 <eeprom_write_word>
    eeprom_write_word((uint16_t*)GX_OFFSET_ADDRESS, values[4]);
     418:	68 85       	ldd	r22, Y+8	; 0x08
     41a:	79 85       	ldd	r23, Y+9	; 0x09
     41c:	86 e0       	ldi	r24, 0x06	; 6
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	0e 94 cb 23 	call	0x4796	; 0x4796 <eeprom_write_word>
    eeprom_write_word((uint16_t*)GZ_OFFSET_ADDRESS, values[5]);
     424:	6a 85       	ldd	r22, Y+10	; 0x0a
     426:	7b 85       	ldd	r23, Y+11	; 0x0b
     428:	8a e0       	ldi	r24, 0x0A	; 10
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	0e 94 cb 23 	call	0x4796	; 0x4796 <eeprom_write_word>
     430:	df 91       	pop	r29
     432:	cf 91       	pop	r28
     434:	08 95       	ret

00000436 <mahony_init>:
    integralFBz = 0.0f;
    anglesComputed = 0;
    invSampleFreq = 1.0f / DEFAULT_SAMPLE_FREQ;
}

void begin(float sampleFrequency) { invSampleFreq = 1.0f / sampleFrequency; }
     436:	80 e0       	ldi	r24, 0x00	; 0
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	a0 e2       	ldi	r26, 0x20	; 32
     43c:	b1 e4       	ldi	r27, 0x41	; 65
     43e:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <twoKp>
     442:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <twoKp+0x1>
     446:	a0 93 33 01 	sts	0x0133, r26	; 0x800133 <twoKp+0x2>
     44a:	b0 93 34 01 	sts	0x0134, r27	; 0x800134 <twoKp+0x3>
     44e:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <twoKi>
     452:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <twoKi+0x1>
     456:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <twoKi+0x2>
     45a:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <twoKi+0x3>
     45e:	80 e0       	ldi	r24, 0x00	; 0
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	a0 e8       	ldi	r26, 0x80	; 128
     464:	bf e3       	ldi	r27, 0x3F	; 63
     466:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <q0>
     46a:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <q0+0x1>
     46e:	a0 93 2b 01 	sts	0x012B, r26	; 0x80012b <q0+0x2>
     472:	b0 93 2c 01 	sts	0x012C, r27	; 0x80012c <q0+0x3>
     476:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <q1>
     47a:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <q1+0x1>
     47e:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <q1+0x2>
     482:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <q1+0x3>
     486:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <q2>
     48a:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <q2+0x1>
     48e:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <q2+0x2>
     492:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <q2+0x3>
     496:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <q3>
     49a:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <q3+0x1>
     49e:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <q3+0x2>
     4a2:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <q3+0x3>
     4a6:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <integralFBx>
     4aa:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <integralFBx+0x1>
     4ae:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <integralFBx+0x2>
     4b2:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <integralFBx+0x3>
     4b6:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <integralFBy>
     4ba:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <integralFBy+0x1>
     4be:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <integralFBy+0x2>
     4c2:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <integralFBy+0x3>
     4c6:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <integralFBz>
     4ca:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <integralFBz+0x1>
     4ce:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <integralFBz+0x2>
     4d2:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <integralFBz+0x3>
     4d6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
     4da:	8a e0       	ldi	r24, 0x0A	; 10
     4dc:	97 ed       	ldi	r25, 0xD7	; 215
     4de:	a3 ea       	ldi	r26, 0xA3	; 163
     4e0:	bb e3       	ldi	r27, 0x3B	; 59
     4e2:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <invSampleFreq>
     4e6:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <invSampleFreq+0x1>
     4ea:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <invSampleFreq+0x2>
     4ee:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <invSampleFreq+0x3>
     4f2:	08 95       	ret

000004f4 <invSqrt>:
//-------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x)
{
     4f4:	8f 92       	push	r8
     4f6:	9f 92       	push	r9
     4f8:	af 92       	push	r10
     4fa:	bf 92       	push	r11
     4fc:	cf 92       	push	r12
     4fe:	df 92       	push	r13
     500:	ef 92       	push	r14
     502:	ff 92       	push	r15
     504:	6b 01       	movw	r12, r22
     506:	7c 01       	movw	r14, r24
    float halfx = 0.5f * x;
     508:	20 e0       	ldi	r18, 0x00	; 0
     50a:	30 e0       	ldi	r19, 0x00	; 0
     50c:	40 e0       	ldi	r20, 0x00	; 0
     50e:	5f e3       	ldi	r21, 0x3F	; 63
     510:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
     514:	4b 01       	movw	r8, r22
     516:	5c 01       	movw	r10, r24
    float y = x;
    long i = *(long*)&y;
    i = 0x5f3759df - (i>>1);
    y = *(float*)&i;
     518:	d7 01       	movw	r26, r14
     51a:	c6 01       	movw	r24, r12
     51c:	b5 95       	asr	r27
     51e:	a7 95       	ror	r26
     520:	97 95       	ror	r25
     522:	87 95       	ror	r24
     524:	0f 2e       	mov	r0, r31
     526:	ff ed       	ldi	r31, 0xDF	; 223
     528:	cf 2e       	mov	r12, r31
     52a:	f9 e5       	ldi	r31, 0x59	; 89
     52c:	df 2e       	mov	r13, r31
     52e:	f7 e3       	ldi	r31, 0x37	; 55
     530:	ef 2e       	mov	r14, r31
     532:	ff e5       	ldi	r31, 0x5F	; 95
     534:	ff 2e       	mov	r15, r31
     536:	f0 2d       	mov	r31, r0
     538:	c8 1a       	sub	r12, r24
     53a:	d9 0a       	sbc	r13, r25
     53c:	ea 0a       	sbc	r14, r26
     53e:	fb 0a       	sbc	r15, r27
    y = y * (1.5f - (halfx * y * y));
     540:	a7 01       	movw	r20, r14
     542:	96 01       	movw	r18, r12
     544:	c5 01       	movw	r24, r10
     546:	b4 01       	movw	r22, r8
     548:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
     54c:	a7 01       	movw	r20, r14
     54e:	96 01       	movw	r18, r12
     550:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
     554:	9b 01       	movw	r18, r22
     556:	ac 01       	movw	r20, r24
     558:	60 e0       	ldi	r22, 0x00	; 0
     55a:	70 e0       	ldi	r23, 0x00	; 0
     55c:	80 ec       	ldi	r24, 0xC0	; 192
     55e:	9f e3       	ldi	r25, 0x3F	; 63
     560:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <__subsf3>
     564:	a7 01       	movw	r20, r14
     566:	96 01       	movw	r18, r12
     568:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
     56c:	6b 01       	movw	r12, r22
     56e:	7c 01       	movw	r14, r24
    y = y * (1.5f - (halfx * y * y));
    return y;
     570:	9b 01       	movw	r18, r22
     572:	ac 01       	movw	r20, r24
     574:	c5 01       	movw	r24, r10
     576:	b4 01       	movw	r22, r8
     578:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
     57c:	a7 01       	movw	r20, r14
     57e:	96 01       	movw	r18, r12
     580:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
     584:	9b 01       	movw	r18, r22
     586:	ac 01       	movw	r20, r24
     588:	60 e0       	ldi	r22, 0x00	; 0
     58a:	70 e0       	ldi	r23, 0x00	; 0
     58c:	80 ec       	ldi	r24, 0xC0	; 192
     58e:	9f e3       	ldi	r25, 0x3F	; 63
     590:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <__subsf3>
     594:	a7 01       	movw	r20, r14
     596:	96 01       	movw	r18, r12
     598:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
}
     59c:	ff 90       	pop	r15
     59e:	ef 90       	pop	r14
     5a0:	df 90       	pop	r13
     5a2:	cf 90       	pop	r12
     5a4:	bf 90       	pop	r11
     5a6:	af 90       	pop	r10
     5a8:	9f 90       	pop	r9
     5aa:	8f 90       	pop	r8
     5ac:	08 95       	ret

000005ae <mahony_updateIMU>:

//-------------------------------------------------------------------------------------------
// IMU algorithm update

void mahony_updateIMU(float gx, float gy, float gz, float ax, float ay, float az)
{
     5ae:	4f 92       	push	r4
     5b0:	5f 92       	push	r5
     5b2:	6f 92       	push	r6
     5b4:	7f 92       	push	r7
     5b6:	8f 92       	push	r8
     5b8:	9f 92       	push	r9
     5ba:	af 92       	push	r10
     5bc:	bf 92       	push	r11
     5be:	cf 92       	push	r12
     5c0:	df 92       	push	r13
     5c2:	ef 92       	push	r14
     5c4:	ff 92       	push	r15
     5c6:	0f 93       	push	r16
     5c8:	1f 93       	push	r17
     5ca:	cf 93       	push	r28
     5cc:	df 93       	push	r29
     5ce:	cd b7       	in	r28, 0x3d	; 61
     5d0:	de b7       	in	r29, 0x3e	; 62
     5d2:	a4 97       	sbiw	r28, 0x24	; 36
     5d4:	0f b6       	in	r0, 0x3f	; 63
     5d6:	f8 94       	cli
     5d8:	de bf       	out	0x3e, r29	; 62
     5da:	0f be       	out	0x3f, r0	; 63
     5dc:	cd bf       	out	0x3d, r28	; 61
     5de:	29 87       	std	Y+9, r18	; 0x09
     5e0:	3a 87       	std	Y+10, r19	; 0x0a
     5e2:	4b 87       	std	Y+11, r20	; 0x0b
     5e4:	5c 87       	std	Y+12, r21	; 0x0c
    float halfvx, halfvy, halfvz;
    float halfex, halfey, halfez;
    float qa, qb, qc;

    // Convert gyroscope degrees/sec to radians/sec
    gx *= 0.0174533f;
     5e6:	29 e3       	ldi	r18, 0x39	; 57
     5e8:	3a ef       	ldi	r19, 0xFA	; 250
     5ea:	4e e8       	ldi	r20, 0x8E	; 142
     5ec:	5c e3       	ldi	r21, 0x3C	; 60
     5ee:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
     5f2:	6d 87       	std	Y+13, r22	; 0x0d
     5f4:	7e 87       	std	Y+14, r23	; 0x0e
     5f6:	8f 87       	std	Y+15, r24	; 0x0f
     5f8:	98 8b       	std	Y+16, r25	; 0x10
    gy *= 0.0174533f;
     5fa:	29 e3       	ldi	r18, 0x39	; 57
     5fc:	3a ef       	ldi	r19, 0xFA	; 250
     5fe:	4e e8       	ldi	r20, 0x8E	; 142
     600:	5c e3       	ldi	r21, 0x3C	; 60
     602:	69 85       	ldd	r22, Y+9	; 0x09
     604:	7a 85       	ldd	r23, Y+10	; 0x0a
     606:	8b 85       	ldd	r24, Y+11	; 0x0b
     608:	9c 85       	ldd	r25, Y+12	; 0x0c
     60a:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
     60e:	69 87       	std	Y+9, r22	; 0x09
     610:	7a 87       	std	Y+10, r23	; 0x0a
     612:	8b 87       	std	Y+11, r24	; 0x0b
     614:	9c 87       	std	Y+12, r25	; 0x0c
    gz *= 0.0174533f;
     616:	29 e3       	ldi	r18, 0x39	; 57
     618:	3a ef       	ldi	r19, 0xFA	; 250
     61a:	4e e8       	ldi	r20, 0x8E	; 142
     61c:	5c e3       	ldi	r21, 0x3C	; 60
     61e:	c8 01       	movw	r24, r16
     620:	b7 01       	movw	r22, r14
     622:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
     626:	69 8b       	std	Y+17, r22	; 0x11
     628:	7a 8b       	std	Y+18, r23	; 0x12
     62a:	8b 8b       	std	Y+19, r24	; 0x13
     62c:	9c 8b       	std	Y+20, r25	; 0x14

    // Compute feedback only if accelerometer measurement valid
    // (avoids NaN in accelerometer normalisation)
    if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
     62e:	20 e0       	ldi	r18, 0x00	; 0
     630:	30 e0       	ldi	r19, 0x00	; 0
     632:	a9 01       	movw	r20, r18
     634:	c6 01       	movw	r24, r12
     636:	b5 01       	movw	r22, r10
     638:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <__cmpsf2>
     63c:	81 11       	cpse	r24, r1
     63e:	17 c0       	rjmp	.+46     	; 0x66e <mahony_updateIMU+0xc0>
     640:	20 e0       	ldi	r18, 0x00	; 0
     642:	30 e0       	ldi	r19, 0x00	; 0
     644:	a9 01       	movw	r20, r18
     646:	6f a9       	ldd	r22, Y+55	; 0x37
     648:	78 ad       	ldd	r23, Y+56	; 0x38
     64a:	89 ad       	ldd	r24, Y+57	; 0x39
     64c:	9a ad       	ldd	r25, Y+58	; 0x3a
     64e:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <__cmpsf2>
     652:	81 11       	cpse	r24, r1
     654:	0c c0       	rjmp	.+24     	; 0x66e <mahony_updateIMU+0xc0>
     656:	20 e0       	ldi	r18, 0x00	; 0
     658:	30 e0       	ldi	r19, 0x00	; 0
     65a:	a9 01       	movw	r20, r18
     65c:	6b ad       	ldd	r22, Y+59	; 0x3b
     65e:	7c ad       	ldd	r23, Y+60	; 0x3c
     660:	8d ad       	ldd	r24, Y+61	; 0x3d
     662:	9e ad       	ldd	r25, Y+62	; 0x3e
     664:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <__cmpsf2>
     668:	88 23       	and	r24, r24
     66a:	09 f4       	brne	.+2      	; 0x66e <mahony_updateIMU+0xc0>
     66c:	1f c2       	rjmp	.+1086   	; 0xaac <__stack+0x1ad>

        // Normalise accelerometer measurement
        recipNorm = invSqrt(ax * ax + ay * ay + az * az);
     66e:	a6 01       	movw	r20, r12
     670:	95 01       	movw	r18, r10
     672:	c6 01       	movw	r24, r12
     674:	b5 01       	movw	r22, r10
     676:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
     67a:	2b 01       	movw	r4, r22
     67c:	3c 01       	movw	r6, r24
     67e:	2f a9       	ldd	r18, Y+55	; 0x37
     680:	38 ad       	ldd	r19, Y+56	; 0x38
     682:	49 ad       	ldd	r20, Y+57	; 0x39
     684:	5a ad       	ldd	r21, Y+58	; 0x3a
     686:	ca 01       	movw	r24, r20
     688:	b9 01       	movw	r22, r18
     68a:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
     68e:	9b 01       	movw	r18, r22
     690:	ac 01       	movw	r20, r24
     692:	c3 01       	movw	r24, r6
     694:	b2 01       	movw	r22, r4
     696:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
     69a:	2b 01       	movw	r4, r22
     69c:	3c 01       	movw	r6, r24
     69e:	2b ad       	ldd	r18, Y+59	; 0x3b
     6a0:	3c ad       	ldd	r19, Y+60	; 0x3c
     6a2:	4d ad       	ldd	r20, Y+61	; 0x3d
     6a4:	5e ad       	ldd	r21, Y+62	; 0x3e
     6a6:	ca 01       	movw	r24, r20
     6a8:	b9 01       	movw	r22, r18
     6aa:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
     6ae:	9b 01       	movw	r18, r22
     6b0:	ac 01       	movw	r20, r24
     6b2:	c3 01       	movw	r24, r6
     6b4:	b2 01       	movw	r22, r4
     6b6:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
     6ba:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <invSqrt>
     6be:	2b 01       	movw	r4, r22
     6c0:	3c 01       	movw	r6, r24
        ax *= recipNorm;
     6c2:	9b 01       	movw	r18, r22
     6c4:	ac 01       	movw	r20, r24
     6c6:	c6 01       	movw	r24, r12
     6c8:	b5 01       	movw	r22, r10
     6ca:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
     6ce:	6d 8b       	std	Y+21, r22	; 0x15
     6d0:	7e 8b       	std	Y+22, r23	; 0x16
     6d2:	8f 8b       	std	Y+23, r24	; 0x17
     6d4:	98 8f       	std	Y+24, r25	; 0x18
        ay *= recipNorm;
     6d6:	a3 01       	movw	r20, r6
     6d8:	92 01       	movw	r18, r4
     6da:	6f a9       	ldd	r22, Y+55	; 0x37
     6dc:	78 ad       	ldd	r23, Y+56	; 0x38
     6de:	89 ad       	ldd	r24, Y+57	; 0x39
     6e0:	9a ad       	ldd	r25, Y+58	; 0x3a
     6e2:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
     6e6:	6d 8f       	std	Y+29, r22	; 0x1d
     6e8:	7e 8f       	std	Y+30, r23	; 0x1e
     6ea:	8f 8f       	std	Y+31, r24	; 0x1f
     6ec:	98 a3       	std	Y+32, r25	; 0x20
        az *= recipNorm;
     6ee:	a3 01       	movw	r20, r6
     6f0:	92 01       	movw	r18, r4
     6f2:	6b ad       	ldd	r22, Y+59	; 0x3b
     6f4:	7c ad       	ldd	r23, Y+60	; 0x3c
     6f6:	8d ad       	ldd	r24, Y+61	; 0x3d
     6f8:	9e ad       	ldd	r25, Y+62	; 0x3e
     6fa:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
     6fe:	6d 83       	std	Y+5, r22	; 0x05
     700:	7e 83       	std	Y+6, r23	; 0x06
     702:	8f 83       	std	Y+7, r24	; 0x07
     704:	98 87       	std	Y+8, r25	; 0x08

        // Estimated direction of gravity
        halfvx = q1 * q3 - q0 * q2;
     706:	80 90 25 01 	lds	r8, 0x0125	; 0x800125 <q1>
     70a:	90 90 26 01 	lds	r9, 0x0126	; 0x800126 <q1+0x1>
     70e:	a0 90 27 01 	lds	r10, 0x0127	; 0x800127 <q1+0x2>
     712:	b0 90 28 01 	lds	r11, 0x0128	; 0x800128 <q1+0x3>
     716:	40 90 1d 01 	lds	r4, 0x011D	; 0x80011d <q3>
     71a:	50 90 1e 01 	lds	r5, 0x011E	; 0x80011e <q3+0x1>
     71e:	60 90 1f 01 	lds	r6, 0x011F	; 0x80011f <q3+0x2>
     722:	70 90 20 01 	lds	r7, 0x0120	; 0x800120 <q3+0x3>
     726:	c0 90 29 01 	lds	r12, 0x0129	; 0x800129 <q0>
     72a:	d0 90 2a 01 	lds	r13, 0x012A	; 0x80012a <q0+0x1>
     72e:	e0 90 2b 01 	lds	r14, 0x012B	; 0x80012b <q0+0x2>
     732:	f0 90 2c 01 	lds	r15, 0x012C	; 0x80012c <q0+0x3>
     736:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <q2>
     73a:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <q2+0x1>
     73e:	a0 91 23 01 	lds	r26, 0x0123	; 0x800123 <q2+0x2>
     742:	b0 91 24 01 	lds	r27, 0x0124	; 0x800124 <q2+0x3>
     746:	89 83       	std	Y+1, r24	; 0x01
     748:	9a 83       	std	Y+2, r25	; 0x02
     74a:	ab 83       	std	Y+3, r26	; 0x03
     74c:	bc 83       	std	Y+4, r27	; 0x04
     74e:	a3 01       	movw	r20, r6
     750:	92 01       	movw	r18, r4
     752:	c5 01       	movw	r24, r10
     754:	b4 01       	movw	r22, r8
     756:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
     75a:	69 8f       	std	Y+25, r22	; 0x19
     75c:	7a 8f       	std	Y+26, r23	; 0x1a
     75e:	8b 8f       	std	Y+27, r24	; 0x1b
     760:	9c 8f       	std	Y+28, r25	; 0x1c
     762:	29 81       	ldd	r18, Y+1	; 0x01
     764:	3a 81       	ldd	r19, Y+2	; 0x02
     766:	4b 81       	ldd	r20, Y+3	; 0x03
     768:	5c 81       	ldd	r21, Y+4	; 0x04
     76a:	c7 01       	movw	r24, r14
     76c:	b6 01       	movw	r22, r12
     76e:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
     772:	9b 01       	movw	r18, r22
     774:	ac 01       	movw	r20, r24
     776:	69 8d       	ldd	r22, Y+25	; 0x19
     778:	7a 8d       	ldd	r23, Y+26	; 0x1a
     77a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     77c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     77e:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <__subsf3>
     782:	69 8f       	std	Y+25, r22	; 0x19
     784:	7a 8f       	std	Y+26, r23	; 0x1a
     786:	8b 8f       	std	Y+27, r24	; 0x1b
     788:	9c 8f       	std	Y+28, r25	; 0x1c
        halfvy = q0 * q1 + q2 * q3;
     78a:	a7 01       	movw	r20, r14
     78c:	96 01       	movw	r18, r12
     78e:	c5 01       	movw	r24, r10
     790:	b4 01       	movw	r22, r8
     792:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
     796:	4b 01       	movw	r8, r22
     798:	5c 01       	movw	r10, r24
     79a:	29 81       	ldd	r18, Y+1	; 0x01
     79c:	3a 81       	ldd	r19, Y+2	; 0x02
     79e:	4b 81       	ldd	r20, Y+3	; 0x03
     7a0:	5c 81       	ldd	r21, Y+4	; 0x04
     7a2:	c3 01       	movw	r24, r6
     7a4:	b2 01       	movw	r22, r4
     7a6:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
     7aa:	9b 01       	movw	r18, r22
     7ac:	ac 01       	movw	r20, r24
     7ae:	c5 01       	movw	r24, r10
     7b0:	b4 01       	movw	r22, r8
     7b2:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
     7b6:	69 83       	std	Y+1, r22	; 0x01
     7b8:	7a 83       	std	Y+2, r23	; 0x02
     7ba:	8b 83       	std	Y+3, r24	; 0x03
     7bc:	9c 83       	std	Y+4, r25	; 0x04
        halfvz = q0 * q0 - 0.5f + q3 * q3;
     7be:	a7 01       	movw	r20, r14
     7c0:	96 01       	movw	r18, r12
     7c2:	c7 01       	movw	r24, r14
     7c4:	b6 01       	movw	r22, r12
     7c6:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
     7ca:	20 e0       	ldi	r18, 0x00	; 0
     7cc:	30 e0       	ldi	r19, 0x00	; 0
     7ce:	40 e0       	ldi	r20, 0x00	; 0
     7d0:	5f e3       	ldi	r21, 0x3F	; 63
     7d2:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <__subsf3>
     7d6:	6b 01       	movw	r12, r22
     7d8:	7c 01       	movw	r14, r24
     7da:	a3 01       	movw	r20, r6
     7dc:	92 01       	movw	r18, r4
     7de:	c3 01       	movw	r24, r6
     7e0:	b2 01       	movw	r22, r4
     7e2:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
     7e6:	9b 01       	movw	r18, r22
     7e8:	ac 01       	movw	r20, r24
     7ea:	c7 01       	movw	r24, r14
     7ec:	b6 01       	movw	r22, r12
     7ee:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
     7f2:	6b 01       	movw	r12, r22
     7f4:	7c 01       	movw	r14, r24

        // Error is sum of cross product between estimated
        // and measured direction of gravity
        halfex = (ay * halfvz - az * halfvy);
     7f6:	9b 01       	movw	r18, r22
     7f8:	ac 01       	movw	r20, r24
     7fa:	6d 8d       	ldd	r22, Y+29	; 0x1d
     7fc:	7e 8d       	ldd	r23, Y+30	; 0x1e
     7fe:	8f 8d       	ldd	r24, Y+31	; 0x1f
     800:	98 a1       	ldd	r25, Y+32	; 0x20
     802:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
     806:	4b 01       	movw	r8, r22
     808:	5c 01       	movw	r10, r24
     80a:	29 81       	ldd	r18, Y+1	; 0x01
     80c:	3a 81       	ldd	r19, Y+2	; 0x02
     80e:	4b 81       	ldd	r20, Y+3	; 0x03
     810:	5c 81       	ldd	r21, Y+4	; 0x04
     812:	6d 81       	ldd	r22, Y+5	; 0x05
     814:	7e 81       	ldd	r23, Y+6	; 0x06
     816:	8f 81       	ldd	r24, Y+7	; 0x07
     818:	98 85       	ldd	r25, Y+8	; 0x08
     81a:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
     81e:	9b 01       	movw	r18, r22
     820:	ac 01       	movw	r20, r24
     822:	c5 01       	movw	r24, r10
     824:	b4 01       	movw	r22, r8
     826:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <__subsf3>
     82a:	69 a3       	std	Y+33, r22	; 0x21
     82c:	7a a3       	std	Y+34, r23	; 0x22
     82e:	8b a3       	std	Y+35, r24	; 0x23
     830:	9c a3       	std	Y+36, r25	; 0x24
        halfey = (az * halfvx - ax * halfvz);
     832:	29 8d       	ldd	r18, Y+25	; 0x19
     834:	3a 8d       	ldd	r19, Y+26	; 0x1a
     836:	4b 8d       	ldd	r20, Y+27	; 0x1b
     838:	5c 8d       	ldd	r21, Y+28	; 0x1c
     83a:	6d 81       	ldd	r22, Y+5	; 0x05
     83c:	7e 81       	ldd	r23, Y+6	; 0x06
     83e:	8f 81       	ldd	r24, Y+7	; 0x07
     840:	98 85       	ldd	r25, Y+8	; 0x08
     842:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
     846:	4b 01       	movw	r8, r22
     848:	5c 01       	movw	r10, r24
     84a:	a7 01       	movw	r20, r14
     84c:	96 01       	movw	r18, r12
     84e:	6d 89       	ldd	r22, Y+21	; 0x15
     850:	7e 89       	ldd	r23, Y+22	; 0x16
     852:	8f 89       	ldd	r24, Y+23	; 0x17
     854:	98 8d       	ldd	r25, Y+24	; 0x18
     856:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
     85a:	9b 01       	movw	r18, r22
     85c:	ac 01       	movw	r20, r24
     85e:	c5 01       	movw	r24, r10
     860:	b4 01       	movw	r22, r8
     862:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <__subsf3>
     866:	6d 83       	std	Y+5, r22	; 0x05
     868:	7e 83       	std	Y+6, r23	; 0x06
     86a:	8f 83       	std	Y+7, r24	; 0x07
     86c:	98 87       	std	Y+8, r25	; 0x08
        halfez = (ax * halfvy - ay * halfvx);
     86e:	29 81       	ldd	r18, Y+1	; 0x01
     870:	3a 81       	ldd	r19, Y+2	; 0x02
     872:	4b 81       	ldd	r20, Y+3	; 0x03
     874:	5c 81       	ldd	r21, Y+4	; 0x04
     876:	6d 89       	ldd	r22, Y+21	; 0x15
     878:	7e 89       	ldd	r23, Y+22	; 0x16
     87a:	8f 89       	ldd	r24, Y+23	; 0x17
     87c:	98 8d       	ldd	r25, Y+24	; 0x18
     87e:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
     882:	6b 01       	movw	r12, r22
     884:	7c 01       	movw	r14, r24
     886:	29 8d       	ldd	r18, Y+25	; 0x19
     888:	3a 8d       	ldd	r19, Y+26	; 0x1a
     88a:	4b 8d       	ldd	r20, Y+27	; 0x1b
     88c:	5c 8d       	ldd	r21, Y+28	; 0x1c
     88e:	6d 8d       	ldd	r22, Y+29	; 0x1d
     890:	7e 8d       	ldd	r23, Y+30	; 0x1e
     892:	8f 8d       	ldd	r24, Y+31	; 0x1f
     894:	98 a1       	ldd	r25, Y+32	; 0x20
     896:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
     89a:	9b 01       	movw	r18, r22
     89c:	ac 01       	movw	r20, r24
     89e:	c7 01       	movw	r24, r14
     8a0:	b6 01       	movw	r22, r12
     8a2:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <__subsf3>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04

        // Compute and apply integral feedback if enabled
        if(twoKi > 0.0f) {
     8ae:	c0 90 2d 01 	lds	r12, 0x012D	; 0x80012d <twoKi>
     8b2:	d0 90 2e 01 	lds	r13, 0x012E	; 0x80012e <twoKi+0x1>
     8b6:	e0 90 2f 01 	lds	r14, 0x012F	; 0x80012f <twoKi+0x2>
     8ba:	f0 90 30 01 	lds	r15, 0x0130	; 0x800130 <twoKi+0x3>
     8be:	20 e0       	ldi	r18, 0x00	; 0
     8c0:	30 e0       	ldi	r19, 0x00	; 0
     8c2:	a9 01       	movw	r20, r18
     8c4:	c7 01       	movw	r24, r14
     8c6:	b6 01       	movw	r22, r12
     8c8:	0e 94 22 18 	call	0x3044	; 0x3044 <__gesf2>
     8cc:	18 16       	cp	r1, r24
     8ce:	0c f0       	brlt	.+2      	; 0x8d2 <__DATA_REGION_LENGTH__+0xd2>
     8d0:	91 c0       	rjmp	.+290    	; 0x9f4 <__stack+0xf5>
            // integral error scaled by Ki
            integralFBx += twoKi * halfex * invSampleFreq;
     8d2:	80 90 0d 01 	lds	r8, 0x010D	; 0x80010d <invSampleFreq>
     8d6:	90 90 0e 01 	lds	r9, 0x010E	; 0x80010e <invSampleFreq+0x1>
     8da:	a0 90 0f 01 	lds	r10, 0x010F	; 0x80010f <invSampleFreq+0x2>
     8de:	b0 90 10 01 	lds	r11, 0x0110	; 0x800110 <invSampleFreq+0x3>
     8e2:	a7 01       	movw	r20, r14
     8e4:	96 01       	movw	r18, r12
     8e6:	69 a1       	ldd	r22, Y+33	; 0x21
     8e8:	7a a1       	ldd	r23, Y+34	; 0x22
     8ea:	8b a1       	ldd	r24, Y+35	; 0x23
     8ec:	9c a1       	ldd	r25, Y+36	; 0x24
     8ee:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
     8f2:	a5 01       	movw	r20, r10
     8f4:	94 01       	movw	r18, r8
     8f6:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
     8fa:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <integralFBx>
     8fe:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <integralFBx+0x1>
     902:	40 91 1b 01 	lds	r20, 0x011B	; 0x80011b <integralFBx+0x2>
     906:	50 91 1c 01 	lds	r21, 0x011C	; 0x80011c <integralFBx+0x3>
     90a:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
     90e:	6d 8b       	std	Y+21, r22	; 0x15
     910:	7e 8b       	std	Y+22, r23	; 0x16
     912:	8f 8b       	std	Y+23, r24	; 0x17
     914:	98 8f       	std	Y+24, r25	; 0x18
     916:	60 93 19 01 	sts	0x0119, r22	; 0x800119 <integralFBx>
     91a:	70 93 1a 01 	sts	0x011A, r23	; 0x80011a <integralFBx+0x1>
     91e:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <integralFBx+0x2>
     922:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <integralFBx+0x3>
            integralFBy += twoKi * halfey * invSampleFreq;
     926:	a7 01       	movw	r20, r14
     928:	96 01       	movw	r18, r12
     92a:	6d 81       	ldd	r22, Y+5	; 0x05
     92c:	7e 81       	ldd	r23, Y+6	; 0x06
     92e:	8f 81       	ldd	r24, Y+7	; 0x07
     930:	98 85       	ldd	r25, Y+8	; 0x08
     932:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
     936:	a5 01       	movw	r20, r10
     938:	94 01       	movw	r18, r8
     93a:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
     93e:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <integralFBy>
     942:	30 91 16 01 	lds	r19, 0x0116	; 0x800116 <integralFBy+0x1>
     946:	40 91 17 01 	lds	r20, 0x0117	; 0x800117 <integralFBy+0x2>
     94a:	50 91 18 01 	lds	r21, 0x0118	; 0x800118 <integralFBy+0x3>
     94e:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
     952:	2b 01       	movw	r4, r22
     954:	3c 01       	movw	r6, r24
     956:	60 93 15 01 	sts	0x0115, r22	; 0x800115 <integralFBy>
     95a:	70 93 16 01 	sts	0x0116, r23	; 0x800116 <integralFBy+0x1>
     95e:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <integralFBy+0x2>
     962:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <integralFBy+0x3>
            integralFBz += twoKi * halfez * invSampleFreq;
     966:	a7 01       	movw	r20, r14
     968:	96 01       	movw	r18, r12
     96a:	69 81       	ldd	r22, Y+1	; 0x01
     96c:	7a 81       	ldd	r23, Y+2	; 0x02
     96e:	8b 81       	ldd	r24, Y+3	; 0x03
     970:	9c 81       	ldd	r25, Y+4	; 0x04
     972:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
     976:	a5 01       	movw	r20, r10
     978:	94 01       	movw	r18, r8
     97a:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
     97e:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <integralFBz>
     982:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <integralFBz+0x1>
     986:	40 91 13 01 	lds	r20, 0x0113	; 0x800113 <integralFBz+0x2>
     98a:	50 91 14 01 	lds	r21, 0x0114	; 0x800114 <integralFBz+0x3>
     98e:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
     992:	6b 01       	movw	r12, r22
     994:	7c 01       	movw	r14, r24
     996:	60 93 11 01 	sts	0x0111, r22	; 0x800111 <integralFBz>
     99a:	70 93 12 01 	sts	0x0112, r23	; 0x800112 <integralFBz+0x1>
     99e:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <integralFBz+0x2>
     9a2:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <integralFBz+0x3>
            gx += integralFBx;	// apply integral feedback
     9a6:	2d 89       	ldd	r18, Y+21	; 0x15
     9a8:	3e 89       	ldd	r19, Y+22	; 0x16
     9aa:	4f 89       	ldd	r20, Y+23	; 0x17
     9ac:	58 8d       	ldd	r21, Y+24	; 0x18
     9ae:	6d 85       	ldd	r22, Y+13	; 0x0d
     9b0:	7e 85       	ldd	r23, Y+14	; 0x0e
     9b2:	8f 85       	ldd	r24, Y+15	; 0x0f
     9b4:	98 89       	ldd	r25, Y+16	; 0x10
     9b6:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
     9ba:	6d 87       	std	Y+13, r22	; 0x0d
     9bc:	7e 87       	std	Y+14, r23	; 0x0e
     9be:	8f 87       	std	Y+15, r24	; 0x0f
     9c0:	98 8b       	std	Y+16, r25	; 0x10
            gy += integralFBy;
     9c2:	a3 01       	movw	r20, r6
     9c4:	92 01       	movw	r18, r4
     9c6:	69 85       	ldd	r22, Y+9	; 0x09
     9c8:	7a 85       	ldd	r23, Y+10	; 0x0a
     9ca:	8b 85       	ldd	r24, Y+11	; 0x0b
     9cc:	9c 85       	ldd	r25, Y+12	; 0x0c
     9ce:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
     9d2:	69 87       	std	Y+9, r22	; 0x09
     9d4:	7a 87       	std	Y+10, r23	; 0x0a
     9d6:	8b 87       	std	Y+11, r24	; 0x0b
     9d8:	9c 87       	std	Y+12, r25	; 0x0c
            gz += integralFBz;
     9da:	a7 01       	movw	r20, r14
     9dc:	96 01       	movw	r18, r12
     9de:	69 89       	ldd	r22, Y+17	; 0x11
     9e0:	7a 89       	ldd	r23, Y+18	; 0x12
     9e2:	8b 89       	ldd	r24, Y+19	; 0x13
     9e4:	9c 89       	ldd	r25, Y+20	; 0x14
     9e6:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
     9ea:	69 8b       	std	Y+17, r22	; 0x11
     9ec:	7a 8b       	std	Y+18, r23	; 0x12
     9ee:	8b 8b       	std	Y+19, r24	; 0x13
     9f0:	9c 8b       	std	Y+20, r25	; 0x14
     9f2:	18 c0       	rjmp	.+48     	; 0xa24 <__stack+0x125>
            } else {
            integralFBx = 0.0f;	// prevent integral windup
     9f4:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <integralFBx>
     9f8:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <integralFBx+0x1>
     9fc:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <integralFBx+0x2>
     a00:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <integralFBx+0x3>
            integralFBy = 0.0f;
     a04:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <integralFBy>
     a08:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <integralFBy+0x1>
     a0c:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <integralFBy+0x2>
     a10:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <integralFBy+0x3>
            integralFBz = 0.0f;
     a14:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <integralFBz>
     a18:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <integralFBz+0x1>
     a1c:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <integralFBz+0x2>
     a20:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <integralFBz+0x3>
        }

        // Apply proportional feedback
        gx += twoKp * halfex;
     a24:	c0 90 31 01 	lds	r12, 0x0131	; 0x800131 <twoKp>
     a28:	d0 90 32 01 	lds	r13, 0x0132	; 0x800132 <twoKp+0x1>
     a2c:	e0 90 33 01 	lds	r14, 0x0133	; 0x800133 <twoKp+0x2>
     a30:	f0 90 34 01 	lds	r15, 0x0134	; 0x800134 <twoKp+0x3>
     a34:	a7 01       	movw	r20, r14
     a36:	96 01       	movw	r18, r12
     a38:	69 a1       	ldd	r22, Y+33	; 0x21
     a3a:	7a a1       	ldd	r23, Y+34	; 0x22
     a3c:	8b a1       	ldd	r24, Y+35	; 0x23
     a3e:	9c a1       	ldd	r25, Y+36	; 0x24
     a40:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
     a44:	9b 01       	movw	r18, r22
     a46:	ac 01       	movw	r20, r24
     a48:	6d 85       	ldd	r22, Y+13	; 0x0d
     a4a:	7e 85       	ldd	r23, Y+14	; 0x0e
     a4c:	8f 85       	ldd	r24, Y+15	; 0x0f
     a4e:	98 89       	ldd	r25, Y+16	; 0x10
     a50:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
     a54:	6d 87       	std	Y+13, r22	; 0x0d
     a56:	7e 87       	std	Y+14, r23	; 0x0e
     a58:	8f 87       	std	Y+15, r24	; 0x0f
     a5a:	98 8b       	std	Y+16, r25	; 0x10
        gy += twoKp * halfey;
     a5c:	a7 01       	movw	r20, r14
     a5e:	96 01       	movw	r18, r12
     a60:	6d 81       	ldd	r22, Y+5	; 0x05
     a62:	7e 81       	ldd	r23, Y+6	; 0x06
     a64:	8f 81       	ldd	r24, Y+7	; 0x07
     a66:	98 85       	ldd	r25, Y+8	; 0x08
     a68:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
     a6c:	9b 01       	movw	r18, r22
     a6e:	ac 01       	movw	r20, r24
     a70:	69 85       	ldd	r22, Y+9	; 0x09
     a72:	7a 85       	ldd	r23, Y+10	; 0x0a
     a74:	8b 85       	ldd	r24, Y+11	; 0x0b
     a76:	9c 85       	ldd	r25, Y+12	; 0x0c
     a78:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
     a7c:	69 87       	std	Y+9, r22	; 0x09
     a7e:	7a 87       	std	Y+10, r23	; 0x0a
     a80:	8b 87       	std	Y+11, r24	; 0x0b
     a82:	9c 87       	std	Y+12, r25	; 0x0c
        gz += twoKp * halfez;
     a84:	a7 01       	movw	r20, r14
     a86:	96 01       	movw	r18, r12
     a88:	69 81       	ldd	r22, Y+1	; 0x01
     a8a:	7a 81       	ldd	r23, Y+2	; 0x02
     a8c:	8b 81       	ldd	r24, Y+3	; 0x03
     a8e:	9c 81       	ldd	r25, Y+4	; 0x04
     a90:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
     a94:	9b 01       	movw	r18, r22
     a96:	ac 01       	movw	r20, r24
     a98:	69 89       	ldd	r22, Y+17	; 0x11
     a9a:	7a 89       	ldd	r23, Y+18	; 0x12
     a9c:	8b 89       	ldd	r24, Y+19	; 0x13
     a9e:	9c 89       	ldd	r25, Y+20	; 0x14
     aa0:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
     aa4:	69 8b       	std	Y+17, r22	; 0x11
     aa6:	7a 8b       	std	Y+18, r23	; 0x12
     aa8:	8b 8b       	std	Y+19, r24	; 0x13
     aaa:	9c 8b       	std	Y+20, r25	; 0x14
    }

    // Integrate rate of change of quaternion
    gx *= (0.5f * invSampleFreq);		// pre-multiply common factors
     aac:	20 e0       	ldi	r18, 0x00	; 0
     aae:	30 e0       	ldi	r19, 0x00	; 0
     ab0:	40 e0       	ldi	r20, 0x00	; 0
     ab2:	5f e3       	ldi	r21, 0x3F	; 63
     ab4:	60 91 0d 01 	lds	r22, 0x010D	; 0x80010d <invSampleFreq>
     ab8:	70 91 0e 01 	lds	r23, 0x010E	; 0x80010e <invSampleFreq+0x1>
     abc:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <invSampleFreq+0x2>
     ac0:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <invSampleFreq+0x3>
     ac4:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
     ac8:	6b 01       	movw	r12, r22
     aca:	7c 01       	movw	r14, r24
     acc:	9b 01       	movw	r18, r22
     ace:	ac 01       	movw	r20, r24
     ad0:	6d 85       	ldd	r22, Y+13	; 0x0d
     ad2:	7e 85       	ldd	r23, Y+14	; 0x0e
     ad4:	8f 85       	ldd	r24, Y+15	; 0x0f
     ad6:	98 89       	ldd	r25, Y+16	; 0x10
     ad8:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
     adc:	69 83       	std	Y+1, r22	; 0x01
     ade:	7a 83       	std	Y+2, r23	; 0x02
     ae0:	8b 83       	std	Y+3, r24	; 0x03
     ae2:	9c 83       	std	Y+4, r25	; 0x04
    gy *= (0.5f * invSampleFreq);
     ae4:	a7 01       	movw	r20, r14
     ae6:	96 01       	movw	r18, r12
     ae8:	69 85       	ldd	r22, Y+9	; 0x09
     aea:	7a 85       	ldd	r23, Y+10	; 0x0a
     aec:	8b 85       	ldd	r24, Y+11	; 0x0b
     aee:	9c 85       	ldd	r25, Y+12	; 0x0c
     af0:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
     af4:	6d 83       	std	Y+5, r22	; 0x05
     af6:	7e 83       	std	Y+6, r23	; 0x06
     af8:	8f 83       	std	Y+7, r24	; 0x07
     afa:	98 87       	std	Y+8, r25	; 0x08
    gz *= (0.5f * invSampleFreq);
     afc:	a7 01       	movw	r20, r14
     afe:	96 01       	movw	r18, r12
     b00:	69 89       	ldd	r22, Y+17	; 0x11
     b02:	7a 89       	ldd	r23, Y+18	; 0x12
     b04:	8b 89       	ldd	r24, Y+19	; 0x13
     b06:	9c 89       	ldd	r25, Y+20	; 0x14
     b08:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
     b0c:	69 8b       	std	Y+17, r22	; 0x11
     b0e:	7a 8b       	std	Y+18, r23	; 0x12
     b10:	8b 8b       	std	Y+19, r24	; 0x13
     b12:	9c 8b       	std	Y+20, r25	; 0x14
    qa = q0;
     b14:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <q0>
     b18:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <q0+0x1>
     b1c:	a0 91 2b 01 	lds	r26, 0x012B	; 0x80012b <q0+0x2>
     b20:	b0 91 2c 01 	lds	r27, 0x012C	; 0x80012c <q0+0x3>
     b24:	8d 87       	std	Y+13, r24	; 0x0d
     b26:	9e 87       	std	Y+14, r25	; 0x0e
     b28:	af 87       	std	Y+15, r26	; 0x0f
     b2a:	b8 8b       	std	Y+16, r27	; 0x10
    qb = q1;
     b2c:	c0 90 25 01 	lds	r12, 0x0125	; 0x800125 <q1>
     b30:	d0 90 26 01 	lds	r13, 0x0126	; 0x800126 <q1+0x1>
     b34:	e0 90 27 01 	lds	r14, 0x0127	; 0x800127 <q1+0x2>
     b38:	f0 90 28 01 	lds	r15, 0x0128	; 0x800128 <q1+0x3>
    qc = q2;
     b3c:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <q2>
     b40:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <q2+0x1>
     b44:	a0 91 23 01 	lds	r26, 0x0123	; 0x800123 <q2+0x2>
     b48:	b0 91 24 01 	lds	r27, 0x0124	; 0x800124 <q2+0x3>
     b4c:	89 87       	std	Y+9, r24	; 0x09
     b4e:	9a 87       	std	Y+10, r25	; 0x0a
     b50:	ab 87       	std	Y+11, r26	; 0x0b
     b52:	bc 87       	std	Y+12, r27	; 0x0c
    q0 += (-qb * gx - qc * gy - q3 * gz);
     b54:	40 90 1d 01 	lds	r4, 0x011D	; 0x80011d <q3>
     b58:	50 90 1e 01 	lds	r5, 0x011E	; 0x80011e <q3+0x1>
     b5c:	60 90 1f 01 	lds	r6, 0x011F	; 0x80011f <q3+0x2>
     b60:	70 90 20 01 	lds	r7, 0x0120	; 0x800120 <q3+0x3>
     b64:	c7 01       	movw	r24, r14
     b66:	b6 01       	movw	r22, r12
     b68:	90 58       	subi	r25, 0x80	; 128
     b6a:	29 81       	ldd	r18, Y+1	; 0x01
     b6c:	3a 81       	ldd	r19, Y+2	; 0x02
     b6e:	4b 81       	ldd	r20, Y+3	; 0x03
     b70:	5c 81       	ldd	r21, Y+4	; 0x04
     b72:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
     b76:	4b 01       	movw	r8, r22
     b78:	5c 01       	movw	r10, r24
     b7a:	29 85       	ldd	r18, Y+9	; 0x09
     b7c:	3a 85       	ldd	r19, Y+10	; 0x0a
     b7e:	4b 85       	ldd	r20, Y+11	; 0x0b
     b80:	5c 85       	ldd	r21, Y+12	; 0x0c
     b82:	6d 81       	ldd	r22, Y+5	; 0x05
     b84:	7e 81       	ldd	r23, Y+6	; 0x06
     b86:	8f 81       	ldd	r24, Y+7	; 0x07
     b88:	98 85       	ldd	r25, Y+8	; 0x08
     b8a:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
     b8e:	9b 01       	movw	r18, r22
     b90:	ac 01       	movw	r20, r24
     b92:	c5 01       	movw	r24, r10
     b94:	b4 01       	movw	r22, r8
     b96:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <__subsf3>
     b9a:	4b 01       	movw	r8, r22
     b9c:	5c 01       	movw	r10, r24
     b9e:	a3 01       	movw	r20, r6
     ba0:	92 01       	movw	r18, r4
     ba2:	69 89       	ldd	r22, Y+17	; 0x11
     ba4:	7a 89       	ldd	r23, Y+18	; 0x12
     ba6:	8b 89       	ldd	r24, Y+19	; 0x13
     ba8:	9c 89       	ldd	r25, Y+20	; 0x14
     baa:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
     bae:	9b 01       	movw	r18, r22
     bb0:	ac 01       	movw	r20, r24
     bb2:	c5 01       	movw	r24, r10
     bb4:	b4 01       	movw	r22, r8
     bb6:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <__subsf3>
     bba:	2d 85       	ldd	r18, Y+13	; 0x0d
     bbc:	3e 85       	ldd	r19, Y+14	; 0x0e
     bbe:	4f 85       	ldd	r20, Y+15	; 0x0f
     bc0:	58 89       	ldd	r21, Y+16	; 0x10
     bc2:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
     bc6:	6d 8b       	std	Y+21, r22	; 0x15
     bc8:	7e 8b       	std	Y+22, r23	; 0x16
     bca:	8f 8b       	std	Y+23, r24	; 0x17
     bcc:	98 8f       	std	Y+24, r25	; 0x18
    q1 += (qa * gx + qc * gz - q3 * gy);
     bce:	2d 85       	ldd	r18, Y+13	; 0x0d
     bd0:	3e 85       	ldd	r19, Y+14	; 0x0e
     bd2:	4f 85       	ldd	r20, Y+15	; 0x0f
     bd4:	58 89       	ldd	r21, Y+16	; 0x10
     bd6:	69 81       	ldd	r22, Y+1	; 0x01
     bd8:	7a 81       	ldd	r23, Y+2	; 0x02
     bda:	8b 81       	ldd	r24, Y+3	; 0x03
     bdc:	9c 81       	ldd	r25, Y+4	; 0x04
     bde:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
     be2:	4b 01       	movw	r8, r22
     be4:	5c 01       	movw	r10, r24
     be6:	29 85       	ldd	r18, Y+9	; 0x09
     be8:	3a 85       	ldd	r19, Y+10	; 0x0a
     bea:	4b 85       	ldd	r20, Y+11	; 0x0b
     bec:	5c 85       	ldd	r21, Y+12	; 0x0c
     bee:	69 89       	ldd	r22, Y+17	; 0x11
     bf0:	7a 89       	ldd	r23, Y+18	; 0x12
     bf2:	8b 89       	ldd	r24, Y+19	; 0x13
     bf4:	9c 89       	ldd	r25, Y+20	; 0x14
     bf6:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
     bfa:	9b 01       	movw	r18, r22
     bfc:	ac 01       	movw	r20, r24
     bfe:	c5 01       	movw	r24, r10
     c00:	b4 01       	movw	r22, r8
     c02:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
     c06:	4b 01       	movw	r8, r22
     c08:	5c 01       	movw	r10, r24
     c0a:	a3 01       	movw	r20, r6
     c0c:	92 01       	movw	r18, r4
     c0e:	6d 81       	ldd	r22, Y+5	; 0x05
     c10:	7e 81       	ldd	r23, Y+6	; 0x06
     c12:	8f 81       	ldd	r24, Y+7	; 0x07
     c14:	98 85       	ldd	r25, Y+8	; 0x08
     c16:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
     c1a:	9b 01       	movw	r18, r22
     c1c:	ac 01       	movw	r20, r24
     c1e:	c5 01       	movw	r24, r10
     c20:	b4 01       	movw	r22, r8
     c22:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <__subsf3>
     c26:	a7 01       	movw	r20, r14
     c28:	96 01       	movw	r18, r12
     c2a:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
     c2e:	6d 8f       	std	Y+29, r22	; 0x1d
     c30:	7e 8f       	std	Y+30, r23	; 0x1e
     c32:	8f 8f       	std	Y+31, r24	; 0x1f
     c34:	98 a3       	std	Y+32, r25	; 0x20
    q2 += (qa * gy - qb * gz + q3 * gx);
     c36:	2d 85       	ldd	r18, Y+13	; 0x0d
     c38:	3e 85       	ldd	r19, Y+14	; 0x0e
     c3a:	4f 85       	ldd	r20, Y+15	; 0x0f
     c3c:	58 89       	ldd	r21, Y+16	; 0x10
     c3e:	6d 81       	ldd	r22, Y+5	; 0x05
     c40:	7e 81       	ldd	r23, Y+6	; 0x06
     c42:	8f 81       	ldd	r24, Y+7	; 0x07
     c44:	98 85       	ldd	r25, Y+8	; 0x08
     c46:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
     c4a:	4b 01       	movw	r8, r22
     c4c:	5c 01       	movw	r10, r24
     c4e:	a7 01       	movw	r20, r14
     c50:	96 01       	movw	r18, r12
     c52:	69 89       	ldd	r22, Y+17	; 0x11
     c54:	7a 89       	ldd	r23, Y+18	; 0x12
     c56:	8b 89       	ldd	r24, Y+19	; 0x13
     c58:	9c 89       	ldd	r25, Y+20	; 0x14
     c5a:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
     c5e:	9b 01       	movw	r18, r22
     c60:	ac 01       	movw	r20, r24
     c62:	c5 01       	movw	r24, r10
     c64:	b4 01       	movw	r22, r8
     c66:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <__subsf3>
     c6a:	4b 01       	movw	r8, r22
     c6c:	5c 01       	movw	r10, r24
     c6e:	a3 01       	movw	r20, r6
     c70:	92 01       	movw	r18, r4
     c72:	69 81       	ldd	r22, Y+1	; 0x01
     c74:	7a 81       	ldd	r23, Y+2	; 0x02
     c76:	8b 81       	ldd	r24, Y+3	; 0x03
     c78:	9c 81       	ldd	r25, Y+4	; 0x04
     c7a:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
     c7e:	9b 01       	movw	r18, r22
     c80:	ac 01       	movw	r20, r24
     c82:	c5 01       	movw	r24, r10
     c84:	b4 01       	movw	r22, r8
     c86:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
     c8a:	29 85       	ldd	r18, Y+9	; 0x09
     c8c:	3a 85       	ldd	r19, Y+10	; 0x0a
     c8e:	4b 85       	ldd	r20, Y+11	; 0x0b
     c90:	5c 85       	ldd	r21, Y+12	; 0x0c
     c92:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
     c96:	69 8f       	std	Y+25, r22	; 0x19
     c98:	7a 8f       	std	Y+26, r23	; 0x1a
     c9a:	8b 8f       	std	Y+27, r24	; 0x1b
     c9c:	9c 8f       	std	Y+28, r25	; 0x1c
    q3 += (qa * gz + qb * gy - qc * gx);
     c9e:	2d 85       	ldd	r18, Y+13	; 0x0d
     ca0:	3e 85       	ldd	r19, Y+14	; 0x0e
     ca2:	4f 85       	ldd	r20, Y+15	; 0x0f
     ca4:	58 89       	ldd	r21, Y+16	; 0x10
     ca6:	69 89       	ldd	r22, Y+17	; 0x11
     ca8:	7a 89       	ldd	r23, Y+18	; 0x12
     caa:	8b 89       	ldd	r24, Y+19	; 0x13
     cac:	9c 89       	ldd	r25, Y+20	; 0x14
     cae:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
     cb2:	4b 01       	movw	r8, r22
     cb4:	5c 01       	movw	r10, r24
     cb6:	a7 01       	movw	r20, r14
     cb8:	96 01       	movw	r18, r12
     cba:	6d 81       	ldd	r22, Y+5	; 0x05
     cbc:	7e 81       	ldd	r23, Y+6	; 0x06
     cbe:	8f 81       	ldd	r24, Y+7	; 0x07
     cc0:	98 85       	ldd	r25, Y+8	; 0x08
     cc2:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
     cc6:	9b 01       	movw	r18, r22
     cc8:	ac 01       	movw	r20, r24
     cca:	c5 01       	movw	r24, r10
     ccc:	b4 01       	movw	r22, r8
     cce:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
     cd2:	6b 01       	movw	r12, r22
     cd4:	7c 01       	movw	r14, r24
     cd6:	29 85       	ldd	r18, Y+9	; 0x09
     cd8:	3a 85       	ldd	r19, Y+10	; 0x0a
     cda:	4b 85       	ldd	r20, Y+11	; 0x0b
     cdc:	5c 85       	ldd	r21, Y+12	; 0x0c
     cde:	69 81       	ldd	r22, Y+1	; 0x01
     ce0:	7a 81       	ldd	r23, Y+2	; 0x02
     ce2:	8b 81       	ldd	r24, Y+3	; 0x03
     ce4:	9c 81       	ldd	r25, Y+4	; 0x04
     ce6:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
     cea:	9b 01       	movw	r18, r22
     cec:	ac 01       	movw	r20, r24
     cee:	c7 01       	movw	r24, r14
     cf0:	b6 01       	movw	r22, r12
     cf2:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <__subsf3>
     cf6:	a3 01       	movw	r20, r6
     cf8:	92 01       	movw	r18, r4
     cfa:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
     cfe:	4b 01       	movw	r8, r22
     d00:	5c 01       	movw	r10, r24

    // Normalise quaternion
    recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
     d02:	2d 89       	ldd	r18, Y+21	; 0x15
     d04:	3e 89       	ldd	r19, Y+22	; 0x16
     d06:	4f 89       	ldd	r20, Y+23	; 0x17
     d08:	58 8d       	ldd	r21, Y+24	; 0x18
     d0a:	ca 01       	movw	r24, r20
     d0c:	b9 01       	movw	r22, r18
     d0e:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
     d12:	6b 01       	movw	r12, r22
     d14:	7c 01       	movw	r14, r24
     d16:	2d 8d       	ldd	r18, Y+29	; 0x1d
     d18:	3e 8d       	ldd	r19, Y+30	; 0x1e
     d1a:	4f 8d       	ldd	r20, Y+31	; 0x1f
     d1c:	58 a1       	ldd	r21, Y+32	; 0x20
     d1e:	ca 01       	movw	r24, r20
     d20:	b9 01       	movw	r22, r18
     d22:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
     d26:	9b 01       	movw	r18, r22
     d28:	ac 01       	movw	r20, r24
     d2a:	c7 01       	movw	r24, r14
     d2c:	b6 01       	movw	r22, r12
     d2e:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
     d32:	6b 01       	movw	r12, r22
     d34:	7c 01       	movw	r14, r24
     d36:	29 8d       	ldd	r18, Y+25	; 0x19
     d38:	3a 8d       	ldd	r19, Y+26	; 0x1a
     d3a:	4b 8d       	ldd	r20, Y+27	; 0x1b
     d3c:	5c 8d       	ldd	r21, Y+28	; 0x1c
     d3e:	ca 01       	movw	r24, r20
     d40:	b9 01       	movw	r22, r18
     d42:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
     d46:	9b 01       	movw	r18, r22
     d48:	ac 01       	movw	r20, r24
     d4a:	c7 01       	movw	r24, r14
     d4c:	b6 01       	movw	r22, r12
     d4e:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
     d52:	6b 01       	movw	r12, r22
     d54:	7c 01       	movw	r14, r24
     d56:	a5 01       	movw	r20, r10
     d58:	94 01       	movw	r18, r8
     d5a:	c5 01       	movw	r24, r10
     d5c:	b4 01       	movw	r22, r8
     d5e:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
     d62:	9b 01       	movw	r18, r22
     d64:	ac 01       	movw	r20, r24
     d66:	c7 01       	movw	r24, r14
     d68:	b6 01       	movw	r22, r12
     d6a:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
     d6e:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <invSqrt>
     d72:	6b 01       	movw	r12, r22
     d74:	7c 01       	movw	r14, r24
    q0 *= recipNorm;
     d76:	9b 01       	movw	r18, r22
     d78:	ac 01       	movw	r20, r24
     d7a:	6d 89       	ldd	r22, Y+21	; 0x15
     d7c:	7e 89       	ldd	r23, Y+22	; 0x16
     d7e:	8f 89       	ldd	r24, Y+23	; 0x17
     d80:	98 8d       	ldd	r25, Y+24	; 0x18
     d82:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
     d86:	60 93 29 01 	sts	0x0129, r22	; 0x800129 <q0>
     d8a:	70 93 2a 01 	sts	0x012A, r23	; 0x80012a <q0+0x1>
     d8e:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <q0+0x2>
     d92:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <q0+0x3>
    q1 *= recipNorm;
     d96:	a7 01       	movw	r20, r14
     d98:	96 01       	movw	r18, r12
     d9a:	6d 8d       	ldd	r22, Y+29	; 0x1d
     d9c:	7e 8d       	ldd	r23, Y+30	; 0x1e
     d9e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     da0:	98 a1       	ldd	r25, Y+32	; 0x20
     da2:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
     da6:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <q1>
     daa:	70 93 26 01 	sts	0x0126, r23	; 0x800126 <q1+0x1>
     dae:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <q1+0x2>
     db2:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <q1+0x3>
    q2 *= recipNorm;
     db6:	a7 01       	movw	r20, r14
     db8:	96 01       	movw	r18, r12
     dba:	69 8d       	ldd	r22, Y+25	; 0x19
     dbc:	7a 8d       	ldd	r23, Y+26	; 0x1a
     dbe:	8b 8d       	ldd	r24, Y+27	; 0x1b
     dc0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dc2:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
     dc6:	60 93 21 01 	sts	0x0121, r22	; 0x800121 <q2>
     dca:	70 93 22 01 	sts	0x0122, r23	; 0x800122 <q2+0x1>
     dce:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <q2+0x2>
     dd2:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <q2+0x3>
    q3 *= recipNorm;
     dd6:	a7 01       	movw	r20, r14
     dd8:	96 01       	movw	r18, r12
     dda:	c5 01       	movw	r24, r10
     ddc:	b4 01       	movw	r22, r8
     dde:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
     de2:	60 93 1d 01 	sts	0x011D, r22	; 0x80011d <q3>
     de6:	70 93 1e 01 	sts	0x011E, r23	; 0x80011e <q3+0x1>
     dea:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <q3+0x2>
     dee:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <q3+0x3>
    anglesComputed = 0;
     df2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
}
     df6:	a4 96       	adiw	r28, 0x24	; 36
     df8:	0f b6       	in	r0, 0x3f	; 63
     dfa:	f8 94       	cli
     dfc:	de bf       	out	0x3e, r29	; 62
     dfe:	0f be       	out	0x3f, r0	; 63
     e00:	cd bf       	out	0x3d, r28	; 61
     e02:	df 91       	pop	r29
     e04:	cf 91       	pop	r28
     e06:	1f 91       	pop	r17
     e08:	0f 91       	pop	r16
     e0a:	ff 90       	pop	r15
     e0c:	ef 90       	pop	r14
     e0e:	df 90       	pop	r13
     e10:	cf 90       	pop	r12
     e12:	bf 90       	pop	r11
     e14:	af 90       	pop	r10
     e16:	9f 90       	pop	r9
     e18:	8f 90       	pop	r8
     e1a:	7f 90       	pop	r7
     e1c:	6f 90       	pop	r6
     e1e:	5f 90       	pop	r5
     e20:	4f 90       	pop	r4
     e22:	08 95       	ret

00000e24 <mahony_update>:
}

void begin(float sampleFrequency) { invSampleFreq = 1.0f / sampleFrequency; }

void mahony_update(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz)
{
     e24:	2f 92       	push	r2
     e26:	3f 92       	push	r3
     e28:	4f 92       	push	r4
     e2a:	5f 92       	push	r5
     e2c:	6f 92       	push	r6
     e2e:	7f 92       	push	r7
     e30:	8f 92       	push	r8
     e32:	9f 92       	push	r9
     e34:	af 92       	push	r10
     e36:	bf 92       	push	r11
     e38:	cf 92       	push	r12
     e3a:	df 92       	push	r13
     e3c:	ef 92       	push	r14
     e3e:	ff 92       	push	r15
     e40:	0f 93       	push	r16
     e42:	1f 93       	push	r17
     e44:	cf 93       	push	r28
     e46:	df 93       	push	r29
     e48:	cd b7       	in	r28, 0x3d	; 61
     e4a:	de b7       	in	r29, 0x3e	; 62
     e4c:	c4 55       	subi	r28, 0x54	; 84
     e4e:	d1 09       	sbc	r29, r1
     e50:	0f b6       	in	r0, 0x3f	; 63
     e52:	f8 94       	cli
     e54:	de bf       	out	0x3e, r29	; 62
     e56:	0f be       	out	0x3f, r0	; 63
     e58:	cd bf       	out	0x3d, r28	; 61
     e5a:	69 87       	std	Y+9, r22	; 0x09
     e5c:	7a 87       	std	Y+10, r23	; 0x0a
     e5e:	8b 87       	std	Y+11, r24	; 0x0b
     e60:	9c 87       	std	Y+12, r25	; 0x0c
     e62:	29 01       	movw	r4, r18
     e64:	3a 01       	movw	r6, r20
     e66:	e9 8a       	std	Y+17, r14	; 0x11
     e68:	fa 8a       	std	Y+18, r15	; 0x12
     e6a:	0b 8b       	std	Y+19, r16	; 0x13
     e6c:	1c 8b       	std	Y+20, r17	; 0x14
     e6e:	aa 96       	adiw	r28, 0x2a	; 42
     e70:	ff ac       	ldd	r15, Y+63	; 0x3f
     e72:	aa 97       	sbiw	r28, 0x2a	; 42
     e74:	ab 96       	adiw	r28, 0x2b	; 43
     e76:	ef ac       	ldd	r14, Y+63	; 0x3f
     e78:	ab 97       	sbiw	r28, 0x2b	; 43
     e7a:	ac 96       	adiw	r28, 0x2c	; 44
     e7c:	9f ac       	ldd	r9, Y+63	; 0x3f
     e7e:	ac 97       	sbiw	r28, 0x2c	; 44
     e80:	ad 96       	adiw	r28, 0x2d	; 45
     e82:	8f ac       	ldd	r8, Y+63	; 0x3f
     e84:	ad 97       	sbiw	r28, 0x2d	; 45
     e86:	ae 96       	adiw	r28, 0x2e	; 46
     e88:	1f ad       	ldd	r17, Y+63	; 0x3f
     e8a:	ae 97       	sbiw	r28, 0x2e	; 46
     e8c:	af 96       	adiw	r28, 0x2f	; 47
     e8e:	0f ad       	ldd	r16, Y+63	; 0x3f
     e90:	af 97       	sbiw	r28, 0x2f	; 47
     e92:	e0 96       	adiw	r28, 0x30	; 48
     e94:	3f ac       	ldd	r3, Y+63	; 0x3f
     e96:	e0 97       	sbiw	r28, 0x30	; 48
     e98:	e1 96       	adiw	r28, 0x31	; 49
     e9a:	2f ac       	ldd	r2, Y+63	; 0x3f
     e9c:	e1 97       	sbiw	r28, 0x31	; 49
    float halfex, halfey, halfez;
    float qa, qb, qc;

    // Use IMU algorithm if magnetometer measurement invalid
    // (avoids NaN in magnetometer normalisation)
    if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
     e9e:	20 e0       	ldi	r18, 0x00	; 0
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	a9 01       	movw	r20, r18
     ea4:	e5 96       	adiw	r28, 0x35	; 53
     ea6:	6c ad       	ldd	r22, Y+60	; 0x3c
     ea8:	7d ad       	ldd	r23, Y+61	; 0x3d
     eaa:	8e ad       	ldd	r24, Y+62	; 0x3e
     eac:	9f ad       	ldd	r25, Y+63	; 0x3f
     eae:	e5 97       	sbiw	r28, 0x35	; 53
     eb0:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <__cmpsf2>
     eb4:	81 11       	cpse	r24, r1
     eb6:	34 c0       	rjmp	.+104    	; 0xf20 <mahony_update+0xfc>
     eb8:	20 e0       	ldi	r18, 0x00	; 0
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	a9 01       	movw	r20, r18
     ebe:	e9 96       	adiw	r28, 0x39	; 57
     ec0:	6c ad       	ldd	r22, Y+60	; 0x3c
     ec2:	7d ad       	ldd	r23, Y+61	; 0x3d
     ec4:	8e ad       	ldd	r24, Y+62	; 0x3e
     ec6:	9f ad       	ldd	r25, Y+63	; 0x3f
     ec8:	e9 97       	sbiw	r28, 0x39	; 57
     eca:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <__cmpsf2>
     ece:	81 11       	cpse	r24, r1
     ed0:	27 c0       	rjmp	.+78     	; 0xf20 <mahony_update+0xfc>
     ed2:	20 e0       	ldi	r18, 0x00	; 0
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	a9 01       	movw	r20, r18
     ed8:	ed 96       	adiw	r28, 0x3d	; 61
     eda:	6c ad       	ldd	r22, Y+60	; 0x3c
     edc:	7d ad       	ldd	r23, Y+61	; 0x3d
     ede:	8e ad       	ldd	r24, Y+62	; 0x3e
     ee0:	9f ad       	ldd	r25, Y+63	; 0x3f
     ee2:	ed 97       	sbiw	r28, 0x3d	; 61
     ee4:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <__cmpsf2>
     ee8:	81 11       	cpse	r24, r1
     eea:	1a c0       	rjmp	.+52     	; 0xf20 <mahony_update+0xfc>
        mahony_updateIMU(gx, gy, gz, ax, ay, az);
     eec:	2f 92       	push	r2
     eee:	3f 92       	push	r3
     ef0:	0f 93       	push	r16
     ef2:	1f 93       	push	r17
     ef4:	8f 92       	push	r8
     ef6:	9f 92       	push	r9
     ef8:	ef 92       	push	r14
     efa:	ff 92       	push	r15
     efc:	e9 88       	ldd	r14, Y+17	; 0x11
     efe:	fa 88       	ldd	r15, Y+18	; 0x12
     f00:	0b 89       	ldd	r16, Y+19	; 0x13
     f02:	1c 89       	ldd	r17, Y+20	; 0x14
     f04:	a3 01       	movw	r20, r6
     f06:	92 01       	movw	r18, r4
     f08:	69 85       	ldd	r22, Y+9	; 0x09
     f0a:	7a 85       	ldd	r23, Y+10	; 0x0a
     f0c:	8b 85       	ldd	r24, Y+11	; 0x0b
     f0e:	9c 85       	ldd	r25, Y+12	; 0x0c
     f10:	0e 94 d7 02 	call	0x5ae	; 0x5ae <mahony_updateIMU>
        return;
     f14:	0f b6       	in	r0, 0x3f	; 63
     f16:	f8 94       	cli
     f18:	de bf       	out	0x3e, r29	; 62
     f1a:	0f be       	out	0x3f, r0	; 63
     f1c:	cd bf       	out	0x3d, r28	; 61
     f1e:	98 c6       	rjmp	.+3376   	; 0x1c50 <mahony_update+0xe2c>
    }

    // Convert gyroscope degrees/sec to radians/sec
    gx *= 0.0174533f;
     f20:	29 e3       	ldi	r18, 0x39	; 57
     f22:	3a ef       	ldi	r19, 0xFA	; 250
     f24:	4e e8       	ldi	r20, 0x8E	; 142
     f26:	5c e3       	ldi	r21, 0x3C	; 60
     f28:	69 85       	ldd	r22, Y+9	; 0x09
     f2a:	7a 85       	ldd	r23, Y+10	; 0x0a
     f2c:	8b 85       	ldd	r24, Y+11	; 0x0b
     f2e:	9c 85       	ldd	r25, Y+12	; 0x0c
     f30:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
     f34:	6d 8b       	std	Y+21, r22	; 0x15
     f36:	7e 8b       	std	Y+22, r23	; 0x16
     f38:	8f 8b       	std	Y+23, r24	; 0x17
     f3a:	98 8f       	std	Y+24, r25	; 0x18
    gy *= 0.0174533f;
     f3c:	29 e3       	ldi	r18, 0x39	; 57
     f3e:	3a ef       	ldi	r19, 0xFA	; 250
     f40:	4e e8       	ldi	r20, 0x8E	; 142
     f42:	5c e3       	ldi	r21, 0x3C	; 60
     f44:	c3 01       	movw	r24, r6
     f46:	b2 01       	movw	r22, r4
     f48:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
     f4c:	6d 8f       	std	Y+29, r22	; 0x1d
     f4e:	7e 8f       	std	Y+30, r23	; 0x1e
     f50:	8f 8f       	std	Y+31, r24	; 0x1f
     f52:	98 a3       	std	Y+32, r25	; 0x20
    gz *= 0.0174533f;
     f54:	29 e3       	ldi	r18, 0x39	; 57
     f56:	3a ef       	ldi	r19, 0xFA	; 250
     f58:	4e e8       	ldi	r20, 0x8E	; 142
     f5a:	5c e3       	ldi	r21, 0x3C	; 60
     f5c:	69 89       	ldd	r22, Y+17	; 0x11
     f5e:	7a 89       	ldd	r23, Y+18	; 0x12
     f60:	8b 89       	ldd	r24, Y+19	; 0x13
     f62:	9c 89       	ldd	r25, Y+20	; 0x14
     f64:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
     f68:	69 8b       	std	Y+17, r22	; 0x11
     f6a:	7a 8b       	std	Y+18, r23	; 0x12
     f6c:	8b 8b       	std	Y+19, r24	; 0x13
     f6e:	9c 8b       	std	Y+20, r25	; 0x14

    // Compute feedback only if accelerometer measurement valid
    // (avoids NaN in accelerometer normalisation)
    if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
     f70:	20 e0       	ldi	r18, 0x00	; 0
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	a9 01       	movw	r20, r18
     f76:	c6 01       	movw	r24, r12
     f78:	b5 01       	movw	r22, r10
     f7a:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <__cmpsf2>
     f7e:	81 11       	cpse	r24, r1
     f80:	17 c0       	rjmp	.+46     	; 0xfb0 <mahony_update+0x18c>
     f82:	20 e0       	ldi	r18, 0x00	; 0
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	a9 01       	movw	r20, r18
     f88:	6f 2d       	mov	r22, r15
     f8a:	7e 2d       	mov	r23, r14
     f8c:	89 2d       	mov	r24, r9
     f8e:	98 2d       	mov	r25, r8
     f90:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <__cmpsf2>
     f94:	81 11       	cpse	r24, r1
     f96:	0c c0       	rjmp	.+24     	; 0xfb0 <mahony_update+0x18c>
     f98:	20 e0       	ldi	r18, 0x00	; 0
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	a9 01       	movw	r20, r18
     f9e:	61 2f       	mov	r22, r17
     fa0:	70 2f       	mov	r23, r16
     fa2:	83 2d       	mov	r24, r3
     fa4:	92 2d       	mov	r25, r2
     fa6:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <__cmpsf2>
     faa:	88 23       	and	r24, r24
     fac:	09 f4       	brne	.+2      	; 0xfb0 <mahony_update+0x18c>
     fae:	ad c4       	rjmp	.+2394   	; 0x190a <mahony_update+0xae6>

        // Normalise accelerometer measurement
        recipNorm = invSqrt(ax * ax + ay * ay + az * az);
     fb0:	a6 01       	movw	r20, r12
     fb2:	95 01       	movw	r18, r10
     fb4:	c6 01       	movw	r24, r12
     fb6:	b5 01       	movw	r22, r10
     fb8:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
     fbc:	2b 01       	movw	r4, r22
     fbe:	3c 01       	movw	r6, r24
     fc0:	2f 2d       	mov	r18, r15
     fc2:	3e 2d       	mov	r19, r14
     fc4:	49 2d       	mov	r20, r9
     fc6:	58 2d       	mov	r21, r8
     fc8:	6f 2d       	mov	r22, r15
     fca:	7e 2d       	mov	r23, r14
     fcc:	89 2d       	mov	r24, r9
     fce:	98 2d       	mov	r25, r8
     fd0:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
     fd4:	9b 01       	movw	r18, r22
     fd6:	ac 01       	movw	r20, r24
     fd8:	c3 01       	movw	r24, r6
     fda:	b2 01       	movw	r22, r4
     fdc:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
     fe0:	2b 01       	movw	r4, r22
     fe2:	3c 01       	movw	r6, r24
     fe4:	21 2f       	mov	r18, r17
     fe6:	30 2f       	mov	r19, r16
     fe8:	43 2d       	mov	r20, r3
     fea:	52 2d       	mov	r21, r2
     fec:	61 2f       	mov	r22, r17
     fee:	70 2f       	mov	r23, r16
     ff0:	83 2d       	mov	r24, r3
     ff2:	92 2d       	mov	r25, r2
     ff4:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
     ff8:	9b 01       	movw	r18, r22
     ffa:	ac 01       	movw	r20, r24
     ffc:	c3 01       	movw	r24, r6
     ffe:	b2 01       	movw	r22, r4
    1000:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
    1004:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <invSqrt>
    1008:	2b 01       	movw	r4, r22
    100a:	3c 01       	movw	r6, r24
        ax *= recipNorm;
    100c:	9b 01       	movw	r18, r22
    100e:	ac 01       	movw	r20, r24
    1010:	c6 01       	movw	r24, r12
    1012:	b5 01       	movw	r22, r10
    1014:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    1018:	69 ab       	std	Y+49, r22	; 0x31
    101a:	7a ab       	std	Y+50, r23	; 0x32
    101c:	8b ab       	std	Y+51, r24	; 0x33
    101e:	9c ab       	std	Y+52, r25	; 0x34
        ay *= recipNorm;
    1020:	a3 01       	movw	r20, r6
    1022:	92 01       	movw	r18, r4
    1024:	6f 2d       	mov	r22, r15
    1026:	7e 2d       	mov	r23, r14
    1028:	89 2d       	mov	r24, r9
    102a:	98 2d       	mov	r25, r8
    102c:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    1030:	6d ab       	std	Y+53, r22	; 0x35
    1032:	7e ab       	std	Y+54, r23	; 0x36
    1034:	8f ab       	std	Y+55, r24	; 0x37
    1036:	98 af       	std	Y+56, r25	; 0x38
        az *= recipNorm;
    1038:	a3 01       	movw	r20, r6
    103a:	92 01       	movw	r18, r4
    103c:	61 2f       	mov	r22, r17
    103e:	70 2f       	mov	r23, r16
    1040:	83 2d       	mov	r24, r3
    1042:	92 2d       	mov	r25, r2
    1044:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    1048:	69 af       	std	Y+57, r22	; 0x39
    104a:	7a af       	std	Y+58, r23	; 0x3a
    104c:	8b af       	std	Y+59, r24	; 0x3b
    104e:	9c af       	std	Y+60, r25	; 0x3c

        // Normalise magnetometer measurement
        recipNorm = invSqrt(mx * mx + my * my + mz * mz);
    1050:	e5 96       	adiw	r28, 0x35	; 53
    1052:	2c ad       	ldd	r18, Y+60	; 0x3c
    1054:	3d ad       	ldd	r19, Y+61	; 0x3d
    1056:	4e ad       	ldd	r20, Y+62	; 0x3e
    1058:	5f ad       	ldd	r21, Y+63	; 0x3f
    105a:	e5 97       	sbiw	r28, 0x35	; 53
    105c:	ca 01       	movw	r24, r20
    105e:	b9 01       	movw	r22, r18
    1060:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    1064:	6b 01       	movw	r12, r22
    1066:	7c 01       	movw	r14, r24
    1068:	e9 96       	adiw	r28, 0x39	; 57
    106a:	2c ad       	ldd	r18, Y+60	; 0x3c
    106c:	3d ad       	ldd	r19, Y+61	; 0x3d
    106e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1070:	5f ad       	ldd	r21, Y+63	; 0x3f
    1072:	e9 97       	sbiw	r28, 0x39	; 57
    1074:	ca 01       	movw	r24, r20
    1076:	b9 01       	movw	r22, r18
    1078:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    107c:	9b 01       	movw	r18, r22
    107e:	ac 01       	movw	r20, r24
    1080:	c7 01       	movw	r24, r14
    1082:	b6 01       	movw	r22, r12
    1084:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
    1088:	6b 01       	movw	r12, r22
    108a:	7c 01       	movw	r14, r24
    108c:	ed 96       	adiw	r28, 0x3d	; 61
    108e:	2c ad       	ldd	r18, Y+60	; 0x3c
    1090:	3d ad       	ldd	r19, Y+61	; 0x3d
    1092:	4e ad       	ldd	r20, Y+62	; 0x3e
    1094:	5f ad       	ldd	r21, Y+63	; 0x3f
    1096:	ed 97       	sbiw	r28, 0x3d	; 61
    1098:	ca 01       	movw	r24, r20
    109a:	b9 01       	movw	r22, r18
    109c:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    10a0:	9b 01       	movw	r18, r22
    10a2:	ac 01       	movw	r20, r24
    10a4:	c7 01       	movw	r24, r14
    10a6:	b6 01       	movw	r22, r12
    10a8:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
    10ac:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <invSqrt>
    10b0:	6b 01       	movw	r12, r22
    10b2:	7c 01       	movw	r14, r24
        mx *= recipNorm;
    10b4:	9b 01       	movw	r18, r22
    10b6:	ac 01       	movw	r20, r24
    10b8:	e5 96       	adiw	r28, 0x35	; 53
    10ba:	6c ad       	ldd	r22, Y+60	; 0x3c
    10bc:	7d ad       	ldd	r23, Y+61	; 0x3d
    10be:	8e ad       	ldd	r24, Y+62	; 0x3e
    10c0:	9f ad       	ldd	r25, Y+63	; 0x3f
    10c2:	e5 97       	sbiw	r28, 0x35	; 53
    10c4:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    10c8:	69 87       	std	Y+9, r22	; 0x09
    10ca:	7a 87       	std	Y+10, r23	; 0x0a
    10cc:	8b 87       	std	Y+11, r24	; 0x0b
    10ce:	9c 87       	std	Y+12, r25	; 0x0c
        my *= recipNorm;
    10d0:	a7 01       	movw	r20, r14
    10d2:	96 01       	movw	r18, r12
    10d4:	e9 96       	adiw	r28, 0x39	; 57
    10d6:	6c ad       	ldd	r22, Y+60	; 0x3c
    10d8:	7d ad       	ldd	r23, Y+61	; 0x3d
    10da:	8e ad       	ldd	r24, Y+62	; 0x3e
    10dc:	9f ad       	ldd	r25, Y+63	; 0x3f
    10de:	e9 97       	sbiw	r28, 0x39	; 57
    10e0:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    10e4:	6d 83       	std	Y+5, r22	; 0x05
    10e6:	7e 83       	std	Y+6, r23	; 0x06
    10e8:	8f 83       	std	Y+7, r24	; 0x07
    10ea:	98 87       	std	Y+8, r25	; 0x08
        mz *= recipNorm;
    10ec:	a7 01       	movw	r20, r14
    10ee:	96 01       	movw	r18, r12
    10f0:	ed 96       	adiw	r28, 0x3d	; 61
    10f2:	6c ad       	ldd	r22, Y+60	; 0x3c
    10f4:	7d ad       	ldd	r23, Y+61	; 0x3d
    10f6:	8e ad       	ldd	r24, Y+62	; 0x3e
    10f8:	9f ad       	ldd	r25, Y+63	; 0x3f
    10fa:	ed 97       	sbiw	r28, 0x3d	; 61
    10fc:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    1100:	6d 87       	std	Y+13, r22	; 0x0d
    1102:	7e 87       	std	Y+14, r23	; 0x0e
    1104:	8f 87       	std	Y+15, r24	; 0x0f
    1106:	98 8b       	std	Y+16, r25	; 0x10

        // Auxiliary variables to avoid repeated arithmetic
        q0q0 = q0 * q0;
    1108:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <q0>
    110c:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <q0+0x1>
    1110:	a0 91 2b 01 	lds	r26, 0x012B	; 0x80012b <q0+0x2>
    1114:	b0 91 2c 01 	lds	r27, 0x012C	; 0x80012c <q0+0x3>
    1118:	89 83       	std	Y+1, r24	; 0x01
    111a:	9a 83       	std	Y+2, r25	; 0x02
    111c:	ab 83       	std	Y+3, r26	; 0x03
    111e:	bc 83       	std	Y+4, r27	; 0x04
        q0q1 = q0 * q1;
    1120:	c0 90 25 01 	lds	r12, 0x0125	; 0x800125 <q1>
    1124:	d0 90 26 01 	lds	r13, 0x0126	; 0x800126 <q1+0x1>
    1128:	e0 90 27 01 	lds	r14, 0x0127	; 0x800127 <q1+0x2>
    112c:	f0 90 28 01 	lds	r15, 0x0128	; 0x800128 <q1+0x3>
    1130:	a7 01       	movw	r20, r14
    1132:	96 01       	movw	r18, r12
    1134:	bc 01       	movw	r22, r24
    1136:	cd 01       	movw	r24, r26
    1138:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    113c:	6d a3       	std	Y+37, r22	; 0x25
    113e:	7e a3       	std	Y+38, r23	; 0x26
    1140:	8f a3       	std	Y+39, r24	; 0x27
    1142:	98 a7       	std	Y+40, r25	; 0x28
        q0q2 = q0 * q2;
    1144:	40 90 21 01 	lds	r4, 0x0121	; 0x800121 <q2>
    1148:	50 90 22 01 	lds	r5, 0x0122	; 0x800122 <q2+0x1>
    114c:	60 90 23 01 	lds	r6, 0x0123	; 0x800123 <q2+0x2>
    1150:	70 90 24 01 	lds	r7, 0x0124	; 0x800124 <q2+0x3>
    1154:	a3 01       	movw	r20, r6
    1156:	92 01       	movw	r18, r4
    1158:	69 81       	ldd	r22, Y+1	; 0x01
    115a:	7a 81       	ldd	r23, Y+2	; 0x02
    115c:	8b 81       	ldd	r24, Y+3	; 0x03
    115e:	9c 81       	ldd	r25, Y+4	; 0x04
    1160:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    1164:	69 a3       	std	Y+33, r22	; 0x21
    1166:	7a a3       	std	Y+34, r23	; 0x22
    1168:	8b a3       	std	Y+35, r24	; 0x23
    116a:	9c a3       	std	Y+36, r25	; 0x24
        q0q3 = q0 * q3;
    116c:	80 90 1d 01 	lds	r8, 0x011D	; 0x80011d <q3>
    1170:	90 90 1e 01 	lds	r9, 0x011E	; 0x80011e <q3+0x1>
    1174:	a0 90 1f 01 	lds	r10, 0x011F	; 0x80011f <q3+0x2>
    1178:	b0 90 20 01 	lds	r11, 0x0120	; 0x800120 <q3+0x3>
    117c:	a5 01       	movw	r20, r10
    117e:	94 01       	movw	r18, r8
    1180:	69 81       	ldd	r22, Y+1	; 0x01
    1182:	7a 81       	ldd	r23, Y+2	; 0x02
    1184:	8b 81       	ldd	r24, Y+3	; 0x03
    1186:	9c 81       	ldd	r25, Y+4	; 0x04
    1188:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    118c:	69 8f       	std	Y+25, r22	; 0x19
    118e:	7a 8f       	std	Y+26, r23	; 0x1a
    1190:	8b 8f       	std	Y+27, r24	; 0x1b
    1192:	9c 8f       	std	Y+28, r25	; 0x1c
        q1q1 = q1 * q1;
        q1q2 = q1 * q2;
    1194:	a3 01       	movw	r20, r6
    1196:	92 01       	movw	r18, r4
    1198:	c7 01       	movw	r24, r14
    119a:	b6 01       	movw	r22, r12
    119c:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    11a0:	69 a7       	std	Y+41, r22	; 0x29
    11a2:	7a a7       	std	Y+42, r23	; 0x2a
    11a4:	8b a7       	std	Y+43, r24	; 0x2b
    11a6:	9c a7       	std	Y+44, r25	; 0x2c
        q1q3 = q1 * q3;
    11a8:	a5 01       	movw	r20, r10
    11aa:	94 01       	movw	r18, r8
    11ac:	c7 01       	movw	r24, r14
    11ae:	b6 01       	movw	r22, r12
    11b0:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    11b4:	6d a7       	std	Y+45, r22	; 0x2d
    11b6:	7e a7       	std	Y+46, r23	; 0x2e
    11b8:	8f a7       	std	Y+47, r24	; 0x2f
    11ba:	98 ab       	std	Y+48, r25	; 0x30
        q2q2 = q2 * q2;
    11bc:	a3 01       	movw	r20, r6
    11be:	92 01       	movw	r18, r4
    11c0:	c3 01       	movw	r24, r6
    11c2:	b2 01       	movw	r22, r4
    11c4:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    11c8:	21 96       	adiw	r28, 0x01	; 1
    11ca:	6c af       	std	Y+60, r22	; 0x3c
    11cc:	7d af       	std	Y+61, r23	; 0x3d
    11ce:	8e af       	std	Y+62, r24	; 0x3e
    11d0:	9f af       	std	Y+63, r25	; 0x3f
    11d2:	21 97       	sbiw	r28, 0x01	; 1
        q2q3 = q2 * q3;
    11d4:	a5 01       	movw	r20, r10
    11d6:	94 01       	movw	r18, r8
    11d8:	c3 01       	movw	r24, r6
    11da:	b2 01       	movw	r22, r4
    11dc:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    11e0:	25 96       	adiw	r28, 0x05	; 5
    11e2:	6c af       	std	Y+60, r22	; 0x3c
    11e4:	7d af       	std	Y+61, r23	; 0x3d
    11e6:	8e af       	std	Y+62, r24	; 0x3e
    11e8:	9f af       	std	Y+63, r25	; 0x3f
    11ea:	25 97       	sbiw	r28, 0x05	; 5
        q3q3 = q3 * q3;
    11ec:	a5 01       	movw	r20, r10
    11ee:	94 01       	movw	r18, r8
    11f0:	c5 01       	movw	r24, r10
    11f2:	b4 01       	movw	r22, r8
    11f4:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    11f8:	2b 01       	movw	r4, r22
    11fa:	3c 01       	movw	r6, r24

        // Reference direction of Earth's magnetic field
        hx = 2.0f * (mx * (0.5f - q2q2 - q3q3) + my * (q1q2 - q0q3) + mz * (q1q3 + q0q2));
    11fc:	21 96       	adiw	r28, 0x01	; 1
    11fe:	2c ad       	ldd	r18, Y+60	; 0x3c
    1200:	3d ad       	ldd	r19, Y+61	; 0x3d
    1202:	4e ad       	ldd	r20, Y+62	; 0x3e
    1204:	5f ad       	ldd	r21, Y+63	; 0x3f
    1206:	21 97       	sbiw	r28, 0x01	; 1
    1208:	60 e0       	ldi	r22, 0x00	; 0
    120a:	70 e0       	ldi	r23, 0x00	; 0
    120c:	80 e0       	ldi	r24, 0x00	; 0
    120e:	9f e3       	ldi	r25, 0x3F	; 63
    1210:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <__subsf3>
    1214:	a3 01       	movw	r20, r6
    1216:	92 01       	movw	r18, r4
    1218:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <__subsf3>
    121c:	29 96       	adiw	r28, 0x09	; 9
    121e:	6c af       	std	Y+60, r22	; 0x3c
    1220:	7d af       	std	Y+61, r23	; 0x3d
    1222:	8e af       	std	Y+62, r24	; 0x3e
    1224:	9f af       	std	Y+63, r25	; 0x3f
    1226:	29 97       	sbiw	r28, 0x09	; 9
    1228:	29 8d       	ldd	r18, Y+25	; 0x19
    122a:	3a 8d       	ldd	r19, Y+26	; 0x1a
    122c:	4b 8d       	ldd	r20, Y+27	; 0x1b
    122e:	5c 8d       	ldd	r21, Y+28	; 0x1c
    1230:	69 a5       	ldd	r22, Y+41	; 0x29
    1232:	7a a5       	ldd	r23, Y+42	; 0x2a
    1234:	8b a5       	ldd	r24, Y+43	; 0x2b
    1236:	9c a5       	ldd	r25, Y+44	; 0x2c
    1238:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <__subsf3>
    123c:	2d 96       	adiw	r28, 0x0d	; 13
    123e:	6c af       	std	Y+60, r22	; 0x3c
    1240:	7d af       	std	Y+61, r23	; 0x3d
    1242:	8e af       	std	Y+62, r24	; 0x3e
    1244:	9f af       	std	Y+63, r25	; 0x3f
    1246:	2d 97       	sbiw	r28, 0x0d	; 13
    1248:	2d a5       	ldd	r18, Y+45	; 0x2d
    124a:	3e a5       	ldd	r19, Y+46	; 0x2e
    124c:	4f a5       	ldd	r20, Y+47	; 0x2f
    124e:	58 a9       	ldd	r21, Y+48	; 0x30
    1250:	69 a1       	ldd	r22, Y+33	; 0x21
    1252:	7a a1       	ldd	r23, Y+34	; 0x22
    1254:	8b a1       	ldd	r24, Y+35	; 0x23
    1256:	9c a1       	ldd	r25, Y+36	; 0x24
    1258:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
    125c:	61 96       	adiw	r28, 0x11	; 17
    125e:	6c af       	std	Y+60, r22	; 0x3c
    1260:	7d af       	std	Y+61, r23	; 0x3d
    1262:	8e af       	std	Y+62, r24	; 0x3e
    1264:	9f af       	std	Y+63, r25	; 0x3f
    1266:	61 97       	sbiw	r28, 0x11	; 17
    1268:	29 96       	adiw	r28, 0x09	; 9
    126a:	2c ad       	ldd	r18, Y+60	; 0x3c
    126c:	3d ad       	ldd	r19, Y+61	; 0x3d
    126e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1270:	5f ad       	ldd	r21, Y+63	; 0x3f
    1272:	29 97       	sbiw	r28, 0x09	; 9
    1274:	69 85       	ldd	r22, Y+9	; 0x09
    1276:	7a 85       	ldd	r23, Y+10	; 0x0a
    1278:	8b 85       	ldd	r24, Y+11	; 0x0b
    127a:	9c 85       	ldd	r25, Y+12	; 0x0c
    127c:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    1280:	4b 01       	movw	r8, r22
    1282:	5c 01       	movw	r10, r24
    1284:	2d 96       	adiw	r28, 0x0d	; 13
    1286:	2c ad       	ldd	r18, Y+60	; 0x3c
    1288:	3d ad       	ldd	r19, Y+61	; 0x3d
    128a:	4e ad       	ldd	r20, Y+62	; 0x3e
    128c:	5f ad       	ldd	r21, Y+63	; 0x3f
    128e:	2d 97       	sbiw	r28, 0x0d	; 13
    1290:	6d 81       	ldd	r22, Y+5	; 0x05
    1292:	7e 81       	ldd	r23, Y+6	; 0x06
    1294:	8f 81       	ldd	r24, Y+7	; 0x07
    1296:	98 85       	ldd	r25, Y+8	; 0x08
    1298:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    129c:	9b 01       	movw	r18, r22
    129e:	ac 01       	movw	r20, r24
    12a0:	c5 01       	movw	r24, r10
    12a2:	b4 01       	movw	r22, r8
    12a4:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
    12a8:	4b 01       	movw	r8, r22
    12aa:	5c 01       	movw	r10, r24
    12ac:	61 96       	adiw	r28, 0x11	; 17
    12ae:	2c ad       	ldd	r18, Y+60	; 0x3c
    12b0:	3d ad       	ldd	r19, Y+61	; 0x3d
    12b2:	4e ad       	ldd	r20, Y+62	; 0x3e
    12b4:	5f ad       	ldd	r21, Y+63	; 0x3f
    12b6:	61 97       	sbiw	r28, 0x11	; 17
    12b8:	6d 85       	ldd	r22, Y+13	; 0x0d
    12ba:	7e 85       	ldd	r23, Y+14	; 0x0e
    12bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    12be:	98 89       	ldd	r25, Y+16	; 0x10
    12c0:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    12c4:	9b 01       	movw	r18, r22
    12c6:	ac 01       	movw	r20, r24
    12c8:	c5 01       	movw	r24, r10
    12ca:	b4 01       	movw	r22, r8
    12cc:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
    12d0:	9b 01       	movw	r18, r22
    12d2:	ac 01       	movw	r20, r24
    12d4:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
    12d8:	4b 01       	movw	r8, r22
    12da:	5c 01       	movw	r10, r24
        hy = 2.0f * (mx * (q1q2 + q0q3) + my * (0.5f - q1q1 - q3q3) + mz * (q2q3 - q0q1));
    12dc:	a7 01       	movw	r20, r14
    12de:	96 01       	movw	r18, r12
    12e0:	c7 01       	movw	r24, r14
    12e2:	b6 01       	movw	r22, r12
    12e4:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    12e8:	9b 01       	movw	r18, r22
    12ea:	ac 01       	movw	r20, r24
    12ec:	60 e0       	ldi	r22, 0x00	; 0
    12ee:	70 e0       	ldi	r23, 0x00	; 0
    12f0:	80 e0       	ldi	r24, 0x00	; 0
    12f2:	9f e3       	ldi	r25, 0x3F	; 63
    12f4:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <__subsf3>
    12f8:	65 96       	adiw	r28, 0x15	; 21
    12fa:	6c af       	std	Y+60, r22	; 0x3c
    12fc:	7d af       	std	Y+61, r23	; 0x3d
    12fe:	8e af       	std	Y+62, r24	; 0x3e
    1300:	9f af       	std	Y+63, r25	; 0x3f
    1302:	65 97       	sbiw	r28, 0x15	; 21
    1304:	29 a5       	ldd	r18, Y+41	; 0x29
    1306:	3a a5       	ldd	r19, Y+42	; 0x2a
    1308:	4b a5       	ldd	r20, Y+43	; 0x2b
    130a:	5c a5       	ldd	r21, Y+44	; 0x2c
    130c:	69 8d       	ldd	r22, Y+25	; 0x19
    130e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1310:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1312:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1314:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
    1318:	29 85       	ldd	r18, Y+9	; 0x09
    131a:	3a 85       	ldd	r19, Y+10	; 0x0a
    131c:	4b 85       	ldd	r20, Y+11	; 0x0b
    131e:	5c 85       	ldd	r21, Y+12	; 0x0c
    1320:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    1324:	6b 01       	movw	r12, r22
    1326:	7c 01       	movw	r14, r24
    1328:	a3 01       	movw	r20, r6
    132a:	92 01       	movw	r18, r4
    132c:	65 96       	adiw	r28, 0x15	; 21
    132e:	6c ad       	ldd	r22, Y+60	; 0x3c
    1330:	7d ad       	ldd	r23, Y+61	; 0x3d
    1332:	8e ad       	ldd	r24, Y+62	; 0x3e
    1334:	9f ad       	ldd	r25, Y+63	; 0x3f
    1336:	65 97       	sbiw	r28, 0x15	; 21
    1338:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <__subsf3>
    133c:	2d 81       	ldd	r18, Y+5	; 0x05
    133e:	3e 81       	ldd	r19, Y+6	; 0x06
    1340:	4f 81       	ldd	r20, Y+7	; 0x07
    1342:	58 85       	ldd	r21, Y+8	; 0x08
    1344:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    1348:	9b 01       	movw	r18, r22
    134a:	ac 01       	movw	r20, r24
    134c:	c7 01       	movw	r24, r14
    134e:	b6 01       	movw	r22, r12
    1350:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
    1354:	6b 01       	movw	r12, r22
    1356:	7c 01       	movw	r14, r24
    1358:	2d a1       	ldd	r18, Y+37	; 0x25
    135a:	3e a1       	ldd	r19, Y+38	; 0x26
    135c:	4f a1       	ldd	r20, Y+39	; 0x27
    135e:	58 a5       	ldd	r21, Y+40	; 0x28
    1360:	25 96       	adiw	r28, 0x05	; 5
    1362:	6c ad       	ldd	r22, Y+60	; 0x3c
    1364:	7d ad       	ldd	r23, Y+61	; 0x3d
    1366:	8e ad       	ldd	r24, Y+62	; 0x3e
    1368:	9f ad       	ldd	r25, Y+63	; 0x3f
    136a:	25 97       	sbiw	r28, 0x05	; 5
    136c:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <__subsf3>
    1370:	2d 85       	ldd	r18, Y+13	; 0x0d
    1372:	3e 85       	ldd	r19, Y+14	; 0x0e
    1374:	4f 85       	ldd	r20, Y+15	; 0x0f
    1376:	58 89       	ldd	r21, Y+16	; 0x10
    1378:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    137c:	9b 01       	movw	r18, r22
    137e:	ac 01       	movw	r20, r24
    1380:	c7 01       	movw	r24, r14
    1382:	b6 01       	movw	r22, r12
    1384:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
    1388:	9b 01       	movw	r18, r22
    138a:	ac 01       	movw	r20, r24
    138c:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
    1390:	6b 01       	movw	r12, r22
    1392:	7c 01       	movw	r14, r24
        bx = sqrtf(hx * hx + hy * hy);
    1394:	a5 01       	movw	r20, r10
    1396:	94 01       	movw	r18, r8
    1398:	c5 01       	movw	r24, r10
    139a:	b4 01       	movw	r22, r8
    139c:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    13a0:	69 8f       	std	Y+25, r22	; 0x19
    13a2:	7a 8f       	std	Y+26, r23	; 0x1a
    13a4:	8b 8f       	std	Y+27, r24	; 0x1b
    13a6:	9c 8f       	std	Y+28, r25	; 0x1c
    13a8:	a5 01       	movw	r20, r10
    13aa:	94 01       	movw	r18, r8
    13ac:	c5 01       	movw	r24, r10
    13ae:	b4 01       	movw	r22, r8
    13b0:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    13b4:	4b 01       	movw	r8, r22
    13b6:	5c 01       	movw	r10, r24
    13b8:	a7 01       	movw	r20, r14
    13ba:	96 01       	movw	r18, r12
    13bc:	c7 01       	movw	r24, r14
    13be:	b6 01       	movw	r22, r12
    13c0:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    13c4:	9b 01       	movw	r18, r22
    13c6:	ac 01       	movw	r20, r24
    13c8:	c5 01       	movw	r24, r10
    13ca:	b4 01       	movw	r22, r8
    13cc:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
    13d0:	0e 94 a2 18 	call	0x3144	; 0x3144 <sqrt>
    13d4:	4b 01       	movw	r8, r22
    13d6:	5c 01       	movw	r10, r24
        bz = 2.0f * (mx * (q1q3 - q0q2) + my * (q2q3 + q0q1) + mz * (0.5f - q1q1 - q2q2));
    13d8:	29 a1       	ldd	r18, Y+33	; 0x21
    13da:	3a a1       	ldd	r19, Y+34	; 0x22
    13dc:	4b a1       	ldd	r20, Y+35	; 0x23
    13de:	5c a1       	ldd	r21, Y+36	; 0x24
    13e0:	6d a5       	ldd	r22, Y+45	; 0x2d
    13e2:	7e a5       	ldd	r23, Y+46	; 0x2e
    13e4:	8f a5       	ldd	r24, Y+47	; 0x2f
    13e6:	98 a9       	ldd	r25, Y+48	; 0x30
    13e8:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <__subsf3>
    13ec:	69 a3       	std	Y+33, r22	; 0x21
    13ee:	7a a3       	std	Y+34, r23	; 0x22
    13f0:	8b a3       	std	Y+35, r24	; 0x23
    13f2:	9c a3       	std	Y+36, r25	; 0x24
    13f4:	25 96       	adiw	r28, 0x05	; 5
    13f6:	2c ad       	ldd	r18, Y+60	; 0x3c
    13f8:	3d ad       	ldd	r19, Y+61	; 0x3d
    13fa:	4e ad       	ldd	r20, Y+62	; 0x3e
    13fc:	5f ad       	ldd	r21, Y+63	; 0x3f
    13fe:	25 97       	sbiw	r28, 0x05	; 5
    1400:	6d a1       	ldd	r22, Y+37	; 0x25
    1402:	7e a1       	ldd	r23, Y+38	; 0x26
    1404:	8f a1       	ldd	r24, Y+39	; 0x27
    1406:	98 a5       	ldd	r25, Y+40	; 0x28
    1408:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
    140c:	6d a3       	std	Y+37, r22	; 0x25
    140e:	7e a3       	std	Y+38, r23	; 0x26
    1410:	8f a3       	std	Y+39, r24	; 0x27
    1412:	98 a7       	std	Y+40, r25	; 0x28
    1414:	21 96       	adiw	r28, 0x01	; 1
    1416:	2c ad       	ldd	r18, Y+60	; 0x3c
    1418:	3d ad       	ldd	r19, Y+61	; 0x3d
    141a:	4e ad       	ldd	r20, Y+62	; 0x3e
    141c:	5f ad       	ldd	r21, Y+63	; 0x3f
    141e:	21 97       	sbiw	r28, 0x01	; 1
    1420:	65 96       	adiw	r28, 0x15	; 21
    1422:	6c ad       	ldd	r22, Y+60	; 0x3c
    1424:	7d ad       	ldd	r23, Y+61	; 0x3d
    1426:	8e ad       	ldd	r24, Y+62	; 0x3e
    1428:	9f ad       	ldd	r25, Y+63	; 0x3f
    142a:	65 97       	sbiw	r28, 0x15	; 21
    142c:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <__subsf3>
    1430:	69 8f       	std	Y+25, r22	; 0x19
    1432:	7a 8f       	std	Y+26, r23	; 0x1a
    1434:	8b 8f       	std	Y+27, r24	; 0x1b
    1436:	9c 8f       	std	Y+28, r25	; 0x1c
    1438:	29 a1       	ldd	r18, Y+33	; 0x21
    143a:	3a a1       	ldd	r19, Y+34	; 0x22
    143c:	4b a1       	ldd	r20, Y+35	; 0x23
    143e:	5c a1       	ldd	r21, Y+36	; 0x24
    1440:	69 85       	ldd	r22, Y+9	; 0x09
    1442:	7a 85       	ldd	r23, Y+10	; 0x0a
    1444:	8b 85       	ldd	r24, Y+11	; 0x0b
    1446:	9c 85       	ldd	r25, Y+12	; 0x0c
    1448:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    144c:	6b 01       	movw	r12, r22
    144e:	7c 01       	movw	r14, r24
    1450:	2d a1       	ldd	r18, Y+37	; 0x25
    1452:	3e a1       	ldd	r19, Y+38	; 0x26
    1454:	4f a1       	ldd	r20, Y+39	; 0x27
    1456:	58 a5       	ldd	r21, Y+40	; 0x28
    1458:	6d 81       	ldd	r22, Y+5	; 0x05
    145a:	7e 81       	ldd	r23, Y+6	; 0x06
    145c:	8f 81       	ldd	r24, Y+7	; 0x07
    145e:	98 85       	ldd	r25, Y+8	; 0x08
    1460:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    1464:	9b 01       	movw	r18, r22
    1466:	ac 01       	movw	r20, r24
    1468:	c7 01       	movw	r24, r14
    146a:	b6 01       	movw	r22, r12
    146c:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
    1470:	6b 01       	movw	r12, r22
    1472:	7c 01       	movw	r14, r24
    1474:	29 8d       	ldd	r18, Y+25	; 0x19
    1476:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1478:	4b 8d       	ldd	r20, Y+27	; 0x1b
    147a:	5c 8d       	ldd	r21, Y+28	; 0x1c
    147c:	6d 85       	ldd	r22, Y+13	; 0x0d
    147e:	7e 85       	ldd	r23, Y+14	; 0x0e
    1480:	8f 85       	ldd	r24, Y+15	; 0x0f
    1482:	98 89       	ldd	r25, Y+16	; 0x10
    1484:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    1488:	9b 01       	movw	r18, r22
    148a:	ac 01       	movw	r20, r24
    148c:	c7 01       	movw	r24, r14
    148e:	b6 01       	movw	r22, r12
    1490:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
    1494:	9b 01       	movw	r18, r22
    1496:	ac 01       	movw	r20, r24
    1498:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
    149c:	6b 01       	movw	r12, r22
    149e:	7c 01       	movw	r14, r24

        // Estimated direction of gravity and magnetic field
        halfvx = q1q3 - q0q2;
        halfvy = q0q1 + q2q3;
        halfvz = q0q0 - 0.5f + q3q3;
    14a0:	29 81       	ldd	r18, Y+1	; 0x01
    14a2:	3a 81       	ldd	r19, Y+2	; 0x02
    14a4:	4b 81       	ldd	r20, Y+3	; 0x03
    14a6:	5c 81       	ldd	r21, Y+4	; 0x04
    14a8:	ca 01       	movw	r24, r20
    14aa:	b9 01       	movw	r22, r18
    14ac:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    14b0:	20 e0       	ldi	r18, 0x00	; 0
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	40 e0       	ldi	r20, 0x00	; 0
    14b6:	5f e3       	ldi	r21, 0x3F	; 63
    14b8:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <__subsf3>
    14bc:	a3 01       	movw	r20, r6
    14be:	92 01       	movw	r18, r4
    14c0:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
    14c4:	69 83       	std	Y+1, r22	; 0x01
    14c6:	7a 83       	std	Y+2, r23	; 0x02
    14c8:	8b 83       	std	Y+3, r24	; 0x03
    14ca:	9c 83       	std	Y+4, r25	; 0x04
        halfwx = bx * (0.5f - q2q2 - q3q3) + bz * (q1q3 - q0q2);
    14cc:	a5 01       	movw	r20, r10
    14ce:	94 01       	movw	r18, r8
    14d0:	29 96       	adiw	r28, 0x09	; 9
    14d2:	6c ad       	ldd	r22, Y+60	; 0x3c
    14d4:	7d ad       	ldd	r23, Y+61	; 0x3d
    14d6:	8e ad       	ldd	r24, Y+62	; 0x3e
    14d8:	9f ad       	ldd	r25, Y+63	; 0x3f
    14da:	29 97       	sbiw	r28, 0x09	; 9
    14dc:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    14e0:	2b 01       	movw	r4, r22
    14e2:	3c 01       	movw	r6, r24
    14e4:	a7 01       	movw	r20, r14
    14e6:	96 01       	movw	r18, r12
    14e8:	69 a1       	ldd	r22, Y+33	; 0x21
    14ea:	7a a1       	ldd	r23, Y+34	; 0x22
    14ec:	8b a1       	ldd	r24, Y+35	; 0x23
    14ee:	9c a1       	ldd	r25, Y+36	; 0x24
    14f0:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    14f4:	9b 01       	movw	r18, r22
    14f6:	ac 01       	movw	r20, r24
    14f8:	c3 01       	movw	r24, r6
    14fa:	b2 01       	movw	r22, r4
    14fc:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
    1500:	69 a7       	std	Y+41, r22	; 0x29
    1502:	7a a7       	std	Y+42, r23	; 0x2a
    1504:	8b a7       	std	Y+43, r24	; 0x2b
    1506:	9c a7       	std	Y+44, r25	; 0x2c
        halfwy = bx * (q1q2 - q0q3) + bz * (q0q1 + q2q3);
    1508:	a5 01       	movw	r20, r10
    150a:	94 01       	movw	r18, r8
    150c:	2d 96       	adiw	r28, 0x0d	; 13
    150e:	6c ad       	ldd	r22, Y+60	; 0x3c
    1510:	7d ad       	ldd	r23, Y+61	; 0x3d
    1512:	8e ad       	ldd	r24, Y+62	; 0x3e
    1514:	9f ad       	ldd	r25, Y+63	; 0x3f
    1516:	2d 97       	sbiw	r28, 0x0d	; 13
    1518:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    151c:	2b 01       	movw	r4, r22
    151e:	3c 01       	movw	r6, r24
    1520:	a7 01       	movw	r20, r14
    1522:	96 01       	movw	r18, r12
    1524:	6d a1       	ldd	r22, Y+37	; 0x25
    1526:	7e a1       	ldd	r23, Y+38	; 0x26
    1528:	8f a1       	ldd	r24, Y+39	; 0x27
    152a:	98 a5       	ldd	r25, Y+40	; 0x28
    152c:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    1530:	9b 01       	movw	r18, r22
    1532:	ac 01       	movw	r20, r24
    1534:	c3 01       	movw	r24, r6
    1536:	b2 01       	movw	r22, r4
    1538:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
    153c:	6d a7       	std	Y+45, r22	; 0x2d
    153e:	7e a7       	std	Y+46, r23	; 0x2e
    1540:	8f a7       	std	Y+47, r24	; 0x2f
    1542:	98 ab       	std	Y+48, r25	; 0x30
        halfwz = bx * (q0q2 + q1q3) + bz * (0.5f - q1q1 - q2q2);
    1544:	a5 01       	movw	r20, r10
    1546:	94 01       	movw	r18, r8
    1548:	61 96       	adiw	r28, 0x11	; 17
    154a:	6c ad       	ldd	r22, Y+60	; 0x3c
    154c:	7d ad       	ldd	r23, Y+61	; 0x3d
    154e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1550:	9f ad       	ldd	r25, Y+63	; 0x3f
    1552:	61 97       	sbiw	r28, 0x11	; 17
    1554:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    1558:	2b 01       	movw	r4, r22
    155a:	3c 01       	movw	r6, r24
    155c:	a7 01       	movw	r20, r14
    155e:	96 01       	movw	r18, r12
    1560:	69 8d       	ldd	r22, Y+25	; 0x19
    1562:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1564:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1566:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1568:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    156c:	9b 01       	movw	r18, r22
    156e:	ac 01       	movw	r20, r24
    1570:	c3 01       	movw	r24, r6
    1572:	b2 01       	movw	r22, r4
    1574:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
    1578:	6b 01       	movw	r12, r22
    157a:	7c 01       	movw	r14, r24

        // Error is sum of cross product between estimated direction
        // and measured direction of field vectors
        halfex = (ay * halfvz - az * halfvy) + (my * halfwz - mz * halfwy);
    157c:	29 81       	ldd	r18, Y+1	; 0x01
    157e:	3a 81       	ldd	r19, Y+2	; 0x02
    1580:	4b 81       	ldd	r20, Y+3	; 0x03
    1582:	5c 81       	ldd	r21, Y+4	; 0x04
    1584:	6d a9       	ldd	r22, Y+53	; 0x35
    1586:	7e a9       	ldd	r23, Y+54	; 0x36
    1588:	8f a9       	ldd	r24, Y+55	; 0x37
    158a:	98 ad       	ldd	r25, Y+56	; 0x38
    158c:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    1590:	4b 01       	movw	r8, r22
    1592:	5c 01       	movw	r10, r24
    1594:	2d a1       	ldd	r18, Y+37	; 0x25
    1596:	3e a1       	ldd	r19, Y+38	; 0x26
    1598:	4f a1       	ldd	r20, Y+39	; 0x27
    159a:	58 a5       	ldd	r21, Y+40	; 0x28
    159c:	69 ad       	ldd	r22, Y+57	; 0x39
    159e:	7a ad       	ldd	r23, Y+58	; 0x3a
    15a0:	8b ad       	ldd	r24, Y+59	; 0x3b
    15a2:	9c ad       	ldd	r25, Y+60	; 0x3c
    15a4:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    15a8:	9b 01       	movw	r18, r22
    15aa:	ac 01       	movw	r20, r24
    15ac:	c5 01       	movw	r24, r10
    15ae:	b4 01       	movw	r22, r8
    15b0:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <__subsf3>
    15b4:	4b 01       	movw	r8, r22
    15b6:	5c 01       	movw	r10, r24
    15b8:	a7 01       	movw	r20, r14
    15ba:	96 01       	movw	r18, r12
    15bc:	6d 81       	ldd	r22, Y+5	; 0x05
    15be:	7e 81       	ldd	r23, Y+6	; 0x06
    15c0:	8f 81       	ldd	r24, Y+7	; 0x07
    15c2:	98 85       	ldd	r25, Y+8	; 0x08
    15c4:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    15c8:	2b 01       	movw	r4, r22
    15ca:	3c 01       	movw	r6, r24
    15cc:	2d a5       	ldd	r18, Y+45	; 0x2d
    15ce:	3e a5       	ldd	r19, Y+46	; 0x2e
    15d0:	4f a5       	ldd	r20, Y+47	; 0x2f
    15d2:	58 a9       	ldd	r21, Y+48	; 0x30
    15d4:	6d 85       	ldd	r22, Y+13	; 0x0d
    15d6:	7e 85       	ldd	r23, Y+14	; 0x0e
    15d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    15da:	98 89       	ldd	r25, Y+16	; 0x10
    15dc:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    15e0:	9b 01       	movw	r18, r22
    15e2:	ac 01       	movw	r20, r24
    15e4:	c3 01       	movw	r24, r6
    15e6:	b2 01       	movw	r22, r4
    15e8:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <__subsf3>
    15ec:	9b 01       	movw	r18, r22
    15ee:	ac 01       	movw	r20, r24
    15f0:	c5 01       	movw	r24, r10
    15f2:	b4 01       	movw	r22, r8
    15f4:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
    15f8:	69 8f       	std	Y+25, r22	; 0x19
    15fa:	7a 8f       	std	Y+26, r23	; 0x1a
    15fc:	8b 8f       	std	Y+27, r24	; 0x1b
    15fe:	9c 8f       	std	Y+28, r25	; 0x1c
        halfey = (az * halfvx - ax * halfvz) + (mz * halfwx - mx * halfwz);
    1600:	29 a1       	ldd	r18, Y+33	; 0x21
    1602:	3a a1       	ldd	r19, Y+34	; 0x22
    1604:	4b a1       	ldd	r20, Y+35	; 0x23
    1606:	5c a1       	ldd	r21, Y+36	; 0x24
    1608:	69 ad       	ldd	r22, Y+57	; 0x39
    160a:	7a ad       	ldd	r23, Y+58	; 0x3a
    160c:	8b ad       	ldd	r24, Y+59	; 0x3b
    160e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1610:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    1614:	4b 01       	movw	r8, r22
    1616:	5c 01       	movw	r10, r24
    1618:	29 81       	ldd	r18, Y+1	; 0x01
    161a:	3a 81       	ldd	r19, Y+2	; 0x02
    161c:	4b 81       	ldd	r20, Y+3	; 0x03
    161e:	5c 81       	ldd	r21, Y+4	; 0x04
    1620:	69 a9       	ldd	r22, Y+49	; 0x31
    1622:	7a a9       	ldd	r23, Y+50	; 0x32
    1624:	8b a9       	ldd	r24, Y+51	; 0x33
    1626:	9c a9       	ldd	r25, Y+52	; 0x34
    1628:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    162c:	9b 01       	movw	r18, r22
    162e:	ac 01       	movw	r20, r24
    1630:	c5 01       	movw	r24, r10
    1632:	b4 01       	movw	r22, r8
    1634:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <__subsf3>
    1638:	4b 01       	movw	r8, r22
    163a:	5c 01       	movw	r10, r24
    163c:	29 a5       	ldd	r18, Y+41	; 0x29
    163e:	3a a5       	ldd	r19, Y+42	; 0x2a
    1640:	4b a5       	ldd	r20, Y+43	; 0x2b
    1642:	5c a5       	ldd	r21, Y+44	; 0x2c
    1644:	6d 85       	ldd	r22, Y+13	; 0x0d
    1646:	7e 85       	ldd	r23, Y+14	; 0x0e
    1648:	8f 85       	ldd	r24, Y+15	; 0x0f
    164a:	98 89       	ldd	r25, Y+16	; 0x10
    164c:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    1650:	2b 01       	movw	r4, r22
    1652:	3c 01       	movw	r6, r24
    1654:	a7 01       	movw	r20, r14
    1656:	96 01       	movw	r18, r12
    1658:	69 85       	ldd	r22, Y+9	; 0x09
    165a:	7a 85       	ldd	r23, Y+10	; 0x0a
    165c:	8b 85       	ldd	r24, Y+11	; 0x0b
    165e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1660:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    1664:	9b 01       	movw	r18, r22
    1666:	ac 01       	movw	r20, r24
    1668:	c3 01       	movw	r24, r6
    166a:	b2 01       	movw	r22, r4
    166c:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <__subsf3>
    1670:	9b 01       	movw	r18, r22
    1672:	ac 01       	movw	r20, r24
    1674:	c5 01       	movw	r24, r10
    1676:	b4 01       	movw	r22, r8
    1678:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
    167c:	69 83       	std	Y+1, r22	; 0x01
    167e:	7a 83       	std	Y+2, r23	; 0x02
    1680:	8b 83       	std	Y+3, r24	; 0x03
    1682:	9c 83       	std	Y+4, r25	; 0x04
        halfez = (ax * halfvy - ay * halfvx) + (mx * halfwy - my * halfwx);
    1684:	2d a1       	ldd	r18, Y+37	; 0x25
    1686:	3e a1       	ldd	r19, Y+38	; 0x26
    1688:	4f a1       	ldd	r20, Y+39	; 0x27
    168a:	58 a5       	ldd	r21, Y+40	; 0x28
    168c:	69 a9       	ldd	r22, Y+49	; 0x31
    168e:	7a a9       	ldd	r23, Y+50	; 0x32
    1690:	8b a9       	ldd	r24, Y+51	; 0x33
    1692:	9c a9       	ldd	r25, Y+52	; 0x34
    1694:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    1698:	6b 01       	movw	r12, r22
    169a:	7c 01       	movw	r14, r24
    169c:	29 a1       	ldd	r18, Y+33	; 0x21
    169e:	3a a1       	ldd	r19, Y+34	; 0x22
    16a0:	4b a1       	ldd	r20, Y+35	; 0x23
    16a2:	5c a1       	ldd	r21, Y+36	; 0x24
    16a4:	6d a9       	ldd	r22, Y+53	; 0x35
    16a6:	7e a9       	ldd	r23, Y+54	; 0x36
    16a8:	8f a9       	ldd	r24, Y+55	; 0x37
    16aa:	98 ad       	ldd	r25, Y+56	; 0x38
    16ac:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    16b0:	9b 01       	movw	r18, r22
    16b2:	ac 01       	movw	r20, r24
    16b4:	c7 01       	movw	r24, r14
    16b6:	b6 01       	movw	r22, r12
    16b8:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <__subsf3>
    16bc:	6b 01       	movw	r12, r22
    16be:	7c 01       	movw	r14, r24
    16c0:	2d a5       	ldd	r18, Y+45	; 0x2d
    16c2:	3e a5       	ldd	r19, Y+46	; 0x2e
    16c4:	4f a5       	ldd	r20, Y+47	; 0x2f
    16c6:	58 a9       	ldd	r21, Y+48	; 0x30
    16c8:	69 85       	ldd	r22, Y+9	; 0x09
    16ca:	7a 85       	ldd	r23, Y+10	; 0x0a
    16cc:	8b 85       	ldd	r24, Y+11	; 0x0b
    16ce:	9c 85       	ldd	r25, Y+12	; 0x0c
    16d0:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    16d4:	4b 01       	movw	r8, r22
    16d6:	5c 01       	movw	r10, r24
    16d8:	29 a5       	ldd	r18, Y+41	; 0x29
    16da:	3a a5       	ldd	r19, Y+42	; 0x2a
    16dc:	4b a5       	ldd	r20, Y+43	; 0x2b
    16de:	5c a5       	ldd	r21, Y+44	; 0x2c
    16e0:	6d 81       	ldd	r22, Y+5	; 0x05
    16e2:	7e 81       	ldd	r23, Y+6	; 0x06
    16e4:	8f 81       	ldd	r24, Y+7	; 0x07
    16e6:	98 85       	ldd	r25, Y+8	; 0x08
    16e8:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    16ec:	9b 01       	movw	r18, r22
    16ee:	ac 01       	movw	r20, r24
    16f0:	c5 01       	movw	r24, r10
    16f2:	b4 01       	movw	r22, r8
    16f4:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <__subsf3>
    16f8:	9b 01       	movw	r18, r22
    16fa:	ac 01       	movw	r20, r24
    16fc:	c7 01       	movw	r24, r14
    16fe:	b6 01       	movw	r22, r12
    1700:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
    1704:	69 87       	std	Y+9, r22	; 0x09
    1706:	7a 87       	std	Y+10, r23	; 0x0a
    1708:	8b 87       	std	Y+11, r24	; 0x0b
    170a:	9c 87       	std	Y+12, r25	; 0x0c

        // Compute and apply integral feedback if enabled
        if(twoKi > 0.0f) {
    170c:	c0 90 2d 01 	lds	r12, 0x012D	; 0x80012d <twoKi>
    1710:	d0 90 2e 01 	lds	r13, 0x012E	; 0x80012e <twoKi+0x1>
    1714:	e0 90 2f 01 	lds	r14, 0x012F	; 0x80012f <twoKi+0x2>
    1718:	f0 90 30 01 	lds	r15, 0x0130	; 0x800130 <twoKi+0x3>
    171c:	20 e0       	ldi	r18, 0x00	; 0
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	a9 01       	movw	r20, r18
    1722:	c7 01       	movw	r24, r14
    1724:	b6 01       	movw	r22, r12
    1726:	0e 94 22 18 	call	0x3044	; 0x3044 <__gesf2>
    172a:	18 16       	cp	r1, r24
    172c:	0c f0       	brlt	.+2      	; 0x1730 <mahony_update+0x90c>
    172e:	91 c0       	rjmp	.+290    	; 0x1852 <mahony_update+0xa2e>
            // integral error scaled by Ki
            integralFBx += twoKi * halfex * invSampleFreq;
    1730:	80 90 0d 01 	lds	r8, 0x010D	; 0x80010d <invSampleFreq>
    1734:	90 90 0e 01 	lds	r9, 0x010E	; 0x80010e <invSampleFreq+0x1>
    1738:	a0 90 0f 01 	lds	r10, 0x010F	; 0x80010f <invSampleFreq+0x2>
    173c:	b0 90 10 01 	lds	r11, 0x0110	; 0x800110 <invSampleFreq+0x3>
    1740:	a7 01       	movw	r20, r14
    1742:	96 01       	movw	r18, r12
    1744:	69 8d       	ldd	r22, Y+25	; 0x19
    1746:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1748:	8b 8d       	ldd	r24, Y+27	; 0x1b
    174a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    174c:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    1750:	a5 01       	movw	r20, r10
    1752:	94 01       	movw	r18, r8
    1754:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    1758:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <integralFBx>
    175c:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <integralFBx+0x1>
    1760:	40 91 1b 01 	lds	r20, 0x011B	; 0x80011b <integralFBx+0x2>
    1764:	50 91 1c 01 	lds	r21, 0x011C	; 0x80011c <integralFBx+0x3>
    1768:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
    176c:	6d 83       	std	Y+5, r22	; 0x05
    176e:	7e 83       	std	Y+6, r23	; 0x06
    1770:	8f 83       	std	Y+7, r24	; 0x07
    1772:	98 87       	std	Y+8, r25	; 0x08
    1774:	60 93 19 01 	sts	0x0119, r22	; 0x800119 <integralFBx>
    1778:	70 93 1a 01 	sts	0x011A, r23	; 0x80011a <integralFBx+0x1>
    177c:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <integralFBx+0x2>
    1780:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <integralFBx+0x3>
            integralFBy += twoKi * halfey * invSampleFreq;
    1784:	a7 01       	movw	r20, r14
    1786:	96 01       	movw	r18, r12
    1788:	69 81       	ldd	r22, Y+1	; 0x01
    178a:	7a 81       	ldd	r23, Y+2	; 0x02
    178c:	8b 81       	ldd	r24, Y+3	; 0x03
    178e:	9c 81       	ldd	r25, Y+4	; 0x04
    1790:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    1794:	a5 01       	movw	r20, r10
    1796:	94 01       	movw	r18, r8
    1798:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    179c:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <integralFBy>
    17a0:	30 91 16 01 	lds	r19, 0x0116	; 0x800116 <integralFBy+0x1>
    17a4:	40 91 17 01 	lds	r20, 0x0117	; 0x800117 <integralFBy+0x2>
    17a8:	50 91 18 01 	lds	r21, 0x0118	; 0x800118 <integralFBy+0x3>
    17ac:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
    17b0:	2b 01       	movw	r4, r22
    17b2:	3c 01       	movw	r6, r24
    17b4:	60 93 15 01 	sts	0x0115, r22	; 0x800115 <integralFBy>
    17b8:	70 93 16 01 	sts	0x0116, r23	; 0x800116 <integralFBy+0x1>
    17bc:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <integralFBy+0x2>
    17c0:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <integralFBy+0x3>
            integralFBz += twoKi * halfez * invSampleFreq;
    17c4:	a7 01       	movw	r20, r14
    17c6:	96 01       	movw	r18, r12
    17c8:	69 85       	ldd	r22, Y+9	; 0x09
    17ca:	7a 85       	ldd	r23, Y+10	; 0x0a
    17cc:	8b 85       	ldd	r24, Y+11	; 0x0b
    17ce:	9c 85       	ldd	r25, Y+12	; 0x0c
    17d0:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    17d4:	a5 01       	movw	r20, r10
    17d6:	94 01       	movw	r18, r8
    17d8:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    17dc:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <integralFBz>
    17e0:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <integralFBz+0x1>
    17e4:	40 91 13 01 	lds	r20, 0x0113	; 0x800113 <integralFBz+0x2>
    17e8:	50 91 14 01 	lds	r21, 0x0114	; 0x800114 <integralFBz+0x3>
    17ec:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
    17f0:	6b 01       	movw	r12, r22
    17f2:	7c 01       	movw	r14, r24
    17f4:	60 93 11 01 	sts	0x0111, r22	; 0x800111 <integralFBz>
    17f8:	70 93 12 01 	sts	0x0112, r23	; 0x800112 <integralFBz+0x1>
    17fc:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <integralFBz+0x2>
    1800:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <integralFBz+0x3>
            gx += integralFBx;	// apply integral feedback
    1804:	2d 81       	ldd	r18, Y+5	; 0x05
    1806:	3e 81       	ldd	r19, Y+6	; 0x06
    1808:	4f 81       	ldd	r20, Y+7	; 0x07
    180a:	58 85       	ldd	r21, Y+8	; 0x08
    180c:	6d 89       	ldd	r22, Y+21	; 0x15
    180e:	7e 89       	ldd	r23, Y+22	; 0x16
    1810:	8f 89       	ldd	r24, Y+23	; 0x17
    1812:	98 8d       	ldd	r25, Y+24	; 0x18
    1814:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
    1818:	6d 8b       	std	Y+21, r22	; 0x15
    181a:	7e 8b       	std	Y+22, r23	; 0x16
    181c:	8f 8b       	std	Y+23, r24	; 0x17
    181e:	98 8f       	std	Y+24, r25	; 0x18
            gy += integralFBy;
    1820:	a3 01       	movw	r20, r6
    1822:	92 01       	movw	r18, r4
    1824:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1826:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1828:	8f 8d       	ldd	r24, Y+31	; 0x1f
    182a:	98 a1       	ldd	r25, Y+32	; 0x20
    182c:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
    1830:	6d 8f       	std	Y+29, r22	; 0x1d
    1832:	7e 8f       	std	Y+30, r23	; 0x1e
    1834:	8f 8f       	std	Y+31, r24	; 0x1f
    1836:	98 a3       	std	Y+32, r25	; 0x20
            gz += integralFBz;
    1838:	a7 01       	movw	r20, r14
    183a:	96 01       	movw	r18, r12
    183c:	69 89       	ldd	r22, Y+17	; 0x11
    183e:	7a 89       	ldd	r23, Y+18	; 0x12
    1840:	8b 89       	ldd	r24, Y+19	; 0x13
    1842:	9c 89       	ldd	r25, Y+20	; 0x14
    1844:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
    1848:	69 8b       	std	Y+17, r22	; 0x11
    184a:	7a 8b       	std	Y+18, r23	; 0x12
    184c:	8b 8b       	std	Y+19, r24	; 0x13
    184e:	9c 8b       	std	Y+20, r25	; 0x14
    1850:	18 c0       	rjmp	.+48     	; 0x1882 <mahony_update+0xa5e>
            } else {
            integralFBx = 0.0f;	// prevent integral windup
    1852:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <integralFBx>
    1856:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <integralFBx+0x1>
    185a:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <integralFBx+0x2>
    185e:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <integralFBx+0x3>
            integralFBy = 0.0f;
    1862:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <integralFBy>
    1866:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <integralFBy+0x1>
    186a:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <integralFBy+0x2>
    186e:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <integralFBy+0x3>
            integralFBz = 0.0f;
    1872:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <integralFBz>
    1876:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <integralFBz+0x1>
    187a:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <integralFBz+0x2>
    187e:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <integralFBz+0x3>
        }

        // Apply proportional feedback
        gx += twoKp * halfex;
    1882:	c0 90 31 01 	lds	r12, 0x0131	; 0x800131 <twoKp>
    1886:	d0 90 32 01 	lds	r13, 0x0132	; 0x800132 <twoKp+0x1>
    188a:	e0 90 33 01 	lds	r14, 0x0133	; 0x800133 <twoKp+0x2>
    188e:	f0 90 34 01 	lds	r15, 0x0134	; 0x800134 <twoKp+0x3>
    1892:	a7 01       	movw	r20, r14
    1894:	96 01       	movw	r18, r12
    1896:	69 8d       	ldd	r22, Y+25	; 0x19
    1898:	7a 8d       	ldd	r23, Y+26	; 0x1a
    189a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    189c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    189e:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    18a2:	9b 01       	movw	r18, r22
    18a4:	ac 01       	movw	r20, r24
    18a6:	6d 89       	ldd	r22, Y+21	; 0x15
    18a8:	7e 89       	ldd	r23, Y+22	; 0x16
    18aa:	8f 89       	ldd	r24, Y+23	; 0x17
    18ac:	98 8d       	ldd	r25, Y+24	; 0x18
    18ae:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
    18b2:	6d 8b       	std	Y+21, r22	; 0x15
    18b4:	7e 8b       	std	Y+22, r23	; 0x16
    18b6:	8f 8b       	std	Y+23, r24	; 0x17
    18b8:	98 8f       	std	Y+24, r25	; 0x18
        gy += twoKp * halfey;
    18ba:	a7 01       	movw	r20, r14
    18bc:	96 01       	movw	r18, r12
    18be:	69 81       	ldd	r22, Y+1	; 0x01
    18c0:	7a 81       	ldd	r23, Y+2	; 0x02
    18c2:	8b 81       	ldd	r24, Y+3	; 0x03
    18c4:	9c 81       	ldd	r25, Y+4	; 0x04
    18c6:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    18ca:	9b 01       	movw	r18, r22
    18cc:	ac 01       	movw	r20, r24
    18ce:	6d 8d       	ldd	r22, Y+29	; 0x1d
    18d0:	7e 8d       	ldd	r23, Y+30	; 0x1e
    18d2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18d4:	98 a1       	ldd	r25, Y+32	; 0x20
    18d6:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
    18da:	6d 8f       	std	Y+29, r22	; 0x1d
    18dc:	7e 8f       	std	Y+30, r23	; 0x1e
    18de:	8f 8f       	std	Y+31, r24	; 0x1f
    18e0:	98 a3       	std	Y+32, r25	; 0x20
        gz += twoKp * halfez;
    18e2:	a7 01       	movw	r20, r14
    18e4:	96 01       	movw	r18, r12
    18e6:	69 85       	ldd	r22, Y+9	; 0x09
    18e8:	7a 85       	ldd	r23, Y+10	; 0x0a
    18ea:	8b 85       	ldd	r24, Y+11	; 0x0b
    18ec:	9c 85       	ldd	r25, Y+12	; 0x0c
    18ee:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    18f2:	9b 01       	movw	r18, r22
    18f4:	ac 01       	movw	r20, r24
    18f6:	69 89       	ldd	r22, Y+17	; 0x11
    18f8:	7a 89       	ldd	r23, Y+18	; 0x12
    18fa:	8b 89       	ldd	r24, Y+19	; 0x13
    18fc:	9c 89       	ldd	r25, Y+20	; 0x14
    18fe:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
    1902:	69 8b       	std	Y+17, r22	; 0x11
    1904:	7a 8b       	std	Y+18, r23	; 0x12
    1906:	8b 8b       	std	Y+19, r24	; 0x13
    1908:	9c 8b       	std	Y+20, r25	; 0x14
    }

    // Integrate rate of change of quaternion
    gx *= (0.5f * invSampleFreq);		// pre-multiply common factors
    190a:	20 e0       	ldi	r18, 0x00	; 0
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	40 e0       	ldi	r20, 0x00	; 0
    1910:	5f e3       	ldi	r21, 0x3F	; 63
    1912:	60 91 0d 01 	lds	r22, 0x010D	; 0x80010d <invSampleFreq>
    1916:	70 91 0e 01 	lds	r23, 0x010E	; 0x80010e <invSampleFreq+0x1>
    191a:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <invSampleFreq+0x2>
    191e:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <invSampleFreq+0x3>
    1922:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    1926:	6b 01       	movw	r12, r22
    1928:	7c 01       	movw	r14, r24
    192a:	9b 01       	movw	r18, r22
    192c:	ac 01       	movw	r20, r24
    192e:	6d 89       	ldd	r22, Y+21	; 0x15
    1930:	7e 89       	ldd	r23, Y+22	; 0x16
    1932:	8f 89       	ldd	r24, Y+23	; 0x17
    1934:	98 8d       	ldd	r25, Y+24	; 0x18
    1936:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    193a:	6d 83       	std	Y+5, r22	; 0x05
    193c:	7e 83       	std	Y+6, r23	; 0x06
    193e:	8f 83       	std	Y+7, r24	; 0x07
    1940:	98 87       	std	Y+8, r25	; 0x08
    gy *= (0.5f * invSampleFreq);
    1942:	a7 01       	movw	r20, r14
    1944:	96 01       	movw	r18, r12
    1946:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1948:	7e 8d       	ldd	r23, Y+30	; 0x1e
    194a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    194c:	98 a1       	ldd	r25, Y+32	; 0x20
    194e:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    1952:	6d 87       	std	Y+13, r22	; 0x0d
    1954:	7e 87       	std	Y+14, r23	; 0x0e
    1956:	8f 87       	std	Y+15, r24	; 0x0f
    1958:	98 8b       	std	Y+16, r25	; 0x10
    gz *= (0.5f * invSampleFreq);
    195a:	a7 01       	movw	r20, r14
    195c:	96 01       	movw	r18, r12
    195e:	69 89       	ldd	r22, Y+17	; 0x11
    1960:	7a 89       	ldd	r23, Y+18	; 0x12
    1962:	8b 89       	ldd	r24, Y+19	; 0x13
    1964:	9c 89       	ldd	r25, Y+20	; 0x14
    1966:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    196a:	6d 8b       	std	Y+21, r22	; 0x15
    196c:	7e 8b       	std	Y+22, r23	; 0x16
    196e:	8f 8b       	std	Y+23, r24	; 0x17
    1970:	98 8f       	std	Y+24, r25	; 0x18
    qa = q0;
    1972:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <q0>
    1976:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <q0+0x1>
    197a:	a0 91 2b 01 	lds	r26, 0x012B	; 0x80012b <q0+0x2>
    197e:	b0 91 2c 01 	lds	r27, 0x012C	; 0x80012c <q0+0x3>
    1982:	89 83       	std	Y+1, r24	; 0x01
    1984:	9a 83       	std	Y+2, r25	; 0x02
    1986:	ab 83       	std	Y+3, r26	; 0x03
    1988:	bc 83       	std	Y+4, r27	; 0x04
    qb = q1;
    198a:	c0 90 25 01 	lds	r12, 0x0125	; 0x800125 <q1>
    198e:	d0 90 26 01 	lds	r13, 0x0126	; 0x800126 <q1+0x1>
    1992:	e0 90 27 01 	lds	r14, 0x0127	; 0x800127 <q1+0x2>
    1996:	f0 90 28 01 	lds	r15, 0x0128	; 0x800128 <q1+0x3>
    qc = q2;
    199a:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <q2>
    199e:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <q2+0x1>
    19a2:	a0 91 23 01 	lds	r26, 0x0123	; 0x800123 <q2+0x2>
    19a6:	b0 91 24 01 	lds	r27, 0x0124	; 0x800124 <q2+0x3>
    19aa:	89 87       	std	Y+9, r24	; 0x09
    19ac:	9a 87       	std	Y+10, r25	; 0x0a
    19ae:	ab 87       	std	Y+11, r26	; 0x0b
    19b0:	bc 87       	std	Y+12, r27	; 0x0c
    q0 += (-qb * gx - qc * gy - q3 * gz);
    19b2:	40 90 1d 01 	lds	r4, 0x011D	; 0x80011d <q3>
    19b6:	50 90 1e 01 	lds	r5, 0x011E	; 0x80011e <q3+0x1>
    19ba:	60 90 1f 01 	lds	r6, 0x011F	; 0x80011f <q3+0x2>
    19be:	70 90 20 01 	lds	r7, 0x0120	; 0x800120 <q3+0x3>
    19c2:	c7 01       	movw	r24, r14
    19c4:	b6 01       	movw	r22, r12
    19c6:	90 58       	subi	r25, 0x80	; 128
    19c8:	2d 81       	ldd	r18, Y+5	; 0x05
    19ca:	3e 81       	ldd	r19, Y+6	; 0x06
    19cc:	4f 81       	ldd	r20, Y+7	; 0x07
    19ce:	58 85       	ldd	r21, Y+8	; 0x08
    19d0:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    19d4:	4b 01       	movw	r8, r22
    19d6:	5c 01       	movw	r10, r24
    19d8:	29 85       	ldd	r18, Y+9	; 0x09
    19da:	3a 85       	ldd	r19, Y+10	; 0x0a
    19dc:	4b 85       	ldd	r20, Y+11	; 0x0b
    19de:	5c 85       	ldd	r21, Y+12	; 0x0c
    19e0:	6d 85       	ldd	r22, Y+13	; 0x0d
    19e2:	7e 85       	ldd	r23, Y+14	; 0x0e
    19e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    19e6:	98 89       	ldd	r25, Y+16	; 0x10
    19e8:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    19ec:	9b 01       	movw	r18, r22
    19ee:	ac 01       	movw	r20, r24
    19f0:	c5 01       	movw	r24, r10
    19f2:	b4 01       	movw	r22, r8
    19f4:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <__subsf3>
    19f8:	4b 01       	movw	r8, r22
    19fa:	5c 01       	movw	r10, r24
    19fc:	a3 01       	movw	r20, r6
    19fe:	92 01       	movw	r18, r4
    1a00:	6d 89       	ldd	r22, Y+21	; 0x15
    1a02:	7e 89       	ldd	r23, Y+22	; 0x16
    1a04:	8f 89       	ldd	r24, Y+23	; 0x17
    1a06:	98 8d       	ldd	r25, Y+24	; 0x18
    1a08:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    1a0c:	9b 01       	movw	r18, r22
    1a0e:	ac 01       	movw	r20, r24
    1a10:	c5 01       	movw	r24, r10
    1a12:	b4 01       	movw	r22, r8
    1a14:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <__subsf3>
    1a18:	29 81       	ldd	r18, Y+1	; 0x01
    1a1a:	3a 81       	ldd	r19, Y+2	; 0x02
    1a1c:	4b 81       	ldd	r20, Y+3	; 0x03
    1a1e:	5c 81       	ldd	r21, Y+4	; 0x04
    1a20:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
    1a24:	6d 8f       	std	Y+29, r22	; 0x1d
    1a26:	7e 8f       	std	Y+30, r23	; 0x1e
    1a28:	8f 8f       	std	Y+31, r24	; 0x1f
    1a2a:	98 a3       	std	Y+32, r25	; 0x20
    q1 += (qa * gx + qc * gz - q3 * gy);
    1a2c:	29 81       	ldd	r18, Y+1	; 0x01
    1a2e:	3a 81       	ldd	r19, Y+2	; 0x02
    1a30:	4b 81       	ldd	r20, Y+3	; 0x03
    1a32:	5c 81       	ldd	r21, Y+4	; 0x04
    1a34:	6d 81       	ldd	r22, Y+5	; 0x05
    1a36:	7e 81       	ldd	r23, Y+6	; 0x06
    1a38:	8f 81       	ldd	r24, Y+7	; 0x07
    1a3a:	98 85       	ldd	r25, Y+8	; 0x08
    1a3c:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    1a40:	4b 01       	movw	r8, r22
    1a42:	5c 01       	movw	r10, r24
    1a44:	29 85       	ldd	r18, Y+9	; 0x09
    1a46:	3a 85       	ldd	r19, Y+10	; 0x0a
    1a48:	4b 85       	ldd	r20, Y+11	; 0x0b
    1a4a:	5c 85       	ldd	r21, Y+12	; 0x0c
    1a4c:	6d 89       	ldd	r22, Y+21	; 0x15
    1a4e:	7e 89       	ldd	r23, Y+22	; 0x16
    1a50:	8f 89       	ldd	r24, Y+23	; 0x17
    1a52:	98 8d       	ldd	r25, Y+24	; 0x18
    1a54:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    1a58:	9b 01       	movw	r18, r22
    1a5a:	ac 01       	movw	r20, r24
    1a5c:	c5 01       	movw	r24, r10
    1a5e:	b4 01       	movw	r22, r8
    1a60:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
    1a64:	4b 01       	movw	r8, r22
    1a66:	5c 01       	movw	r10, r24
    1a68:	a3 01       	movw	r20, r6
    1a6a:	92 01       	movw	r18, r4
    1a6c:	6d 85       	ldd	r22, Y+13	; 0x0d
    1a6e:	7e 85       	ldd	r23, Y+14	; 0x0e
    1a70:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a72:	98 89       	ldd	r25, Y+16	; 0x10
    1a74:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    1a78:	9b 01       	movw	r18, r22
    1a7a:	ac 01       	movw	r20, r24
    1a7c:	c5 01       	movw	r24, r10
    1a7e:	b4 01       	movw	r22, r8
    1a80:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <__subsf3>
    1a84:	a7 01       	movw	r20, r14
    1a86:	96 01       	movw	r18, r12
    1a88:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
    1a8c:	69 8b       	std	Y+17, r22	; 0x11
    1a8e:	7a 8b       	std	Y+18, r23	; 0x12
    1a90:	8b 8b       	std	Y+19, r24	; 0x13
    1a92:	9c 8b       	std	Y+20, r25	; 0x14
    q2 += (qa * gy - qb * gz + q3 * gx);
    1a94:	29 81       	ldd	r18, Y+1	; 0x01
    1a96:	3a 81       	ldd	r19, Y+2	; 0x02
    1a98:	4b 81       	ldd	r20, Y+3	; 0x03
    1a9a:	5c 81       	ldd	r21, Y+4	; 0x04
    1a9c:	6d 85       	ldd	r22, Y+13	; 0x0d
    1a9e:	7e 85       	ldd	r23, Y+14	; 0x0e
    1aa0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1aa2:	98 89       	ldd	r25, Y+16	; 0x10
    1aa4:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    1aa8:	4b 01       	movw	r8, r22
    1aaa:	5c 01       	movw	r10, r24
    1aac:	a7 01       	movw	r20, r14
    1aae:	96 01       	movw	r18, r12
    1ab0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ab2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ab4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ab6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ab8:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    1abc:	9b 01       	movw	r18, r22
    1abe:	ac 01       	movw	r20, r24
    1ac0:	c5 01       	movw	r24, r10
    1ac2:	b4 01       	movw	r22, r8
    1ac4:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <__subsf3>
    1ac8:	4b 01       	movw	r8, r22
    1aca:	5c 01       	movw	r10, r24
    1acc:	a3 01       	movw	r20, r6
    1ace:	92 01       	movw	r18, r4
    1ad0:	6d 81       	ldd	r22, Y+5	; 0x05
    1ad2:	7e 81       	ldd	r23, Y+6	; 0x06
    1ad4:	8f 81       	ldd	r24, Y+7	; 0x07
    1ad6:	98 85       	ldd	r25, Y+8	; 0x08
    1ad8:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    1adc:	9b 01       	movw	r18, r22
    1ade:	ac 01       	movw	r20, r24
    1ae0:	c5 01       	movw	r24, r10
    1ae2:	b4 01       	movw	r22, r8
    1ae4:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
    1ae8:	29 85       	ldd	r18, Y+9	; 0x09
    1aea:	3a 85       	ldd	r19, Y+10	; 0x0a
    1aec:	4b 85       	ldd	r20, Y+11	; 0x0b
    1aee:	5c 85       	ldd	r21, Y+12	; 0x0c
    1af0:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
    1af4:	4b 01       	movw	r8, r22
    1af6:	5c 01       	movw	r10, r24
    q3 += (qa * gz + qb * gy - qc * gx);
    1af8:	29 81       	ldd	r18, Y+1	; 0x01
    1afa:	3a 81       	ldd	r19, Y+2	; 0x02
    1afc:	4b 81       	ldd	r20, Y+3	; 0x03
    1afe:	5c 81       	ldd	r21, Y+4	; 0x04
    1b00:	6d 89       	ldd	r22, Y+21	; 0x15
    1b02:	7e 89       	ldd	r23, Y+22	; 0x16
    1b04:	8f 89       	ldd	r24, Y+23	; 0x17
    1b06:	98 8d       	ldd	r25, Y+24	; 0x18
    1b08:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    1b0c:	69 83       	std	Y+1, r22	; 0x01
    1b0e:	7a 83       	std	Y+2, r23	; 0x02
    1b10:	8b 83       	std	Y+3, r24	; 0x03
    1b12:	9c 83       	std	Y+4, r25	; 0x04
    1b14:	a7 01       	movw	r20, r14
    1b16:	96 01       	movw	r18, r12
    1b18:	6d 85       	ldd	r22, Y+13	; 0x0d
    1b1a:	7e 85       	ldd	r23, Y+14	; 0x0e
    1b1c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b1e:	98 89       	ldd	r25, Y+16	; 0x10
    1b20:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    1b24:	9b 01       	movw	r18, r22
    1b26:	ac 01       	movw	r20, r24
    1b28:	69 81       	ldd	r22, Y+1	; 0x01
    1b2a:	7a 81       	ldd	r23, Y+2	; 0x02
    1b2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b30:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
    1b34:	6b 01       	movw	r12, r22
    1b36:	7c 01       	movw	r14, r24
    1b38:	29 85       	ldd	r18, Y+9	; 0x09
    1b3a:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b3c:	4b 85       	ldd	r20, Y+11	; 0x0b
    1b3e:	5c 85       	ldd	r21, Y+12	; 0x0c
    1b40:	6d 81       	ldd	r22, Y+5	; 0x05
    1b42:	7e 81       	ldd	r23, Y+6	; 0x06
    1b44:	8f 81       	ldd	r24, Y+7	; 0x07
    1b46:	98 85       	ldd	r25, Y+8	; 0x08
    1b48:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    1b4c:	9b 01       	movw	r18, r22
    1b4e:	ac 01       	movw	r20, r24
    1b50:	c7 01       	movw	r24, r14
    1b52:	b6 01       	movw	r22, r12
    1b54:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <__subsf3>
    1b58:	a3 01       	movw	r20, r6
    1b5a:	92 01       	movw	r18, r4
    1b5c:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
    1b60:	6b 01       	movw	r12, r22
    1b62:	7c 01       	movw	r14, r24

    // Normalise quaternion
    recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
    1b64:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1b66:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1b68:	4f 8d       	ldd	r20, Y+31	; 0x1f
    1b6a:	58 a1       	ldd	r21, Y+32	; 0x20
    1b6c:	ca 01       	movw	r24, r20
    1b6e:	b9 01       	movw	r22, r18
    1b70:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    1b74:	2b 01       	movw	r4, r22
    1b76:	3c 01       	movw	r6, r24
    1b78:	29 89       	ldd	r18, Y+17	; 0x11
    1b7a:	3a 89       	ldd	r19, Y+18	; 0x12
    1b7c:	4b 89       	ldd	r20, Y+19	; 0x13
    1b7e:	5c 89       	ldd	r21, Y+20	; 0x14
    1b80:	ca 01       	movw	r24, r20
    1b82:	b9 01       	movw	r22, r18
    1b84:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    1b88:	9b 01       	movw	r18, r22
    1b8a:	ac 01       	movw	r20, r24
    1b8c:	c3 01       	movw	r24, r6
    1b8e:	b2 01       	movw	r22, r4
    1b90:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
    1b94:	2b 01       	movw	r4, r22
    1b96:	3c 01       	movw	r6, r24
    1b98:	a5 01       	movw	r20, r10
    1b9a:	94 01       	movw	r18, r8
    1b9c:	c5 01       	movw	r24, r10
    1b9e:	b4 01       	movw	r22, r8
    1ba0:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    1ba4:	9b 01       	movw	r18, r22
    1ba6:	ac 01       	movw	r20, r24
    1ba8:	c3 01       	movw	r24, r6
    1baa:	b2 01       	movw	r22, r4
    1bac:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
    1bb0:	2b 01       	movw	r4, r22
    1bb2:	3c 01       	movw	r6, r24
    1bb4:	a7 01       	movw	r20, r14
    1bb6:	96 01       	movw	r18, r12
    1bb8:	c7 01       	movw	r24, r14
    1bba:	b6 01       	movw	r22, r12
    1bbc:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    1bc0:	9b 01       	movw	r18, r22
    1bc2:	ac 01       	movw	r20, r24
    1bc4:	c3 01       	movw	r24, r6
    1bc6:	b2 01       	movw	r22, r4
    1bc8:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
    1bcc:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <invSqrt>
    1bd0:	2b 01       	movw	r4, r22
    1bd2:	3c 01       	movw	r6, r24
    q0 *= recipNorm;
    1bd4:	9b 01       	movw	r18, r22
    1bd6:	ac 01       	movw	r20, r24
    1bd8:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1bda:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1bdc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1bde:	98 a1       	ldd	r25, Y+32	; 0x20
    1be0:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    1be4:	60 93 29 01 	sts	0x0129, r22	; 0x800129 <q0>
    1be8:	70 93 2a 01 	sts	0x012A, r23	; 0x80012a <q0+0x1>
    1bec:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <q0+0x2>
    1bf0:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <q0+0x3>
    q1 *= recipNorm;
    1bf4:	a3 01       	movw	r20, r6
    1bf6:	92 01       	movw	r18, r4
    1bf8:	69 89       	ldd	r22, Y+17	; 0x11
    1bfa:	7a 89       	ldd	r23, Y+18	; 0x12
    1bfc:	8b 89       	ldd	r24, Y+19	; 0x13
    1bfe:	9c 89       	ldd	r25, Y+20	; 0x14
    1c00:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    1c04:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <q1>
    1c08:	70 93 26 01 	sts	0x0126, r23	; 0x800126 <q1+0x1>
    1c0c:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <q1+0x2>
    1c10:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <q1+0x3>
    q2 *= recipNorm;
    1c14:	a3 01       	movw	r20, r6
    1c16:	92 01       	movw	r18, r4
    1c18:	c5 01       	movw	r24, r10
    1c1a:	b4 01       	movw	r22, r8
    1c1c:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    1c20:	60 93 21 01 	sts	0x0121, r22	; 0x800121 <q2>
    1c24:	70 93 22 01 	sts	0x0122, r23	; 0x800122 <q2+0x1>
    1c28:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <q2+0x2>
    1c2c:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <q2+0x3>
    q3 *= recipNorm;
    1c30:	a3 01       	movw	r20, r6
    1c32:	92 01       	movw	r18, r4
    1c34:	c7 01       	movw	r24, r14
    1c36:	b6 01       	movw	r22, r12
    1c38:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    1c3c:	60 93 1d 01 	sts	0x011D, r22	; 0x80011d <q3>
    1c40:	70 93 1e 01 	sts	0x011E, r23	; 0x80011e <q3+0x1>
    1c44:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <q3+0x2>
    1c48:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <q3+0x3>
    anglesComputed = 0;
    1c4c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
}
    1c50:	cc 5a       	subi	r28, 0xAC	; 172
    1c52:	df 4f       	sbci	r29, 0xFF	; 255
    1c54:	0f b6       	in	r0, 0x3f	; 63
    1c56:	f8 94       	cli
    1c58:	de bf       	out	0x3e, r29	; 62
    1c5a:	0f be       	out	0x3f, r0	; 63
    1c5c:	cd bf       	out	0x3d, r28	; 61
    1c5e:	df 91       	pop	r29
    1c60:	cf 91       	pop	r28
    1c62:	1f 91       	pop	r17
    1c64:	0f 91       	pop	r16
    1c66:	ff 90       	pop	r15
    1c68:	ef 90       	pop	r14
    1c6a:	df 90       	pop	r13
    1c6c:	cf 90       	pop	r12
    1c6e:	bf 90       	pop	r11
    1c70:	af 90       	pop	r10
    1c72:	9f 90       	pop	r9
    1c74:	8f 90       	pop	r8
    1c76:	7f 90       	pop	r7
    1c78:	6f 90       	pop	r6
    1c7a:	5f 90       	pop	r5
    1c7c:	4f 90       	pop	r4
    1c7e:	3f 90       	pop	r3
    1c80:	2f 90       	pop	r2
    1c82:	08 95       	ret

00001c84 <computeAngles>:
}

//-------------------------------------------------------------------------------------------

void computeAngles()
{
    1c84:	4f 92       	push	r4
    1c86:	5f 92       	push	r5
    1c88:	6f 92       	push	r6
    1c8a:	7f 92       	push	r7
    1c8c:	8f 92       	push	r8
    1c8e:	9f 92       	push	r9
    1c90:	af 92       	push	r10
    1c92:	bf 92       	push	r11
    1c94:	cf 92       	push	r12
    1c96:	df 92       	push	r13
    1c98:	ef 92       	push	r14
    1c9a:	ff 92       	push	r15
    1c9c:	cf 93       	push	r28
    1c9e:	df 93       	push	r29
    1ca0:	cd b7       	in	r28, 0x3d	; 61
    1ca2:	de b7       	in	r29, 0x3e	; 62
    1ca4:	60 97       	sbiw	r28, 0x10	; 16
    1ca6:	0f b6       	in	r0, 0x3f	; 63
    1ca8:	f8 94       	cli
    1caa:	de bf       	out	0x3e, r29	; 62
    1cac:	0f be       	out	0x3f, r0	; 63
    1cae:	cd bf       	out	0x3d, r28	; 61
    roll = atan2f(q0*q1 + q2*q3, 0.5f - q1*q1 - q2*q2);
    1cb0:	80 90 25 01 	lds	r8, 0x0125	; 0x800125 <q1>
    1cb4:	90 90 26 01 	lds	r9, 0x0126	; 0x800126 <q1+0x1>
    1cb8:	a0 90 27 01 	lds	r10, 0x0127	; 0x800127 <q1+0x2>
    1cbc:	b0 90 28 01 	lds	r11, 0x0128	; 0x800128 <q1+0x3>
    1cc0:	40 90 21 01 	lds	r4, 0x0121	; 0x800121 <q2>
    1cc4:	50 90 22 01 	lds	r5, 0x0122	; 0x800122 <q2+0x1>
    1cc8:	60 90 23 01 	lds	r6, 0x0123	; 0x800123 <q2+0x2>
    1ccc:	70 90 24 01 	lds	r7, 0x0124	; 0x800124 <q2+0x3>
    1cd0:	a3 01       	movw	r20, r6
    1cd2:	92 01       	movw	r18, r4
    1cd4:	c3 01       	movw	r24, r6
    1cd6:	b2 01       	movw	r22, r4
    1cd8:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    1cdc:	69 83       	std	Y+1, r22	; 0x01
    1cde:	7a 83       	std	Y+2, r23	; 0x02
    1ce0:	8b 83       	std	Y+3, r24	; 0x03
    1ce2:	9c 83       	std	Y+4, r25	; 0x04
    1ce4:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <q0>
    1ce8:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <q0+0x1>
    1cec:	a0 91 2b 01 	lds	r26, 0x012B	; 0x80012b <q0+0x2>
    1cf0:	b0 91 2c 01 	lds	r27, 0x012C	; 0x80012c <q0+0x3>
    1cf4:	8d 83       	std	Y+5, r24	; 0x05
    1cf6:	9e 83       	std	Y+6, r25	; 0x06
    1cf8:	af 83       	std	Y+7, r26	; 0x07
    1cfa:	b8 87       	std	Y+8, r27	; 0x08
    1cfc:	c0 90 1d 01 	lds	r12, 0x011D	; 0x80011d <q3>
    1d00:	d0 90 1e 01 	lds	r13, 0x011E	; 0x80011e <q3+0x1>
    1d04:	e0 90 1f 01 	lds	r14, 0x011F	; 0x80011f <q3+0x2>
    1d08:	f0 90 20 01 	lds	r15, 0x0120	; 0x800120 <q3+0x3>
    1d0c:	a5 01       	movw	r20, r10
    1d0e:	94 01       	movw	r18, r8
    1d10:	c5 01       	movw	r24, r10
    1d12:	b4 01       	movw	r22, r8
    1d14:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    1d18:	9b 01       	movw	r18, r22
    1d1a:	ac 01       	movw	r20, r24
    1d1c:	60 e0       	ldi	r22, 0x00	; 0
    1d1e:	70 e0       	ldi	r23, 0x00	; 0
    1d20:	80 e0       	ldi	r24, 0x00	; 0
    1d22:	9f e3       	ldi	r25, 0x3F	; 63
    1d24:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <__subsf3>
    1d28:	29 81       	ldd	r18, Y+1	; 0x01
    1d2a:	3a 81       	ldd	r19, Y+2	; 0x02
    1d2c:	4b 81       	ldd	r20, Y+3	; 0x03
    1d2e:	5c 81       	ldd	r21, Y+4	; 0x04
    1d30:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <__subsf3>
    1d34:	69 87       	std	Y+9, r22	; 0x09
    1d36:	7a 87       	std	Y+10, r23	; 0x0a
    1d38:	8b 87       	std	Y+11, r24	; 0x0b
    1d3a:	9c 87       	std	Y+12, r25	; 0x0c
    1d3c:	2d 81       	ldd	r18, Y+5	; 0x05
    1d3e:	3e 81       	ldd	r19, Y+6	; 0x06
    1d40:	4f 81       	ldd	r20, Y+7	; 0x07
    1d42:	58 85       	ldd	r21, Y+8	; 0x08
    1d44:	c5 01       	movw	r24, r10
    1d46:	b4 01       	movw	r22, r8
    1d48:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    1d4c:	6d 87       	std	Y+13, r22	; 0x0d
    1d4e:	7e 87       	std	Y+14, r23	; 0x0e
    1d50:	8f 87       	std	Y+15, r24	; 0x0f
    1d52:	98 8b       	std	Y+16, r25	; 0x10
    1d54:	a7 01       	movw	r20, r14
    1d56:	96 01       	movw	r18, r12
    1d58:	c3 01       	movw	r24, r6
    1d5a:	b2 01       	movw	r22, r4
    1d5c:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    1d60:	9b 01       	movw	r18, r22
    1d62:	ac 01       	movw	r20, r24
    1d64:	6d 85       	ldd	r22, Y+13	; 0x0d
    1d66:	7e 85       	ldd	r23, Y+14	; 0x0e
    1d68:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d6a:	98 89       	ldd	r25, Y+16	; 0x10
    1d6c:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
    1d70:	29 85       	ldd	r18, Y+9	; 0x09
    1d72:	3a 85       	ldd	r19, Y+10	; 0x0a
    1d74:	4b 85       	ldd	r20, Y+11	; 0x0b
    1d76:	5c 85       	ldd	r21, Y+12	; 0x0c
    1d78:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <atan2>
    1d7c:	60 93 09 01 	sts	0x0109, r22	; 0x800109 <roll>
    1d80:	70 93 0a 01 	sts	0x010A, r23	; 0x80010a <roll+0x1>
    1d84:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <roll+0x2>
    1d88:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <roll+0x3>
    pitch = asinf(-2.0f * (q1*q3 - q0*q2));
    1d8c:	a7 01       	movw	r20, r14
    1d8e:	96 01       	movw	r18, r12
    1d90:	c5 01       	movw	r24, r10
    1d92:	b4 01       	movw	r22, r8
    1d94:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    1d98:	69 87       	std	Y+9, r22	; 0x09
    1d9a:	7a 87       	std	Y+10, r23	; 0x0a
    1d9c:	8b 87       	std	Y+11, r24	; 0x0b
    1d9e:	9c 87       	std	Y+12, r25	; 0x0c
    1da0:	2d 81       	ldd	r18, Y+5	; 0x05
    1da2:	3e 81       	ldd	r19, Y+6	; 0x06
    1da4:	4f 81       	ldd	r20, Y+7	; 0x07
    1da6:	58 85       	ldd	r21, Y+8	; 0x08
    1da8:	c3 01       	movw	r24, r6
    1daa:	b2 01       	movw	r22, r4
    1dac:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    1db0:	9b 01       	movw	r18, r22
    1db2:	ac 01       	movw	r20, r24
    1db4:	69 85       	ldd	r22, Y+9	; 0x09
    1db6:	7a 85       	ldd	r23, Y+10	; 0x0a
    1db8:	8b 85       	ldd	r24, Y+11	; 0x0b
    1dba:	9c 85       	ldd	r25, Y+12	; 0x0c
    1dbc:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <__subsf3>
    1dc0:	20 e0       	ldi	r18, 0x00	; 0
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	40 e0       	ldi	r20, 0x00	; 0
    1dc6:	50 ec       	ldi	r21, 0xC0	; 192
    1dc8:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    1dcc:	0e 94 11 16 	call	0x2c22	; 0x2c22 <asin>
    1dd0:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <pitch>
    1dd4:	70 93 06 01 	sts	0x0106, r23	; 0x800106 <pitch+0x1>
    1dd8:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <pitch+0x2>
    1ddc:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <pitch+0x3>
    yaw = atan2f(q1*q2 + q0*q3, 0.5f - q2*q2 - q3*q3);
    1de0:	29 81       	ldd	r18, Y+1	; 0x01
    1de2:	3a 81       	ldd	r19, Y+2	; 0x02
    1de4:	4b 81       	ldd	r20, Y+3	; 0x03
    1de6:	5c 81       	ldd	r21, Y+4	; 0x04
    1de8:	60 e0       	ldi	r22, 0x00	; 0
    1dea:	70 e0       	ldi	r23, 0x00	; 0
    1dec:	80 e0       	ldi	r24, 0x00	; 0
    1dee:	9f e3       	ldi	r25, 0x3F	; 63
    1df0:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <__subsf3>
    1df4:	69 83       	std	Y+1, r22	; 0x01
    1df6:	7a 83       	std	Y+2, r23	; 0x02
    1df8:	8b 83       	std	Y+3, r24	; 0x03
    1dfa:	9c 83       	std	Y+4, r25	; 0x04
    1dfc:	a7 01       	movw	r20, r14
    1dfe:	96 01       	movw	r18, r12
    1e00:	c7 01       	movw	r24, r14
    1e02:	b6 01       	movw	r22, r12
    1e04:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    1e08:	9b 01       	movw	r18, r22
    1e0a:	ac 01       	movw	r20, r24
    1e0c:	69 81       	ldd	r22, Y+1	; 0x01
    1e0e:	7a 81       	ldd	r23, Y+2	; 0x02
    1e10:	8b 81       	ldd	r24, Y+3	; 0x03
    1e12:	9c 81       	ldd	r25, Y+4	; 0x04
    1e14:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <__subsf3>
    1e18:	69 83       	std	Y+1, r22	; 0x01
    1e1a:	7a 83       	std	Y+2, r23	; 0x02
    1e1c:	8b 83       	std	Y+3, r24	; 0x03
    1e1e:	9c 83       	std	Y+4, r25	; 0x04
    1e20:	a3 01       	movw	r20, r6
    1e22:	92 01       	movw	r18, r4
    1e24:	c5 01       	movw	r24, r10
    1e26:	b4 01       	movw	r22, r8
    1e28:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    1e2c:	4b 01       	movw	r8, r22
    1e2e:	5c 01       	movw	r10, r24
    1e30:	a7 01       	movw	r20, r14
    1e32:	96 01       	movw	r18, r12
    1e34:	6d 81       	ldd	r22, Y+5	; 0x05
    1e36:	7e 81       	ldd	r23, Y+6	; 0x06
    1e38:	8f 81       	ldd	r24, Y+7	; 0x07
    1e3a:	98 85       	ldd	r25, Y+8	; 0x08
    1e3c:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    1e40:	9b 01       	movw	r18, r22
    1e42:	ac 01       	movw	r20, r24
    1e44:	c5 01       	movw	r24, r10
    1e46:	b4 01       	movw	r22, r8
    1e48:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
    1e4c:	29 81       	ldd	r18, Y+1	; 0x01
    1e4e:	3a 81       	ldd	r19, Y+2	; 0x02
    1e50:	4b 81       	ldd	r20, Y+3	; 0x03
    1e52:	5c 81       	ldd	r21, Y+4	; 0x04
    1e54:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <atan2>
    1e58:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <yaw>
    1e5c:	70 93 02 01 	sts	0x0102, r23	; 0x800102 <yaw+0x1>
    1e60:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <yaw+0x2>
    1e64:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <yaw+0x3>
    anglesComputed = 1;
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
    1e6e:	60 96       	adiw	r28, 0x10	; 16
    1e70:	0f b6       	in	r0, 0x3f	; 63
    1e72:	f8 94       	cli
    1e74:	de bf       	out	0x3e, r29	; 62
    1e76:	0f be       	out	0x3f, r0	; 63
    1e78:	cd bf       	out	0x3d, r28	; 61
    1e7a:	df 91       	pop	r29
    1e7c:	cf 91       	pop	r28
    1e7e:	ff 90       	pop	r15
    1e80:	ef 90       	pop	r14
    1e82:	df 90       	pop	r13
    1e84:	cf 90       	pop	r12
    1e86:	bf 90       	pop	r11
    1e88:	af 90       	pop	r10
    1e8a:	9f 90       	pop	r9
    1e8c:	8f 90       	pop	r8
    1e8e:	7f 90       	pop	r7
    1e90:	6f 90       	pop	r6
    1e92:	5f 90       	pop	r5
    1e94:	4f 90       	pop	r4
    1e96:	08 95       	ret

00001e98 <getRoll>:

float getRoll() {
    if (!anglesComputed) computeAngles();
    1e98:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1e9c:	81 11       	cpse	r24, r1
    1e9e:	02 c0       	rjmp	.+4      	; 0x1ea4 <getRoll+0xc>
    1ea0:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <computeAngles>
    return roll * 57.29578f;
    1ea4:	21 ee       	ldi	r18, 0xE1	; 225
    1ea6:	3e e2       	ldi	r19, 0x2E	; 46
    1ea8:	45 e6       	ldi	r20, 0x65	; 101
    1eaa:	52 e4       	ldi	r21, 0x42	; 66
    1eac:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <roll>
    1eb0:	70 91 0a 01 	lds	r23, 0x010A	; 0x80010a <roll+0x1>
    1eb4:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <roll+0x2>
    1eb8:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <roll+0x3>
    1ebc:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
}
    1ec0:	08 95       	ret

00001ec2 <getPitch>:
float getPitch() {
    if (!anglesComputed) computeAngles();
    1ec2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1ec6:	81 11       	cpse	r24, r1
    1ec8:	02 c0       	rjmp	.+4      	; 0x1ece <getPitch+0xc>
    1eca:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <computeAngles>
    return pitch * 57.29578f;
    1ece:	21 ee       	ldi	r18, 0xE1	; 225
    1ed0:	3e e2       	ldi	r19, 0x2E	; 46
    1ed2:	45 e6       	ldi	r20, 0x65	; 101
    1ed4:	52 e4       	ldi	r21, 0x42	; 66
    1ed6:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <pitch>
    1eda:	70 91 06 01 	lds	r23, 0x0106	; 0x800106 <pitch+0x1>
    1ede:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <pitch+0x2>
    1ee2:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <pitch+0x3>
    1ee6:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
}
    1eea:	08 95       	ret

00001eec <getYaw>:
float getYaw() {
    if (!anglesComputed) computeAngles();
    1eec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1ef0:	81 11       	cpse	r24, r1
    1ef2:	02 c0       	rjmp	.+4      	; 0x1ef8 <getYaw+0xc>
    1ef4:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <computeAngles>
    return yaw * 57.29578f + 180.0f;
    1ef8:	21 ee       	ldi	r18, 0xE1	; 225
    1efa:	3e e2       	ldi	r19, 0x2E	; 46
    1efc:	45 e6       	ldi	r20, 0x65	; 101
    1efe:	52 e4       	ldi	r21, 0x42	; 66
    1f00:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <yaw>
    1f04:	70 91 02 01 	lds	r23, 0x0102	; 0x800102 <yaw+0x1>
    1f08:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <yaw+0x2>
    1f0c:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <yaw+0x3>
    1f10:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    1f14:	20 e0       	ldi	r18, 0x00	; 0
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	44 e3       	ldi	r20, 0x34	; 52
    1f1a:	53 e4       	ldi	r21, 0x43	; 67
    1f1c:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__addsf3>
}
    1f20:	08 95       	ret

00001f22 <on_receive>:
void calibrate_gyro_accel(void);
void on_receive(int num_bytes);
void on_request();

void on_receive(int num_bytes)
{
    1f22:	0f 93       	push	r16
    1f24:	1f 93       	push	r17
    1f26:	cf 93       	push	r28
    1f28:	df 93       	push	r29
    int address = wire_read();   
    1f2a:	0e 94 34 1a 	call	0x3468	; 0x3468 <wire_read>
    1f2e:	ec 01       	movw	r28, r24
    1f30:	8c 01       	movw	r16, r24
    1f32:	0a 5c       	subi	r16, 0xCA	; 202
    1f34:	1e 4f       	sbci	r17, 0xFE	; 254
    for (; wire_available() && address < REGISTER_LENGTH; address++)
    1f36:	06 c0       	rjmp	.+12     	; 0x1f44 <on_receive+0x22>
    { REGISTER[address] = wire_read(); }
    1f38:	0e 94 34 1a 	call	0x3468	; 0x3468 <wire_read>
    1f3c:	f8 01       	movw	r30, r16
    1f3e:	81 93       	st	Z+, r24
    1f40:	8f 01       	movw	r16, r30
void on_request();

void on_receive(int num_bytes)
{
    int address = wire_read();   
    for (; wire_available() && address < REGISTER_LENGTH; address++)
    1f42:	21 96       	adiw	r28, 0x01	; 1
    1f44:	0e 94 2c 1a 	call	0x3458	; 0x3458 <wire_available>
    1f48:	89 2b       	or	r24, r25
    1f4a:	19 f0       	breq	.+6      	; 0x1f52 <on_receive+0x30>
    1f4c:	cd 30       	cpi	r28, 0x0D	; 13
    1f4e:	d1 05       	cpc	r29, r1
    1f50:	9c f3       	brlt	.-26     	; 0x1f38 <on_receive+0x16>
    { REGISTER[address] = wire_read(); }
}
    1f52:	df 91       	pop	r29
    1f54:	cf 91       	pop	r28
    1f56:	1f 91       	pop	r17
    1f58:	0f 91       	pop	r16
    1f5a:	08 95       	ret

00001f5c <on_request>:

void on_request()
{
    1f5c:	0f 93       	push	r16
    1f5e:	1f 93       	push	r17
    1f60:	cf 93       	push	r28
    1f62:	df 93       	push	r29
    if (twi_request_address) { return; }
    1f64:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <twi_request_address>
    1f68:	81 11       	cpse	r24, r1
    1f6a:	0f c0       	rjmp	.+30     	; 0x1f8a <on_request+0x2e>
    1f6c:	c6 e3       	ldi	r28, 0x36	; 54
    1f6e:	d1 e0       	ldi	r29, 0x01	; 1
    1f70:	03 e4       	ldi	r16, 0x43	; 67
    1f72:	11 e0       	ldi	r17, 0x01	; 1
    1f74:	03 c0       	rjmp	.+6      	; 0x1f7c <on_request+0x20>
    int i = twi_request_address;
    for (;wire_get_status() == TWI_STX && i < REGISTER_LENGTH; i++)
    { wire_write(REGISTER[i]); }
    1f76:	89 91       	ld	r24, Y+
    1f78:	0e 94 b8 19 	call	0x3370	; 0x3370 <wire_write>

void on_request()
{
    if (twi_request_address) { return; }
    int i = twi_request_address;
    for (;wire_get_status() == TWI_STX && i < REGISTER_LENGTH; i++)
    1f7c:	0e 94 98 19 	call	0x3330	; 0x3330 <wire_get_status>
    1f80:	84 30       	cpi	r24, 0x04	; 4
    1f82:	19 f4       	brne	.+6      	; 0x1f8a <on_request+0x2e>
    1f84:	c0 17       	cp	r28, r16
    1f86:	d1 07       	cpc	r29, r17
    1f88:	b1 f7       	brne	.-20     	; 0x1f76 <on_request+0x1a>
    { wire_write(REGISTER[i]); }
}
    1f8a:	df 91       	pop	r29
    1f8c:	cf 91       	pop	r28
    1f8e:	1f 91       	pop	r17
    1f90:	0f 91       	pop	r16
    1f92:	08 95       	ret

00001f94 <calibrate_gyro_accel>:

void calibrate_gyro_accel(void)
{
    1f94:	0f 93       	push	r16
    1f96:	1f 93       	push	r17
    1f98:	cf 93       	push	r28
    1f9a:	df 93       	push	r29
    1f9c:	cd b7       	in	r28, 0x3d	; 61
    1f9e:	de b7       	in	r29, 0x3e	; 62
    1fa0:	2c 97       	sbiw	r28, 0x0c	; 12
    1fa2:	0f b6       	in	r0, 0x3f	; 63
    1fa4:	f8 94       	cli
    1fa6:	de bf       	out	0x3e, r29	; 62
    1fa8:	0f be       	out	0x3f, r0	; 63
    1faa:	cd bf       	out	0x3d, r28	; 61
    int16_t values[6] = {0};
    1fac:	8e 01       	movw	r16, r28
    1fae:	0f 5f       	subi	r16, 0xFF	; 255
    1fb0:	1f 4f       	sbci	r17, 0xFF	; 255
    1fb2:	8c e0       	ldi	r24, 0x0C	; 12
    1fb4:	f8 01       	movw	r30, r16
    1fb6:	11 92       	st	Z+, r1
    1fb8:	8a 95       	dec	r24
    1fba:	e9 f7       	brne	.-6      	; 0x1fb6 <calibrate_gyro_accel+0x22>
    
    #if DEBUG
    uart_puts("mpu6050 running calibration\n");
    #endif
    
    mpu6050_run_calibration(values);
    1fbc:	c8 01       	movw	r24, r16
    1fbe:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <mpu6050_run_calibration>
    save_mpu6050_calibration(values);
    1fc2:	c8 01       	movw	r24, r16
    1fc4:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <save_mpu6050_calibration>
    
    #if DEBUG
    uart_puts("mpu6050 calibration done\n");
    #endif
    
    fetch_mpu6050_calibration(values);
    1fc8:	c8 01       	movw	r24, r16
    1fca:	0e 94 c7 01 	call	0x38e	; 0x38e <fetch_mpu6050_calibration>
    mpu6050_set_x_accel_offset(values[0]);
    1fce:	89 81       	ldd	r24, Y+1	; 0x01
    1fd0:	9a 81       	ldd	r25, Y+2	; 0x02
    1fd2:	0e 94 c2 12 	call	0x2584	; 0x2584 <mpu6050_set_x_accel_offset>
    mpu6050_set_y_accel_offset(values[1]);
    1fd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1fda:	0e 94 c8 12 	call	0x2590	; 0x2590 <mpu6050_set_y_accel_offset>
    mpu6050_set_z_accel_offset(values[2]);
    1fde:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe0:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe2:	0e 94 ce 12 	call	0x259c	; 0x259c <mpu6050_set_z_accel_offset>
    
    mpu6050_set_x_gyro_offset(values[3]);
    1fe6:	8f 81       	ldd	r24, Y+7	; 0x07
    1fe8:	98 85       	ldd	r25, Y+8	; 0x08
    1fea:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <mpu6050_set_x_gyro_offset>
    mpu6050_set_y_gyro_offset(values[4]);
    1fee:	89 85       	ldd	r24, Y+9	; 0x09
    1ff0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ff2:	0e 94 da 12 	call	0x25b4	; 0x25b4 <mpu6050_set_y_gyro_offset>
    mpu6050_set_z_gyro_offset(values[5]);
    1ff6:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ff8:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ffa:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <mpu6050_set_z_gyro_offset>
}
    1ffe:	2c 96       	adiw	r28, 0x0c	; 12
    2000:	0f b6       	in	r0, 0x3f	; 63
    2002:	f8 94       	cli
    2004:	de bf       	out	0x3e, r29	; 62
    2006:	0f be       	out	0x3f, r0	; 63
    2008:	cd bf       	out	0x3d, r28	; 61
    200a:	df 91       	pop	r29
    200c:	cf 91       	pop	r28
    200e:	1f 91       	pop	r17
    2010:	0f 91       	pop	r16
    2012:	08 95       	ret

00002014 <setup>:

void setup(void)
{
    DDRB |= (1 << PB5);
    2014:	25 9a       	sbi	0x04, 5	; 4
    
    REGISTER[IMU_STATUS_ADDRESS] = IMU_STATUS_INITIALIZING;
    2016:	81 e0       	ldi	r24, 0x01	; 1
    2018:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <REGISTER>
    
    sei();
    201c:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    201e:	2f ef       	ldi	r18, 0xFF	; 255
    2020:	81 ee       	ldi	r24, 0xE1	; 225
    2022:	94 e0       	ldi	r25, 0x04	; 4
    2024:	21 50       	subi	r18, 0x01	; 1
    2026:	80 40       	sbci	r24, 0x00	; 0
    2028:	90 40       	sbci	r25, 0x00	; 0
    202a:	e1 f7       	brne	.-8      	; 0x2024 <setup+0x10>
    202c:	00 c0       	rjmp	.+0      	; 0x202e <setup+0x1a>
    202e:	00 00       	nop
    
    _delay_ms(100);
    
    init_millis(F_CPU);
    2030:	60 e0       	ldi	r22, 0x00	; 0
    2032:	74 e2       	ldi	r23, 0x24	; 36
    2034:	84 ef       	ldi	r24, 0xF4	; 244
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	0e 94 26 19 	call	0x324c	; 0x324c <init_millis>
    wire_init();
    203c:	0e 94 82 19 	call	0x3304	; 0x3304 <wire_init>
    wire_set_address(IMU_TWI_ADDRESS);
    2040:	81 e0       	ldi	r24, 0x01	; 1
    2042:	0e 94 95 19 	call	0x332a	; 0x332a <wire_set_address>
    wire_set_on_receive(on_receive);
    2046:	81 e9       	ldi	r24, 0x91	; 145
    2048:	9f e0       	ldi	r25, 0x0F	; 15
    204a:	0e 94 48 1a 	call	0x3490	; 0x3490 <wire_set_on_receive>
    wire_set_on_request(on_request);
    204e:	8e ea       	ldi	r24, 0xAE	; 174
    2050:	9f e0       	ldi	r25, 0x0F	; 15
    2052:	0e 94 4d 1a 	call	0x349a	; 0x349a <wire_set_on_request>
    2056:	2f ef       	ldi	r18, 0xFF	; 255
    2058:	81 ee       	ldi	r24, 0xE1	; 225
    205a:	94 e0       	ldi	r25, 0x04	; 4
    205c:	21 50       	subi	r18, 0x01	; 1
    205e:	80 40       	sbci	r24, 0x00	; 0
    2060:	90 40       	sbci	r25, 0x00	; 0
    2062:	e1 f7       	brne	.-8      	; 0x205c <setup+0x48>
    2064:	00 c0       	rjmp	.+0      	; 0x2066 <setup+0x52>
    2066:	00 00       	nop
    2068:	08 95       	ret

0000206a <setup_sensors>:
    uart_puts("setup done\n");
    #endif
}

void setup_sensors(void)
{
    206a:	cf 93       	push	r28
    206c:	df 93       	push	r29
    206e:	cd b7       	in	r28, 0x3d	; 61
    2070:	de b7       	in	r29, 0x3e	; 62
    2072:	2c 97       	sbiw	r28, 0x0c	; 12
    2074:	0f b6       	in	r0, 0x3f	; 63
    2076:	f8 94       	cli
    2078:	de bf       	out	0x3e, r29	; 62
    207a:	0f be       	out	0x3f, r0	; 63
    207c:	cd bf       	out	0x3d, r28	; 61
    mpu6050_initialize();
    207e:	0e 94 3b 12 	call	0x2476	; 0x2476 <mpu6050_initialize>
    int16_t values[6] = {0};
    2082:	ce 01       	movw	r24, r28
    2084:	01 96       	adiw	r24, 0x01	; 1
    2086:	2c e0       	ldi	r18, 0x0C	; 12
    2088:	fc 01       	movw	r30, r24
    208a:	11 92       	st	Z+, r1
    208c:	2a 95       	dec	r18
    208e:	e9 f7       	brne	.-6      	; 0x208a <setup_sensors+0x20>
    
    fetch_mpu6050_calibration(values);
    2090:	0e 94 c7 01 	call	0x38e	; 0x38e <fetch_mpu6050_calibration>
    mpu6050_set_x_accel_offset(values[0]);
    2094:	89 81       	ldd	r24, Y+1	; 0x01
    2096:	9a 81       	ldd	r25, Y+2	; 0x02
    2098:	0e 94 c2 12 	call	0x2584	; 0x2584 <mpu6050_set_x_accel_offset>
    mpu6050_set_y_accel_offset(values[1]);
    209c:	8b 81       	ldd	r24, Y+3	; 0x03
    209e:	9c 81       	ldd	r25, Y+4	; 0x04
    20a0:	0e 94 c8 12 	call	0x2590	; 0x2590 <mpu6050_set_y_accel_offset>
    mpu6050_set_z_accel_offset(values[2]);
    20a4:	8d 81       	ldd	r24, Y+5	; 0x05
    20a6:	9e 81       	ldd	r25, Y+6	; 0x06
    20a8:	0e 94 ce 12 	call	0x259c	; 0x259c <mpu6050_set_z_accel_offset>
    
    mpu6050_set_x_gyro_offset(values[3]);
    20ac:	8f 81       	ldd	r24, Y+7	; 0x07
    20ae:	98 85       	ldd	r25, Y+8	; 0x08
    20b0:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <mpu6050_set_x_gyro_offset>
    mpu6050_set_y_gyro_offset(values[4]);
    20b4:	89 85       	ldd	r24, Y+9	; 0x09
    20b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    20b8:	0e 94 da 12 	call	0x25b4	; 0x25b4 <mpu6050_set_y_gyro_offset>
    mpu6050_set_z_gyro_offset(values[5]);
    20bc:	8b 85       	ldd	r24, Y+11	; 0x0b
    20be:	9c 85       	ldd	r25, Y+12	; 0x0c
    20c0:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <mpu6050_set_z_gyro_offset>
    #if DEBUG
    sprintf(BUFFER, "current millis %ld\n", millis());
    uart_puts(BUFFER);
    #endif

    hcm5883l_initialize();
    20c4:	0e 94 ba 11 	call	0x2374	; 0x2374 <hcm5883l_initialize>

    mahony_init();
    20c8:	0e 94 1b 02 	call	0x436	; 0x436 <mahony_init>
    20cc:	ff ef       	ldi	r31, 0xFF	; 255
    20ce:	21 ee       	ldi	r18, 0xE1	; 225
    20d0:	84 e0       	ldi	r24, 0x04	; 4
    20d2:	f1 50       	subi	r31, 0x01	; 1
    20d4:	20 40       	sbci	r18, 0x00	; 0
    20d6:	80 40       	sbci	r24, 0x00	; 0
    20d8:	e1 f7       	brne	.-8      	; 0x20d2 <setup_sensors+0x68>
    20da:	00 c0       	rjmp	.+0      	; 0x20dc <setup_sensors+0x72>
    20dc:	00 00       	nop

    _delay_ms(100);
}
    20de:	2c 96       	adiw	r28, 0x0c	; 12
    20e0:	0f b6       	in	r0, 0x3f	; 63
    20e2:	f8 94       	cli
    20e4:	de bf       	out	0x3e, r29	; 62
    20e6:	0f be       	out	0x3f, r0	; 63
    20e8:	cd bf       	out	0x3d, r28	; 61
    20ea:	df 91       	pop	r29
    20ec:	cf 91       	pop	r28
    20ee:	08 95       	ret

000020f0 <calculate_roll_pitch_yaw>:

void calculate_roll_pitch_yaw()
{
    20f0:	4f 92       	push	r4
    20f2:	5f 92       	push	r5
    20f4:	6f 92       	push	r6
    20f6:	7f 92       	push	r7
    20f8:	af 92       	push	r10
    20fa:	bf 92       	push	r11
    20fc:	cf 92       	push	r12
    20fe:	df 92       	push	r13
    2100:	ef 92       	push	r14
    2102:	ff 92       	push	r15
    2104:	0f 93       	push	r16
    2106:	1f 93       	push	r17
    2108:	cf 93       	push	r28
    210a:	df 93       	push	r29
    210c:	00 d0       	rcall	.+0      	; 0x210e <calculate_roll_pitch_yaw+0x1e>
    210e:	00 d0       	rcall	.+0      	; 0x2110 <calculate_roll_pitch_yaw+0x20>
    2110:	cd b7       	in	r28, 0x3d	; 61
    2112:	de b7       	in	r29, 0x3e	; 62
    mpu6050_get_motion_6(&ax, &ay, &az, &gx, &gy, &gz);
    2114:	0f 2e       	mov	r0, r31
    2116:	f3 ec       	ldi	r31, 0xC3	; 195
    2118:	ef 2e       	mov	r14, r31
    211a:	f1 e0       	ldi	r31, 0x01	; 1
    211c:	ff 2e       	mov	r15, r31
    211e:	f0 2d       	mov	r31, r0
    2120:	0b eb       	ldi	r16, 0xBB	; 187
    2122:	11 e0       	ldi	r17, 0x01	; 1
    2124:	27 ec       	ldi	r18, 0xC7	; 199
    2126:	31 e0       	ldi	r19, 0x01	; 1
    2128:	4d eb       	ldi	r20, 0xBD	; 189
    212a:	51 e0       	ldi	r21, 0x01	; 1
    212c:	69 ec       	ldi	r22, 0xC9	; 201
    212e:	71 e0       	ldi	r23, 0x01	; 1
    2130:	81 ec       	ldi	r24, 0xC1	; 193
    2132:	91 e0       	ldi	r25, 0x01	; 1
    2134:	0e 94 4e 12 	call	0x249c	; 0x249c <mpu6050_get_motion_6>
    hcm5883l_get_heading(&mx, &my, &mz);
    2138:	45 ec       	ldi	r20, 0xC5	; 197
    213a:	51 e0       	ldi	r21, 0x01	; 1
    213c:	6f eb       	ldi	r22, 0xBF	; 191
    213e:	71 e0       	ldi	r23, 0x01	; 1
    2140:	8b ec       	ldi	r24, 0xCB	; 203
    2142:	91 e0       	ldi	r25, 0x01	; 1
    2144:	0e 94 c6 11 	call	0x238c	; 0x238c <hcm5883l_get_heading>
    
    mahony_update(
        gz * 0.001,
    2148:	60 91 c3 01 	lds	r22, 0x01C3	; 0x8001c3 <gz>
    214c:	70 91 c4 01 	lds	r23, 0x01C4	; 0x8001c4 <gz+0x1>
    2150:	07 2e       	mov	r0, r23
    2152:	00 0c       	add	r0, r0
    2154:	88 0b       	sbc	r24, r24
    2156:	99 0b       	sbc	r25, r25
    2158:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <__floatsisf>
    215c:	2f e6       	ldi	r18, 0x6F	; 111
    215e:	32 e1       	ldi	r19, 0x12	; 18
    2160:	43 e8       	ldi	r20, 0x83	; 131
    2162:	5a e3       	ldi	r21, 0x3A	; 58
    2164:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    2168:	2b 01       	movw	r4, r22
    216a:	3c 01       	movw	r6, r24
void calculate_roll_pitch_yaw()
{
    mpu6050_get_motion_6(&ax, &ay, &az, &gx, &gy, &gz);
    hcm5883l_get_heading(&mx, &my, &mz);
    
    mahony_update(
    216c:	60 91 c1 01 	lds	r22, 0x01C1	; 0x8001c1 <ax>
    2170:	70 91 c2 01 	lds	r23, 0x01C2	; 0x8001c2 <ax+0x1>
    2174:	07 2e       	mov	r0, r23
    2176:	00 0c       	add	r0, r0
    2178:	88 0b       	sbc	r24, r24
    217a:	99 0b       	sbc	r25, r25
    217c:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <__floatsisf>
    2180:	2f e6       	ldi	r18, 0x6F	; 111
    2182:	32 e1       	ldi	r19, 0x12	; 18
    2184:	43 e8       	ldi	r20, 0x83	; 131
    2186:	5a e3       	ldi	r21, 0x3A	; 58
    2188:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    218c:	5b 01       	movw	r10, r22
    218e:	6c 01       	movw	r12, r24
    2190:	60 91 bb 01 	lds	r22, 0x01BB	; 0x8001bb <gy>
    2194:	70 91 bc 01 	lds	r23, 0x01BC	; 0x8001bc <gy+0x1>
    2198:	07 2e       	mov	r0, r23
    219a:	00 0c       	add	r0, r0
    219c:	88 0b       	sbc	r24, r24
    219e:	99 0b       	sbc	r25, r25
    21a0:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <__floatsisf>
    21a4:	2f e6       	ldi	r18, 0x6F	; 111
    21a6:	32 e1       	ldi	r19, 0x12	; 18
    21a8:	43 e8       	ldi	r20, 0x83	; 131
    21aa:	5a e3       	ldi	r21, 0x3A	; 58
    21ac:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    21b0:	69 83       	std	Y+1, r22	; 0x01
    21b2:	7a 83       	std	Y+2, r23	; 0x02
    21b4:	8b 83       	std	Y+3, r24	; 0x03
    21b6:	9c 83       	std	Y+4, r25	; 0x04
    21b8:	60 91 c5 01 	lds	r22, 0x01C5	; 0x8001c5 <mz>
    21bc:	70 91 c6 01 	lds	r23, 0x01C6	; 0x8001c6 <mz+0x1>
    21c0:	07 2e       	mov	r0, r23
    21c2:	00 0c       	add	r0, r0
    21c4:	88 0b       	sbc	r24, r24
    21c6:	99 0b       	sbc	r25, r25
    21c8:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <__floatsisf>
    21cc:	2f e6       	ldi	r18, 0x6F	; 111
    21ce:	32 e1       	ldi	r19, 0x12	; 18
    21d0:	43 e8       	ldi	r20, 0x83	; 131
    21d2:	5a e3       	ldi	r21, 0x3A	; 58
    21d4:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    21d8:	9f 93       	push	r25
    21da:	8f 93       	push	r24
    21dc:	7f 93       	push	r23
    21de:	6f 93       	push	r22
    21e0:	60 91 bf 01 	lds	r22, 0x01BF	; 0x8001bf <my>
    21e4:	70 91 c0 01 	lds	r23, 0x01C0	; 0x8001c0 <my+0x1>
    21e8:	07 2e       	mov	r0, r23
    21ea:	00 0c       	add	r0, r0
    21ec:	88 0b       	sbc	r24, r24
    21ee:	99 0b       	sbc	r25, r25
    21f0:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <__floatsisf>
    21f4:	2f e6       	ldi	r18, 0x6F	; 111
    21f6:	32 e1       	ldi	r19, 0x12	; 18
    21f8:	43 e8       	ldi	r20, 0x83	; 131
    21fa:	5a e3       	ldi	r21, 0x3A	; 58
    21fc:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    2200:	9f 93       	push	r25
    2202:	8f 93       	push	r24
    2204:	7f 93       	push	r23
    2206:	6f 93       	push	r22
    2208:	60 91 cb 01 	lds	r22, 0x01CB	; 0x8001cb <mx>
    220c:	70 91 cc 01 	lds	r23, 0x01CC	; 0x8001cc <mx+0x1>
    2210:	07 2e       	mov	r0, r23
    2212:	00 0c       	add	r0, r0
    2214:	88 0b       	sbc	r24, r24
    2216:	99 0b       	sbc	r25, r25
    2218:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <__floatsisf>
    221c:	2f e6       	ldi	r18, 0x6F	; 111
    221e:	32 e1       	ldi	r19, 0x12	; 18
    2220:	43 e8       	ldi	r20, 0x83	; 131
    2222:	5a e3       	ldi	r21, 0x3A	; 58
    2224:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    2228:	9f 93       	push	r25
    222a:	8f 93       	push	r24
    222c:	7f 93       	push	r23
    222e:	6f 93       	push	r22
    2230:	60 91 bd 01 	lds	r22, 0x01BD	; 0x8001bd <az>
    2234:	70 91 be 01 	lds	r23, 0x01BE	; 0x8001be <az+0x1>
    2238:	07 2e       	mov	r0, r23
    223a:	00 0c       	add	r0, r0
    223c:	88 0b       	sbc	r24, r24
    223e:	99 0b       	sbc	r25, r25
    2240:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <__floatsisf>
    2244:	2f e6       	ldi	r18, 0x6F	; 111
    2246:	32 e1       	ldi	r19, 0x12	; 18
    2248:	43 e8       	ldi	r20, 0x83	; 131
    224a:	5a e3       	ldi	r21, 0x3A	; 58
    224c:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    2250:	9f 93       	push	r25
    2252:	8f 93       	push	r24
    2254:	7f 93       	push	r23
    2256:	6f 93       	push	r22
    2258:	60 91 c9 01 	lds	r22, 0x01C9	; 0x8001c9 <ay>
    225c:	70 91 ca 01 	lds	r23, 0x01CA	; 0x8001ca <ay+0x1>
    2260:	07 2e       	mov	r0, r23
    2262:	00 0c       	add	r0, r0
    2264:	88 0b       	sbc	r24, r24
    2266:	99 0b       	sbc	r25, r25
    2268:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <__floatsisf>
    226c:	2f e6       	ldi	r18, 0x6F	; 111
    226e:	32 e1       	ldi	r19, 0x12	; 18
    2270:	43 e8       	ldi	r20, 0x83	; 131
    2272:	5a e3       	ldi	r21, 0x3A	; 58
    2274:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    2278:	9f 93       	push	r25
    227a:	8f 93       	push	r24
    227c:	7f 93       	push	r23
    227e:	6f 93       	push	r22
    2280:	83 01       	movw	r16, r6
    2282:	72 01       	movw	r14, r4
    2284:	29 81       	ldd	r18, Y+1	; 0x01
    2286:	3a 81       	ldd	r19, Y+2	; 0x02
    2288:	4b 81       	ldd	r20, Y+3	; 0x03
    228a:	5c 81       	ldd	r21, Y+4	; 0x04
    228c:	c3 01       	movw	r24, r6
    228e:	b2 01       	movw	r22, r4
    2290:	0e 94 12 07 	call	0xe24	; 0xe24 <mahony_update>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2294:	f8 94       	cli
        my * 0.001,
        mz * 0.001);

    ATOMIC_BLOCK(ATOMIC_FORCEON)
    {
     float_to_bytes(getRoll(), &REGISTER[IMU_ROLL_ADDRESS]);
    2296:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <getRoll>
    229a:	47 e3       	ldi	r20, 0x37	; 55
    229c:	51 e0       	ldi	r21, 0x01	; 1
    229e:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <float_to_bytes>
     float_to_bytes(getPitch(), &REGISTER[IMU_PITCH_ADDRESS]);
    22a2:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <getPitch>
    22a6:	4b e3       	ldi	r20, 0x3B	; 59
    22a8:	51 e0       	ldi	r21, 0x01	; 1
    22aa:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <float_to_bytes>
     float_to_bytes(getYaw(), &REGISTER[IMU_YAW_ADDRESS]);   
    22ae:	0e 94 76 0f 	call	0x1eec	; 0x1eec <getYaw>
    22b2:	4f e3       	ldi	r20, 0x3F	; 63
    22b4:	51 e0       	ldi	r21, 0x01	; 1
    22b6:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <float_to_bytes>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    22ba:	78 94       	sei
    }    
}
    22bc:	0f b6       	in	r0, 0x3f	; 63
    22be:	f8 94       	cli
    22c0:	de bf       	out	0x3e, r29	; 62
    22c2:	0f be       	out	0x3f, r0	; 63
    22c4:	cd bf       	out	0x3d, r28	; 61
    22c6:	0f 90       	pop	r0
    22c8:	0f 90       	pop	r0
    22ca:	0f 90       	pop	r0
    22cc:	0f 90       	pop	r0
    22ce:	df 91       	pop	r29
    22d0:	cf 91       	pop	r28
    22d2:	1f 91       	pop	r17
    22d4:	0f 91       	pop	r16
    22d6:	ff 90       	pop	r15
    22d8:	ef 90       	pop	r14
    22da:	df 90       	pop	r13
    22dc:	cf 90       	pop	r12
    22de:	bf 90       	pop	r11
    22e0:	af 90       	pop	r10
    22e2:	7f 90       	pop	r7
    22e4:	6f 90       	pop	r6
    22e6:	5f 90       	pop	r5
    22e8:	4f 90       	pop	r4
    22ea:	08 95       	ret

000022ec <main>:

int main(void)
{
    REGISTER[IMU_STATUS_ADDRESS] = IMU_STATUS_INITIALIZING;
    22ec:	c6 e3       	ldi	r28, 0x36	; 54
    22ee:	d1 e0       	ldi	r29, 0x01	; 1
    22f0:	81 e0       	ldi	r24, 0x01	; 1
    22f2:	88 83       	st	Y, r24
    
    setup();
    22f4:	0e 94 0a 10 	call	0x2014	; 0x2014 <setup>
    setup_sensors();
    22f8:	0e 94 35 10 	call	0x206a	; 0x206a <setup_sensors>
    
    REGISTER[IMU_STATUS_ADDRESS] = IMU_STATUS_READY_TO_START;
    22fc:	83 e0       	ldi	r24, 0x03	; 3
    22fe:	88 83       	st	Y, r24
    
    #ifdef DEBUG
    uart_puts("ready to start\n");
    #endif
    
    long last = 0;
    2300:	81 2c       	mov	r8, r1
    2302:	91 2c       	mov	r9, r1
    2304:	54 01       	movw	r10, r8
        {
            calculate_roll_pitch_yaw();
        
            if(delta > 1000)
            {
                PORTB ^= (1 << PB5);
    2306:	10 e2       	ldi	r17, 0x20	; 32
    long last = 0;
    long delta = 0;
    
    while(1)
    {
        delta = millis() - last;
    2308:	0e 94 3f 19 	call	0x327e	; 0x327e <millis>
    230c:	6b 01       	movw	r12, r22
    230e:	7c 01       	movw	r14, r24
        
        if (REGISTER[IMU_STATUS_ADDRESS] == IMU_STATUS_RUNNING)
    2310:	88 81       	ld	r24, Y
    2312:	8a 30       	cpi	r24, 0x0A	; 10
    2314:	a9 f4       	brne	.+42     	; 0x2340 <main+0x54>
        {
            calculate_roll_pitch_yaw();
    2316:	0e 94 78 10 	call	0x20f0	; 0x20f0 <calculate_roll_pitch_yaw>
        
            if(delta > 1000)
    231a:	c8 18       	sub	r12, r8
    231c:	d9 08       	sbc	r13, r9
    231e:	ea 08       	sbc	r14, r10
    2320:	fb 08       	sbc	r15, r11
    2322:	89 ee       	ldi	r24, 0xE9	; 233
    2324:	c8 16       	cp	r12, r24
    2326:	83 e0       	ldi	r24, 0x03	; 3
    2328:	d8 06       	cpc	r13, r24
    232a:	e1 04       	cpc	r14, r1
    232c:	f1 04       	cpc	r15, r1
    232e:	64 f3       	brlt	.-40     	; 0x2308 <main+0x1c>
            {
                PORTB ^= (1 << PB5);
    2330:	85 b1       	in	r24, 0x05	; 5
    2332:	81 27       	eor	r24, r17
    2334:	85 b9       	out	0x05, r24	; 5
                
                uart_puts(BUFFER);
                count = 0;
                #endif
                
                last = millis();
    2336:	0e 94 3f 19 	call	0x327e	; 0x327e <millis>
    233a:	4b 01       	movw	r8, r22
    233c:	5c 01       	movw	r10, r24
    233e:	e4 cf       	rjmp	.-56     	; 0x2308 <main+0x1c>
            }
            #if DEBUG
            count++;
            #endif
        }
        else if (REGISTER[IMU_STATUS_CALIBRATING] == IMU_STATUS_RUNNING)
    2340:	8a 81       	ldd	r24, Y+2	; 0x02
    2342:	8a 30       	cpi	r24, 0x0A	; 10
    2344:	09 f7       	brne	.-62     	; 0x2308 <main+0x1c>
        {
            calibrate_gyro_accel();
    2346:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <calibrate_gyro_accel>
    234a:	de cf       	rjmp	.-68     	; 0x2308 <main+0x1c>

0000234c <setGain>:
void setGain(uint8_t gain)
{
	// use this method to guarantee that bits 4-0 are set to zero, which is a
	// requirement specified in the datasheet; it's actually more efficient than
	// using the I2Cdev.writeBits method
	i2c_write_byte(HMC5883L_ADDRESS, HMC5883L_CONFIG_B, gain << (HMC5883L_CRB_GAIN_BIT - HMC5883L_CRB_GAIN_LENGTH + 1));
    234c:	48 2f       	mov	r20, r24
    234e:	42 95       	swap	r20
    2350:	44 0f       	add	r20, r20
    2352:	40 7e       	andi	r20, 0xE0	; 224
    2354:	61 e0       	ldi	r22, 0x01	; 1
    2356:	8e e1       	ldi	r24, 0x1E	; 30
    2358:	0e 94 3f 1b 	call	0x367e	; 0x367e <i2c_write_byte>
    235c:	08 95       	ret

0000235e <setMode>:
* @see HMC5883L_RA_MODE
* @see HMC5883L_MODEREG_BIT
* @see HMC5883L_MODEREG_LENGTH
*/
void setMode(uint8_t newMode)
{
    235e:	cf 93       	push	r28
    2360:	c8 2f       	mov	r28, r24
	// use this method to guarantee that bits 7-2 are set to zero, which is a
	// requirement specified in the datasheet; it's actually more efficient than
	// using the I2Cdev.writeBits method
	i2c_write_byte(HMC5883L_ADDRESS, HMC5883L_MODE, newMode << (HMC5883L_MODEREG_BIT - HMC5883L_MODEREG_LENGTH + 1));
    2362:	48 2f       	mov	r20, r24
    2364:	62 e0       	ldi	r22, 0x02	; 2
    2366:	8e e1       	ldi	r24, 0x1E	; 30
    2368:	0e 94 3f 1b 	call	0x367e	; 0x367e <i2c_write_byte>
	mode = newMode; // track to tell if we have to clear bit 7 after a read
    236c:	c0 93 cd 01 	sts	0x01CD, r28	; 0x8001cd <mode>
}
    2370:	cf 91       	pop	r28
    2372:	08 95       	ret

00002374 <hcm5883l_initialize>:

void hcm5883l_initialize()
{
	// write CONFIG_A register
	i2c_write_byte(HMC5883L_ADDRESS, HMC5883L_CONFIG_A,
    2374:	40 e7       	ldi	r20, 0x70	; 112
    2376:	60 e0       	ldi	r22, 0x00	; 0
    2378:	8e e1       	ldi	r24, 0x1E	; 30
    237a:	0e 94 3f 1b 	call	0x367e	; 0x367e <i2c_write_byte>
	(HMC5883L_AVERAGING_8 << (HMC5883L_CRA_AVERAGE_BIT - HMC5883L_CRA_AVERAGE_LENGTH + 1)) |
	(HMC5883L_RATE_15 << (HMC5883L_CRA_RATE_BIT - HMC5883L_CRA_RATE_LENGTH + 1)) |
	(HMC5883L_BIAS_NORMAL << (HMC5883L_CRA_BIAS_BIT - HMC5883L_CRA_BIAS_LENGTH + 1)));

	// write CONFIG_B register
	setGain(HMC5883L_GAIN_1090);
    237e:	81 e0       	ldi	r24, 0x01	; 1
    2380:	0e 94 a6 11 	call	0x234c	; 0x234c <setGain>

	// write MODE register
	setMode(HMC5883L_MODE_SINGLE);
    2384:	81 e0       	ldi	r24, 0x01	; 1
    2386:	0e 94 af 11 	call	0x235e	; 0x235e <setMode>
    238a:	08 95       	ret

0000238c <hcm5883l_get_heading>:
* @param y 16-bit signed integer container for Y-axis heading
* @param z 16-bit signed integer container for Z-axis heading
* @see HMC5883L_RA_DATAX_H
*/
void hcm5883l_get_heading(int16_t *x, int16_t *y, int16_t *z)
{
    238c:	cf 92       	push	r12
    238e:	df 92       	push	r13
    2390:	ef 92       	push	r14
    2392:	ff 92       	push	r15
    2394:	0f 93       	push	r16
    2396:	1f 93       	push	r17
    2398:	cf 93       	push	r28
    239a:	df 93       	push	r29
    239c:	6c 01       	movw	r12, r24
    239e:	7b 01       	movw	r14, r22
    23a0:	ea 01       	movw	r28, r20
	i2c_read_bytes(
    23a2:	08 ee       	ldi	r16, 0xE8	; 232
    23a4:	13 e0       	ldi	r17, 0x03	; 3
    23a6:	2e ec       	ldi	r18, 0xCE	; 206
    23a8:	31 e0       	ldi	r19, 0x01	; 1
    23aa:	46 e0       	ldi	r20, 0x06	; 6
    23ac:	63 e0       	ldi	r22, 0x03	; 3
    23ae:	8e e1       	ldi	r24, 0x1E	; 30
    23b0:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <i2c_read_bytes>
        HMC5883L_DATAX_H,
        6,
        mag_buffer,
        I2CDEV_DEFAULT_READ_TIMEOUT
    );
	if (mode == HMC5883L_MODE_SINGLE)
    23b4:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <mode>
    23b8:	81 30       	cpi	r24, 0x01	; 1
    23ba:	29 f4       	brne	.+10     	; 0x23c6 <hcm5883l_get_heading+0x3a>
	{
		i2c_write_byte(HMC5883L_ADDRESS,
    23bc:	41 e0       	ldi	r20, 0x01	; 1
    23be:	62 e0       	ldi	r22, 0x02	; 2
    23c0:	8e e1       	ldi	r24, 0x1E	; 30
    23c2:	0e 94 3f 1b 	call	0x367e	; 0x367e <i2c_write_byte>
        HMC5883L_MODE,
        HMC5883L_MODE_SINGLE << (HMC5883L_MODEREG_BIT - HMC5883L_MODEREG_LENGTH + 1));
	}
	*x = (((int16_t)mag_buffer[0]) << 8) | mag_buffer[1];
    23c6:	ee ec       	ldi	r30, 0xCE	; 206
    23c8:	f1 e0       	ldi	r31, 0x01	; 1
    23ca:	80 81       	ld	r24, Z
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	98 2f       	mov	r25, r24
    23d0:	88 27       	eor	r24, r24
    23d2:	21 81       	ldd	r18, Z+1	; 0x01
    23d4:	82 2b       	or	r24, r18
    23d6:	d6 01       	movw	r26, r12
    23d8:	8d 93       	st	X+, r24
    23da:	9c 93       	st	X, r25
	*y = (((int16_t)mag_buffer[4]) << 8) | mag_buffer[5];
    23dc:	84 81       	ldd	r24, Z+4	; 0x04
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	98 2f       	mov	r25, r24
    23e2:	88 27       	eor	r24, r24
    23e4:	25 81       	ldd	r18, Z+5	; 0x05
    23e6:	82 2b       	or	r24, r18
    23e8:	d7 01       	movw	r26, r14
    23ea:	8d 93       	st	X+, r24
    23ec:	9c 93       	st	X, r25
	*z = (((int16_t)mag_buffer[2]) << 8) | mag_buffer[3];
    23ee:	82 81       	ldd	r24, Z+2	; 0x02
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	98 2f       	mov	r25, r24
    23f4:	88 27       	eor	r24, r24
    23f6:	23 81       	ldd	r18, Z+3	; 0x03
    23f8:	82 2b       	or	r24, r18
    23fa:	99 83       	std	Y+1, r25	; 0x01
    23fc:	88 83       	st	Y, r24
    23fe:	df 91       	pop	r29
    2400:	cf 91       	pop	r28
    2402:	1f 91       	pop	r17
    2404:	0f 91       	pop	r16
    2406:	ff 90       	pop	r15
    2408:	ef 90       	pop	r14
    240a:	df 90       	pop	r13
    240c:	cf 90       	pop	r12
    240e:	08 95       	ret

00002410 <mpu6050_set_clock_source>:
* @return True if connection is valid, false otherwise
*/
uint8_t mpu6050_test_connection(void)
{
    return mpu6050_who_am_i() == 0x34;
}
    2410:	0f 93       	push	r16
    2412:	08 2f       	mov	r16, r24
    2414:	23 e0       	ldi	r18, 0x03	; 3
    2416:	42 e0       	ldi	r20, 0x02	; 2
    2418:	6b e6       	ldi	r22, 0x6B	; 107
    241a:	88 e6       	ldi	r24, 0x68	; 104
    241c:	0e 94 86 1b 	call	0x370c	; 0x370c <i2c_write_bits>
    2420:	0f 91       	pop	r16
    2422:	08 95       	ret

00002424 <mpu6050_set_full_scale_gyro_range>:
    2424:	0f 93       	push	r16
    2426:	08 2f       	mov	r16, r24
    2428:	22 e0       	ldi	r18, 0x02	; 2
    242a:	44 e0       	ldi	r20, 0x04	; 4
    242c:	6b e1       	ldi	r22, 0x1B	; 27
    242e:	88 e6       	ldi	r24, 0x68	; 104
    2430:	0e 94 86 1b 	call	0x370c	; 0x370c <i2c_write_bits>
    2434:	0f 91       	pop	r16
    2436:	08 95       	ret

00002438 <mpu6050_set_full_scale_accel_range>:
    2438:	0f 93       	push	r16
    243a:	08 2f       	mov	r16, r24
    243c:	22 e0       	ldi	r18, 0x02	; 2
    243e:	44 e0       	ldi	r20, 0x04	; 4
    2440:	6c e1       	ldi	r22, 0x1C	; 28
    2442:	88 e6       	ldi	r24, 0x68	; 104
    2444:	0e 94 86 1b 	call	0x370c	; 0x370c <i2c_write_bits>
    2448:	0f 91       	pop	r16
    244a:	08 95       	ret

0000244c <mpu6050_set_sleep_enabled>:
    244c:	28 2f       	mov	r18, r24
    244e:	46 e0       	ldi	r20, 0x06	; 6
    2450:	6b e6       	ldi	r22, 0x6B	; 107
    2452:	88 e6       	ldi	r24, 0x68	; 104
    2454:	0e 94 4f 1b 	call	0x369e	; 0x369e <i2c_write_bit>
    2458:	08 95       	ret

0000245a <mpu6050_set_I2C_master_mode_enabled>:
    245a:	28 2f       	mov	r18, r24
    245c:	45 e0       	ldi	r20, 0x05	; 5
    245e:	6a e6       	ldi	r22, 0x6A	; 106
    2460:	88 e6       	ldi	r24, 0x68	; 104
    2462:	0e 94 4f 1b 	call	0x369e	; 0x369e <i2c_write_bit>
    2466:	08 95       	ret

00002468 <mpu6050_set_I2C_bypass_enabled>:
    2468:	28 2f       	mov	r18, r24
    246a:	41 e0       	ldi	r20, 0x01	; 1
    246c:	67 e3       	ldi	r22, 0x37	; 55
    246e:	88 e6       	ldi	r24, 0x68	; 104
    2470:	0e 94 4f 1b 	call	0x369e	; 0x369e <i2c_write_bit>
    2474:	08 95       	ret

00002476 <mpu6050_initialize>:
    2476:	80 e0       	ldi	r24, 0x00	; 0
    2478:	0e 94 2d 12 	call	0x245a	; 0x245a <mpu6050_set_I2C_master_mode_enabled>
    247c:	81 e0       	ldi	r24, 0x01	; 1
    247e:	0e 94 34 12 	call	0x2468	; 0x2468 <mpu6050_set_I2C_bypass_enabled>
    2482:	81 e0       	ldi	r24, 0x01	; 1
    2484:	0e 94 08 12 	call	0x2410	; 0x2410 <mpu6050_set_clock_source>
    2488:	81 e0       	ldi	r24, 0x01	; 1
    248a:	0e 94 12 12 	call	0x2424	; 0x2424 <mpu6050_set_full_scale_gyro_range>
    248e:	82 e0       	ldi	r24, 0x02	; 2
    2490:	0e 94 1c 12 	call	0x2438	; 0x2438 <mpu6050_set_full_scale_accel_range>
    2494:	80 e0       	ldi	r24, 0x00	; 0
    2496:	0e 94 26 12 	call	0x244c	; 0x244c <mpu6050_set_sleep_enabled>
    249a:	08 95       	ret

0000249c <mpu6050_get_motion_6>:
    249c:	4f 92       	push	r4
    249e:	5f 92       	push	r5
    24a0:	6f 92       	push	r6
    24a2:	7f 92       	push	r7
    24a4:	8f 92       	push	r8
    24a6:	9f 92       	push	r9
    24a8:	af 92       	push	r10
    24aa:	bf 92       	push	r11
    24ac:	cf 92       	push	r12
    24ae:	df 92       	push	r13
    24b0:	ef 92       	push	r14
    24b2:	ff 92       	push	r15
    24b4:	0f 93       	push	r16
    24b6:	1f 93       	push	r17
    24b8:	cf 93       	push	r28
    24ba:	df 93       	push	r29
    24bc:	cd b7       	in	r28, 0x3d	; 61
    24be:	de b7       	in	r29, 0x3e	; 62
    24c0:	2e 97       	sbiw	r28, 0x0e	; 14
    24c2:	0f b6       	in	r0, 0x3f	; 63
    24c4:	f8 94       	cli
    24c6:	de bf       	out	0x3e, r29	; 62
    24c8:	0f be       	out	0x3f, r0	; 63
    24ca:	cd bf       	out	0x3d, r28	; 61
    24cc:	3c 01       	movw	r6, r24
    24ce:	4b 01       	movw	r8, r22
    24d0:	5a 01       	movw	r10, r20
    24d2:	69 01       	movw	r12, r18
    24d4:	28 01       	movw	r4, r16
    24d6:	08 ee       	ldi	r16, 0xE8	; 232
    24d8:	13 e0       	ldi	r17, 0x03	; 3
    24da:	9e 01       	movw	r18, r28
    24dc:	2f 5f       	subi	r18, 0xFF	; 255
    24de:	3f 4f       	sbci	r19, 0xFF	; 255
    24e0:	4e e0       	ldi	r20, 0x0E	; 14
    24e2:	6b e3       	ldi	r22, 0x3B	; 59
    24e4:	88 e6       	ldi	r24, 0x68	; 104
    24e6:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <i2c_read_bytes>
    24ea:	89 81       	ldd	r24, Y+1	; 0x01
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	98 2f       	mov	r25, r24
    24f0:	88 27       	eor	r24, r24
    24f2:	2a 81       	ldd	r18, Y+2	; 0x02
    24f4:	82 2b       	or	r24, r18
    24f6:	f3 01       	movw	r30, r6
    24f8:	91 83       	std	Z+1, r25	; 0x01
    24fa:	80 83       	st	Z, r24
    24fc:	8b 81       	ldd	r24, Y+3	; 0x03
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	98 2f       	mov	r25, r24
    2502:	88 27       	eor	r24, r24
    2504:	2c 81       	ldd	r18, Y+4	; 0x04
    2506:	82 2b       	or	r24, r18
    2508:	f4 01       	movw	r30, r8
    250a:	91 83       	std	Z+1, r25	; 0x01
    250c:	80 83       	st	Z, r24
    250e:	8d 81       	ldd	r24, Y+5	; 0x05
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	98 2f       	mov	r25, r24
    2514:	88 27       	eor	r24, r24
    2516:	2e 81       	ldd	r18, Y+6	; 0x06
    2518:	82 2b       	or	r24, r18
    251a:	f5 01       	movw	r30, r10
    251c:	91 83       	std	Z+1, r25	; 0x01
    251e:	80 83       	st	Z, r24
    2520:	89 85       	ldd	r24, Y+9	; 0x09
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	98 2f       	mov	r25, r24
    2526:	88 27       	eor	r24, r24
    2528:	2a 85       	ldd	r18, Y+10	; 0x0a
    252a:	82 2b       	or	r24, r18
    252c:	f6 01       	movw	r30, r12
    252e:	91 83       	std	Z+1, r25	; 0x01
    2530:	80 83       	st	Z, r24
    2532:	8b 85       	ldd	r24, Y+11	; 0x0b
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	98 2f       	mov	r25, r24
    2538:	88 27       	eor	r24, r24
    253a:	2c 85       	ldd	r18, Y+12	; 0x0c
    253c:	82 2b       	or	r24, r18
    253e:	f2 01       	movw	r30, r4
    2540:	91 83       	std	Z+1, r25	; 0x01
    2542:	80 83       	st	Z, r24
    2544:	8d 85       	ldd	r24, Y+13	; 0x0d
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	98 2f       	mov	r25, r24
    254a:	88 27       	eor	r24, r24
    254c:	2e 85       	ldd	r18, Y+14	; 0x0e
    254e:	82 2b       	or	r24, r18
    2550:	f7 01       	movw	r30, r14
    2552:	91 83       	std	Z+1, r25	; 0x01
    2554:	80 83       	st	Z, r24
    2556:	2e 96       	adiw	r28, 0x0e	; 14
    2558:	0f b6       	in	r0, 0x3f	; 63
    255a:	f8 94       	cli
    255c:	de bf       	out	0x3e, r29	; 62
    255e:	0f be       	out	0x3f, r0	; 63
    2560:	cd bf       	out	0x3d, r28	; 61
    2562:	df 91       	pop	r29
    2564:	cf 91       	pop	r28
    2566:	1f 91       	pop	r17
    2568:	0f 91       	pop	r16
    256a:	ff 90       	pop	r15
    256c:	ef 90       	pop	r14
    256e:	df 90       	pop	r13
    2570:	cf 90       	pop	r12
    2572:	bf 90       	pop	r11
    2574:	af 90       	pop	r10
    2576:	9f 90       	pop	r9
    2578:	8f 90       	pop	r8
    257a:	7f 90       	pop	r7
    257c:	6f 90       	pop	r6
    257e:	5f 90       	pop	r5
    2580:	4f 90       	pop	r4
    2582:	08 95       	ret

00002584 <mpu6050_set_x_accel_offset>:


void mpu6050_set_x_accel_offset(int16_t offset) {
    i2c_write_word(MPU6050_ADDRESS, MPU6050_RA_XA_OFFS_H, offset);
    2584:	ac 01       	movw	r20, r24
    2586:	66 e0       	ldi	r22, 0x06	; 6
    2588:	88 e6       	ldi	r24, 0x68	; 104
    258a:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <i2c_write_word>
    258e:	08 95       	ret

00002590 <mpu6050_set_y_accel_offset>:
}

void mpu6050_set_y_accel_offset(int16_t offset) {
    i2c_write_word(MPU6050_ADDRESS, MPU6050_RA_YA_OFFS_H, offset);
    2590:	ac 01       	movw	r20, r24
    2592:	68 e0       	ldi	r22, 0x08	; 8
    2594:	88 e6       	ldi	r24, 0x68	; 104
    2596:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <i2c_write_word>
    259a:	08 95       	ret

0000259c <mpu6050_set_z_accel_offset>:
}


void mpu6050_set_z_accel_offset(int16_t offset) {
    i2c_write_word(MPU6050_ADDRESS, MPU6050_RA_ZA_OFFS_H, offset);
    259c:	ac 01       	movw	r20, r24
    259e:	6a e0       	ldi	r22, 0x0A	; 10
    25a0:	88 e6       	ldi	r24, 0x68	; 104
    25a2:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <i2c_write_word>
    25a6:	08 95       	ret

000025a8 <mpu6050_set_x_gyro_offset>:
}

void mpu6050_set_x_gyro_offset(int16_t offset) {
    i2c_write_word(MPU6050_ADDRESS, MPU6050_RA_XG_OFFS_USRH, offset);
    25a8:	ac 01       	movw	r20, r24
    25aa:	63 e1       	ldi	r22, 0x13	; 19
    25ac:	88 e6       	ldi	r24, 0x68	; 104
    25ae:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <i2c_write_word>
    25b2:	08 95       	ret

000025b4 <mpu6050_set_y_gyro_offset>:
}

void mpu6050_set_y_gyro_offset(int16_t offset) {
    i2c_write_word(MPU6050_ADDRESS, MPU6050_RA_YG_OFFS_USRH, offset);
    25b4:	ac 01       	movw	r20, r24
    25b6:	65 e1       	ldi	r22, 0x15	; 21
    25b8:	88 e6       	ldi	r24, 0x68	; 104
    25ba:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <i2c_write_word>
    25be:	08 95       	ret

000025c0 <mpu6050_set_z_gyro_offset>:
}

void mpu6050_set_z_gyro_offset(int16_t offset) {
    i2c_write_word(MPU6050_ADDRESS, MPU6050_RA_ZG_OFFS_USRH, offset);
    25c0:	ac 01       	movw	r20, r24
    25c2:	67 e1       	ldi	r22, 0x17	; 23
    25c4:	88 e6       	ldi	r24, 0x68	; 104
    25c6:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <i2c_write_word>
    25ca:	08 95       	ret

000025cc <meansensors>:
}

void meansensors(int* mean_values)
{
    25cc:	4f 92       	push	r4
    25ce:	5f 92       	push	r5
    25d0:	6f 92       	push	r6
    25d2:	7f 92       	push	r7
    25d4:	8f 92       	push	r8
    25d6:	9f 92       	push	r9
    25d8:	af 92       	push	r10
    25da:	bf 92       	push	r11
    25dc:	cf 92       	push	r12
    25de:	df 92       	push	r13
    25e0:	ef 92       	push	r14
    25e2:	ff 92       	push	r15
    25e4:	0f 93       	push	r16
    25e6:	1f 93       	push	r17
    25e8:	cf 93       	push	r28
    25ea:	df 93       	push	r29
    25ec:	cd b7       	in	r28, 0x3d	; 61
    25ee:	de b7       	in	r29, 0x3e	; 62
    25f0:	a0 97       	sbiw	r28, 0x20	; 32
    25f2:	0f b6       	in	r0, 0x3f	; 63
    25f4:	f8 94       	cli
    25f6:	de bf       	out	0x3e, r29	; 62
    25f8:	0f be       	out	0x3f, r0	; 63
    25fa:	cd bf       	out	0x3d, r28	; 61
    25fc:	6c 01       	movw	r12, r24
        gz;

    while ( i < (buffersize + 101))
    {
        
        mpu6050_get_motion_6(&ax, &ay, &az, &gx, &gy, &gz);
    25fe:	9e 01       	movw	r18, r28
    2600:	25 5f       	subi	r18, 0xF5	; 245
    2602:	3f 4f       	sbci	r19, 0xFF	; 255
    2604:	79 01       	movw	r14, r18
    2606:	8e 01       	movw	r16, r28
    2608:	07 5f       	subi	r16, 0xF7	; 247
    260a:	1f 4f       	sbci	r17, 0xFF	; 255
    260c:	24 50       	subi	r18, 0x04	; 4
    260e:	31 09       	sbc	r19, r1
    2610:	ae 01       	movw	r20, r28
    2612:	4b 5f       	subi	r20, 0xFB	; 251
    2614:	5f 4f       	sbci	r21, 0xFF	; 255
    2616:	be 01       	movw	r22, r28
    2618:	6d 5f       	subi	r22, 0xFD	; 253
    261a:	7f 4f       	sbci	r23, 0xFF	; 255
    261c:	ce 01       	movw	r24, r28
    261e:	01 96       	adiw	r24, 0x01	; 1
    2620:	0e 94 4e 12 	call	0x249c	; 0x249c <mpu6050_get_motion_6>
    2624:	0f 2e       	mov	r0, r31
    2626:	fc e9       	ldi	r31, 0x9C	; 156
    2628:	8f 2e       	mov	r8, r31
    262a:	99 24       	eor	r9, r9
    262c:	9a 94       	dec	r9
    262e:	a9 2c       	mov	r10, r9
    2630:	b9 2c       	mov	r11, r9
    2632:	f0 2d       	mov	r31, r0
        buff_ax = 0,
        buff_ay = 0,
        buff_az = 0,
        buff_gx = 0,
        buff_gy = 0,
        buff_gz = 0;
    2634:	1d 8e       	std	Y+29, r1	; 0x1d
    2636:	1e 8e       	std	Y+30, r1	; 0x1e
    2638:	1f 8e       	std	Y+31, r1	; 0x1f
    263a:	18 a2       	std	Y+32, r1	; 0x20
    long i = 0,
        buff_ax = 0,
        buff_ay = 0,
        buff_az = 0,
        buff_gx = 0,
        buff_gy = 0,
    263c:	19 8e       	std	Y+25, r1	; 0x19
    263e:	1a 8e       	std	Y+26, r1	; 0x1a
    2640:	1b 8e       	std	Y+27, r1	; 0x1b
    2642:	1c 8e       	std	Y+28, r1	; 0x1c
    int buffersize = 1000;
    long i = 0,
        buff_ax = 0,
        buff_ay = 0,
        buff_az = 0,
        buff_gx = 0,
    2644:	1d 8a       	std	Y+21, r1	; 0x15
    2646:	1e 8a       	std	Y+22, r1	; 0x16
    2648:	1f 8a       	std	Y+23, r1	; 0x17
    264a:	18 8e       	std	Y+24, r1	; 0x18
{
    int buffersize = 1000;
    long i = 0,
        buff_ax = 0,
        buff_ay = 0,
        buff_az = 0,
    264c:	19 8a       	std	Y+17, r1	; 0x11
    264e:	1a 8a       	std	Y+18, r1	; 0x12
    2650:	1b 8a       	std	Y+19, r1	; 0x13
    2652:	1c 8a       	std	Y+20, r1	; 0x14
void meansensors(int* mean_values)
{
    int buffersize = 1000;
    long i = 0,
        buff_ax = 0,
        buff_ay = 0,
    2654:	41 2c       	mov	r4, r1
    2656:	51 2c       	mov	r5, r1
    2658:	32 01       	movw	r6, r4

void meansensors(int* mean_values)
{
    int buffersize = 1000;
    long i = 0,
        buff_ax = 0,
    265a:	1d 86       	std	Y+13, r1	; 0x0d
    265c:	1e 86       	std	Y+14, r1	; 0x0e
    265e:	1f 86       	std	Y+15, r1	; 0x0f
    2660:	18 8a       	std	Y+16, r1	; 0x10
    2662:	c0 c0       	rjmp	.+384    	; 0x27e4 <meansensors+0x218>
    {
        
        mpu6050_get_motion_6(&ax, &ay, &az, &gx, &gy, &gz);

        if (i > 100 && i <= (buffersize + 100)){ //First 100 measures are discarded
            buff_ax = buff_ax + ax;
    2664:	89 81       	ldd	r24, Y+1	; 0x01
    2666:	9a 81       	ldd	r25, Y+2	; 0x02
    2668:	09 2e       	mov	r0, r25
    266a:	00 0c       	add	r0, r0
    266c:	aa 0b       	sbc	r26, r26
    266e:	bb 0b       	sbc	r27, r27
    2670:	2d 85       	ldd	r18, Y+13	; 0x0d
    2672:	3e 85       	ldd	r19, Y+14	; 0x0e
    2674:	4f 85       	ldd	r20, Y+15	; 0x0f
    2676:	58 89       	ldd	r21, Y+16	; 0x10
    2678:	28 0f       	add	r18, r24
    267a:	39 1f       	adc	r19, r25
    267c:	4a 1f       	adc	r20, r26
    267e:	5b 1f       	adc	r21, r27
    2680:	2d 87       	std	Y+13, r18	; 0x0d
    2682:	3e 87       	std	Y+14, r19	; 0x0e
    2684:	4f 87       	std	Y+15, r20	; 0x0f
    2686:	58 8b       	std	Y+16, r21	; 0x10
            buff_ay = buff_ay + ay;
    2688:	8b 81       	ldd	r24, Y+3	; 0x03
    268a:	9c 81       	ldd	r25, Y+4	; 0x04
    268c:	09 2e       	mov	r0, r25
    268e:	00 0c       	add	r0, r0
    2690:	aa 0b       	sbc	r26, r26
    2692:	bb 0b       	sbc	r27, r27
    2694:	48 0e       	add	r4, r24
    2696:	59 1e       	adc	r5, r25
    2698:	6a 1e       	adc	r6, r26
    269a:	7b 1e       	adc	r7, r27
            buff_az = buff_az + az;
    269c:	8d 81       	ldd	r24, Y+5	; 0x05
    269e:	9e 81       	ldd	r25, Y+6	; 0x06
    26a0:	09 2e       	mov	r0, r25
    26a2:	00 0c       	add	r0, r0
    26a4:	aa 0b       	sbc	r26, r26
    26a6:	bb 0b       	sbc	r27, r27
    26a8:	29 89       	ldd	r18, Y+17	; 0x11
    26aa:	3a 89       	ldd	r19, Y+18	; 0x12
    26ac:	4b 89       	ldd	r20, Y+19	; 0x13
    26ae:	5c 89       	ldd	r21, Y+20	; 0x14
    26b0:	28 0f       	add	r18, r24
    26b2:	39 1f       	adc	r19, r25
    26b4:	4a 1f       	adc	r20, r26
    26b6:	5b 1f       	adc	r21, r27
    26b8:	29 8b       	std	Y+17, r18	; 0x11
    26ba:	3a 8b       	std	Y+18, r19	; 0x12
    26bc:	4b 8b       	std	Y+19, r20	; 0x13
    26be:	5c 8b       	std	Y+20, r21	; 0x14

            buff_gx = buff_gx + gx;
    26c0:	8f 81       	ldd	r24, Y+7	; 0x07
    26c2:	98 85       	ldd	r25, Y+8	; 0x08
    26c4:	09 2e       	mov	r0, r25
    26c6:	00 0c       	add	r0, r0
    26c8:	aa 0b       	sbc	r26, r26
    26ca:	bb 0b       	sbc	r27, r27
    26cc:	2d 89       	ldd	r18, Y+21	; 0x15
    26ce:	3e 89       	ldd	r19, Y+22	; 0x16
    26d0:	4f 89       	ldd	r20, Y+23	; 0x17
    26d2:	58 8d       	ldd	r21, Y+24	; 0x18
    26d4:	28 0f       	add	r18, r24
    26d6:	39 1f       	adc	r19, r25
    26d8:	4a 1f       	adc	r20, r26
    26da:	5b 1f       	adc	r21, r27
    26dc:	2d 8b       	std	Y+21, r18	; 0x15
    26de:	3e 8b       	std	Y+22, r19	; 0x16
    26e0:	4f 8b       	std	Y+23, r20	; 0x17
    26e2:	58 8f       	std	Y+24, r21	; 0x18
            buff_gy = buff_gy + gy;
    26e4:	89 85       	ldd	r24, Y+9	; 0x09
    26e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26e8:	09 2e       	mov	r0, r25
    26ea:	00 0c       	add	r0, r0
    26ec:	aa 0b       	sbc	r26, r26
    26ee:	bb 0b       	sbc	r27, r27
    26f0:	29 8d       	ldd	r18, Y+25	; 0x19
    26f2:	3a 8d       	ldd	r19, Y+26	; 0x1a
    26f4:	4b 8d       	ldd	r20, Y+27	; 0x1b
    26f6:	5c 8d       	ldd	r21, Y+28	; 0x1c
    26f8:	28 0f       	add	r18, r24
    26fa:	39 1f       	adc	r19, r25
    26fc:	4a 1f       	adc	r20, r26
    26fe:	5b 1f       	adc	r21, r27
    2700:	29 8f       	std	Y+25, r18	; 0x19
    2702:	3a 8f       	std	Y+26, r19	; 0x1a
    2704:	4b 8f       	std	Y+27, r20	; 0x1b
    2706:	5c 8f       	std	Y+28, r21	; 0x1c
            buff_gz = buff_gz + gz;
    2708:	8b 85       	ldd	r24, Y+11	; 0x0b
    270a:	9c 85       	ldd	r25, Y+12	; 0x0c
    270c:	09 2e       	mov	r0, r25
    270e:	00 0c       	add	r0, r0
    2710:	aa 0b       	sbc	r26, r26
    2712:	bb 0b       	sbc	r27, r27
    2714:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2716:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2718:	4f 8d       	ldd	r20, Y+31	; 0x1f
    271a:	58 a1       	ldd	r21, Y+32	; 0x20
    271c:	28 0f       	add	r18, r24
    271e:	39 1f       	adc	r19, r25
    2720:	4a 1f       	adc	r20, r26
    2722:	5b 1f       	adc	r21, r27
    2724:	2d 8f       	std	Y+29, r18	; 0x1d
    2726:	3e 8f       	std	Y+30, r19	; 0x1e
    2728:	4f 8f       	std	Y+31, r20	; 0x1f
    272a:	58 a3       	std	Y+32, r21	; 0x20
    272c:	3f ef       	ldi	r19, 0xFF	; 255
    272e:	83 1a       	sub	r8, r19
    2730:	93 0a       	sbc	r9, r19
    2732:	a3 0a       	sbc	r10, r19
    2734:	b3 0a       	sbc	r11, r19
        }

        if (i == (buffersize + 100))
    2736:	48 ee       	ldi	r20, 0xE8	; 232
    2738:	84 16       	cp	r8, r20
    273a:	43 e0       	ldi	r20, 0x03	; 3
    273c:	94 06       	cpc	r9, r20
    273e:	a1 04       	cpc	r10, r1
    2740:	b1 04       	cpc	r11, r1
    2742:	09 f0       	breq	.+2      	; 0x2746 <meansensors+0x17a>
    2744:	4f c0       	rjmp	.+158    	; 0x27e4 <meansensors+0x218>
        {
            mean_values[0] = buff_ax / buffersize;
    2746:	0f 2e       	mov	r0, r31
    2748:	f8 ee       	ldi	r31, 0xE8	; 232
    274a:	8f 2e       	mov	r8, r31
    274c:	f3 e0       	ldi	r31, 0x03	; 3
    274e:	9f 2e       	mov	r9, r31
    2750:	a1 2c       	mov	r10, r1
    2752:	b1 2c       	mov	r11, r1
    2754:	f0 2d       	mov	r31, r0
    2756:	6d 85       	ldd	r22, Y+13	; 0x0d
    2758:	7e 85       	ldd	r23, Y+14	; 0x0e
    275a:	8f 85       	ldd	r24, Y+15	; 0x0f
    275c:	98 89       	ldd	r25, Y+16	; 0x10
    275e:	a5 01       	movw	r20, r10
    2760:	94 01       	movw	r18, r8
    2762:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <__divmodsi4>
    2766:	f6 01       	movw	r30, r12
    2768:	31 83       	std	Z+1, r19	; 0x01
    276a:	20 83       	st	Z, r18
            mean_values[1] = buff_ay / buffersize;
    276c:	c3 01       	movw	r24, r6
    276e:	b2 01       	movw	r22, r4
    2770:	a5 01       	movw	r20, r10
    2772:	94 01       	movw	r18, r8
    2774:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <__divmodsi4>
    2778:	f6 01       	movw	r30, r12
    277a:	33 83       	std	Z+3, r19	; 0x03
    277c:	22 83       	std	Z+2, r18	; 0x02
            mean_values[2] = buff_az / buffersize;
    277e:	69 89       	ldd	r22, Y+17	; 0x11
    2780:	7a 89       	ldd	r23, Y+18	; 0x12
    2782:	8b 89       	ldd	r24, Y+19	; 0x13
    2784:	9c 89       	ldd	r25, Y+20	; 0x14
    2786:	a5 01       	movw	r20, r10
    2788:	94 01       	movw	r18, r8
    278a:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <__divmodsi4>
    278e:	f6 01       	movw	r30, r12
    2790:	35 83       	std	Z+5, r19	; 0x05
    2792:	24 83       	std	Z+4, r18	; 0x04
            mean_values[3] = buff_gx / buffersize;
    2794:	6d 89       	ldd	r22, Y+21	; 0x15
    2796:	7e 89       	ldd	r23, Y+22	; 0x16
    2798:	8f 89       	ldd	r24, Y+23	; 0x17
    279a:	98 8d       	ldd	r25, Y+24	; 0x18
    279c:	a5 01       	movw	r20, r10
    279e:	94 01       	movw	r18, r8
    27a0:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <__divmodsi4>
    27a4:	f6 01       	movw	r30, r12
    27a6:	37 83       	std	Z+7, r19	; 0x07
    27a8:	26 83       	std	Z+6, r18	; 0x06
            mean_values[4] = buff_gy / buffersize;
    27aa:	69 8d       	ldd	r22, Y+25	; 0x19
    27ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27b2:	a5 01       	movw	r20, r10
    27b4:	94 01       	movw	r18, r8
    27b6:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <__divmodsi4>
    27ba:	f6 01       	movw	r30, r12
    27bc:	31 87       	std	Z+9, r19	; 0x09
    27be:	20 87       	std	Z+8, r18	; 0x08
            mean_values[5] = buff_gz / buffersize;
    27c0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    27c2:	7e 8d       	ldd	r23, Y+30	; 0x1e
    27c4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27c6:	98 a1       	ldd	r25, Y+32	; 0x20
    27c8:	a5 01       	movw	r20, r10
    27ca:	94 01       	movw	r18, r8
    27cc:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <__divmodsi4>
    27d0:	f6 01       	movw	r30, r12
    27d2:	33 87       	std	Z+11, r19	; 0x0b
    27d4:	22 87       	std	Z+10, r18	; 0x0a
    27d6:	8f e3       	ldi	r24, 0x3F	; 63
    27d8:	9c e9       	ldi	r25, 0x9C	; 156
    27da:	01 97       	sbiw	r24, 0x01	; 1
    27dc:	f1 f7       	brne	.-4      	; 0x27da <meansensors+0x20e>
    27de:	00 c0       	rjmp	.+0      	; 0x27e0 <meansensors+0x214>
    27e0:	00 00       	nop
        }
        i++;
        _delay_ms(10);
    }
}
    27e2:	22 c0       	rjmp	.+68     	; 0x2828 <meansensors+0x25c>
    27e4:	ef e3       	ldi	r30, 0x3F	; 63
    27e6:	fc e9       	ldi	r31, 0x9C	; 156
    27e8:	31 97       	sbiw	r30, 0x01	; 1
    27ea:	f1 f7       	brne	.-4      	; 0x27e8 <meansensors+0x21c>
    27ec:	00 c0       	rjmp	.+0      	; 0x27ee <meansensors+0x222>
    27ee:	00 00       	nop
        gz;

    while ( i < (buffersize + 101))
    {
        
        mpu6050_get_motion_6(&ax, &ay, &az, &gx, &gy, &gz);
    27f0:	9e 01       	movw	r18, r28
    27f2:	25 5f       	subi	r18, 0xF5	; 245
    27f4:	3f 4f       	sbci	r19, 0xFF	; 255
    27f6:	79 01       	movw	r14, r18
    27f8:	8e 01       	movw	r16, r28
    27fa:	07 5f       	subi	r16, 0xF7	; 247
    27fc:	1f 4f       	sbci	r17, 0xFF	; 255
    27fe:	24 50       	subi	r18, 0x04	; 4
    2800:	31 09       	sbc	r19, r1
    2802:	ae 01       	movw	r20, r28
    2804:	4b 5f       	subi	r20, 0xFB	; 251
    2806:	5f 4f       	sbci	r21, 0xFF	; 255
    2808:	be 01       	movw	r22, r28
    280a:	6d 5f       	subi	r22, 0xFD	; 253
    280c:	7f 4f       	sbci	r23, 0xFF	; 255
    280e:	ce 01       	movw	r24, r28
    2810:	01 96       	adiw	r24, 0x01	; 1
    2812:	0e 94 4e 12 	call	0x249c	; 0x249c <mpu6050_get_motion_6>

        if (i > 100 && i <= (buffersize + 100)){ //First 100 measures are discarded
    2816:	38 ee       	ldi	r19, 0xE8	; 232
    2818:	83 16       	cp	r8, r19
    281a:	33 e0       	ldi	r19, 0x03	; 3
    281c:	93 06       	cpc	r9, r19
    281e:	a1 04       	cpc	r10, r1
    2820:	b1 04       	cpc	r11, r1
    2822:	08 f4       	brcc	.+2      	; 0x2826 <meansensors+0x25a>
    2824:	1f cf       	rjmp	.-450    	; 0x2664 <meansensors+0x98>
    2826:	82 cf       	rjmp	.-252    	; 0x272c <meansensors+0x160>
            mean_values[5] = buff_gz / buffersize;
        }
        i++;
        _delay_ms(10);
    }
}
    2828:	a0 96       	adiw	r28, 0x20	; 32
    282a:	0f b6       	in	r0, 0x3f	; 63
    282c:	f8 94       	cli
    282e:	de bf       	out	0x3e, r29	; 62
    2830:	0f be       	out	0x3f, r0	; 63
    2832:	cd bf       	out	0x3d, r28	; 61
    2834:	df 91       	pop	r29
    2836:	cf 91       	pop	r28
    2838:	1f 91       	pop	r17
    283a:	0f 91       	pop	r16
    283c:	ff 90       	pop	r15
    283e:	ef 90       	pop	r14
    2840:	df 90       	pop	r13
    2842:	cf 90       	pop	r12
    2844:	bf 90       	pop	r11
    2846:	af 90       	pop	r10
    2848:	9f 90       	pop	r9
    284a:	8f 90       	pop	r8
    284c:	7f 90       	pop	r7
    284e:	6f 90       	pop	r6
    2850:	5f 90       	pop	r5
    2852:	4f 90       	pop	r4
    2854:	08 95       	ret

00002856 <calibration>:

void calibration(int* mean_values, int16_t* values)
{
    2856:	2f 92       	push	r2
    2858:	3f 92       	push	r3
    285a:	4f 92       	push	r4
    285c:	5f 92       	push	r5
    285e:	6f 92       	push	r6
    2860:	7f 92       	push	r7
    2862:	8f 92       	push	r8
    2864:	9f 92       	push	r9
    2866:	af 92       	push	r10
    2868:	bf 92       	push	r11
    286a:	cf 92       	push	r12
    286c:	df 92       	push	r13
    286e:	ef 92       	push	r14
    2870:	ff 92       	push	r15
    2872:	0f 93       	push	r16
    2874:	1f 93       	push	r17
    2876:	cf 93       	push	r28
    2878:	df 93       	push	r29
    287a:	ec 01       	movw	r28, r24
    287c:	1b 01       	movw	r2, r22
        az_offset,
        gx_offset,
        gy_offset,
        gz_offset;
    
    ax_offset = -mean_values[0] / 8;
    287e:	a8 80       	ld	r10, Y
    2880:	b9 80       	ldd	r11, Y+1	; 0x01
    2882:	b1 94       	neg	r11
    2884:	a1 94       	neg	r10
    2886:	b1 08       	sbc	r11, r1
    2888:	1a f4       	brpl	.+6      	; 0x2890 <calibration+0x3a>
    288a:	27 e0       	ldi	r18, 0x07	; 7
    288c:	a2 0e       	add	r10, r18
    288e:	b1 1c       	adc	r11, r1
    2890:	b5 94       	asr	r11
    2892:	a7 94       	ror	r10
    2894:	b5 94       	asr	r11
    2896:	a7 94       	ror	r10
    2898:	b5 94       	asr	r11
    289a:	a7 94       	ror	r10
    ay_offset = -mean_values[1] / 8;
    289c:	6a 80       	ldd	r6, Y+2	; 0x02
    289e:	7b 80       	ldd	r7, Y+3	; 0x03
    28a0:	71 94       	neg	r7
    28a2:	61 94       	neg	r6
    28a4:	71 08       	sbc	r7, r1
    28a6:	1a f4       	brpl	.+6      	; 0x28ae <calibration+0x58>
    28a8:	47 e0       	ldi	r20, 0x07	; 7
    28aa:	64 0e       	add	r6, r20
    28ac:	71 1c       	adc	r7, r1
    28ae:	75 94       	asr	r7
    28b0:	67 94       	ror	r6
    28b2:	75 94       	asr	r7
    28b4:	67 94       	ror	r6
    28b6:	75 94       	asr	r7
    28b8:	67 94       	ror	r6
    az_offset = (16384 - mean_values[2]) / 8;
    28ba:	2c 81       	ldd	r18, Y+4	; 0x04
    28bc:	3d 81       	ldd	r19, Y+5	; 0x05
    28be:	80 e0       	ldi	r24, 0x00	; 0
    28c0:	90 e4       	ldi	r25, 0x40	; 64
    28c2:	82 1b       	sub	r24, r18
    28c4:	93 0b       	sbc	r25, r19
    28c6:	2c 01       	movw	r4, r24
    28c8:	1a f4       	brpl	.+6      	; 0x28d0 <calibration+0x7a>
    28ca:	57 e0       	ldi	r21, 0x07	; 7
    28cc:	45 0e       	add	r4, r21
    28ce:	51 1c       	adc	r5, r1
    28d0:	55 94       	asr	r5
    28d2:	47 94       	ror	r4
    28d4:	55 94       	asr	r5
    28d6:	47 94       	ror	r4
    28d8:	55 94       	asr	r5
    28da:	47 94       	ror	r4

    gx_offset = -mean_values[3] / 4;
    28dc:	ce 80       	ldd	r12, Y+6	; 0x06
    28de:	df 80       	ldd	r13, Y+7	; 0x07
    28e0:	d1 94       	neg	r13
    28e2:	c1 94       	neg	r12
    28e4:	d1 08       	sbc	r13, r1
    28e6:	1a f4       	brpl	.+6      	; 0x28ee <calibration+0x98>
    28e8:	83 e0       	ldi	r24, 0x03	; 3
    28ea:	c8 0e       	add	r12, r24
    28ec:	d1 1c       	adc	r13, r1
    28ee:	d5 94       	asr	r13
    28f0:	c7 94       	ror	r12
    28f2:	d5 94       	asr	r13
    28f4:	c7 94       	ror	r12
    gy_offset = -mean_values[4] / 4;
    28f6:	e8 84       	ldd	r14, Y+8	; 0x08
    28f8:	f9 84       	ldd	r15, Y+9	; 0x09
    28fa:	f1 94       	neg	r15
    28fc:	e1 94       	neg	r14
    28fe:	f1 08       	sbc	r15, r1
    2900:	1a f4       	brpl	.+6      	; 0x2908 <calibration+0xb2>
    2902:	e3 e0       	ldi	r30, 0x03	; 3
    2904:	ee 0e       	add	r14, r30
    2906:	f1 1c       	adc	r15, r1
    2908:	f5 94       	asr	r15
    290a:	e7 94       	ror	r14
    290c:	f5 94       	asr	r15
    290e:	e7 94       	ror	r14
    gz_offset = -mean_values[5] / 4;
    2910:	0a 85       	ldd	r16, Y+10	; 0x0a
    2912:	1b 85       	ldd	r17, Y+11	; 0x0b
    2914:	11 95       	neg	r17
    2916:	01 95       	neg	r16
    2918:	11 09       	sbc	r17, r1
    291a:	12 f4       	brpl	.+4      	; 0x2920 <calibration+0xca>
    291c:	0d 5f       	subi	r16, 0xFD	; 253
    291e:	1f 4f       	sbci	r17, 0xFF	; 255
    2920:	15 95       	asr	r17
    2922:	07 95       	ror	r16
    2924:	15 95       	asr	r17
    2926:	07 95       	ror	r16
        else { ax_offset = ax_offset - mean_values[0] / acel_deadzone; }

        if (abs(mean_values[1]) <= acel_deadzone) { ready++; }
        else { ay_offset = ay_offset - mean_values[1] / acel_deadzone; }

        if (abs(16384 - mean_values[2]) <= acel_deadzone) { ready++; }
    2928:	81 2c       	mov	r8, r1
    292a:	68 94       	set
    292c:	99 24       	eor	r9, r9
    292e:	96 f8       	bld	r9, 6

    while (1)
    {
        int ready = 0;

        mpu6050_set_x_accel_offset(ax_offset);
    2930:	c5 01       	movw	r24, r10
    2932:	0e 94 c2 12 	call	0x2584	; 0x2584 <mpu6050_set_x_accel_offset>
        mpu6050_set_y_accel_offset(ay_offset);
    2936:	c3 01       	movw	r24, r6
    2938:	0e 94 c8 12 	call	0x2590	; 0x2590 <mpu6050_set_y_accel_offset>
        mpu6050_set_z_accel_offset(az_offset);
    293c:	c2 01       	movw	r24, r4
    293e:	0e 94 ce 12 	call	0x259c	; 0x259c <mpu6050_set_z_accel_offset>

        mpu6050_set_x_gyro_offset(gx_offset);
    2942:	c6 01       	movw	r24, r12
    2944:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <mpu6050_set_x_gyro_offset>
        mpu6050_set_y_gyro_offset(gy_offset);
    2948:	c7 01       	movw	r24, r14
    294a:	0e 94 da 12 	call	0x25b4	; 0x25b4 <mpu6050_set_y_gyro_offset>
        mpu6050_set_z_gyro_offset(gz_offset);
    294e:	c8 01       	movw	r24, r16
    2950:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <mpu6050_set_z_gyro_offset>

        meansensors(mean_values);
    2954:	ce 01       	movw	r24, r28
    2956:	0e 94 e6 12 	call	0x25cc	; 0x25cc <meansensors>

        if (abs(mean_values[0]) <= acel_deadzone) { ready++; }
    295a:	88 81       	ld	r24, Y
    295c:	99 81       	ldd	r25, Y+1	; 0x01
    295e:	9c 01       	movw	r18, r24
    2960:	99 23       	and	r25, r25
    2962:	24 f4       	brge	.+8      	; 0x296c <calibration+0x116>
    2964:	22 27       	eor	r18, r18
    2966:	33 27       	eor	r19, r19
    2968:	28 1b       	sub	r18, r24
    296a:	39 0b       	sbc	r19, r25
    296c:	29 30       	cpi	r18, 0x09	; 9
    296e:	31 05       	cpc	r19, r1
    2970:	84 f0       	brlt	.+32     	; 0x2992 <calibration+0x13c>
        else { ax_offset = ax_offset - mean_values[0] / acel_deadzone; }
    2972:	9c 01       	movw	r18, r24
    2974:	99 23       	and	r25, r25
    2976:	14 f4       	brge	.+4      	; 0x297c <calibration+0x126>
    2978:	29 5f       	subi	r18, 0xF9	; 249
    297a:	3f 4f       	sbci	r19, 0xFF	; 255
    297c:	35 95       	asr	r19
    297e:	27 95       	ror	r18
    2980:	35 95       	asr	r19
    2982:	27 95       	ror	r18
    2984:	35 95       	asr	r19
    2986:	27 95       	ror	r18
    2988:	a2 1a       	sub	r10, r18
    298a:	b3 0a       	sbc	r11, r19
    gy_offset = -mean_values[4] / 4;
    gz_offset = -mean_values[5] / 4;

    while (1)
    {
        int ready = 0;
    298c:	80 e0       	ldi	r24, 0x00	; 0
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	02 c0       	rjmp	.+4      	; 0x2996 <calibration+0x140>
        mpu6050_set_y_gyro_offset(gy_offset);
        mpu6050_set_z_gyro_offset(gz_offset);

        meansensors(mean_values);

        if (abs(mean_values[0]) <= acel_deadzone) { ready++; }
    2992:	81 e0       	ldi	r24, 0x01	; 1
    2994:	90 e0       	ldi	r25, 0x00	; 0
        else { ax_offset = ax_offset - mean_values[0] / acel_deadzone; }

        if (abs(mean_values[1]) <= acel_deadzone) { ready++; }
    2996:	2a 81       	ldd	r18, Y+2	; 0x02
    2998:	3b 81       	ldd	r19, Y+3	; 0x03
    299a:	a9 01       	movw	r20, r18
    299c:	33 23       	and	r19, r19
    299e:	24 f4       	brge	.+8      	; 0x29a8 <calibration+0x152>
    29a0:	44 27       	eor	r20, r20
    29a2:	55 27       	eor	r21, r21
    29a4:	42 1b       	sub	r20, r18
    29a6:	53 0b       	sbc	r21, r19
    29a8:	49 30       	cpi	r20, 0x09	; 9
    29aa:	51 05       	cpc	r21, r1
    29ac:	14 f4       	brge	.+4      	; 0x29b2 <calibration+0x15c>
    29ae:	01 96       	adiw	r24, 0x01	; 1
    29b0:	0d c0       	rjmp	.+26     	; 0x29cc <calibration+0x176>
        else { ay_offset = ay_offset - mean_values[1] / acel_deadzone; }
    29b2:	a9 01       	movw	r20, r18
    29b4:	33 23       	and	r19, r19
    29b6:	14 f4       	brge	.+4      	; 0x29bc <calibration+0x166>
    29b8:	49 5f       	subi	r20, 0xF9	; 249
    29ba:	5f 4f       	sbci	r21, 0xFF	; 255
    29bc:	55 95       	asr	r21
    29be:	47 95       	ror	r20
    29c0:	55 95       	asr	r21
    29c2:	47 95       	ror	r20
    29c4:	55 95       	asr	r21
    29c6:	47 95       	ror	r20
    29c8:	64 1a       	sub	r6, r20
    29ca:	75 0a       	sbc	r7, r21

        if (abs(16384 - mean_values[2]) <= acel_deadzone) { ready++; }
    29cc:	2c 81       	ldd	r18, Y+4	; 0x04
    29ce:	3d 81       	ldd	r19, Y+5	; 0x05
    29d0:	a4 01       	movw	r20, r8
    29d2:	42 1b       	sub	r20, r18
    29d4:	53 0b       	sbc	r21, r19
    29d6:	9a 01       	movw	r18, r20
    29d8:	22 f4       	brpl	.+8      	; 0x29e2 <calibration+0x18c>
    29da:	44 27       	eor	r20, r20
    29dc:	55 27       	eor	r21, r21
    29de:	42 1b       	sub	r20, r18
    29e0:	53 0b       	sbc	r21, r19
    29e2:	49 30       	cpi	r20, 0x09	; 9
    29e4:	51 05       	cpc	r21, r1
    29e6:	14 f4       	brge	.+4      	; 0x29ec <calibration+0x196>
    29e8:	01 96       	adiw	r24, 0x01	; 1
    29ea:	0d c0       	rjmp	.+26     	; 0x2a06 <calibration+0x1b0>
        else { az_offset = az_offset + (16384 - mean_values[2]) / acel_deadzone; }
    29ec:	a9 01       	movw	r20, r18
    29ee:	33 23       	and	r19, r19
    29f0:	14 f4       	brge	.+4      	; 0x29f6 <calibration+0x1a0>
    29f2:	49 5f       	subi	r20, 0xF9	; 249
    29f4:	5f 4f       	sbci	r21, 0xFF	; 255
    29f6:	55 95       	asr	r21
    29f8:	47 95       	ror	r20
    29fa:	55 95       	asr	r21
    29fc:	47 95       	ror	r20
    29fe:	55 95       	asr	r21
    2a00:	47 95       	ror	r20
    2a02:	44 0e       	add	r4, r20
    2a04:	55 1e       	adc	r5, r21

        if (abs(mean_values[3]) <= giro_deadzone) { ready++; }
    2a06:	2e 81       	ldd	r18, Y+6	; 0x06
    2a08:	3f 81       	ldd	r19, Y+7	; 0x07
    2a0a:	a9 01       	movw	r20, r18
    2a0c:	33 23       	and	r19, r19
    2a0e:	24 f4       	brge	.+8      	; 0x2a18 <calibration+0x1c2>
    2a10:	44 27       	eor	r20, r20
    2a12:	55 27       	eor	r21, r21
    2a14:	42 1b       	sub	r20, r18
    2a16:	53 0b       	sbc	r21, r19
    2a18:	42 30       	cpi	r20, 0x02	; 2
    2a1a:	51 05       	cpc	r21, r1
    2a1c:	14 f4       	brge	.+4      	; 0x2a22 <calibration+0x1cc>
    2a1e:	01 96       	adiw	r24, 0x01	; 1
    2a20:	09 c0       	rjmp	.+18     	; 0x2a34 <calibration+0x1de>
        else { gx_offset = gx_offset - mean_values[3] / (giro_deadzone + 1); }
    2a22:	a9 01       	movw	r20, r18
    2a24:	33 23       	and	r19, r19
    2a26:	14 f4       	brge	.+4      	; 0x2a2c <calibration+0x1d6>
    2a28:	4f 5f       	subi	r20, 0xFF	; 255
    2a2a:	5f 4f       	sbci	r21, 0xFF	; 255
    2a2c:	55 95       	asr	r21
    2a2e:	47 95       	ror	r20
    2a30:	c4 1a       	sub	r12, r20
    2a32:	d5 0a       	sbc	r13, r21

        if (abs(mean_values[4]) <= giro_deadzone) { ready++; }
    2a34:	28 85       	ldd	r18, Y+8	; 0x08
    2a36:	39 85       	ldd	r19, Y+9	; 0x09
    2a38:	a9 01       	movw	r20, r18
    2a3a:	33 23       	and	r19, r19
    2a3c:	24 f4       	brge	.+8      	; 0x2a46 <calibration+0x1f0>
    2a3e:	44 27       	eor	r20, r20
    2a40:	55 27       	eor	r21, r21
    2a42:	42 1b       	sub	r20, r18
    2a44:	53 0b       	sbc	r21, r19
    2a46:	42 30       	cpi	r20, 0x02	; 2
    2a48:	51 05       	cpc	r21, r1
    2a4a:	14 f4       	brge	.+4      	; 0x2a50 <calibration+0x1fa>
    2a4c:	01 96       	adiw	r24, 0x01	; 1
    2a4e:	09 c0       	rjmp	.+18     	; 0x2a62 <calibration+0x20c>
        else { gy_offset = gy_offset - mean_values[4] / (giro_deadzone + 1); }
    2a50:	a9 01       	movw	r20, r18
    2a52:	33 23       	and	r19, r19
    2a54:	14 f4       	brge	.+4      	; 0x2a5a <calibration+0x204>
    2a56:	4f 5f       	subi	r20, 0xFF	; 255
    2a58:	5f 4f       	sbci	r21, 0xFF	; 255
    2a5a:	55 95       	asr	r21
    2a5c:	47 95       	ror	r20
    2a5e:	e4 1a       	sub	r14, r20
    2a60:	f5 0a       	sbc	r15, r21

        if (abs(mean_values[5]) <= giro_deadzone) { ready++; }
    2a62:	2a 85       	ldd	r18, Y+10	; 0x0a
    2a64:	3b 85       	ldd	r19, Y+11	; 0x0b
    2a66:	a9 01       	movw	r20, r18
    2a68:	33 23       	and	r19, r19
    2a6a:	24 f4       	brge	.+8      	; 0x2a74 <calibration+0x21e>
    2a6c:	44 27       	eor	r20, r20
    2a6e:	55 27       	eor	r21, r21
    2a70:	42 1b       	sub	r20, r18
    2a72:	53 0b       	sbc	r21, r19
    2a74:	42 30       	cpi	r20, 0x02	; 2
    2a76:	51 05       	cpc	r21, r1
    2a78:	14 f4       	brge	.+4      	; 0x2a7e <calibration+0x228>
    2a7a:	01 96       	adiw	r24, 0x01	; 1
    2a7c:	09 c0       	rjmp	.+18     	; 0x2a90 <calibration+0x23a>
        else { gz_offset = gz_offset - mean_values[5] / (giro_deadzone + 1); }
    2a7e:	a9 01       	movw	r20, r18
    2a80:	33 23       	and	r19, r19
    2a82:	14 f4       	brge	.+4      	; 0x2a88 <calibration+0x232>
    2a84:	4f 5f       	subi	r20, 0xFF	; 255
    2a86:	5f 4f       	sbci	r21, 0xFF	; 255
    2a88:	55 95       	asr	r21
    2a8a:	47 95       	ror	r20
    2a8c:	04 1b       	sub	r16, r20
    2a8e:	15 0b       	sbc	r17, r21

        if (ready==6) break;
    2a90:	06 97       	sbiw	r24, 0x06	; 6
    2a92:	09 f0       	breq	.+2      	; 0x2a96 <calibration+0x240>
    2a94:	4d cf       	rjmp	.-358    	; 0x2930 <calibration+0xda>
    }
    
    values[0] = ax_offset;
    2a96:	f1 01       	movw	r30, r2
    2a98:	b1 82       	std	Z+1, r11	; 0x01
    2a9a:	a0 82       	st	Z, r10
    values[1] = ay_offset;
    2a9c:	73 82       	std	Z+3, r7	; 0x03
    2a9e:	62 82       	std	Z+2, r6	; 0x02
    values[2] = az_offset;
    2aa0:	55 82       	std	Z+5, r5	; 0x05
    2aa2:	44 82       	std	Z+4, r4	; 0x04
    values[3] = gx_offset;
    2aa4:	d7 82       	std	Z+7, r13	; 0x07
    2aa6:	c6 82       	std	Z+6, r12	; 0x06
    values[4] = gy_offset;
    2aa8:	f1 86       	std	Z+9, r15	; 0x09
    2aaa:	e0 86       	std	Z+8, r14	; 0x08
    values[5] = gz_offset;
    2aac:	13 87       	std	Z+11, r17	; 0x0b
    2aae:	02 87       	std	Z+10, r16	; 0x0a
    
}
    2ab0:	df 91       	pop	r29
    2ab2:	cf 91       	pop	r28
    2ab4:	1f 91       	pop	r17
    2ab6:	0f 91       	pop	r16
    2ab8:	ff 90       	pop	r15
    2aba:	ef 90       	pop	r14
    2abc:	df 90       	pop	r13
    2abe:	cf 90       	pop	r12
    2ac0:	bf 90       	pop	r11
    2ac2:	af 90       	pop	r10
    2ac4:	9f 90       	pop	r9
    2ac6:	8f 90       	pop	r8
    2ac8:	7f 90       	pop	r7
    2aca:	6f 90       	pop	r6
    2acc:	5f 90       	pop	r5
    2ace:	4f 90       	pop	r4
    2ad0:	3f 90       	pop	r3
    2ad2:	2f 90       	pop	r2
    2ad4:	08 95       	ret

00002ad6 <mpu6050_run_calibration>:

void mpu6050_run_calibration(int16_t* values)
{
    2ad6:	0f 93       	push	r16
    2ad8:	1f 93       	push	r17
    2ada:	cf 93       	push	r28
    2adc:	df 93       	push	r29
    2ade:	cd b7       	in	r28, 0x3d	; 61
    2ae0:	de b7       	in	r29, 0x3e	; 62
    2ae2:	2c 97       	sbiw	r28, 0x0c	; 12
    2ae4:	0f b6       	in	r0, 0x3f	; 63
    2ae6:	f8 94       	cli
    2ae8:	de bf       	out	0x3e, r29	; 62
    2aea:	0f be       	out	0x3f, r0	; 63
    2aec:	cd bf       	out	0x3d, r28	; 61
    2aee:	8c 01       	movw	r16, r24
    mpu6050_set_x_accel_offset(0);
    2af0:	80 e0       	ldi	r24, 0x00	; 0
    2af2:	90 e0       	ldi	r25, 0x00	; 0
    2af4:	0e 94 c2 12 	call	0x2584	; 0x2584 <mpu6050_set_x_accel_offset>
    mpu6050_set_y_accel_offset(0);
    2af8:	80 e0       	ldi	r24, 0x00	; 0
    2afa:	90 e0       	ldi	r25, 0x00	; 0
    2afc:	0e 94 c8 12 	call	0x2590	; 0x2590 <mpu6050_set_y_accel_offset>
    mpu6050_set_z_accel_offset(0);
    2b00:	80 e0       	ldi	r24, 0x00	; 0
    2b02:	90 e0       	ldi	r25, 0x00	; 0
    2b04:	0e 94 ce 12 	call	0x259c	; 0x259c <mpu6050_set_z_accel_offset>

    mpu6050_set_x_gyro_offset(0);
    2b08:	80 e0       	ldi	r24, 0x00	; 0
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <mpu6050_set_x_gyro_offset>
    mpu6050_set_y_gyro_offset(0);
    2b10:	80 e0       	ldi	r24, 0x00	; 0
    2b12:	90 e0       	ldi	r25, 0x00	; 0
    2b14:	0e 94 da 12 	call	0x25b4	; 0x25b4 <mpu6050_set_y_gyro_offset>
    mpu6050_set_z_gyro_offset(0);
    2b18:	80 e0       	ldi	r24, 0x00	; 0
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <mpu6050_set_z_gyro_offset>
    int state = 0;
    int mean_values[6];
    
    if (state == 0)
    {
        meansensors(mean_values);
    2b20:	ce 01       	movw	r24, r28
    2b22:	01 96       	adiw	r24, 0x01	; 1
    2b24:	0e 94 e6 12 	call	0x25cc	; 0x25cc <meansensors>
        state++;
    }
    
    if (state == 1)
    {
        calibration(mean_values, values);
    2b28:	b8 01       	movw	r22, r16
    2b2a:	ce 01       	movw	r24, r28
    2b2c:	01 96       	adiw	r24, 0x01	; 1
    2b2e:	0e 94 2b 14 	call	0x2856	; 0x2856 <calibration>
        state++;
    }
    2b32:	2c 96       	adiw	r28, 0x0c	; 12
    2b34:	0f b6       	in	r0, 0x3f	; 63
    2b36:	f8 94       	cli
    2b38:	de bf       	out	0x3e, r29	; 62
    2b3a:	0f be       	out	0x3f, r0	; 63
    2b3c:	cd bf       	out	0x3d, r28	; 61
    2b3e:	df 91       	pop	r29
    2b40:	cf 91       	pop	r28
    2b42:	1f 91       	pop	r17
    2b44:	0f 91       	pop	r16
    2b46:	08 95       	ret

00002b48 <__subsf3>:
    2b48:	50 58       	subi	r21, 0x80	; 128

00002b4a <__addsf3>:
    2b4a:	bb 27       	eor	r27, r27
    2b4c:	aa 27       	eor	r26, r26
    2b4e:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <__addsf3x>
    2b52:	0c 94 e8 17 	jmp	0x2fd0	; 0x2fd0 <__fp_round>
    2b56:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <__fp_pscA>
    2b5a:	38 f0       	brcs	.+14     	; 0x2b6a <__addsf3+0x20>
    2b5c:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <__fp_pscB>
    2b60:	20 f0       	brcs	.+8      	; 0x2b6a <__addsf3+0x20>
    2b62:	39 f4       	brne	.+14     	; 0x2b72 <__addsf3+0x28>
    2b64:	9f 3f       	cpi	r25, 0xFF	; 255
    2b66:	19 f4       	brne	.+6      	; 0x2b6e <__addsf3+0x24>
    2b68:	26 f4       	brtc	.+8      	; 0x2b72 <__addsf3+0x28>
    2b6a:	0c 94 9c 17 	jmp	0x2f38	; 0x2f38 <__fp_nan>
    2b6e:	0e f4       	brtc	.+2      	; 0x2b72 <__addsf3+0x28>
    2b70:	e0 95       	com	r30
    2b72:	e7 fb       	bst	r30, 7
    2b74:	0c 94 96 17 	jmp	0x2f2c	; 0x2f2c <__fp_inf>

00002b78 <__addsf3x>:
    2b78:	e9 2f       	mov	r30, r25
    2b7a:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <__fp_split3>
    2b7e:	58 f3       	brcs	.-42     	; 0x2b56 <__addsf3+0xc>
    2b80:	ba 17       	cp	r27, r26
    2b82:	62 07       	cpc	r22, r18
    2b84:	73 07       	cpc	r23, r19
    2b86:	84 07       	cpc	r24, r20
    2b88:	95 07       	cpc	r25, r21
    2b8a:	20 f0       	brcs	.+8      	; 0x2b94 <__addsf3x+0x1c>
    2b8c:	79 f4       	brne	.+30     	; 0x2bac <__addsf3x+0x34>
    2b8e:	a6 f5       	brtc	.+104    	; 0x2bf8 <__addsf3x+0x80>
    2b90:	0c 94 1b 18 	jmp	0x3036	; 0x3036 <__fp_zero>
    2b94:	0e f4       	brtc	.+2      	; 0x2b98 <__addsf3x+0x20>
    2b96:	e0 95       	com	r30
    2b98:	0b 2e       	mov	r0, r27
    2b9a:	ba 2f       	mov	r27, r26
    2b9c:	a0 2d       	mov	r26, r0
    2b9e:	0b 01       	movw	r0, r22
    2ba0:	b9 01       	movw	r22, r18
    2ba2:	90 01       	movw	r18, r0
    2ba4:	0c 01       	movw	r0, r24
    2ba6:	ca 01       	movw	r24, r20
    2ba8:	a0 01       	movw	r20, r0
    2baa:	11 24       	eor	r1, r1
    2bac:	ff 27       	eor	r31, r31
    2bae:	59 1b       	sub	r21, r25
    2bb0:	99 f0       	breq	.+38     	; 0x2bd8 <__addsf3x+0x60>
    2bb2:	59 3f       	cpi	r21, 0xF9	; 249
    2bb4:	50 f4       	brcc	.+20     	; 0x2bca <__addsf3x+0x52>
    2bb6:	50 3e       	cpi	r21, 0xE0	; 224
    2bb8:	68 f1       	brcs	.+90     	; 0x2c14 <__addsf3x+0x9c>
    2bba:	1a 16       	cp	r1, r26
    2bbc:	f0 40       	sbci	r31, 0x00	; 0
    2bbe:	a2 2f       	mov	r26, r18
    2bc0:	23 2f       	mov	r18, r19
    2bc2:	34 2f       	mov	r19, r20
    2bc4:	44 27       	eor	r20, r20
    2bc6:	58 5f       	subi	r21, 0xF8	; 248
    2bc8:	f3 cf       	rjmp	.-26     	; 0x2bb0 <__addsf3x+0x38>
    2bca:	46 95       	lsr	r20
    2bcc:	37 95       	ror	r19
    2bce:	27 95       	ror	r18
    2bd0:	a7 95       	ror	r26
    2bd2:	f0 40       	sbci	r31, 0x00	; 0
    2bd4:	53 95       	inc	r21
    2bd6:	c9 f7       	brne	.-14     	; 0x2bca <__addsf3x+0x52>
    2bd8:	7e f4       	brtc	.+30     	; 0x2bf8 <__addsf3x+0x80>
    2bda:	1f 16       	cp	r1, r31
    2bdc:	ba 0b       	sbc	r27, r26
    2bde:	62 0b       	sbc	r22, r18
    2be0:	73 0b       	sbc	r23, r19
    2be2:	84 0b       	sbc	r24, r20
    2be4:	ba f0       	brmi	.+46     	; 0x2c14 <__addsf3x+0x9c>
    2be6:	91 50       	subi	r25, 0x01	; 1
    2be8:	a1 f0       	breq	.+40     	; 0x2c12 <__addsf3x+0x9a>
    2bea:	ff 0f       	add	r31, r31
    2bec:	bb 1f       	adc	r27, r27
    2bee:	66 1f       	adc	r22, r22
    2bf0:	77 1f       	adc	r23, r23
    2bf2:	88 1f       	adc	r24, r24
    2bf4:	c2 f7       	brpl	.-16     	; 0x2be6 <__addsf3x+0x6e>
    2bf6:	0e c0       	rjmp	.+28     	; 0x2c14 <__addsf3x+0x9c>
    2bf8:	ba 0f       	add	r27, r26
    2bfa:	62 1f       	adc	r22, r18
    2bfc:	73 1f       	adc	r23, r19
    2bfe:	84 1f       	adc	r24, r20
    2c00:	48 f4       	brcc	.+18     	; 0x2c14 <__addsf3x+0x9c>
    2c02:	87 95       	ror	r24
    2c04:	77 95       	ror	r23
    2c06:	67 95       	ror	r22
    2c08:	b7 95       	ror	r27
    2c0a:	f7 95       	ror	r31
    2c0c:	9e 3f       	cpi	r25, 0xFE	; 254
    2c0e:	08 f0       	brcs	.+2      	; 0x2c12 <__addsf3x+0x9a>
    2c10:	b0 cf       	rjmp	.-160    	; 0x2b72 <__addsf3+0x28>
    2c12:	93 95       	inc	r25
    2c14:	88 0f       	add	r24, r24
    2c16:	08 f0       	brcs	.+2      	; 0x2c1a <__addsf3x+0xa2>
    2c18:	99 27       	eor	r25, r25
    2c1a:	ee 0f       	add	r30, r30
    2c1c:	97 95       	ror	r25
    2c1e:	87 95       	ror	r24
    2c20:	08 95       	ret

00002c22 <asin>:
    2c22:	9f 93       	push	r25
    2c24:	9f 77       	andi	r25, 0x7F	; 127
    2c26:	ee e3       	ldi	r30, 0x3E	; 62
    2c28:	89 37       	cpi	r24, 0x79	; 121
    2c2a:	9e 07       	cpc	r25, r30
    2c2c:	28 f4       	brcc	.+10     	; 0x2c38 <asin+0x16>
    2c2e:	e8 e6       	ldi	r30, 0x68	; 104
    2c30:	f0 e0       	ldi	r31, 0x00	; 0
    2c32:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <__fp_powsodd>
    2c36:	0c c0       	rjmp	.+24     	; 0x2c50 <asin+0x2e>
    2c38:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <__fp_arccos>
    2c3c:	90 58       	subi	r25, 0x80	; 128
    2c3e:	a2 ea       	ldi	r26, 0xA2	; 162
    2c40:	2a ed       	ldi	r18, 0xDA	; 218
    2c42:	3f e0       	ldi	r19, 0x0F	; 15
    2c44:	49 ec       	ldi	r20, 0xC9	; 201
    2c46:	5f e3       	ldi	r21, 0x3F	; 63
    2c48:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <__addsf3x>
    2c4c:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <__fp_round>
    2c50:	0f 90       	pop	r0
    2c52:	07 fc       	sbrc	r0, 7
    2c54:	90 58       	subi	r25, 0x80	; 128
    2c56:	08 95       	ret
    2c58:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <__fp_pscA>
    2c5c:	60 f0       	brcs	.+24     	; 0x2c76 <asin+0x54>
    2c5e:	80 e8       	ldi	r24, 0x80	; 128
    2c60:	91 e0       	ldi	r25, 0x01	; 1
    2c62:	09 f4       	brne	.+2      	; 0x2c66 <asin+0x44>
    2c64:	9e ef       	ldi	r25, 0xFE	; 254
    2c66:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <__fp_pscB>
    2c6a:	28 f0       	brcs	.+10     	; 0x2c76 <asin+0x54>
    2c6c:	40 e8       	ldi	r20, 0x80	; 128
    2c6e:	51 e0       	ldi	r21, 0x01	; 1
    2c70:	71 f4       	brne	.+28     	; 0x2c8e <atan2+0x10>
    2c72:	5e ef       	ldi	r21, 0xFE	; 254
    2c74:	0c c0       	rjmp	.+24     	; 0x2c8e <atan2+0x10>
    2c76:	0c 94 9c 17 	jmp	0x2f38	; 0x2f38 <__fp_nan>
    2c7a:	0c 94 1b 18 	jmp	0x3036	; 0x3036 <__fp_zero>

00002c7e <atan2>:
    2c7e:	e9 2f       	mov	r30, r25
    2c80:	e0 78       	andi	r30, 0x80	; 128
    2c82:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <__fp_split3>
    2c86:	40 f3       	brcs	.-48     	; 0x2c58 <asin+0x36>
    2c88:	09 2e       	mov	r0, r25
    2c8a:	05 2a       	or	r0, r21
    2c8c:	b1 f3       	breq	.-20     	; 0x2c7a <asin+0x58>
    2c8e:	26 17       	cp	r18, r22
    2c90:	37 07       	cpc	r19, r23
    2c92:	48 07       	cpc	r20, r24
    2c94:	59 07       	cpc	r21, r25
    2c96:	38 f0       	brcs	.+14     	; 0x2ca6 <atan2+0x28>
    2c98:	0e 2e       	mov	r0, r30
    2c9a:	07 f8       	bld	r0, 7
    2c9c:	e0 25       	eor	r30, r0
    2c9e:	69 f0       	breq	.+26     	; 0x2cba <atan2+0x3c>
    2ca0:	e0 25       	eor	r30, r0
    2ca2:	e0 64       	ori	r30, 0x40	; 64
    2ca4:	0a c0       	rjmp	.+20     	; 0x2cba <atan2+0x3c>
    2ca6:	ef 63       	ori	r30, 0x3F	; 63
    2ca8:	07 f8       	bld	r0, 7
    2caa:	00 94       	com	r0
    2cac:	07 fa       	bst	r0, 7
    2cae:	db 01       	movw	r26, r22
    2cb0:	b9 01       	movw	r22, r18
    2cb2:	9d 01       	movw	r18, r26
    2cb4:	dc 01       	movw	r26, r24
    2cb6:	ca 01       	movw	r24, r20
    2cb8:	ad 01       	movw	r20, r26
    2cba:	ef 93       	push	r30
    2cbc:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <__divsf3_pse>
    2cc0:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <__fp_round>
    2cc4:	0e 94 6f 16 	call	0x2cde	; 0x2cde <atan>
    2cc8:	5f 91       	pop	r21
    2cca:	55 23       	and	r21, r21
    2ccc:	39 f0       	breq	.+14     	; 0x2cdc <atan2+0x5e>
    2cce:	2b ed       	ldi	r18, 0xDB	; 219
    2cd0:	3f e0       	ldi	r19, 0x0F	; 15
    2cd2:	49 e4       	ldi	r20, 0x49	; 73
    2cd4:	50 fd       	sbrc	r21, 0
    2cd6:	49 ec       	ldi	r20, 0xC9	; 201
    2cd8:	0c 94 a5 15 	jmp	0x2b4a	; 0x2b4a <__addsf3>
    2cdc:	08 95       	ret

00002cde <atan>:
    2cde:	df 93       	push	r29
    2ce0:	dd 27       	eor	r29, r29
    2ce2:	b9 2f       	mov	r27, r25
    2ce4:	bf 77       	andi	r27, 0x7F	; 127
    2ce6:	40 e8       	ldi	r20, 0x80	; 128
    2ce8:	5f e3       	ldi	r21, 0x3F	; 63
    2cea:	16 16       	cp	r1, r22
    2cec:	17 06       	cpc	r1, r23
    2cee:	48 07       	cpc	r20, r24
    2cf0:	5b 07       	cpc	r21, r27
    2cf2:	18 f4       	brcc	.+6      	; 0x2cfa <atan+0x1c>
    2cf4:	d9 2f       	mov	r29, r25
    2cf6:	0e 94 27 18 	call	0x304e	; 0x304e <inverse>
    2cfa:	9f 93       	push	r25
    2cfc:	8f 93       	push	r24
    2cfe:	7f 93       	push	r23
    2d00:	6f 93       	push	r22
    2d02:	0e 94 e2 18 	call	0x31c4	; 0x31c4 <square>
    2d06:	ec e7       	ldi	r30, 0x7C	; 124
    2d08:	f0 e0       	ldi	r31, 0x00	; 0
    2d0a:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <__fp_powser>
    2d0e:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <__fp_round>
    2d12:	2f 91       	pop	r18
    2d14:	3f 91       	pop	r19
    2d16:	4f 91       	pop	r20
    2d18:	5f 91       	pop	r21
    2d1a:	0e 94 42 18 	call	0x3084	; 0x3084 <__mulsf3x>
    2d1e:	dd 23       	and	r29, r29
    2d20:	51 f0       	breq	.+20     	; 0x2d36 <atan+0x58>
    2d22:	90 58       	subi	r25, 0x80	; 128
    2d24:	a2 ea       	ldi	r26, 0xA2	; 162
    2d26:	2a ed       	ldi	r18, 0xDA	; 218
    2d28:	3f e0       	ldi	r19, 0x0F	; 15
    2d2a:	49 ec       	ldi	r20, 0xC9	; 201
    2d2c:	5f e3       	ldi	r21, 0x3F	; 63
    2d2e:	d0 78       	andi	r29, 0x80	; 128
    2d30:	5d 27       	eor	r21, r29
    2d32:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <__addsf3x>
    2d36:	df 91       	pop	r29
    2d38:	0c 94 e8 17 	jmp	0x2fd0	; 0x2fd0 <__fp_round>

00002d3c <__cmpsf2>:
    2d3c:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <__fp_cmp>
    2d40:	08 f4       	brcc	.+2      	; 0x2d44 <__cmpsf2+0x8>
    2d42:	81 e0       	ldi	r24, 0x01	; 1
    2d44:	08 95       	ret

00002d46 <__divsf3>:
    2d46:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__divsf3x>
    2d4a:	0c 94 e8 17 	jmp	0x2fd0	; 0x2fd0 <__fp_round>
    2d4e:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <__fp_pscB>
    2d52:	58 f0       	brcs	.+22     	; 0x2d6a <__divsf3+0x24>
    2d54:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <__fp_pscA>
    2d58:	40 f0       	brcs	.+16     	; 0x2d6a <__divsf3+0x24>
    2d5a:	29 f4       	brne	.+10     	; 0x2d66 <__divsf3+0x20>
    2d5c:	5f 3f       	cpi	r21, 0xFF	; 255
    2d5e:	29 f0       	breq	.+10     	; 0x2d6a <__divsf3+0x24>
    2d60:	0c 94 96 17 	jmp	0x2f2c	; 0x2f2c <__fp_inf>
    2d64:	51 11       	cpse	r21, r1
    2d66:	0c 94 1c 18 	jmp	0x3038	; 0x3038 <__fp_szero>
    2d6a:	0c 94 9c 17 	jmp	0x2f38	; 0x2f38 <__fp_nan>

00002d6e <__divsf3x>:
    2d6e:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <__fp_split3>
    2d72:	68 f3       	brcs	.-38     	; 0x2d4e <__divsf3+0x8>

00002d74 <__divsf3_pse>:
    2d74:	99 23       	and	r25, r25
    2d76:	b1 f3       	breq	.-20     	; 0x2d64 <__divsf3+0x1e>
    2d78:	55 23       	and	r21, r21
    2d7a:	91 f3       	breq	.-28     	; 0x2d60 <__divsf3+0x1a>
    2d7c:	95 1b       	sub	r25, r21
    2d7e:	55 0b       	sbc	r21, r21
    2d80:	bb 27       	eor	r27, r27
    2d82:	aa 27       	eor	r26, r26
    2d84:	62 17       	cp	r22, r18
    2d86:	73 07       	cpc	r23, r19
    2d88:	84 07       	cpc	r24, r20
    2d8a:	38 f0       	brcs	.+14     	; 0x2d9a <__divsf3_pse+0x26>
    2d8c:	9f 5f       	subi	r25, 0xFF	; 255
    2d8e:	5f 4f       	sbci	r21, 0xFF	; 255
    2d90:	22 0f       	add	r18, r18
    2d92:	33 1f       	adc	r19, r19
    2d94:	44 1f       	adc	r20, r20
    2d96:	aa 1f       	adc	r26, r26
    2d98:	a9 f3       	breq	.-22     	; 0x2d84 <__divsf3_pse+0x10>
    2d9a:	35 d0       	rcall	.+106    	; 0x2e06 <__divsf3_pse+0x92>
    2d9c:	0e 2e       	mov	r0, r30
    2d9e:	3a f0       	brmi	.+14     	; 0x2dae <__divsf3_pse+0x3a>
    2da0:	e0 e8       	ldi	r30, 0x80	; 128
    2da2:	32 d0       	rcall	.+100    	; 0x2e08 <__divsf3_pse+0x94>
    2da4:	91 50       	subi	r25, 0x01	; 1
    2da6:	50 40       	sbci	r21, 0x00	; 0
    2da8:	e6 95       	lsr	r30
    2daa:	00 1c       	adc	r0, r0
    2dac:	ca f7       	brpl	.-14     	; 0x2da0 <__divsf3_pse+0x2c>
    2dae:	2b d0       	rcall	.+86     	; 0x2e06 <__divsf3_pse+0x92>
    2db0:	fe 2f       	mov	r31, r30
    2db2:	29 d0       	rcall	.+82     	; 0x2e06 <__divsf3_pse+0x92>
    2db4:	66 0f       	add	r22, r22
    2db6:	77 1f       	adc	r23, r23
    2db8:	88 1f       	adc	r24, r24
    2dba:	bb 1f       	adc	r27, r27
    2dbc:	26 17       	cp	r18, r22
    2dbe:	37 07       	cpc	r19, r23
    2dc0:	48 07       	cpc	r20, r24
    2dc2:	ab 07       	cpc	r26, r27
    2dc4:	b0 e8       	ldi	r27, 0x80	; 128
    2dc6:	09 f0       	breq	.+2      	; 0x2dca <__divsf3_pse+0x56>
    2dc8:	bb 0b       	sbc	r27, r27
    2dca:	80 2d       	mov	r24, r0
    2dcc:	bf 01       	movw	r22, r30
    2dce:	ff 27       	eor	r31, r31
    2dd0:	93 58       	subi	r25, 0x83	; 131
    2dd2:	5f 4f       	sbci	r21, 0xFF	; 255
    2dd4:	3a f0       	brmi	.+14     	; 0x2de4 <__divsf3_pse+0x70>
    2dd6:	9e 3f       	cpi	r25, 0xFE	; 254
    2dd8:	51 05       	cpc	r21, r1
    2dda:	78 f0       	brcs	.+30     	; 0x2dfa <__divsf3_pse+0x86>
    2ddc:	0c 94 96 17 	jmp	0x2f2c	; 0x2f2c <__fp_inf>
    2de0:	0c 94 1c 18 	jmp	0x3038	; 0x3038 <__fp_szero>
    2de4:	5f 3f       	cpi	r21, 0xFF	; 255
    2de6:	e4 f3       	brlt	.-8      	; 0x2de0 <__divsf3_pse+0x6c>
    2de8:	98 3e       	cpi	r25, 0xE8	; 232
    2dea:	d4 f3       	brlt	.-12     	; 0x2de0 <__divsf3_pse+0x6c>
    2dec:	86 95       	lsr	r24
    2dee:	77 95       	ror	r23
    2df0:	67 95       	ror	r22
    2df2:	b7 95       	ror	r27
    2df4:	f7 95       	ror	r31
    2df6:	9f 5f       	subi	r25, 0xFF	; 255
    2df8:	c9 f7       	brne	.-14     	; 0x2dec <__divsf3_pse+0x78>
    2dfa:	88 0f       	add	r24, r24
    2dfc:	91 1d       	adc	r25, r1
    2dfe:	96 95       	lsr	r25
    2e00:	87 95       	ror	r24
    2e02:	97 f9       	bld	r25, 7
    2e04:	08 95       	ret
    2e06:	e1 e0       	ldi	r30, 0x01	; 1
    2e08:	66 0f       	add	r22, r22
    2e0a:	77 1f       	adc	r23, r23
    2e0c:	88 1f       	adc	r24, r24
    2e0e:	bb 1f       	adc	r27, r27
    2e10:	62 17       	cp	r22, r18
    2e12:	73 07       	cpc	r23, r19
    2e14:	84 07       	cpc	r24, r20
    2e16:	ba 07       	cpc	r27, r26
    2e18:	20 f0       	brcs	.+8      	; 0x2e22 <__divsf3_pse+0xae>
    2e1a:	62 1b       	sub	r22, r18
    2e1c:	73 0b       	sbc	r23, r19
    2e1e:	84 0b       	sbc	r24, r20
    2e20:	ba 0b       	sbc	r27, r26
    2e22:	ee 1f       	adc	r30, r30
    2e24:	88 f7       	brcc	.-30     	; 0x2e08 <__divsf3_pse+0x94>
    2e26:	e0 95       	com	r30
    2e28:	08 95       	ret

00002e2a <__floatunsisf>:
    2e2a:	e8 94       	clt
    2e2c:	09 c0       	rjmp	.+18     	; 0x2e40 <__floatsisf+0x12>

00002e2e <__floatsisf>:
    2e2e:	97 fb       	bst	r25, 7
    2e30:	3e f4       	brtc	.+14     	; 0x2e40 <__floatsisf+0x12>
    2e32:	90 95       	com	r25
    2e34:	80 95       	com	r24
    2e36:	70 95       	com	r23
    2e38:	61 95       	neg	r22
    2e3a:	7f 4f       	sbci	r23, 0xFF	; 255
    2e3c:	8f 4f       	sbci	r24, 0xFF	; 255
    2e3e:	9f 4f       	sbci	r25, 0xFF	; 255
    2e40:	99 23       	and	r25, r25
    2e42:	a9 f0       	breq	.+42     	; 0x2e6e <__floatsisf+0x40>
    2e44:	f9 2f       	mov	r31, r25
    2e46:	96 e9       	ldi	r25, 0x96	; 150
    2e48:	bb 27       	eor	r27, r27
    2e4a:	93 95       	inc	r25
    2e4c:	f6 95       	lsr	r31
    2e4e:	87 95       	ror	r24
    2e50:	77 95       	ror	r23
    2e52:	67 95       	ror	r22
    2e54:	b7 95       	ror	r27
    2e56:	f1 11       	cpse	r31, r1
    2e58:	f8 cf       	rjmp	.-16     	; 0x2e4a <__floatsisf+0x1c>
    2e5a:	fa f4       	brpl	.+62     	; 0x2e9a <__floatsisf+0x6c>
    2e5c:	bb 0f       	add	r27, r27
    2e5e:	11 f4       	brne	.+4      	; 0x2e64 <__floatsisf+0x36>
    2e60:	60 ff       	sbrs	r22, 0
    2e62:	1b c0       	rjmp	.+54     	; 0x2e9a <__floatsisf+0x6c>
    2e64:	6f 5f       	subi	r22, 0xFF	; 255
    2e66:	7f 4f       	sbci	r23, 0xFF	; 255
    2e68:	8f 4f       	sbci	r24, 0xFF	; 255
    2e6a:	9f 4f       	sbci	r25, 0xFF	; 255
    2e6c:	16 c0       	rjmp	.+44     	; 0x2e9a <__floatsisf+0x6c>
    2e6e:	88 23       	and	r24, r24
    2e70:	11 f0       	breq	.+4      	; 0x2e76 <__floatsisf+0x48>
    2e72:	96 e9       	ldi	r25, 0x96	; 150
    2e74:	11 c0       	rjmp	.+34     	; 0x2e98 <__floatsisf+0x6a>
    2e76:	77 23       	and	r23, r23
    2e78:	21 f0       	breq	.+8      	; 0x2e82 <__floatsisf+0x54>
    2e7a:	9e e8       	ldi	r25, 0x8E	; 142
    2e7c:	87 2f       	mov	r24, r23
    2e7e:	76 2f       	mov	r23, r22
    2e80:	05 c0       	rjmp	.+10     	; 0x2e8c <__floatsisf+0x5e>
    2e82:	66 23       	and	r22, r22
    2e84:	71 f0       	breq	.+28     	; 0x2ea2 <__floatsisf+0x74>
    2e86:	96 e8       	ldi	r25, 0x86	; 134
    2e88:	86 2f       	mov	r24, r22
    2e8a:	70 e0       	ldi	r23, 0x00	; 0
    2e8c:	60 e0       	ldi	r22, 0x00	; 0
    2e8e:	2a f0       	brmi	.+10     	; 0x2e9a <__floatsisf+0x6c>
    2e90:	9a 95       	dec	r25
    2e92:	66 0f       	add	r22, r22
    2e94:	77 1f       	adc	r23, r23
    2e96:	88 1f       	adc	r24, r24
    2e98:	da f7       	brpl	.-10     	; 0x2e90 <__floatsisf+0x62>
    2e9a:	88 0f       	add	r24, r24
    2e9c:	96 95       	lsr	r25
    2e9e:	87 95       	ror	r24
    2ea0:	97 f9       	bld	r25, 7
    2ea2:	08 95       	ret

00002ea4 <__fp_arccos>:
    2ea4:	df 93       	push	r29
    2ea6:	cf 93       	push	r28
    2ea8:	1f 93       	push	r17
    2eaa:	0f 93       	push	r16
    2eac:	8b 01       	movw	r16, r22
    2eae:	ec 01       	movw	r28, r24
    2eb0:	e9 ea       	ldi	r30, 0xA9	; 169
    2eb2:	f0 e0       	ldi	r31, 0x00	; 0
    2eb4:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <__fp_powser>
    2eb8:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <__fp_round>
    2ebc:	98 01       	movw	r18, r16
    2ebe:	ae 01       	movw	r20, r28
    2ec0:	8b 01       	movw	r16, r22
    2ec2:	ec 01       	movw	r28, r24
    2ec4:	60 e0       	ldi	r22, 0x00	; 0
    2ec6:	70 e0       	ldi	r23, 0x00	; 0
    2ec8:	80 e8       	ldi	r24, 0x80	; 128
    2eca:	9f e3       	ldi	r25, 0x3F	; 63
    2ecc:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <__subsf3>
    2ed0:	0e 94 a2 18 	call	0x3144	; 0x3144 <sqrt>
    2ed4:	98 01       	movw	r18, r16
    2ed6:	ae 01       	movw	r20, r28
    2ed8:	0f 91       	pop	r16
    2eda:	1f 91       	pop	r17
    2edc:	cf 91       	pop	r28
    2ede:	df 91       	pop	r29
    2ee0:	0c 94 42 18 	jmp	0x3084	; 0x3084 <__mulsf3x>

00002ee4 <__fp_cmp>:
    2ee4:	99 0f       	add	r25, r25
    2ee6:	00 08       	sbc	r0, r0
    2ee8:	55 0f       	add	r21, r21
    2eea:	aa 0b       	sbc	r26, r26
    2eec:	e0 e8       	ldi	r30, 0x80	; 128
    2eee:	fe ef       	ldi	r31, 0xFE	; 254
    2ef0:	16 16       	cp	r1, r22
    2ef2:	17 06       	cpc	r1, r23
    2ef4:	e8 07       	cpc	r30, r24
    2ef6:	f9 07       	cpc	r31, r25
    2ef8:	c0 f0       	brcs	.+48     	; 0x2f2a <__fp_cmp+0x46>
    2efa:	12 16       	cp	r1, r18
    2efc:	13 06       	cpc	r1, r19
    2efe:	e4 07       	cpc	r30, r20
    2f00:	f5 07       	cpc	r31, r21
    2f02:	98 f0       	brcs	.+38     	; 0x2f2a <__fp_cmp+0x46>
    2f04:	62 1b       	sub	r22, r18
    2f06:	73 0b       	sbc	r23, r19
    2f08:	84 0b       	sbc	r24, r20
    2f0a:	95 0b       	sbc	r25, r21
    2f0c:	39 f4       	brne	.+14     	; 0x2f1c <__fp_cmp+0x38>
    2f0e:	0a 26       	eor	r0, r26
    2f10:	61 f0       	breq	.+24     	; 0x2f2a <__fp_cmp+0x46>
    2f12:	23 2b       	or	r18, r19
    2f14:	24 2b       	or	r18, r20
    2f16:	25 2b       	or	r18, r21
    2f18:	21 f4       	brne	.+8      	; 0x2f22 <__fp_cmp+0x3e>
    2f1a:	08 95       	ret
    2f1c:	0a 26       	eor	r0, r26
    2f1e:	09 f4       	brne	.+2      	; 0x2f22 <__fp_cmp+0x3e>
    2f20:	a1 40       	sbci	r26, 0x01	; 1
    2f22:	a6 95       	lsr	r26
    2f24:	8f ef       	ldi	r24, 0xFF	; 255
    2f26:	81 1d       	adc	r24, r1
    2f28:	81 1d       	adc	r24, r1
    2f2a:	08 95       	ret

00002f2c <__fp_inf>:
    2f2c:	97 f9       	bld	r25, 7
    2f2e:	9f 67       	ori	r25, 0x7F	; 127
    2f30:	80 e8       	ldi	r24, 0x80	; 128
    2f32:	70 e0       	ldi	r23, 0x00	; 0
    2f34:	60 e0       	ldi	r22, 0x00	; 0
    2f36:	08 95       	ret

00002f38 <__fp_nan>:
    2f38:	9f ef       	ldi	r25, 0xFF	; 255
    2f3a:	80 ec       	ldi	r24, 0xC0	; 192
    2f3c:	08 95       	ret

00002f3e <__fp_powser>:
    2f3e:	df 93       	push	r29
    2f40:	cf 93       	push	r28
    2f42:	1f 93       	push	r17
    2f44:	0f 93       	push	r16
    2f46:	ff 92       	push	r15
    2f48:	ef 92       	push	r14
    2f4a:	df 92       	push	r13
    2f4c:	7b 01       	movw	r14, r22
    2f4e:	8c 01       	movw	r16, r24
    2f50:	68 94       	set
    2f52:	06 c0       	rjmp	.+12     	; 0x2f60 <__fp_powser+0x22>
    2f54:	da 2e       	mov	r13, r26
    2f56:	ef 01       	movw	r28, r30
    2f58:	0e 94 42 18 	call	0x3084	; 0x3084 <__mulsf3x>
    2f5c:	fe 01       	movw	r30, r28
    2f5e:	e8 94       	clt
    2f60:	a5 91       	lpm	r26, Z+
    2f62:	25 91       	lpm	r18, Z+
    2f64:	35 91       	lpm	r19, Z+
    2f66:	45 91       	lpm	r20, Z+
    2f68:	55 91       	lpm	r21, Z+
    2f6a:	a6 f3       	brts	.-24     	; 0x2f54 <__fp_powser+0x16>
    2f6c:	ef 01       	movw	r28, r30
    2f6e:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <__addsf3x>
    2f72:	fe 01       	movw	r30, r28
    2f74:	97 01       	movw	r18, r14
    2f76:	a8 01       	movw	r20, r16
    2f78:	da 94       	dec	r13
    2f7a:	69 f7       	brne	.-38     	; 0x2f56 <__fp_powser+0x18>
    2f7c:	df 90       	pop	r13
    2f7e:	ef 90       	pop	r14
    2f80:	ff 90       	pop	r15
    2f82:	0f 91       	pop	r16
    2f84:	1f 91       	pop	r17
    2f86:	cf 91       	pop	r28
    2f88:	df 91       	pop	r29
    2f8a:	08 95       	ret

00002f8c <__fp_powsodd>:
    2f8c:	9f 93       	push	r25
    2f8e:	8f 93       	push	r24
    2f90:	7f 93       	push	r23
    2f92:	6f 93       	push	r22
    2f94:	ff 93       	push	r31
    2f96:	ef 93       	push	r30
    2f98:	9b 01       	movw	r18, r22
    2f9a:	ac 01       	movw	r20, r24
    2f9c:	0e 94 2f 18 	call	0x305e	; 0x305e <__mulsf3>
    2fa0:	ef 91       	pop	r30
    2fa2:	ff 91       	pop	r31
    2fa4:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <__fp_powser>
    2fa8:	2f 91       	pop	r18
    2faa:	3f 91       	pop	r19
    2fac:	4f 91       	pop	r20
    2fae:	5f 91       	pop	r21
    2fb0:	0c 94 2f 18 	jmp	0x305e	; 0x305e <__mulsf3>

00002fb4 <__fp_pscA>:
    2fb4:	00 24       	eor	r0, r0
    2fb6:	0a 94       	dec	r0
    2fb8:	16 16       	cp	r1, r22
    2fba:	17 06       	cpc	r1, r23
    2fbc:	18 06       	cpc	r1, r24
    2fbe:	09 06       	cpc	r0, r25
    2fc0:	08 95       	ret

00002fc2 <__fp_pscB>:
    2fc2:	00 24       	eor	r0, r0
    2fc4:	0a 94       	dec	r0
    2fc6:	12 16       	cp	r1, r18
    2fc8:	13 06       	cpc	r1, r19
    2fca:	14 06       	cpc	r1, r20
    2fcc:	05 06       	cpc	r0, r21
    2fce:	08 95       	ret

00002fd0 <__fp_round>:
    2fd0:	09 2e       	mov	r0, r25
    2fd2:	03 94       	inc	r0
    2fd4:	00 0c       	add	r0, r0
    2fd6:	11 f4       	brne	.+4      	; 0x2fdc <__fp_round+0xc>
    2fd8:	88 23       	and	r24, r24
    2fda:	52 f0       	brmi	.+20     	; 0x2ff0 <__fp_round+0x20>
    2fdc:	bb 0f       	add	r27, r27
    2fde:	40 f4       	brcc	.+16     	; 0x2ff0 <__fp_round+0x20>
    2fe0:	bf 2b       	or	r27, r31
    2fe2:	11 f4       	brne	.+4      	; 0x2fe8 <__fp_round+0x18>
    2fe4:	60 ff       	sbrs	r22, 0
    2fe6:	04 c0       	rjmp	.+8      	; 0x2ff0 <__fp_round+0x20>
    2fe8:	6f 5f       	subi	r22, 0xFF	; 255
    2fea:	7f 4f       	sbci	r23, 0xFF	; 255
    2fec:	8f 4f       	sbci	r24, 0xFF	; 255
    2fee:	9f 4f       	sbci	r25, 0xFF	; 255
    2ff0:	08 95       	ret

00002ff2 <__fp_split3>:
    2ff2:	57 fd       	sbrc	r21, 7
    2ff4:	90 58       	subi	r25, 0x80	; 128
    2ff6:	44 0f       	add	r20, r20
    2ff8:	55 1f       	adc	r21, r21
    2ffa:	59 f0       	breq	.+22     	; 0x3012 <__fp_splitA+0x10>
    2ffc:	5f 3f       	cpi	r21, 0xFF	; 255
    2ffe:	71 f0       	breq	.+28     	; 0x301c <__fp_splitA+0x1a>
    3000:	47 95       	ror	r20

00003002 <__fp_splitA>:
    3002:	88 0f       	add	r24, r24
    3004:	97 fb       	bst	r25, 7
    3006:	99 1f       	adc	r25, r25
    3008:	61 f0       	breq	.+24     	; 0x3022 <__fp_splitA+0x20>
    300a:	9f 3f       	cpi	r25, 0xFF	; 255
    300c:	79 f0       	breq	.+30     	; 0x302c <__fp_splitA+0x2a>
    300e:	87 95       	ror	r24
    3010:	08 95       	ret
    3012:	12 16       	cp	r1, r18
    3014:	13 06       	cpc	r1, r19
    3016:	14 06       	cpc	r1, r20
    3018:	55 1f       	adc	r21, r21
    301a:	f2 cf       	rjmp	.-28     	; 0x3000 <__fp_split3+0xe>
    301c:	46 95       	lsr	r20
    301e:	f1 df       	rcall	.-30     	; 0x3002 <__fp_splitA>
    3020:	08 c0       	rjmp	.+16     	; 0x3032 <__fp_splitA+0x30>
    3022:	16 16       	cp	r1, r22
    3024:	17 06       	cpc	r1, r23
    3026:	18 06       	cpc	r1, r24
    3028:	99 1f       	adc	r25, r25
    302a:	f1 cf       	rjmp	.-30     	; 0x300e <__fp_splitA+0xc>
    302c:	86 95       	lsr	r24
    302e:	71 05       	cpc	r23, r1
    3030:	61 05       	cpc	r22, r1
    3032:	08 94       	sec
    3034:	08 95       	ret

00003036 <__fp_zero>:
    3036:	e8 94       	clt

00003038 <__fp_szero>:
    3038:	bb 27       	eor	r27, r27
    303a:	66 27       	eor	r22, r22
    303c:	77 27       	eor	r23, r23
    303e:	cb 01       	movw	r24, r22
    3040:	97 f9       	bld	r25, 7
    3042:	08 95       	ret

00003044 <__gesf2>:
    3044:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <__fp_cmp>
    3048:	08 f4       	brcc	.+2      	; 0x304c <__gesf2+0x8>
    304a:	8f ef       	ldi	r24, 0xFF	; 255
    304c:	08 95       	ret

0000304e <inverse>:
    304e:	9b 01       	movw	r18, r22
    3050:	ac 01       	movw	r20, r24
    3052:	60 e0       	ldi	r22, 0x00	; 0
    3054:	70 e0       	ldi	r23, 0x00	; 0
    3056:	80 e8       	ldi	r24, 0x80	; 128
    3058:	9f e3       	ldi	r25, 0x3F	; 63
    305a:	0c 94 a3 16 	jmp	0x2d46	; 0x2d46 <__divsf3>

0000305e <__mulsf3>:
    305e:	0e 94 42 18 	call	0x3084	; 0x3084 <__mulsf3x>
    3062:	0c 94 e8 17 	jmp	0x2fd0	; 0x2fd0 <__fp_round>
    3066:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <__fp_pscA>
    306a:	38 f0       	brcs	.+14     	; 0x307a <__mulsf3+0x1c>
    306c:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <__fp_pscB>
    3070:	20 f0       	brcs	.+8      	; 0x307a <__mulsf3+0x1c>
    3072:	95 23       	and	r25, r21
    3074:	11 f0       	breq	.+4      	; 0x307a <__mulsf3+0x1c>
    3076:	0c 94 96 17 	jmp	0x2f2c	; 0x2f2c <__fp_inf>
    307a:	0c 94 9c 17 	jmp	0x2f38	; 0x2f38 <__fp_nan>
    307e:	11 24       	eor	r1, r1
    3080:	0c 94 1c 18 	jmp	0x3038	; 0x3038 <__fp_szero>

00003084 <__mulsf3x>:
    3084:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <__fp_split3>
    3088:	70 f3       	brcs	.-36     	; 0x3066 <__mulsf3+0x8>

0000308a <__mulsf3_pse>:
    308a:	95 9f       	mul	r25, r21
    308c:	c1 f3       	breq	.-16     	; 0x307e <__mulsf3+0x20>
    308e:	95 0f       	add	r25, r21
    3090:	50 e0       	ldi	r21, 0x00	; 0
    3092:	55 1f       	adc	r21, r21
    3094:	62 9f       	mul	r22, r18
    3096:	f0 01       	movw	r30, r0
    3098:	72 9f       	mul	r23, r18
    309a:	bb 27       	eor	r27, r27
    309c:	f0 0d       	add	r31, r0
    309e:	b1 1d       	adc	r27, r1
    30a0:	63 9f       	mul	r22, r19
    30a2:	aa 27       	eor	r26, r26
    30a4:	f0 0d       	add	r31, r0
    30a6:	b1 1d       	adc	r27, r1
    30a8:	aa 1f       	adc	r26, r26
    30aa:	64 9f       	mul	r22, r20
    30ac:	66 27       	eor	r22, r22
    30ae:	b0 0d       	add	r27, r0
    30b0:	a1 1d       	adc	r26, r1
    30b2:	66 1f       	adc	r22, r22
    30b4:	82 9f       	mul	r24, r18
    30b6:	22 27       	eor	r18, r18
    30b8:	b0 0d       	add	r27, r0
    30ba:	a1 1d       	adc	r26, r1
    30bc:	62 1f       	adc	r22, r18
    30be:	73 9f       	mul	r23, r19
    30c0:	b0 0d       	add	r27, r0
    30c2:	a1 1d       	adc	r26, r1
    30c4:	62 1f       	adc	r22, r18
    30c6:	83 9f       	mul	r24, r19
    30c8:	a0 0d       	add	r26, r0
    30ca:	61 1d       	adc	r22, r1
    30cc:	22 1f       	adc	r18, r18
    30ce:	74 9f       	mul	r23, r20
    30d0:	33 27       	eor	r19, r19
    30d2:	a0 0d       	add	r26, r0
    30d4:	61 1d       	adc	r22, r1
    30d6:	23 1f       	adc	r18, r19
    30d8:	84 9f       	mul	r24, r20
    30da:	60 0d       	add	r22, r0
    30dc:	21 1d       	adc	r18, r1
    30de:	82 2f       	mov	r24, r18
    30e0:	76 2f       	mov	r23, r22
    30e2:	6a 2f       	mov	r22, r26
    30e4:	11 24       	eor	r1, r1
    30e6:	9f 57       	subi	r25, 0x7F	; 127
    30e8:	50 40       	sbci	r21, 0x00	; 0
    30ea:	9a f0       	brmi	.+38     	; 0x3112 <__mulsf3_pse+0x88>
    30ec:	f1 f0       	breq	.+60     	; 0x312a <__mulsf3_pse+0xa0>
    30ee:	88 23       	and	r24, r24
    30f0:	4a f0       	brmi	.+18     	; 0x3104 <__mulsf3_pse+0x7a>
    30f2:	ee 0f       	add	r30, r30
    30f4:	ff 1f       	adc	r31, r31
    30f6:	bb 1f       	adc	r27, r27
    30f8:	66 1f       	adc	r22, r22
    30fa:	77 1f       	adc	r23, r23
    30fc:	88 1f       	adc	r24, r24
    30fe:	91 50       	subi	r25, 0x01	; 1
    3100:	50 40       	sbci	r21, 0x00	; 0
    3102:	a9 f7       	brne	.-22     	; 0x30ee <__mulsf3_pse+0x64>
    3104:	9e 3f       	cpi	r25, 0xFE	; 254
    3106:	51 05       	cpc	r21, r1
    3108:	80 f0       	brcs	.+32     	; 0x312a <__mulsf3_pse+0xa0>
    310a:	0c 94 96 17 	jmp	0x2f2c	; 0x2f2c <__fp_inf>
    310e:	0c 94 1c 18 	jmp	0x3038	; 0x3038 <__fp_szero>
    3112:	5f 3f       	cpi	r21, 0xFF	; 255
    3114:	e4 f3       	brlt	.-8      	; 0x310e <__mulsf3_pse+0x84>
    3116:	98 3e       	cpi	r25, 0xE8	; 232
    3118:	d4 f3       	brlt	.-12     	; 0x310e <__mulsf3_pse+0x84>
    311a:	86 95       	lsr	r24
    311c:	77 95       	ror	r23
    311e:	67 95       	ror	r22
    3120:	b7 95       	ror	r27
    3122:	f7 95       	ror	r31
    3124:	e7 95       	ror	r30
    3126:	9f 5f       	subi	r25, 0xFF	; 255
    3128:	c1 f7       	brne	.-16     	; 0x311a <__mulsf3_pse+0x90>
    312a:	fe 2b       	or	r31, r30
    312c:	88 0f       	add	r24, r24
    312e:	91 1d       	adc	r25, r1
    3130:	96 95       	lsr	r25
    3132:	87 95       	ror	r24
    3134:	97 f9       	bld	r25, 7
    3136:	08 95       	ret
    3138:	19 f4       	brne	.+6      	; 0x3140 <__mulsf3_pse+0xb6>
    313a:	16 f4       	brtc	.+4      	; 0x3140 <__mulsf3_pse+0xb6>
    313c:	0c 94 9c 17 	jmp	0x2f38	; 0x2f38 <__fp_nan>
    3140:	0c 94 e6 18 	jmp	0x31cc	; 0x31cc <__fp_mpack>

00003144 <sqrt>:
    3144:	0e 94 01 18 	call	0x3002	; 0x3002 <__fp_splitA>
    3148:	b8 f3       	brcs	.-18     	; 0x3138 <__mulsf3_pse+0xae>
    314a:	99 23       	and	r25, r25
    314c:	c9 f3       	breq	.-14     	; 0x3140 <__mulsf3_pse+0xb6>
    314e:	b6 f3       	brts	.-20     	; 0x313c <__mulsf3_pse+0xb2>
    3150:	9f 57       	subi	r25, 0x7F	; 127
    3152:	55 0b       	sbc	r21, r21
    3154:	87 ff       	sbrs	r24, 7
    3156:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <__fp_norm2>
    315a:	00 24       	eor	r0, r0
    315c:	a0 e6       	ldi	r26, 0x60	; 96
    315e:	40 ea       	ldi	r20, 0xA0	; 160
    3160:	90 01       	movw	r18, r0
    3162:	80 58       	subi	r24, 0x80	; 128
    3164:	56 95       	lsr	r21
    3166:	97 95       	ror	r25
    3168:	28 f4       	brcc	.+10     	; 0x3174 <sqrt+0x30>
    316a:	80 5c       	subi	r24, 0xC0	; 192
    316c:	66 0f       	add	r22, r22
    316e:	77 1f       	adc	r23, r23
    3170:	88 1f       	adc	r24, r24
    3172:	20 f0       	brcs	.+8      	; 0x317c <sqrt+0x38>
    3174:	26 17       	cp	r18, r22
    3176:	37 07       	cpc	r19, r23
    3178:	48 07       	cpc	r20, r24
    317a:	30 f4       	brcc	.+12     	; 0x3188 <sqrt+0x44>
    317c:	62 1b       	sub	r22, r18
    317e:	73 0b       	sbc	r23, r19
    3180:	84 0b       	sbc	r24, r20
    3182:	20 29       	or	r18, r0
    3184:	31 29       	or	r19, r1
    3186:	4a 2b       	or	r20, r26
    3188:	a6 95       	lsr	r26
    318a:	17 94       	ror	r1
    318c:	07 94       	ror	r0
    318e:	20 25       	eor	r18, r0
    3190:	31 25       	eor	r19, r1
    3192:	4a 27       	eor	r20, r26
    3194:	58 f7       	brcc	.-42     	; 0x316c <sqrt+0x28>
    3196:	66 0f       	add	r22, r22
    3198:	77 1f       	adc	r23, r23
    319a:	88 1f       	adc	r24, r24
    319c:	20 f0       	brcs	.+8      	; 0x31a6 <sqrt+0x62>
    319e:	26 17       	cp	r18, r22
    31a0:	37 07       	cpc	r19, r23
    31a2:	48 07       	cpc	r20, r24
    31a4:	30 f4       	brcc	.+12     	; 0x31b2 <sqrt+0x6e>
    31a6:	62 0b       	sbc	r22, r18
    31a8:	73 0b       	sbc	r23, r19
    31aa:	84 0b       	sbc	r24, r20
    31ac:	20 0d       	add	r18, r0
    31ae:	31 1d       	adc	r19, r1
    31b0:	41 1d       	adc	r20, r1
    31b2:	a0 95       	com	r26
    31b4:	81 f7       	brne	.-32     	; 0x3196 <sqrt+0x52>
    31b6:	b9 01       	movw	r22, r18
    31b8:	84 2f       	mov	r24, r20
    31ba:	91 58       	subi	r25, 0x81	; 129
    31bc:	88 0f       	add	r24, r24
    31be:	96 95       	lsr	r25
    31c0:	87 95       	ror	r24
    31c2:	08 95       	ret

000031c4 <square>:
    31c4:	9b 01       	movw	r18, r22
    31c6:	ac 01       	movw	r20, r24
    31c8:	0c 94 2f 18 	jmp	0x305e	; 0x305e <__mulsf3>

000031cc <__fp_mpack>:
    31cc:	9f 3f       	cpi	r25, 0xFF	; 255
    31ce:	31 f0       	breq	.+12     	; 0x31dc <__fp_mpack_finite+0xc>

000031d0 <__fp_mpack_finite>:
    31d0:	91 50       	subi	r25, 0x01	; 1
    31d2:	20 f4       	brcc	.+8      	; 0x31dc <__fp_mpack_finite+0xc>
    31d4:	87 95       	ror	r24
    31d6:	77 95       	ror	r23
    31d8:	67 95       	ror	r22
    31da:	b7 95       	ror	r27
    31dc:	88 0f       	add	r24, r24
    31de:	91 1d       	adc	r25, r1
    31e0:	96 95       	lsr	r25
    31e2:	87 95       	ror	r24
    31e4:	97 f9       	bld	r25, 7
    31e6:	08 95       	ret

000031e8 <__fp_norm2>:
    31e8:	91 50       	subi	r25, 0x01	; 1
    31ea:	50 40       	sbci	r21, 0x00	; 0
    31ec:	66 0f       	add	r22, r22
    31ee:	77 1f       	adc	r23, r23
    31f0:	88 1f       	adc	r24, r24
    31f2:	d2 f7       	brpl	.-12     	; 0x31e8 <__fp_norm2>
    31f4:	08 95       	ret

000031f6 <float_to_bytes>:

void float_to_bytes(float value, uint8_t *buffer)
{
    union Float f;
    f.m_float = value;
    memcpy(buffer, f.m_bytes, sizeof(float));
    31f6:	fa 01       	movw	r30, r20
    31f8:	60 83       	st	Z, r22
    31fa:	71 83       	std	Z+1, r23	; 0x01
    31fc:	82 83       	std	Z+2, r24	; 0x02
    31fe:	93 83       	std	Z+3, r25	; 0x03
    3200:	08 95       	ret

00003202 <__vector_11>:

volatile unsigned long timer1_millis;
//NOTE: A unsigned long holds values from 0 to 4,294,967,295 (2^32 - 1). It will roll over to 0 after reaching its maximum value.

ISR(TIMER1_COMPA_vect)
{
    3202:	1f 92       	push	r1
    3204:	0f 92       	push	r0
    3206:	0f b6       	in	r0, 0x3f	; 63
    3208:	0f 92       	push	r0
    320a:	11 24       	eor	r1, r1
    320c:	8f 93       	push	r24
    320e:	9f 93       	push	r25
    3210:	af 93       	push	r26
    3212:	bf 93       	push	r27
	timer1_millis++;
    3214:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <timer1_millis>
    3218:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <timer1_millis+0x1>
    321c:	a0 91 d6 01 	lds	r26, 0x01D6	; 0x8001d6 <timer1_millis+0x2>
    3220:	b0 91 d7 01 	lds	r27, 0x01D7	; 0x8001d7 <timer1_millis+0x3>
    3224:	01 96       	adiw	r24, 0x01	; 1
    3226:	a1 1d       	adc	r26, r1
    3228:	b1 1d       	adc	r27, r1
    322a:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <timer1_millis>
    322e:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <timer1_millis+0x1>
    3232:	a0 93 d6 01 	sts	0x01D6, r26	; 0x8001d6 <timer1_millis+0x2>
    3236:	b0 93 d7 01 	sts	0x01D7, r27	; 0x8001d7 <timer1_millis+0x3>
}
    323a:	bf 91       	pop	r27
    323c:	af 91       	pop	r26
    323e:	9f 91       	pop	r25
    3240:	8f 91       	pop	r24
    3242:	0f 90       	pop	r0
    3244:	0f be       	out	0x3f, r0	; 63
    3246:	0f 90       	pop	r0
    3248:	1f 90       	pop	r1
    324a:	18 95       	reti

0000324c <init_millis>:

void init_millis(unsigned long f_cpu)
{
	unsigned long ctc_match_overflow;
	
	ctc_match_overflow = ((f_cpu / 1000) / 8); //when timer1 is this value, 1ms has passed
    324c:	20 e4       	ldi	r18, 0x40	; 64
    324e:	3f e1       	ldi	r19, 0x1F	; 31
    3250:	40 e0       	ldi	r20, 0x00	; 0
    3252:	50 e0       	ldi	r21, 0x00	; 0
    3254:	0e 94 bf 21 	call	0x437e	; 0x437e <__udivmodsi4>
	
	// (Set timer to clear when matching ctc_match_overflow) | (Set clock divisor to 8)
	TCCR1B |= (1 << WGM12) | (1 << CS11);
    3258:	e1 e8       	ldi	r30, 0x81	; 129
    325a:	f0 e0       	ldi	r31, 0x00	; 0
    325c:	80 81       	ld	r24, Z
    325e:	8a 60       	ori	r24, 0x0A	; 10
    3260:	80 83       	st	Z, r24
	
	// high byte first, then low byte
	OCR1AH = (ctc_match_overflow >> 8);
    3262:	bb 27       	eor	r27, r27
    3264:	a5 2f       	mov	r26, r21
    3266:	94 2f       	mov	r25, r20
    3268:	83 2f       	mov	r24, r19
    326a:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
	OCR1AL = ctc_match_overflow;
    326e:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	
	// Enable the compare match interrupt
	TIMSK1 |= (1 << OCIE1A);
    3272:	ef e6       	ldi	r30, 0x6F	; 111
    3274:	f0 e0       	ldi	r31, 0x00	; 0
    3276:	80 81       	ld	r24, Z
    3278:	82 60       	ori	r24, 0x02	; 2
    327a:	80 83       	st	Z, r24
    327c:	08 95       	ret

0000327e <millis>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    327e:	f8 94       	cli
{
	unsigned long millis_return;
	
	// Ensure this cannot be disrupted
	ATOMIC_BLOCK(ATOMIC_FORCEON) {
		millis_return = timer1_millis;
    3280:	60 91 d4 01 	lds	r22, 0x01D4	; 0x8001d4 <timer1_millis>
    3284:	70 91 d5 01 	lds	r23, 0x01D5	; 0x8001d5 <timer1_millis+0x1>
    3288:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <timer1_millis+0x2>
    328c:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <timer1_millis+0x3>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    3290:	78 94       	sei
	}
	return millis_return;
    3292:	08 95       	ret

00003294 <wire_on_receive_service>:
        w &= mask;
        w >>= (bit_start - length + 1);
        *data = w;
    }
    return count;
}
    3294:	cf 93       	push	r28
    3296:	df 93       	push	r29
    3298:	ec 01       	movw	r28, r24
    329a:	e0 91 49 01 	lds	r30, 0x0149	; 0x800149 <user_on_receive>
    329e:	f0 91 4a 01 	lds	r31, 0x014A	; 0x80014a <user_on_receive+0x1>
    32a2:	30 97       	sbiw	r30, 0x00	; 0
    32a4:	01 f1       	breq	.+64     	; 0x32e6 <wire_on_receive_service+0x52>
    32a6:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <rx_buffer_index>
    32aa:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <rx_buffer_length>
    32ae:	98 17       	cp	r25, r24
    32b0:	d0 f0       	brcs	.+52     	; 0x32e6 <wire_on_receive_service+0x52>
    32b2:	16 16       	cp	r1, r22
    32b4:	17 06       	cpc	r1, r23
    32b6:	8c f4       	brge	.+34     	; 0x32da <wire_on_receive_service+0x46>
    32b8:	20 e0       	ldi	r18, 0x00	; 0
    32ba:	30 e0       	ldi	r19, 0x00	; 0
    32bc:	90 e0       	ldi	r25, 0x00	; 0
    32be:	de 01       	movw	r26, r28
    32c0:	a9 0f       	add	r26, r25
    32c2:	b1 1d       	adc	r27, r1
    32c4:	4c 91       	ld	r20, X
    32c6:	d9 01       	movw	r26, r18
    32c8:	a8 52       	subi	r26, 0x28	; 40
    32ca:	be 4f       	sbci	r27, 0xFE	; 254
    32cc:	4c 93       	st	X, r20
    32ce:	9f 5f       	subi	r25, 0xFF	; 255
    32d0:	29 2f       	mov	r18, r25
    32d2:	30 e0       	ldi	r19, 0x00	; 0
    32d4:	26 17       	cp	r18, r22
    32d6:	37 07       	cpc	r19, r23
    32d8:	94 f3       	brlt	.-28     	; 0x32be <wire_on_receive_service+0x2a>
    32da:	cb 01       	movw	r24, r22
    32dc:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <rx_buffer_index>
    32e0:	60 93 47 01 	sts	0x0147, r22	; 0x800147 <rx_buffer_length>
    32e4:	09 95       	icall
    32e6:	df 91       	pop	r29
    32e8:	cf 91       	pop	r28
    32ea:	08 95       	ret

000032ec <wire_on_request_service>:
    32ec:	e0 91 4b 01 	lds	r30, 0x014B	; 0x80014b <user_on_request>
    32f0:	f0 91 4c 01 	lds	r31, 0x014C	; 0x80014c <user_on_request+0x1>
    32f4:	30 97       	sbiw	r30, 0x00	; 0
    32f6:	29 f0       	breq	.+10     	; 0x3302 <wire_on_request_service+0x16>
    32f8:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <tx_buffer_index>
    32fc:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <tx_buffer_length>
    3300:	09 95       	icall
    3302:	08 95       	ret

00003304 <wire_init>:
    3304:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <rx_buffer_index>
    3308:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <rx_buffer_length>
    330c:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <tx_buffer_index>
    3310:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <tx_buffer_length>
    3314:	0e 94 0d 1c 	call	0x381a	; 0x381a <twi_init>
    3318:	86 e7       	ldi	r24, 0x76	; 118
    331a:	99 e1       	ldi	r25, 0x19	; 25
    331c:	0e 94 2f 1c 	call	0x385e	; 0x385e <twi_attach_slave_tx_event>
    3320:	8a e4       	ldi	r24, 0x4A	; 74
    3322:	99 e1       	ldi	r25, 0x19	; 25
    3324:	0e 94 2a 1c 	call	0x3854	; 0x3854 <twi_attach_slave_rx_event>
    3328:	08 95       	ret

0000332a <wire_set_address>:
    332a:	0e 94 26 1c 	call	0x384c	; 0x384c <twi_set_address>
    332e:	08 95       	ret

00003330 <wire_get_status>:
    3330:	0e 94 23 1c 	call	0x3846	; 0x3846 <twi_get_state>
    3334:	08 95       	ret

00003336 <wire_begin_transmission>:
    3336:	91 e0       	ldi	r25, 0x01	; 1
    3338:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <transmitting>
    333c:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <tx_address>
    3340:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <tx_buffer_index>
    3344:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <tx_buffer_length>
    3348:	08 95       	ret

0000334a <wire_end_transmission>:
    334a:	0f 93       	push	r16
    334c:	08 2f       	mov	r16, r24
    334e:	21 e0       	ldi	r18, 0x01	; 1
    3350:	40 91 44 01 	lds	r20, 0x0144	; 0x800144 <tx_buffer_length>
    3354:	68 ef       	ldi	r22, 0xF8	; 248
    3356:	71 e0       	ldi	r23, 0x01	; 1
    3358:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <tx_address>
    335c:	0e 94 86 1c 	call	0x390c	; 0x390c <twi_write>
    3360:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <tx_buffer_index>
    3364:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <tx_buffer_length>
    3368:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <transmitting>
    336c:	0f 91       	pop	r16
    336e:	08 95       	ret

00003370 <wire_write>:
    3370:	cf 93       	push	r28
    3372:	df 93       	push	r29
    3374:	1f 92       	push	r1
    3376:	cd b7       	in	r28, 0x3d	; 61
    3378:	de b7       	in	r29, 0x3e	; 62
    337a:	89 83       	std	Y+1, r24	; 0x01
    337c:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <transmitting>
    3380:	88 23       	and	r24, r24
    3382:	a1 f0       	breq	.+40     	; 0x33ac <wire_write+0x3c>
    3384:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <tx_buffer_length>
    3388:	80 32       	cpi	r24, 0x20	; 32
    338a:	c0 f4       	brcc	.+48     	; 0x33bc <wire_write+0x4c>
    338c:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <tx_buffer_index>
    3390:	e8 2f       	mov	r30, r24
    3392:	f0 e0       	ldi	r31, 0x00	; 0
    3394:	e8 50       	subi	r30, 0x08	; 8
    3396:	fe 4f       	sbci	r31, 0xFE	; 254
    3398:	99 81       	ldd	r25, Y+1	; 0x01
    339a:	90 83       	st	Z, r25
    339c:	8f 5f       	subi	r24, 0xFF	; 255
    339e:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <tx_buffer_index>
    33a2:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <tx_buffer_length>
    33a6:	81 e0       	ldi	r24, 0x01	; 1
    33a8:	90 e0       	ldi	r25, 0x00	; 0
    33aa:	0a c0       	rjmp	.+20     	; 0x33c0 <wire_write+0x50>
    33ac:	61 e0       	ldi	r22, 0x01	; 1
    33ae:	ce 01       	movw	r24, r28
    33b0:	01 96       	adiw	r24, 0x01	; 1
    33b2:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <twi_transmit>
    33b6:	81 e0       	ldi	r24, 0x01	; 1
    33b8:	90 e0       	ldi	r25, 0x00	; 0
    33ba:	02 c0       	rjmp	.+4      	; 0x33c0 <wire_write+0x50>
    33bc:	80 e0       	ldi	r24, 0x00	; 0
    33be:	90 e0       	ldi	r25, 0x00	; 0
    33c0:	0f 90       	pop	r0
    33c2:	df 91       	pop	r29
    33c4:	cf 91       	pop	r28
    33c6:	08 95       	ret

000033c8 <wire_request_from>:
    33c8:	8f 92       	push	r8
    33ca:	9f 92       	push	r9
    33cc:	af 92       	push	r10
    33ce:	bf 92       	push	r11
    33d0:	ef 92       	push	r14
    33d2:	0f 93       	push	r16
    33d4:	1f 93       	push	r17
    33d6:	cf 93       	push	r28
    33d8:	df 93       	push	r29
    33da:	18 2f       	mov	r17, r24
    33dc:	d6 2f       	mov	r29, r22
    33de:	49 01       	movw	r8, r18
    33e0:	5a 01       	movw	r10, r20
    33e2:	00 23       	and	r16, r16
    33e4:	09 f1       	breq	.+66     	; 0x3428 <wire_request_from+0x60>
    33e6:	0e 94 9b 19 	call	0x3336	; 0x3336 <wire_begin_transmission>
    33ea:	04 30       	cpi	r16, 0x04	; 4
    33ec:	08 f0       	brcs	.+2      	; 0x33f0 <wire_request_from+0x28>
    33ee:	03 e0       	ldi	r16, 0x03	; 3
    33f0:	cf ef       	ldi	r28, 0xFF	; 255
    33f2:	c0 0f       	add	r28, r16
    33f4:	00 23       	and	r16, r16
    33f6:	a9 f0       	breq	.+42     	; 0x3422 <wire_request_from+0x5a>
    33f8:	8c 2f       	mov	r24, r28
    33fa:	88 0f       	add	r24, r24
    33fc:	88 0f       	add	r24, r24
    33fe:	88 0f       	add	r24, r24
    3400:	a5 01       	movw	r20, r10
    3402:	94 01       	movw	r18, r8
    3404:	04 c0       	rjmp	.+8      	; 0x340e <wire_request_from+0x46>
    3406:	56 95       	lsr	r21
    3408:	47 95       	ror	r20
    340a:	37 95       	ror	r19
    340c:	27 95       	ror	r18
    340e:	8a 95       	dec	r24
    3410:	d2 f7       	brpl	.-12     	; 0x3406 <wire_request_from+0x3e>
    3412:	da 01       	movw	r26, r20
    3414:	c9 01       	movw	r24, r18
    3416:	0e 94 b8 19 	call	0x3370	; 0x3370 <wire_write>
    341a:	8c 2f       	mov	r24, r28
    341c:	c1 50       	subi	r28, 0x01	; 1
    341e:	81 11       	cpse	r24, r1
    3420:	eb cf       	rjmp	.-42     	; 0x33f8 <wire_request_from+0x30>
    3422:	80 e0       	ldi	r24, 0x00	; 0
    3424:	0e 94 a5 19 	call	0x334a	; 0x334a <wire_end_transmission>
    3428:	4d 2f       	mov	r20, r29
    342a:	d1 32       	cpi	r29, 0x21	; 33
    342c:	08 f0       	brcs	.+2      	; 0x3430 <wire_request_from+0x68>
    342e:	40 e2       	ldi	r20, 0x20	; 32
    3430:	2e 2d       	mov	r18, r14
    3432:	68 ed       	ldi	r22, 0xD8	; 216
    3434:	71 e0       	ldi	r23, 0x01	; 1
    3436:	81 2f       	mov	r24, r17
    3438:	0e 94 34 1c 	call	0x3868	; 0x3868 <twi_read>
    343c:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <rx_buffer_index>
    3440:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <rx_buffer_length>
    3444:	df 91       	pop	r29
    3446:	cf 91       	pop	r28
    3448:	1f 91       	pop	r17
    344a:	0f 91       	pop	r16
    344c:	ef 90       	pop	r14
    344e:	bf 90       	pop	r11
    3450:	af 90       	pop	r10
    3452:	9f 90       	pop	r9
    3454:	8f 90       	pop	r8
    3456:	08 95       	ret

00003458 <wire_available>:
    3458:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <rx_buffer_length>
    345c:	90 e0       	ldi	r25, 0x00	; 0
    345e:	20 91 48 01 	lds	r18, 0x0148	; 0x800148 <rx_buffer_index>
    3462:	82 1b       	sub	r24, r18
    3464:	91 09       	sbc	r25, r1
    3466:	08 95       	ret

00003468 <wire_read>:
    3468:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <rx_buffer_index>
    346c:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <rx_buffer_length>
    3470:	98 17       	cp	r25, r24
    3472:	50 f4       	brcc	.+20     	; 0x3488 <wire_read+0x20>
    3474:	e9 2f       	mov	r30, r25
    3476:	f0 e0       	ldi	r31, 0x00	; 0
    3478:	e8 52       	subi	r30, 0x28	; 40
    347a:	fe 4f       	sbci	r31, 0xFE	; 254
    347c:	20 81       	ld	r18, Z
    347e:	30 e0       	ldi	r19, 0x00	; 0
    3480:	9f 5f       	subi	r25, 0xFF	; 255
    3482:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <rx_buffer_index>
    3486:	02 c0       	rjmp	.+4      	; 0x348c <wire_read+0x24>
    3488:	2f ef       	ldi	r18, 0xFF	; 255
    348a:	3f ef       	ldi	r19, 0xFF	; 255
    348c:	c9 01       	movw	r24, r18
    348e:	08 95       	ret

00003490 <wire_set_on_receive>:
    3490:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <user_on_receive+0x1>
    3494:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <user_on_receive>
    3498:	08 95       	ret

0000349a <wire_set_on_request>:
    349a:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <user_on_request+0x1>
    349e:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <user_on_request>
    34a2:	08 95       	ret

000034a4 <i2c_read_bytes>:
    34a4:	2f 92       	push	r2
    34a6:	3f 92       	push	r3
    34a8:	4f 92       	push	r4
    34aa:	5f 92       	push	r5
    34ac:	6f 92       	push	r6
    34ae:	7f 92       	push	r7
    34b0:	8f 92       	push	r8
    34b2:	9f 92       	push	r9
    34b4:	af 92       	push	r10
    34b6:	bf 92       	push	r11
    34b8:	cf 92       	push	r12
    34ba:	df 92       	push	r13
    34bc:	ef 92       	push	r14
    34be:	ff 92       	push	r15
    34c0:	0f 93       	push	r16
    34c2:	1f 93       	push	r17
    34c4:	cf 93       	push	r28
    34c6:	df 93       	push	r29
    34c8:	cd b7       	in	r28, 0x3d	; 61
    34ca:	de b7       	in	r29, 0x3e	; 62
    34cc:	28 97       	sbiw	r28, 0x08	; 8
    34ce:	0f b6       	in	r0, 0x3f	; 63
    34d0:	f8 94       	cli
    34d2:	de bf       	out	0x3e, r29	; 62
    34d4:	0f be       	out	0x3f, r0	; 63
    34d6:	cd bf       	out	0x3d, r28	; 61
    34d8:	f8 2e       	mov	r15, r24
    34da:	6d 83       	std	Y+5, r22	; 0x05
    34dc:	84 2e       	mov	r8, r20
    34de:	59 01       	movw	r10, r18
    34e0:	68 01       	movw	r12, r16
    34e2:	0e 94 3f 19 	call	0x327e	; 0x327e <millis>
    34e6:	2b 01       	movw	r4, r22
    34e8:	3c 01       	movw	r6, r24
    34ea:	88 20       	and	r8, r8
    34ec:	09 f4       	brne	.+2      	; 0x34f0 <i2c_read_bytes+0x4c>
    34ee:	5a c0       	rjmp	.+180    	; 0x35a4 <i2c_read_bytes+0x100>
    34f0:	91 2c       	mov	r9, r1
    34f2:	10 e0       	ldi	r17, 0x00	; 0
    34f4:	28 2c       	mov	r2, r8
    34f6:	31 2c       	mov	r3, r1
    34f8:	96 01       	movw	r18, r12
    34fa:	40 e0       	ldi	r20, 0x00	; 0
    34fc:	50 e0       	ldi	r21, 0x00	; 0
    34fe:	29 83       	std	Y+1, r18	; 0x01
    3500:	3a 83       	std	Y+2, r19	; 0x02
    3502:	4b 83       	std	Y+3, r20	; 0x03
    3504:	5c 83       	std	Y+4, r21	; 0x04
    3506:	8e 82       	std	Y+6, r8	; 0x06
    3508:	8f 2d       	mov	r24, r15
    350a:	0e 94 9b 19 	call	0x3336	; 0x3336 <wire_begin_transmission>
    350e:	8d 81       	ldd	r24, Y+5	; 0x05
    3510:	0e 94 b8 19 	call	0x3370	; 0x3370 <wire_write>
    3514:	81 e0       	ldi	r24, 0x01	; 1
    3516:	0e 94 a5 19 	call	0x334a	; 0x334a <wire_end_transmission>
    351a:	8f 2d       	mov	r24, r15
    351c:	0e 94 9b 19 	call	0x3336	; 0x3336 <wire_begin_transmission>
    3520:	c1 01       	movw	r24, r2
    3522:	89 19       	sub	r24, r9
    3524:	91 09       	sbc	r25, r1
    3526:	80 97       	sbiw	r24, 0x20	; 32
    3528:	1c f4       	brge	.+6      	; 0x3530 <i2c_read_bytes+0x8c>
    352a:	68 2d       	mov	r22, r8
    352c:	69 19       	sub	r22, r9
    352e:	01 c0       	rjmp	.+2      	; 0x3532 <i2c_read_bytes+0x8e>
    3530:	60 e2       	ldi	r22, 0x20	; 32
    3532:	ee 24       	eor	r14, r14
    3534:	e3 94       	inc	r14
    3536:	00 e0       	ldi	r16, 0x00	; 0
    3538:	20 e0       	ldi	r18, 0x00	; 0
    353a:	30 e0       	ldi	r19, 0x00	; 0
    353c:	a9 01       	movw	r20, r18
    353e:	8f 2d       	mov	r24, r15
    3540:	0e 94 e4 19 	call	0x33c8	; 0x33c8 <wire_request_from>
    3544:	0d c0       	rjmp	.+26     	; 0x3560 <i2c_read_bytes+0xbc>
    3546:	a5 01       	movw	r20, r10
    3548:	41 0f       	add	r20, r17
    354a:	51 1d       	adc	r21, r1
    354c:	17 fd       	sbrc	r17, 7
    354e:	5a 95       	dec	r21
    3550:	58 87       	std	Y+8, r21	; 0x08
    3552:	4f 83       	std	Y+7, r20	; 0x07
    3554:	0e 94 34 1a 	call	0x3468	; 0x3468 <wire_read>
    3558:	af 81       	ldd	r26, Y+7	; 0x07
    355a:	b8 85       	ldd	r27, Y+8	; 0x08
    355c:	8c 93       	st	X, r24
    355e:	1f 5f       	subi	r17, 0xFF	; 255
    3560:	0e 94 2c 1a 	call	0x3458	; 0x3458 <wire_available>
    3564:	89 2b       	or	r24, r25
    3566:	a1 f0       	breq	.+40     	; 0x3590 <i2c_read_bytes+0xec>
    3568:	c1 14       	cp	r12, r1
    356a:	d1 04       	cpc	r13, r1
    356c:	61 f3       	breq	.-40     	; 0x3546 <i2c_read_bytes+0xa2>
    356e:	0e 94 3f 19 	call	0x327e	; 0x327e <millis>
    3572:	dc 01       	movw	r26, r24
    3574:	cb 01       	movw	r24, r22
    3576:	84 19       	sub	r24, r4
    3578:	95 09       	sbc	r25, r5
    357a:	a6 09       	sbc	r26, r6
    357c:	b7 09       	sbc	r27, r7
    357e:	29 81       	ldd	r18, Y+1	; 0x01
    3580:	3a 81       	ldd	r19, Y+2	; 0x02
    3582:	4b 81       	ldd	r20, Y+3	; 0x03
    3584:	5c 81       	ldd	r21, Y+4	; 0x04
    3586:	82 17       	cp	r24, r18
    3588:	93 07       	cpc	r25, r19
    358a:	a4 07       	cpc	r26, r20
    358c:	b5 07       	cpc	r27, r21
    358e:	d8 f2       	brcs	.-74     	; 0x3546 <i2c_read_bytes+0xa2>
    3590:	8e 81       	ldd	r24, Y+6	; 0x06
    3592:	30 e2       	ldi	r19, 0x20	; 32
    3594:	38 15       	cp	r19, r8
    3596:	08 f4       	brcc	.+2      	; 0x359a <i2c_read_bytes+0xf6>
    3598:	80 e2       	ldi	r24, 0x20	; 32
    359a:	98 0e       	add	r9, r24
    359c:	98 14       	cp	r9, r8
    359e:	08 f4       	brcc	.+2      	; 0x35a2 <i2c_read_bytes+0xfe>
    35a0:	b3 cf       	rjmp	.-154    	; 0x3508 <i2c_read_bytes+0x64>
    35a2:	01 c0       	rjmp	.+2      	; 0x35a6 <i2c_read_bytes+0x102>
    35a4:	10 e0       	ldi	r17, 0x00	; 0
    35a6:	c1 14       	cp	r12, r1
    35a8:	d1 04       	cpc	r13, r1
    35aa:	c9 f0       	breq	.+50     	; 0x35de <i2c_read_bytes+0x13a>
    35ac:	0e 94 3f 19 	call	0x327e	; 0x327e <millis>
    35b0:	ab 01       	movw	r20, r22
    35b2:	bc 01       	movw	r22, r24
    35b4:	44 19       	sub	r20, r4
    35b6:	55 09       	sbc	r21, r5
    35b8:	66 09       	sbc	r22, r6
    35ba:	77 09       	sbc	r23, r7
    35bc:	c6 01       	movw	r24, r12
    35be:	a0 e0       	ldi	r26, 0x00	; 0
    35c0:	b0 e0       	ldi	r27, 0x00	; 0
    35c2:	48 17       	cp	r20, r24
    35c4:	59 07       	cpc	r21, r25
    35c6:	6a 07       	cpc	r22, r26
    35c8:	7b 07       	cpc	r23, r27
    35ca:	48 f0       	brcs	.+18     	; 0x35de <i2c_read_bytes+0x13a>
    35cc:	91 2c       	mov	r9, r1
    35ce:	81 2f       	mov	r24, r17
    35d0:	01 2e       	mov	r0, r17
    35d2:	00 0c       	add	r0, r0
    35d4:	99 0b       	sbc	r25, r25
    35d6:	88 15       	cp	r24, r8
    35d8:	99 05       	cpc	r25, r9
    35da:	0c f4       	brge	.+2      	; 0x35de <i2c_read_bytes+0x13a>
    35dc:	1f ef       	ldi	r17, 0xFF	; 255
    35de:	81 2f       	mov	r24, r17
    35e0:	28 96       	adiw	r28, 0x08	; 8
    35e2:	0f b6       	in	r0, 0x3f	; 63
    35e4:	f8 94       	cli
    35e6:	de bf       	out	0x3e, r29	; 62
    35e8:	0f be       	out	0x3f, r0	; 63
    35ea:	cd bf       	out	0x3d, r28	; 61
    35ec:	df 91       	pop	r29
    35ee:	cf 91       	pop	r28
    35f0:	1f 91       	pop	r17
    35f2:	0f 91       	pop	r16
    35f4:	ff 90       	pop	r15
    35f6:	ef 90       	pop	r14
    35f8:	df 90       	pop	r13
    35fa:	cf 90       	pop	r12
    35fc:	bf 90       	pop	r11
    35fe:	af 90       	pop	r10
    3600:	9f 90       	pop	r9
    3602:	8f 90       	pop	r8
    3604:	7f 90       	pop	r7
    3606:	6f 90       	pop	r6
    3608:	5f 90       	pop	r5
    360a:	4f 90       	pop	r4
    360c:	3f 90       	pop	r3
    360e:	2f 90       	pop	r2
    3610:	08 95       	ret

00003612 <i2c_read_byte>:
    3612:	0f 93       	push	r16
    3614:	1f 93       	push	r17
    3616:	89 01       	movw	r16, r18
    3618:	9a 01       	movw	r18, r20
    361a:	41 e0       	ldi	r20, 0x01	; 1
    361c:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <i2c_read_bytes>
    3620:	1f 91       	pop	r17
    3622:	0f 91       	pop	r16
    3624:	08 95       	ret

00003626 <i2c_write_bytes>:
* @param length Number of bytes to write
* @param data Buffer to copy new data from
* @return Status of operation (true = success)
*/
uint8_t i2c_write_bytes(uint8_t dev_address, uint8_t reg_address, uint8_t length, uint8_t* data)
{
    3626:	ef 92       	push	r14
    3628:	ff 92       	push	r15
    362a:	0f 93       	push	r16
    362c:	1f 93       	push	r17
    362e:	cf 93       	push	r28
    3630:	df 93       	push	r29
    3632:	c6 2f       	mov	r28, r22
    3634:	14 2f       	mov	r17, r20
    3636:	79 01       	movw	r14, r18
    
    uint8_t status = 0;
    wire_begin_transmission(dev_address);
    3638:	0e 94 9b 19 	call	0x3336	; 0x3336 <wire_begin_transmission>
    wire_write((uint8_t) reg_address);
    363c:	8c 2f       	mov	r24, r28
    363e:	0e 94 b8 19 	call	0x3370	; 0x3370 <wire_write>
    for (uint8_t i = 0; i < length; i++)
    3642:	11 23       	and	r17, r17
    3644:	71 f0       	breq	.+28     	; 0x3662 <i2c_write_bytes+0x3c>
    3646:	e7 01       	movw	r28, r14
    3648:	11 50       	subi	r17, 0x01	; 1
    364a:	01 2f       	mov	r16, r17
    364c:	10 e0       	ldi	r17, 0x00	; 0
    364e:	0f 5f       	subi	r16, 0xFF	; 255
    3650:	1f 4f       	sbci	r17, 0xFF	; 255
    3652:	0e 0d       	add	r16, r14
    3654:	1f 1d       	adc	r17, r15
    {
        wire_write((uint8_t) data[i]);
    3656:	89 91       	ld	r24, Y+
    3658:	0e 94 b8 19 	call	0x3370	; 0x3370 <wire_write>
{
    
    uint8_t status = 0;
    wire_begin_transmission(dev_address);
    wire_write((uint8_t) reg_address);
    for (uint8_t i = 0; i < length; i++)
    365c:	c0 17       	cp	r28, r16
    365e:	d1 07       	cpc	r29, r17
    3660:	d1 f7       	brne	.-12     	; 0x3656 <i2c_write_bytes+0x30>
    {
        wire_write((uint8_t) data[i]);
    }
    status = wire_end_transmission(1);
    3662:	81 e0       	ldi	r24, 0x01	; 1
    3664:	0e 94 a5 19 	call	0x334a	; 0x334a <wire_end_transmission>
    return status == 0;
    3668:	91 e0       	ldi	r25, 0x01	; 1
    366a:	81 11       	cpse	r24, r1
    366c:	90 e0       	ldi	r25, 0x00	; 0
}
    366e:	89 2f       	mov	r24, r25
    3670:	df 91       	pop	r29
    3672:	cf 91       	pop	r28
    3674:	1f 91       	pop	r17
    3676:	0f 91       	pop	r16
    3678:	ff 90       	pop	r15
    367a:	ef 90       	pop	r14
    367c:	08 95       	ret

0000367e <i2c_write_byte>:
* @param reg_address Register address to write to
* @param data New byte value to write
* @return Status of operation (true = success)
*/
uint8_t i2c_write_byte(uint8_t dev_address, uint8_t reg_address, uint8_t data)
{
    367e:	cf 93       	push	r28
    3680:	df 93       	push	r29
    3682:	1f 92       	push	r1
    3684:	cd b7       	in	r28, 0x3d	; 61
    3686:	de b7       	in	r29, 0x3e	; 62
    3688:	49 83       	std	Y+1, r20	; 0x01
    return i2c_write_bytes(dev_address, reg_address, 1, &data);
    368a:	9e 01       	movw	r18, r28
    368c:	2f 5f       	subi	r18, 0xFF	; 255
    368e:	3f 4f       	sbci	r19, 0xFF	; 255
    3690:	41 e0       	ldi	r20, 0x01	; 1
    3692:	0e 94 13 1b 	call	0x3626	; 0x3626 <i2c_write_bytes>
}
    3696:	0f 90       	pop	r0
    3698:	df 91       	pop	r29
    369a:	cf 91       	pop	r28
    369c:	08 95       	ret

0000369e <i2c_write_bit>:
* @param bit_num Bit position to write (0-7)
* @param value New bit value to write
* @return Status of operation (true = success)
*/
uint8_t i2c_write_bit(uint8_t dev_address, uint8_t reg_address, uint8_t bit_num, uint8_t data)
{
    369e:	ef 92       	push	r14
    36a0:	ff 92       	push	r15
    36a2:	0f 93       	push	r16
    36a4:	1f 93       	push	r17
    36a6:	cf 93       	push	r28
    36a8:	df 93       	push	r29
    36aa:	1f 92       	push	r1
    36ac:	cd b7       	in	r28, 0x3d	; 61
    36ae:	de b7       	in	r29, 0x3e	; 62
    36b0:	18 2f       	mov	r17, r24
    36b2:	06 2f       	mov	r16, r22
    36b4:	f4 2e       	mov	r15, r20
    36b6:	e2 2e       	mov	r14, r18
    uint8_t b;
    i2c_read_byte(dev_address, reg_address, &b, I2CDEV_DEFAULT_READ_TIMEOUT);
    36b8:	28 ee       	ldi	r18, 0xE8	; 232
    36ba:	33 e0       	ldi	r19, 0x03	; 3
    36bc:	ae 01       	movw	r20, r28
    36be:	4f 5f       	subi	r20, 0xFF	; 255
    36c0:	5f 4f       	sbci	r21, 0xFF	; 255
    36c2:	0e 94 09 1b 	call	0x3612	; 0x3612 <i2c_read_byte>
    b = (data != 0) ? (b | (1 << bit_num)) : (b & ~(1 << bit_num));
    36c6:	ee 20       	and	r14, r14
    36c8:	51 f0       	breq	.+20     	; 0x36de <i2c_write_bit+0x40>
    36ca:	41 e0       	ldi	r20, 0x01	; 1
    36cc:	50 e0       	ldi	r21, 0x00	; 0
    36ce:	02 c0       	rjmp	.+4      	; 0x36d4 <i2c_write_bit+0x36>
    36d0:	44 0f       	add	r20, r20
    36d2:	55 1f       	adc	r21, r21
    36d4:	fa 94       	dec	r15
    36d6:	e2 f7       	brpl	.-8      	; 0x36d0 <i2c_write_bit+0x32>
    36d8:	89 81       	ldd	r24, Y+1	; 0x01
    36da:	48 2b       	or	r20, r24
    36dc:	0a c0       	rjmp	.+20     	; 0x36f2 <i2c_write_bit+0x54>
    36de:	41 e0       	ldi	r20, 0x01	; 1
    36e0:	50 e0       	ldi	r21, 0x00	; 0
    36e2:	02 c0       	rjmp	.+4      	; 0x36e8 <i2c_write_bit+0x4a>
    36e4:	44 0f       	add	r20, r20
    36e6:	55 1f       	adc	r21, r21
    36e8:	fa 94       	dec	r15
    36ea:	e2 f7       	brpl	.-8      	; 0x36e4 <i2c_write_bit+0x46>
    36ec:	40 95       	com	r20
    36ee:	89 81       	ldd	r24, Y+1	; 0x01
    36f0:	48 23       	and	r20, r24
    36f2:	49 83       	std	Y+1, r20	; 0x01
    return i2c_write_byte(dev_address, reg_address, b);
    36f4:	60 2f       	mov	r22, r16
    36f6:	81 2f       	mov	r24, r17
    36f8:	0e 94 3f 1b 	call	0x367e	; 0x367e <i2c_write_byte>
}
    36fc:	0f 90       	pop	r0
    36fe:	df 91       	pop	r29
    3700:	cf 91       	pop	r28
    3702:	1f 91       	pop	r17
    3704:	0f 91       	pop	r16
    3706:	ff 90       	pop	r15
    3708:	ef 90       	pop	r14
    370a:	08 95       	ret

0000370c <i2c_write_bits>:
* @param length Number of bits to write (not more than 8)
* @param data Right-aligned value to write
* @return Status of operation (true = success)
*/
uint8_t i2c_write_bits(uint8_t dev_address, uint8_t reg_address, uint8_t bit_start, uint8_t length, uint8_t data)
{
    370c:	df 92       	push	r13
    370e:	ef 92       	push	r14
    3710:	ff 92       	push	r15
    3712:	0f 93       	push	r16
    3714:	1f 93       	push	r17
    3716:	cf 93       	push	r28
    3718:	df 93       	push	r29
    371a:	1f 92       	push	r1
    371c:	cd b7       	in	r28, 0x3d	; 61
    371e:	de b7       	in	r29, 0x3e	; 62
    3720:	18 2f       	mov	r17, r24
    3722:	f6 2e       	mov	r15, r22
    3724:	e4 2e       	mov	r14, r20
    3726:	d2 2e       	mov	r13, r18
    uint8_t b;
    if (i2c_read_byte(dev_address, reg_address, &b, I2CDEV_DEFAULT_READ_TIMEOUT) != 0)
    3728:	28 ee       	ldi	r18, 0xE8	; 232
    372a:	33 e0       	ldi	r19, 0x03	; 3
    372c:	ae 01       	movw	r20, r28
    372e:	4f 5f       	subi	r20, 0xFF	; 255
    3730:	5f 4f       	sbci	r21, 0xFF	; 255
    3732:	0e 94 09 1b 	call	0x3612	; 0x3612 <i2c_read_byte>
    3736:	88 23       	and	r24, r24
    3738:	41 f1       	breq	.+80     	; 0x378a <i2c_write_bits+0x7e>
    {
        uint8_t mask = ((1 << length) - 1) << (bit_start - length + 1);
    373a:	2e 2d       	mov	r18, r14
    373c:	30 e0       	ldi	r19, 0x00	; 0
    373e:	2d 19       	sub	r18, r13
    3740:	31 09       	sbc	r19, r1
    3742:	2f 5f       	subi	r18, 0xFF	; 255
    3744:	3f 4f       	sbci	r19, 0xFF	; 255
    3746:	81 e0       	ldi	r24, 0x01	; 1
    3748:	90 e0       	ldi	r25, 0x00	; 0
    374a:	02 c0       	rjmp	.+4      	; 0x3750 <i2c_write_bits+0x44>
    374c:	88 0f       	add	r24, r24
    374e:	99 1f       	adc	r25, r25
    3750:	da 94       	dec	r13
    3752:	e2 f7       	brpl	.-8      	; 0x374c <i2c_write_bits+0x40>
    3754:	01 97       	sbiw	r24, 0x01	; 1
    3756:	02 2e       	mov	r0, r18
    3758:	02 c0       	rjmp	.+4      	; 0x375e <i2c_write_bits+0x52>
    375a:	88 0f       	add	r24, r24
    375c:	99 1f       	adc	r25, r25
    375e:	0a 94       	dec	r0
    3760:	e2 f7       	brpl	.-8      	; 0x375a <i2c_write_bits+0x4e>
        data <<= (bit_start - length + 1);
    3762:	40 2f       	mov	r20, r16
    3764:	50 e0       	ldi	r21, 0x00	; 0
    3766:	ba 01       	movw	r22, r20
    3768:	02 c0       	rjmp	.+4      	; 0x376e <i2c_write_bits+0x62>
    376a:	66 0f       	add	r22, r22
    376c:	77 1f       	adc	r23, r23
    376e:	2a 95       	dec	r18
    3770:	e2 f7       	brpl	.-8      	; 0x376a <i2c_write_bits+0x5e>
        data &= mask;
        b &= ~(mask);
        b |= data;
    3772:	48 2f       	mov	r20, r24
    3774:	40 95       	com	r20
    3776:	99 81       	ldd	r25, Y+1	; 0x01
    3778:	49 23       	and	r20, r25
    377a:	86 23       	and	r24, r22
    377c:	48 2b       	or	r20, r24
    377e:	49 83       	std	Y+1, r20	; 0x01
        return i2c_write_byte(dev_address, reg_address, b);
    3780:	6f 2d       	mov	r22, r15
    3782:	81 2f       	mov	r24, r17
    3784:	0e 94 3f 1b 	call	0x367e	; 0x367e <i2c_write_byte>
    3788:	01 c0       	rjmp	.+2      	; 0x378c <i2c_write_bits+0x80>
    }
    else { return 0; }
    378a:	80 e0       	ldi	r24, 0x00	; 0
}
    378c:	0f 90       	pop	r0
    378e:	df 91       	pop	r29
    3790:	cf 91       	pop	r28
    3792:	1f 91       	pop	r17
    3794:	0f 91       	pop	r16
    3796:	ff 90       	pop	r15
    3798:	ef 90       	pop	r14
    379a:	df 90       	pop	r13
    379c:	08 95       	ret

0000379e <i2c_write_words>:
* @param length Number of words to write
* @param data Buffer to copy new data from
* @return Status of operation (true = success)
*/
uint8_t i2c_write_words(uint8_t dev_address, uint8_t reg_address, uint8_t length, uint16_t* data)
{
    379e:	ef 92       	push	r14
    37a0:	ff 92       	push	r15
    37a2:	0f 93       	push	r16
    37a4:	1f 93       	push	r17
    37a6:	cf 93       	push	r28
    37a8:	df 93       	push	r29
    37aa:	c6 2f       	mov	r28, r22
    37ac:	e4 2e       	mov	r14, r20
    37ae:	02 2f       	mov	r16, r18
    37b0:	13 2f       	mov	r17, r19
    uint8_t status = 0;
    wire_begin_transmission(dev_address);
    37b2:	0e 94 9b 19 	call	0x3336	; 0x3336 <wire_begin_transmission>
    wire_write(reg_address);
    37b6:	8c 2f       	mov	r24, r28
    37b8:	0e 94 b8 19 	call	0x3370	; 0x3370 <wire_write>
    for (uint8_t i = 0; i < length; i++)
    37bc:	ee 20       	and	r14, r14
    37be:	69 f0       	breq	.+26     	; 0x37da <i2c_write_words+0x3c>
    37c0:	c0 2f       	mov	r28, r16
    37c2:	d1 2f       	mov	r29, r17
    37c4:	f1 2c       	mov	r15, r1
    {
        wire_write((uint8_t)(data[i] >> 8));
    37c6:	89 81       	ldd	r24, Y+1	; 0x01
    37c8:	0e 94 b8 19 	call	0x3370	; 0x3370 <wire_write>
        wire_write((uint8_t)data[i]);
    37cc:	88 81       	ld	r24, Y
    37ce:	22 96       	adiw	r28, 0x02	; 2
    37d0:	0e 94 b8 19 	call	0x3370	; 0x3370 <wire_write>
uint8_t i2c_write_words(uint8_t dev_address, uint8_t reg_address, uint8_t length, uint16_t* data)
{
    uint8_t status = 0;
    wire_begin_transmission(dev_address);
    wire_write(reg_address);
    for (uint8_t i = 0; i < length; i++)
    37d4:	f3 94       	inc	r15
    37d6:	ef 10       	cpse	r14, r15
    37d8:	f6 cf       	rjmp	.-20     	; 0x37c6 <i2c_write_words+0x28>
    {
        wire_write((uint8_t)(data[i] >> 8));
        wire_write((uint8_t)data[i]);
    }
    status = wire_end_transmission(1);
    37da:	81 e0       	ldi	r24, 0x01	; 1
    37dc:	0e 94 a5 19 	call	0x334a	; 0x334a <wire_end_transmission>
    return status == 0;
    37e0:	91 e0       	ldi	r25, 0x01	; 1
    37e2:	81 11       	cpse	r24, r1
    37e4:	90 e0       	ldi	r25, 0x00	; 0
    37e6:	89 2f       	mov	r24, r25
    37e8:	df 91       	pop	r29
    37ea:	cf 91       	pop	r28
    37ec:	1f 91       	pop	r17
    37ee:	0f 91       	pop	r16
    37f0:	ff 90       	pop	r15
    37f2:	ef 90       	pop	r14
    37f4:	08 95       	ret

000037f6 <i2c_write_word>:
* @param reg_address Register address to write to
* @param data New word value to write
* @return Status of operation (true = success)
*/
uint8_t i2c_write_word(uint8_t dev_address, uint8_t reg_address, uint16_t data)
{
    37f6:	cf 93       	push	r28
    37f8:	df 93       	push	r29
    37fa:	00 d0       	rcall	.+0      	; 0x37fc <i2c_write_word+0x6>
    37fc:	cd b7       	in	r28, 0x3d	; 61
    37fe:	de b7       	in	r29, 0x3e	; 62
    3800:	5a 83       	std	Y+2, r21	; 0x02
    3802:	49 83       	std	Y+1, r20	; 0x01
    return i2c_write_words(dev_address, reg_address, 1, &data);
    3804:	9e 01       	movw	r18, r28
    3806:	2f 5f       	subi	r18, 0xFF	; 255
    3808:	3f 4f       	sbci	r19, 0xFF	; 255
    380a:	41 e0       	ldi	r20, 0x01	; 1
    380c:	0e 94 cf 1b 	call	0x379e	; 0x379e <i2c_write_words>
}
    3810:	0f 90       	pop	r0
    3812:	0f 90       	pop	r0
    3814:	df 91       	pop	r29
    3816:	cf 91       	pop	r28
    3818:	08 95       	ret

0000381a <twi_init>:
}

void twi_reply(uint8_t ack)
{
    if (ack) { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA); }
    else { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT); }
    381a:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <twi_state>
    381e:	81 e0       	ldi	r24, 0x01	; 1
    3820:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <twi_send_stop>
    3824:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <twi_in_rep_start>
    3828:	e9 eb       	ldi	r30, 0xB9	; 185
    382a:	f0 e0       	ldi	r31, 0x00	; 0
    382c:	80 81       	ld	r24, Z
    382e:	8e 7f       	andi	r24, 0xFE	; 254
    3830:	80 83       	st	Z, r24
    3832:	80 81       	ld	r24, Z
    3834:	8d 7f       	andi	r24, 0xFD	; 253
    3836:	80 83       	st	Z, r24
    3838:	88 e4       	ldi	r24, 0x48	; 72
    383a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    383e:	85 e4       	ldi	r24, 0x45	; 69
    3840:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    3844:	08 95       	ret

00003846 <twi_get_state>:
    3846:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <twi_state>
    384a:	08 95       	ret

0000384c <twi_set_address>:
    384c:	88 0f       	add	r24, r24
    384e:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
    3852:	08 95       	ret

00003854 <twi_attach_slave_rx_event>:
    3854:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <twi_on_slave_receive+0x1>
    3858:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <twi_on_slave_receive>
    385c:	08 95       	ret

0000385e <twi_attach_slave_tx_event>:
    385e:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <twi_on_slave_transmit+0x1>
    3862:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <twi_on_slave_transmit>
    3866:	08 95       	ret

00003868 <twi_read>:
    3868:	41 32       	cpi	r20, 0x21	; 33
    386a:	08 f0       	brcs	.+2      	; 0x386e <twi_read+0x6>
    386c:	4c c0       	rjmp	.+152    	; 0x3906 <twi_read+0x9e>
    386e:	90 91 ba 01 	lds	r25, 0x01BA	; 0x8001ba <twi_state>
    3872:	91 11       	cpse	r25, r1
    3874:	fc cf       	rjmp	.-8      	; 0x386e <twi_read+0x6>
    3876:	31 e0       	ldi	r19, 0x01	; 1
    3878:	30 93 ba 01 	sts	0x01BA, r19	; 0x8001ba <twi_state>
    387c:	20 93 b9 01 	sts	0x01B9, r18	; 0x8001b9 <twi_send_stop>
    3880:	2f ef       	ldi	r18, 0xFF	; 255
    3882:	20 93 b6 01 	sts	0x01B6, r18	; 0x8001b6 <twi_error>
    3886:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <twi_master_buffer_index>
    388a:	24 0f       	add	r18, r20
    388c:	20 93 90 01 	sts	0x0190, r18	; 0x800190 <twi_master_buffer_length>
    3890:	30 93 b7 01 	sts	0x01B7, r19	; 0x8001b7 <twi_slarw>
    3894:	20 91 b7 01 	lds	r18, 0x01B7	; 0x8001b7 <twi_slarw>
    3898:	88 0f       	add	r24, r24
    389a:	82 2b       	or	r24, r18
    389c:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <twi_slarw>
    38a0:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <twi_in_rep_start>
    38a4:	81 30       	cpi	r24, 0x01	; 1
    38a6:	81 f4       	brne	.+32     	; 0x38c8 <twi_read+0x60>
    38a8:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <twi_in_rep_start>
    38ac:	ab eb       	ldi	r26, 0xBB	; 187
    38ae:	b0 e0       	ldi	r27, 0x00	; 0
    38b0:	ec eb       	ldi	r30, 0xBC	; 188
    38b2:	f0 e0       	ldi	r31, 0x00	; 0
    38b4:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <twi_slarw>
    38b8:	8c 93       	st	X, r24
    38ba:	80 81       	ld	r24, Z
    38bc:	83 fd       	sbrc	r24, 3
    38be:	fa cf       	rjmp	.-12     	; 0x38b4 <twi_read+0x4c>
    38c0:	85 ec       	ldi	r24, 0xC5	; 197
    38c2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    38c6:	03 c0       	rjmp	.+6      	; 0x38ce <twi_read+0x66>
    38c8:	85 ee       	ldi	r24, 0xE5	; 229
    38ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    38ce:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <twi_state>
    38d2:	81 30       	cpi	r24, 0x01	; 1
    38d4:	e1 f3       	breq	.-8      	; 0x38ce <twi_read+0x66>
    38d6:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <twi_master_buffer_index>
    38da:	84 17       	cp	r24, r20
    38dc:	10 f4       	brcc	.+4      	; 0x38e2 <twi_read+0x7a>
    38de:	40 91 91 01 	lds	r20, 0x0191	; 0x800191 <twi_master_buffer_index>
    38e2:	44 23       	and	r20, r20
    38e4:	89 f0       	breq	.+34     	; 0x3908 <twi_read+0xa0>
    38e6:	e2 e9       	ldi	r30, 0x92	; 146
    38e8:	f1 e0       	ldi	r31, 0x01	; 1
    38ea:	a6 2f       	mov	r26, r22
    38ec:	b7 2f       	mov	r27, r23
    38ee:	2f ef       	ldi	r18, 0xFF	; 255
    38f0:	24 0f       	add	r18, r20
    38f2:	30 e0       	ldi	r19, 0x00	; 0
    38f4:	2d 56       	subi	r18, 0x6D	; 109
    38f6:	3e 4f       	sbci	r19, 0xFE	; 254
    38f8:	81 91       	ld	r24, Z+
    38fa:	8d 93       	st	X+, r24
    38fc:	e2 17       	cp	r30, r18
    38fe:	f3 07       	cpc	r31, r19
    3900:	d9 f7       	brne	.-10     	; 0x38f8 <twi_read+0x90>
    3902:	94 2f       	mov	r25, r20
    3904:	01 c0       	rjmp	.+2      	; 0x3908 <twi_read+0xa0>
    3906:	90 e0       	ldi	r25, 0x00	; 0
    3908:	89 2f       	mov	r24, r25
    390a:	08 95       	ret

0000390c <twi_write>:
    390c:	0f 93       	push	r16
    390e:	41 32       	cpi	r20, 0x21	; 33
    3910:	08 f0       	brcs	.+2      	; 0x3914 <twi_write+0x8>
    3912:	54 c0       	rjmp	.+168    	; 0x39bc <twi_write+0xb0>
    3914:	30 91 ba 01 	lds	r19, 0x01BA	; 0x8001ba <twi_state>
    3918:	31 11       	cpse	r19, r1
    391a:	fc cf       	rjmp	.-8      	; 0x3914 <twi_write+0x8>
    391c:	92 e0       	ldi	r25, 0x02	; 2
    391e:	90 93 ba 01 	sts	0x01BA, r25	; 0x8001ba <twi_state>
    3922:	00 93 b9 01 	sts	0x01B9, r16	; 0x8001b9 <twi_send_stop>
    3926:	9f ef       	ldi	r25, 0xFF	; 255
    3928:	90 93 b6 01 	sts	0x01B6, r25	; 0x8001b6 <twi_error>
    392c:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <twi_master_buffer_index>
    3930:	40 93 90 01 	sts	0x0190, r20	; 0x800190 <twi_master_buffer_length>
    3934:	44 23       	and	r20, r20
    3936:	71 f0       	breq	.+28     	; 0x3954 <twi_write+0x48>
    3938:	fb 01       	movw	r30, r22
    393a:	a2 e9       	ldi	r26, 0x92	; 146
    393c:	b1 e0       	ldi	r27, 0x01	; 1
    393e:	41 50       	subi	r20, 0x01	; 1
    3940:	50 e0       	ldi	r21, 0x00	; 0
    3942:	4f 5f       	subi	r20, 0xFF	; 255
    3944:	5f 4f       	sbci	r21, 0xFF	; 255
    3946:	64 0f       	add	r22, r20
    3948:	75 1f       	adc	r23, r21
    394a:	91 91       	ld	r25, Z+
    394c:	9d 93       	st	X+, r25
    394e:	e6 17       	cp	r30, r22
    3950:	f7 07       	cpc	r31, r23
    3952:	d9 f7       	brne	.-10     	; 0x394a <twi_write+0x3e>
    3954:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <twi_slarw>
    3958:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <twi_slarw>
    395c:	88 0f       	add	r24, r24
    395e:	89 2b       	or	r24, r25
    3960:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <twi_slarw>
    3964:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <twi_in_rep_start>
    3968:	88 23       	and	r24, r24
    396a:	69 f0       	breq	.+26     	; 0x3986 <twi_write+0x7a>
    396c:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <twi_in_rep_start>
    3970:	ab eb       	ldi	r26, 0xBB	; 187
    3972:	b0 e0       	ldi	r27, 0x00	; 0
    3974:	ec eb       	ldi	r30, 0xBC	; 188
    3976:	f0 e0       	ldi	r31, 0x00	; 0
    3978:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <twi_slarw>
    397c:	9c 93       	st	X, r25
    397e:	90 81       	ld	r25, Z
    3980:	93 fd       	sbrc	r25, 3
    3982:	fa cf       	rjmp	.-12     	; 0x3978 <twi_write+0x6c>
    3984:	03 c0       	rjmp	.+6      	; 0x398c <twi_write+0x80>
    3986:	85 ee       	ldi	r24, 0xE5	; 229
    3988:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    398c:	22 23       	and	r18, r18
    398e:	41 f0       	breq	.+16     	; 0x39a0 <twi_write+0x94>
    3990:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <twi_state>
    3994:	82 30       	cpi	r24, 0x02	; 2
    3996:	21 f4       	brne	.+8      	; 0x39a0 <twi_write+0x94>
    3998:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <twi_state>
    399c:	82 30       	cpi	r24, 0x02	; 2
    399e:	e1 f3       	breq	.-8      	; 0x3998 <twi_write+0x8c>
    39a0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <twi_error>
    39a4:	8f 3f       	cpi	r24, 0xFF	; 255
    39a6:	79 f0       	breq	.+30     	; 0x39c6 <twi_write+0xba>
    39a8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <twi_error>
    39ac:	80 32       	cpi	r24, 0x20	; 32
    39ae:	41 f0       	breq	.+16     	; 0x39c0 <twi_write+0xb4>
    39b0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <twi_error>
    39b4:	80 33       	cpi	r24, 0x30	; 48
    39b6:	31 f0       	breq	.+12     	; 0x39c4 <twi_write+0xb8>
    39b8:	34 e0       	ldi	r19, 0x04	; 4
    39ba:	05 c0       	rjmp	.+10     	; 0x39c6 <twi_write+0xba>
    39bc:	31 e0       	ldi	r19, 0x01	; 1
    39be:	03 c0       	rjmp	.+6      	; 0x39c6 <twi_write+0xba>
    39c0:	32 e0       	ldi	r19, 0x02	; 2
    39c2:	01 c0       	rjmp	.+2      	; 0x39c6 <twi_write+0xba>
    39c4:	33 e0       	ldi	r19, 0x03	; 3
    39c6:	83 2f       	mov	r24, r19
    39c8:	0f 91       	pop	r16
    39ca:	08 95       	ret

000039cc <twi_transmit>:
    39cc:	40 91 6e 01 	lds	r20, 0x016E	; 0x80016e <twi_tx_buffer_length>
    39d0:	26 2f       	mov	r18, r22
    39d2:	30 e0       	ldi	r19, 0x00	; 0
    39d4:	24 0f       	add	r18, r20
    39d6:	31 1d       	adc	r19, r1
    39d8:	21 32       	cpi	r18, 0x21	; 33
    39da:	31 05       	cpc	r19, r1
    39dc:	ec f4       	brge	.+58     	; 0x3a18 <twi_transmit+0x4c>
    39de:	20 91 ba 01 	lds	r18, 0x01BA	; 0x8001ba <twi_state>
    39e2:	24 30       	cpi	r18, 0x04	; 4
    39e4:	d9 f4       	brne	.+54     	; 0x3a1c <twi_transmit+0x50>
    39e6:	66 23       	and	r22, r22
    39e8:	81 f0       	breq	.+32     	; 0x3a0a <twi_transmit+0x3e>
    39ea:	a8 2f       	mov	r26, r24
    39ec:	b9 2f       	mov	r27, r25
    39ee:	80 e0       	ldi	r24, 0x00	; 0
    39f0:	90 e0       	ldi	r25, 0x00	; 0
    39f2:	30 91 6e 01 	lds	r19, 0x016E	; 0x80016e <twi_tx_buffer_length>
    39f6:	2d 91       	ld	r18, X+
    39f8:	fc 01       	movw	r30, r24
    39fa:	e0 59       	subi	r30, 0x90	; 144
    39fc:	fe 4f       	sbci	r31, 0xFE	; 254
    39fe:	e3 0f       	add	r30, r19
    3a00:	f1 1d       	adc	r31, r1
    3a02:	20 83       	st	Z, r18
    3a04:	01 96       	adiw	r24, 0x01	; 1
    3a06:	86 17       	cp	r24, r22
    3a08:	a0 f3       	brcs	.-24     	; 0x39f2 <twi_transmit+0x26>
    3a0a:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <twi_tx_buffer_length>
    3a0e:	68 0f       	add	r22, r24
    3a10:	60 93 6e 01 	sts	0x016E, r22	; 0x80016e <twi_tx_buffer_length>
    3a14:	80 e0       	ldi	r24, 0x00	; 0
    3a16:	08 95       	ret
    3a18:	81 e0       	ldi	r24, 0x01	; 1
    3a1a:	08 95       	ret
    3a1c:	82 e0       	ldi	r24, 0x02	; 2
    3a1e:	08 95       	ret

00003a20 <twi_stop>:
    3a20:	85 ed       	ldi	r24, 0xD5	; 213
    3a22:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    3a26:	ec eb       	ldi	r30, 0xBC	; 188
    3a28:	f0 e0       	ldi	r31, 0x00	; 0
    3a2a:	80 81       	ld	r24, Z
    3a2c:	84 fd       	sbrc	r24, 4
    3a2e:	fd cf       	rjmp	.-6      	; 0x3a2a <twi_stop+0xa>
    3a30:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <twi_state>
    3a34:	08 95       	ret

00003a36 <twi_release_bus>:
}

void twi_release_bus(void)
{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    3a36:	85 ec       	ldi	r24, 0xC5	; 197
    3a38:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    twi_state = TWI_READY;
    3a3c:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <twi_state>
    3a40:	08 95       	ret

00003a42 <__vector_24>:
}

ISR(TWI_vect)
{
    3a42:	1f 92       	push	r1
    3a44:	0f 92       	push	r0
    3a46:	0f b6       	in	r0, 0x3f	; 63
    3a48:	0f 92       	push	r0
    3a4a:	11 24       	eor	r1, r1
    3a4c:	2f 93       	push	r18
    3a4e:	3f 93       	push	r19
    3a50:	4f 93       	push	r20
    3a52:	5f 93       	push	r21
    3a54:	6f 93       	push	r22
    3a56:	7f 93       	push	r23
    3a58:	8f 93       	push	r24
    3a5a:	9f 93       	push	r25
    3a5c:	af 93       	push	r26
    3a5e:	bf 93       	push	r27
    3a60:	ef 93       	push	r30
    3a62:	ff 93       	push	r31
    switch(TW_STATUS)
    3a64:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    3a68:	e8 2f       	mov	r30, r24
    3a6a:	e8 7f       	andi	r30, 0xF8	; 248
    3a6c:	8e 2f       	mov	r24, r30
    3a6e:	90 e0       	ldi	r25, 0x00	; 0
    3a70:	89 3c       	cpi	r24, 0xC9	; 201
    3a72:	91 05       	cpc	r25, r1
    3a74:	08 f0       	brcs	.+2      	; 0x3a78 <__vector_24+0x36>
    3a76:	f5 c0       	rjmp	.+490    	; 0x3c62 <__vector_24+0x220>
    3a78:	fc 01       	movw	r30, r24
    3a7a:	e7 59       	subi	r30, 0x97	; 151
    3a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a7e:	0c 94 00 22 	jmp	0x4400	; 0x4400 <__tablejump2__>
    {
        // MASTER
        case TW_START: // start condition transmitted
        case TW_REP_START: // repeated start condition transmitted
        {
            TWDR = twi_slarw;
    3a82:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <twi_slarw>
    3a86:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    twi_state = TWI_READY;
}

void twi_reply(uint8_t ack)
{
    if (ack) { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA); }
    3a8a:	85 ec       	ldi	r24, 0xC5	; 197
    3a8c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    3a90:	e8 c0       	rjmp	.+464    	; 0x3c62 <__vector_24+0x220>
        
        // MASTER TRANSMITTER
        case TW_MT_SLA_ACK: // SLA+W transmitted, ACK received
        case TW_MT_DATA_ACK: // data transmitted, ACK received
        {
            if (twi_master_buffer_index < twi_master_buffer_length)
    3a92:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <twi_master_buffer_index>
    3a96:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <twi_master_buffer_length>
    3a9a:	98 17       	cp	r25, r24
    3a9c:	80 f4       	brcc	.+32     	; 0x3abe <__vector_24+0x7c>
            {
                TWDR = twi_master_buffer[twi_master_buffer_index++];
    3a9e:	e0 91 91 01 	lds	r30, 0x0191	; 0x800191 <twi_master_buffer_index>
    3aa2:	81 e0       	ldi	r24, 0x01	; 1
    3aa4:	8e 0f       	add	r24, r30
    3aa6:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <twi_master_buffer_index>
    3aaa:	f0 e0       	ldi	r31, 0x00	; 0
    3aac:	ee 56       	subi	r30, 0x6E	; 110
    3aae:	fe 4f       	sbci	r31, 0xFE	; 254
    3ab0:	80 81       	ld	r24, Z
    3ab2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    twi_state = TWI_READY;
}

void twi_reply(uint8_t ack)
{
    if (ack) { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA); }
    3ab6:	85 ec       	ldi	r24, 0xC5	; 197
    3ab8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    3abc:	d2 c0       	rjmp	.+420    	; 0x3c62 <__vector_24+0x220>
                TWDR = twi_master_buffer[twi_master_buffer_index++];
                twi_reply(1);
            }
            else
            {
                if (twi_send_stop) { twi_stop(); }
    3abe:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <twi_send_stop>
    3ac2:	88 23       	and	r24, r24
    3ac4:	19 f0       	breq	.+6      	; 0x3acc <__vector_24+0x8a>
    3ac6:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <twi_stop>
    3aca:	cb c0       	rjmp	.+406    	; 0x3c62 <__vector_24+0x220>
                else
                {
                    twi_in_rep_start = 1;
    3acc:	81 e0       	ldi	r24, 0x01	; 1
    3ace:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <twi_in_rep_start>
                    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    3ad2:	84 ea       	ldi	r24, 0xA4	; 164
    3ad4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
                    twi_state = TWI_READY;
    3ad8:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <twi_state>
    3adc:	c2 c0       	rjmp	.+388    	; 0x3c62 <__vector_24+0x220>
            }
        }
        break;
        case TW_MT_SLA_NACK:  // SLA+W transmitted, NACK received
        {
            twi_error = TW_MT_SLA_NACK;
    3ade:	80 e2       	ldi	r24, 0x20	; 32
    3ae0:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <twi_error>
            twi_stop();
    3ae4:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <twi_stop>
        }
        break;
    3ae8:	bc c0       	rjmp	.+376    	; 0x3c62 <__vector_24+0x220>
        case TW_MT_DATA_NACK: // data transmitted, NACK received
        {
            twi_error = TW_MT_DATA_NACK;
    3aea:	80 e3       	ldi	r24, 0x30	; 48
    3aec:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <twi_error>
            twi_stop();
    3af0:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <twi_stop>
        }
        break;
    3af4:	b6 c0       	rjmp	.+364    	; 0x3c62 <__vector_24+0x220>
        case TW_MT_ARB_LOST: // arbitration lost in SLA+W or data
        {
            twi_error = TW_MT_ARB_LOST;
    3af6:	88 e3       	ldi	r24, 0x38	; 56
    3af8:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <twi_error>
            twi_release_bus();
    3afc:	0e 94 1b 1d 	call	0x3a36	; 0x3a36 <twi_release_bus>
        }
        break;
    3b00:	b0 c0       	rjmp	.+352    	; 0x3c62 <__vector_24+0x220>
        
        // MASTER RECEIVER
        case TW_MR_DATA_ACK: // data received, ACK returned
        twi_master_buffer[twi_master_buffer_index++] = TWDR;
    3b02:	e0 91 91 01 	lds	r30, 0x0191	; 0x800191 <twi_master_buffer_index>
    3b06:	81 e0       	ldi	r24, 0x01	; 1
    3b08:	8e 0f       	add	r24, r30
    3b0a:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <twi_master_buffer_index>
    3b0e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    3b12:	f0 e0       	ldi	r31, 0x00	; 0
    3b14:	ee 56       	subi	r30, 0x6E	; 110
    3b16:	fe 4f       	sbci	r31, 0xFE	; 254
    3b18:	80 83       	st	Z, r24
        /* fall through */
        case TW_MR_SLA_ACK:  // SLA+R transmitted, ACK received
        {
            if (twi_master_buffer_index < twi_master_buffer_length) { twi_reply(1); }
    3b1a:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <twi_master_buffer_index>
    3b1e:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <twi_master_buffer_length>
    3b22:	98 17       	cp	r25, r24
    3b24:	20 f4       	brcc	.+8      	; 0x3b2e <__vector_24+0xec>
    twi_state = TWI_READY;
}

void twi_reply(uint8_t ack)
{
    if (ack) { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA); }
    3b26:	85 ec       	ldi	r24, 0xC5	; 197
    3b28:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    3b2c:	9a c0       	rjmp	.+308    	; 0x3c62 <__vector_24+0x220>
    else { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT); }
    3b2e:	85 e8       	ldi	r24, 0x85	; 133
    3b30:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    3b34:	96 c0       	rjmp	.+300    	; 0x3c62 <__vector_24+0x220>
            else { twi_reply(0); }
        }
        break;
        case TW_MR_DATA_NACK: // data received, NACK returned
        {
            twi_master_buffer[twi_master_buffer_index++] = TWDR;
    3b36:	e0 91 91 01 	lds	r30, 0x0191	; 0x800191 <twi_master_buffer_index>
    3b3a:	81 e0       	ldi	r24, 0x01	; 1
    3b3c:	8e 0f       	add	r24, r30
    3b3e:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <twi_master_buffer_index>
    3b42:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    3b46:	f0 e0       	ldi	r31, 0x00	; 0
    3b48:	ee 56       	subi	r30, 0x6E	; 110
    3b4a:	fe 4f       	sbci	r31, 0xFE	; 254
    3b4c:	80 83       	st	Z, r24
            if (twi_send_stop) { twi_stop(); }
    3b4e:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <twi_send_stop>
    3b52:	88 23       	and	r24, r24
    3b54:	19 f0       	breq	.+6      	; 0x3b5c <__vector_24+0x11a>
    3b56:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <twi_stop>
    3b5a:	83 c0       	rjmp	.+262    	; 0x3c62 <__vector_24+0x220>
            else {
                twi_in_rep_start = 1;
    3b5c:	81 e0       	ldi	r24, 0x01	; 1
    3b5e:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <twi_in_rep_start>
                TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    3b62:	84 ea       	ldi	r24, 0xA4	; 164
    3b64:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
                twi_state = TWI_READY;
    3b68:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <twi_state>
    3b6c:	7a c0       	rjmp	.+244    	; 0x3c62 <__vector_24+0x220>
            }
        }
        break;
        case TW_MR_SLA_NACK: // SLA+R transmitted, NACK received
        {
            twi_stop();
    3b6e:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <twi_stop>
        }
        break;
    3b72:	77 c0       	rjmp	.+238    	; 0x3c62 <__vector_24+0x220>
        case TW_SR_SLA_ACK: // SLA+W received, ACK returned
        case TW_SR_GCALL_ACK: // general call received, ACK returned
        case TW_SR_ARB_LOST_SLA_ACK:   // arbitration lost in SLA+RW, SLA+W received, ACK returned
        case TW_SR_ARB_LOST_GCALL_ACK: // arbitration lost in SLA+RW, general call received, ACK returned
        {
            twi_state = TWI_SRX;
    3b74:	83 e0       	ldi	r24, 0x03	; 3
    3b76:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <twi_state>
            twi_rx_buffer_index = 0;
    3b7a:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <twi_rx_buffer_index>
    twi_state = TWI_READY;
}

void twi_reply(uint8_t ack)
{
    if (ack) { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA); }
    3b7e:	85 ec       	ldi	r24, 0xC5	; 197
    3b80:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    3b84:	6e c0       	rjmp	.+220    	; 0x3c62 <__vector_24+0x220>
        }
        break;
        case TW_SR_DATA_ACK: // data received, ACK returned
        case TW_SR_GCALL_DATA_ACK: // general call data received, ACK returned
        {
            if (twi_rx_buffer_index < TWI_BUFFER_LENGTH) {
    3b86:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <twi_rx_buffer_index>
    3b8a:	80 32       	cpi	r24, 0x20	; 32
    3b8c:	80 f4       	brcc	.+32     	; 0x3bae <__vector_24+0x16c>
                
                twi_rx_buffer[twi_rx_buffer_index++] = TWDR;
    3b8e:	e0 91 4d 01 	lds	r30, 0x014D	; 0x80014d <twi_rx_buffer_index>
    3b92:	81 e0       	ldi	r24, 0x01	; 1
    3b94:	8e 0f       	add	r24, r30
    3b96:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <twi_rx_buffer_index>
    3b9a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    3b9e:	f0 e0       	ldi	r31, 0x00	; 0
    3ba0:	e2 5b       	subi	r30, 0xB2	; 178
    3ba2:	fe 4f       	sbci	r31, 0xFE	; 254
    3ba4:	80 83       	st	Z, r24
    twi_state = TWI_READY;
}

void twi_reply(uint8_t ack)
{
    if (ack) { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA); }
    3ba6:	85 ec       	ldi	r24, 0xC5	; 197
    3ba8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    3bac:	5a c0       	rjmp	.+180    	; 0x3c62 <__vector_24+0x220>
    else { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT); }
    3bae:	85 e8       	ldi	r24, 0x85	; 133
    3bb0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    3bb4:	56 c0       	rjmp	.+172    	; 0x3c62 <__vector_24+0x220>
            
        }
        break;
        case TW_SR_STOP: // stop or repeated start condition received while selected
        {
            twi_release_bus();
    3bb6:	0e 94 1b 1d 	call	0x3a36	; 0x3a36 <twi_release_bus>
            if(twi_rx_buffer_index < TWI_BUFFER_LENGTH) { twi_rx_buffer[twi_rx_buffer_index] = '\0'; }
    3bba:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <twi_rx_buffer_index>
    3bbe:	80 32       	cpi	r24, 0x20	; 32
    3bc0:	30 f4       	brcc	.+12     	; 0x3bce <__vector_24+0x18c>
    3bc2:	e0 91 4d 01 	lds	r30, 0x014D	; 0x80014d <twi_rx_buffer_index>
    3bc6:	f0 e0       	ldi	r31, 0x00	; 0
    3bc8:	e2 5b       	subi	r30, 0xB2	; 178
    3bca:	fe 4f       	sbci	r31, 0xFE	; 254
    3bcc:	10 82       	st	Z, r1
            twi_on_slave_receive(twi_rx_buffer, twi_rx_buffer_index);
    3bce:	60 91 4d 01 	lds	r22, 0x014D	; 0x80014d <twi_rx_buffer_index>
    3bd2:	70 e0       	ldi	r23, 0x00	; 0
    3bd4:	e0 91 b2 01 	lds	r30, 0x01B2	; 0x8001b2 <twi_on_slave_receive>
    3bd8:	f0 91 b3 01 	lds	r31, 0x01B3	; 0x8001b3 <twi_on_slave_receive+0x1>
    3bdc:	8e e4       	ldi	r24, 0x4E	; 78
    3bde:	91 e0       	ldi	r25, 0x01	; 1
    3be0:	09 95       	icall
            twi_rx_buffer_index = 0;
    3be2:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <twi_rx_buffer_index>
        }
        break;
    3be6:	3d c0       	rjmp	.+122    	; 0x3c62 <__vector_24+0x220>
}

void twi_reply(uint8_t ack)
{
    if (ack) { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA); }
    else { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT); }
    3be8:	85 e8       	ldi	r24, 0x85	; 133
    3bea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    3bee:	39 c0       	rjmp	.+114    	; 0x3c62 <__vector_24+0x220>
        // SLAVE TRANSMITTER
        case TW_ST_SLA_ACK: // SLA+R received, ACK returned
        case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost in SLA+RW, SLA+R received, ACK returned
        {
            
            twi_state = TWI_STX;
    3bf0:	84 e0       	ldi	r24, 0x04	; 4
    3bf2:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <twi_state>
            twi_tx_buffer_index = 0;
    3bf6:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <twi_tx_buffer_index>
            twi_tx_buffer_length = 0;
    3bfa:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <twi_tx_buffer_length>
            twi_on_slave_transmit();
    3bfe:	e0 91 b4 01 	lds	r30, 0x01B4	; 0x8001b4 <twi_on_slave_transmit>
    3c02:	f0 91 b5 01 	lds	r31, 0x01B5	; 0x8001b5 <twi_on_slave_transmit+0x1>
    3c06:	09 95       	icall
            if (0 == twi_tx_buffer_length) {
    3c08:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <twi_tx_buffer_length>
    3c0c:	81 11       	cpse	r24, r1
    3c0e:	05 c0       	rjmp	.+10     	; 0x3c1a <__vector_24+0x1d8>
                twi_tx_buffer_length = 1;
    3c10:	81 e0       	ldi	r24, 0x01	; 1
    3c12:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <twi_tx_buffer_length>
                twi_tx_buffer[0] = 0x00;
    3c16:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <twi_tx_buffer>
            }
        }
        /* fall through */
        case TW_ST_DATA_ACK: // data transmitted, ACK received
        {
            TWDR = twi_tx_buffer[twi_tx_buffer_index++];
    3c1a:	e0 91 6f 01 	lds	r30, 0x016F	; 0x80016f <twi_tx_buffer_index>
    3c1e:	81 e0       	ldi	r24, 0x01	; 1
    3c20:	8e 0f       	add	r24, r30
    3c22:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <twi_tx_buffer_index>
    3c26:	f0 e0       	ldi	r31, 0x00	; 0
    3c28:	e0 59       	subi	r30, 0x90	; 144
    3c2a:	fe 4f       	sbci	r31, 0xFE	; 254
    3c2c:	80 81       	ld	r24, Z
    3c2e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
            if (twi_tx_buffer_index < twi_tx_buffer_length) { twi_reply(1); }
    3c32:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <twi_tx_buffer_index>
    3c36:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <twi_tx_buffer_length>
    3c3a:	98 17       	cp	r25, r24
    3c3c:	20 f4       	brcc	.+8      	; 0x3c46 <__vector_24+0x204>
    twi_state = TWI_READY;
}

void twi_reply(uint8_t ack)
{
    if (ack) { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA); }
    3c3e:	85 ec       	ldi	r24, 0xC5	; 197
    3c40:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    3c44:	0e c0       	rjmp	.+28     	; 0x3c62 <__vector_24+0x220>
    else { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT); }
    3c46:	85 e8       	ldi	r24, 0x85	; 133
    3c48:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    3c4c:	0a c0       	rjmp	.+20     	; 0x3c62 <__vector_24+0x220>
    twi_state = TWI_READY;
}

void twi_reply(uint8_t ack)
{
    if (ack) { TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA); }
    3c4e:	85 ec       	ldi	r24, 0xC5	; 197
    3c50:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
        break;
        case TW_ST_DATA_NACK: // data transmitted, NACK received
        case TW_ST_LAST_DATA: // last data byte transmitted, ACK received
        {
            twi_reply(1);
            twi_state = TWI_READY;
    3c54:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <twi_state>
        }
        break;
    3c58:	04 c0       	rjmp	.+8      	; 0x3c62 <__vector_24+0x220>
        // MISC
        case TW_NO_INFO:   // no state information available
        break;
        case TW_BUS_ERROR: // illegal start or stop condition
        {
            twi_error = TW_BUS_ERROR;
    3c5a:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <twi_error>
            twi_stop();
    3c5e:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <twi_stop>
        }
        break;
    }
    3c62:	ff 91       	pop	r31
    3c64:	ef 91       	pop	r30
    3c66:	bf 91       	pop	r27
    3c68:	af 91       	pop	r26
    3c6a:	9f 91       	pop	r25
    3c6c:	8f 91       	pop	r24
    3c6e:	7f 91       	pop	r23
    3c70:	6f 91       	pop	r22
    3c72:	5f 91       	pop	r21
    3c74:	4f 91       	pop	r20
    3c76:	3f 91       	pop	r19
    3c78:	2f 91       	pop	r18
    3c7a:	0f 90       	pop	r0
    3c7c:	0f be       	out	0x3f, r0	; 63
    3c7e:	0f 90       	pop	r0
    3c80:	1f 90       	pop	r1
    3c82:	18 95       	reti

00003c84 <vfprintf>:
    3c84:	a0 e1       	ldi	r26, 0x10	; 16
    3c86:	b0 e0       	ldi	r27, 0x00	; 0
    3c88:	e8 e4       	ldi	r30, 0x48	; 72
    3c8a:	fe e1       	ldi	r31, 0x1E	; 30
    3c8c:	0c 94 06 22 	jmp	0x440c	; 0x440c <__prologue_saves__>
    3c90:	7c 01       	movw	r14, r24
    3c92:	1b 01       	movw	r2, r22
    3c94:	6a 01       	movw	r12, r20
    3c96:	fc 01       	movw	r30, r24
    3c98:	17 82       	std	Z+7, r1	; 0x07
    3c9a:	16 82       	std	Z+6, r1	; 0x06
    3c9c:	83 81       	ldd	r24, Z+3	; 0x03
    3c9e:	81 ff       	sbrs	r24, 1
    3ca0:	44 c3       	rjmp	.+1672   	; 0x432a <vfprintf+0x6a6>
    3ca2:	9e 01       	movw	r18, r28
    3ca4:	2f 5f       	subi	r18, 0xFF	; 255
    3ca6:	3f 4f       	sbci	r19, 0xFF	; 255
    3ca8:	39 01       	movw	r6, r18
    3caa:	f7 01       	movw	r30, r14
    3cac:	93 81       	ldd	r25, Z+3	; 0x03
    3cae:	f1 01       	movw	r30, r2
    3cb0:	93 fd       	sbrc	r25, 3
    3cb2:	85 91       	lpm	r24, Z+
    3cb4:	93 ff       	sbrs	r25, 3
    3cb6:	81 91       	ld	r24, Z+
    3cb8:	1f 01       	movw	r2, r30
    3cba:	88 23       	and	r24, r24
    3cbc:	09 f4       	brne	.+2      	; 0x3cc0 <vfprintf+0x3c>
    3cbe:	31 c3       	rjmp	.+1634   	; 0x4322 <vfprintf+0x69e>
    3cc0:	85 32       	cpi	r24, 0x25	; 37
    3cc2:	39 f4       	brne	.+14     	; 0x3cd2 <vfprintf+0x4e>
    3cc4:	93 fd       	sbrc	r25, 3
    3cc6:	85 91       	lpm	r24, Z+
    3cc8:	93 ff       	sbrs	r25, 3
    3cca:	81 91       	ld	r24, Z+
    3ccc:	1f 01       	movw	r2, r30
    3cce:	85 32       	cpi	r24, 0x25	; 37
    3cd0:	39 f4       	brne	.+14     	; 0x3ce0 <vfprintf+0x5c>
    3cd2:	b7 01       	movw	r22, r14
    3cd4:	90 e0       	ldi	r25, 0x00	; 0
    3cd6:	0e 94 2b 23 	call	0x4656	; 0x4656 <fputc>
    3cda:	56 01       	movw	r10, r12
    3cdc:	65 01       	movw	r12, r10
    3cde:	e5 cf       	rjmp	.-54     	; 0x3caa <vfprintf+0x26>
    3ce0:	10 e0       	ldi	r17, 0x00	; 0
    3ce2:	51 2c       	mov	r5, r1
    3ce4:	91 2c       	mov	r9, r1
    3ce6:	ff e1       	ldi	r31, 0x1F	; 31
    3ce8:	f9 15       	cp	r31, r9
    3cea:	d8 f0       	brcs	.+54     	; 0x3d22 <vfprintf+0x9e>
    3cec:	8b 32       	cpi	r24, 0x2B	; 43
    3cee:	79 f0       	breq	.+30     	; 0x3d0e <vfprintf+0x8a>
    3cf0:	38 f4       	brcc	.+14     	; 0x3d00 <vfprintf+0x7c>
    3cf2:	80 32       	cpi	r24, 0x20	; 32
    3cf4:	79 f0       	breq	.+30     	; 0x3d14 <vfprintf+0x90>
    3cf6:	83 32       	cpi	r24, 0x23	; 35
    3cf8:	a1 f4       	brne	.+40     	; 0x3d22 <vfprintf+0x9e>
    3cfa:	f9 2d       	mov	r31, r9
    3cfc:	f0 61       	ori	r31, 0x10	; 16
    3cfe:	2e c0       	rjmp	.+92     	; 0x3d5c <vfprintf+0xd8>
    3d00:	8d 32       	cpi	r24, 0x2D	; 45
    3d02:	61 f0       	breq	.+24     	; 0x3d1c <vfprintf+0x98>
    3d04:	80 33       	cpi	r24, 0x30	; 48
    3d06:	69 f4       	brne	.+26     	; 0x3d22 <vfprintf+0x9e>
    3d08:	29 2d       	mov	r18, r9
    3d0a:	21 60       	ori	r18, 0x01	; 1
    3d0c:	2d c0       	rjmp	.+90     	; 0x3d68 <vfprintf+0xe4>
    3d0e:	39 2d       	mov	r19, r9
    3d10:	32 60       	ori	r19, 0x02	; 2
    3d12:	93 2e       	mov	r9, r19
    3d14:	89 2d       	mov	r24, r9
    3d16:	84 60       	ori	r24, 0x04	; 4
    3d18:	98 2e       	mov	r9, r24
    3d1a:	2a c0       	rjmp	.+84     	; 0x3d70 <vfprintf+0xec>
    3d1c:	e9 2d       	mov	r30, r9
    3d1e:	e8 60       	ori	r30, 0x08	; 8
    3d20:	15 c0       	rjmp	.+42     	; 0x3d4c <vfprintf+0xc8>
    3d22:	97 fc       	sbrc	r9, 7
    3d24:	2d c0       	rjmp	.+90     	; 0x3d80 <vfprintf+0xfc>
    3d26:	20 ed       	ldi	r18, 0xD0	; 208
    3d28:	28 0f       	add	r18, r24
    3d2a:	2a 30       	cpi	r18, 0x0A	; 10
    3d2c:	88 f4       	brcc	.+34     	; 0x3d50 <vfprintf+0xcc>
    3d2e:	96 fe       	sbrs	r9, 6
    3d30:	06 c0       	rjmp	.+12     	; 0x3d3e <vfprintf+0xba>
    3d32:	3a e0       	ldi	r19, 0x0A	; 10
    3d34:	13 9f       	mul	r17, r19
    3d36:	20 0d       	add	r18, r0
    3d38:	11 24       	eor	r1, r1
    3d3a:	12 2f       	mov	r17, r18
    3d3c:	19 c0       	rjmp	.+50     	; 0x3d70 <vfprintf+0xec>
    3d3e:	8a e0       	ldi	r24, 0x0A	; 10
    3d40:	58 9e       	mul	r5, r24
    3d42:	20 0d       	add	r18, r0
    3d44:	11 24       	eor	r1, r1
    3d46:	52 2e       	mov	r5, r18
    3d48:	e9 2d       	mov	r30, r9
    3d4a:	e0 62       	ori	r30, 0x20	; 32
    3d4c:	9e 2e       	mov	r9, r30
    3d4e:	10 c0       	rjmp	.+32     	; 0x3d70 <vfprintf+0xec>
    3d50:	8e 32       	cpi	r24, 0x2E	; 46
    3d52:	31 f4       	brne	.+12     	; 0x3d60 <vfprintf+0xdc>
    3d54:	96 fc       	sbrc	r9, 6
    3d56:	e5 c2       	rjmp	.+1482   	; 0x4322 <vfprintf+0x69e>
    3d58:	f9 2d       	mov	r31, r9
    3d5a:	f0 64       	ori	r31, 0x40	; 64
    3d5c:	9f 2e       	mov	r9, r31
    3d5e:	08 c0       	rjmp	.+16     	; 0x3d70 <vfprintf+0xec>
    3d60:	8c 36       	cpi	r24, 0x6C	; 108
    3d62:	21 f4       	brne	.+8      	; 0x3d6c <vfprintf+0xe8>
    3d64:	29 2d       	mov	r18, r9
    3d66:	20 68       	ori	r18, 0x80	; 128
    3d68:	92 2e       	mov	r9, r18
    3d6a:	02 c0       	rjmp	.+4      	; 0x3d70 <vfprintf+0xec>
    3d6c:	88 36       	cpi	r24, 0x68	; 104
    3d6e:	41 f4       	brne	.+16     	; 0x3d80 <vfprintf+0xfc>
    3d70:	f1 01       	movw	r30, r2
    3d72:	93 fd       	sbrc	r25, 3
    3d74:	85 91       	lpm	r24, Z+
    3d76:	93 ff       	sbrs	r25, 3
    3d78:	81 91       	ld	r24, Z+
    3d7a:	1f 01       	movw	r2, r30
    3d7c:	81 11       	cpse	r24, r1
    3d7e:	b3 cf       	rjmp	.-154    	; 0x3ce6 <vfprintf+0x62>
    3d80:	9b eb       	ldi	r25, 0xBB	; 187
    3d82:	98 0f       	add	r25, r24
    3d84:	93 30       	cpi	r25, 0x03	; 3
    3d86:	20 f4       	brcc	.+8      	; 0x3d90 <vfprintf+0x10c>
    3d88:	99 2d       	mov	r25, r9
    3d8a:	90 61       	ori	r25, 0x10	; 16
    3d8c:	80 5e       	subi	r24, 0xE0	; 224
    3d8e:	07 c0       	rjmp	.+14     	; 0x3d9e <vfprintf+0x11a>
    3d90:	9b e9       	ldi	r25, 0x9B	; 155
    3d92:	98 0f       	add	r25, r24
    3d94:	93 30       	cpi	r25, 0x03	; 3
    3d96:	08 f0       	brcs	.+2      	; 0x3d9a <vfprintf+0x116>
    3d98:	66 c1       	rjmp	.+716    	; 0x4066 <vfprintf+0x3e2>
    3d9a:	99 2d       	mov	r25, r9
    3d9c:	9f 7e       	andi	r25, 0xEF	; 239
    3d9e:	96 ff       	sbrs	r25, 6
    3da0:	16 e0       	ldi	r17, 0x06	; 6
    3da2:	9f 73       	andi	r25, 0x3F	; 63
    3da4:	99 2e       	mov	r9, r25
    3da6:	85 36       	cpi	r24, 0x65	; 101
    3da8:	19 f4       	brne	.+6      	; 0x3db0 <vfprintf+0x12c>
    3daa:	90 64       	ori	r25, 0x40	; 64
    3dac:	99 2e       	mov	r9, r25
    3dae:	08 c0       	rjmp	.+16     	; 0x3dc0 <vfprintf+0x13c>
    3db0:	86 36       	cpi	r24, 0x66	; 102
    3db2:	21 f4       	brne	.+8      	; 0x3dbc <vfprintf+0x138>
    3db4:	39 2f       	mov	r19, r25
    3db6:	30 68       	ori	r19, 0x80	; 128
    3db8:	93 2e       	mov	r9, r19
    3dba:	02 c0       	rjmp	.+4      	; 0x3dc0 <vfprintf+0x13c>
    3dbc:	11 11       	cpse	r17, r1
    3dbe:	11 50       	subi	r17, 0x01	; 1
    3dc0:	97 fe       	sbrs	r9, 7
    3dc2:	07 c0       	rjmp	.+14     	; 0x3dd2 <vfprintf+0x14e>
    3dc4:	1c 33       	cpi	r17, 0x3C	; 60
    3dc6:	50 f4       	brcc	.+20     	; 0x3ddc <vfprintf+0x158>
    3dc8:	44 24       	eor	r4, r4
    3dca:	43 94       	inc	r4
    3dcc:	41 0e       	add	r4, r17
    3dce:	27 e0       	ldi	r18, 0x07	; 7
    3dd0:	0b c0       	rjmp	.+22     	; 0x3de8 <vfprintf+0x164>
    3dd2:	18 30       	cpi	r17, 0x08	; 8
    3dd4:	38 f0       	brcs	.+14     	; 0x3de4 <vfprintf+0x160>
    3dd6:	27 e0       	ldi	r18, 0x07	; 7
    3dd8:	17 e0       	ldi	r17, 0x07	; 7
    3dda:	05 c0       	rjmp	.+10     	; 0x3de6 <vfprintf+0x162>
    3ddc:	27 e0       	ldi	r18, 0x07	; 7
    3dde:	9c e3       	ldi	r25, 0x3C	; 60
    3de0:	49 2e       	mov	r4, r25
    3de2:	02 c0       	rjmp	.+4      	; 0x3de8 <vfprintf+0x164>
    3de4:	21 2f       	mov	r18, r17
    3de6:	41 2c       	mov	r4, r1
    3de8:	56 01       	movw	r10, r12
    3dea:	84 e0       	ldi	r24, 0x04	; 4
    3dec:	a8 0e       	add	r10, r24
    3dee:	b1 1c       	adc	r11, r1
    3df0:	f6 01       	movw	r30, r12
    3df2:	60 81       	ld	r22, Z
    3df4:	71 81       	ldd	r23, Z+1	; 0x01
    3df6:	82 81       	ldd	r24, Z+2	; 0x02
    3df8:	93 81       	ldd	r25, Z+3	; 0x03
    3dfa:	04 2d       	mov	r16, r4
    3dfc:	a3 01       	movw	r20, r6
    3dfe:	0e 94 3d 22 	call	0x447a	; 0x447a <__ftoa_engine>
    3e02:	6c 01       	movw	r12, r24
    3e04:	f9 81       	ldd	r31, Y+1	; 0x01
    3e06:	fc 87       	std	Y+12, r31	; 0x0c
    3e08:	f0 ff       	sbrs	r31, 0
    3e0a:	02 c0       	rjmp	.+4      	; 0x3e10 <vfprintf+0x18c>
    3e0c:	f3 ff       	sbrs	r31, 3
    3e0e:	06 c0       	rjmp	.+12     	; 0x3e1c <vfprintf+0x198>
    3e10:	91 fc       	sbrc	r9, 1
    3e12:	06 c0       	rjmp	.+12     	; 0x3e20 <vfprintf+0x19c>
    3e14:	92 fe       	sbrs	r9, 2
    3e16:	06 c0       	rjmp	.+12     	; 0x3e24 <vfprintf+0x1a0>
    3e18:	00 e2       	ldi	r16, 0x20	; 32
    3e1a:	05 c0       	rjmp	.+10     	; 0x3e26 <vfprintf+0x1a2>
    3e1c:	0d e2       	ldi	r16, 0x2D	; 45
    3e1e:	03 c0       	rjmp	.+6      	; 0x3e26 <vfprintf+0x1a2>
    3e20:	0b e2       	ldi	r16, 0x2B	; 43
    3e22:	01 c0       	rjmp	.+2      	; 0x3e26 <vfprintf+0x1a2>
    3e24:	00 e0       	ldi	r16, 0x00	; 0
    3e26:	8c 85       	ldd	r24, Y+12	; 0x0c
    3e28:	8c 70       	andi	r24, 0x0C	; 12
    3e2a:	19 f0       	breq	.+6      	; 0x3e32 <vfprintf+0x1ae>
    3e2c:	01 11       	cpse	r16, r1
    3e2e:	5a c2       	rjmp	.+1204   	; 0x42e4 <vfprintf+0x660>
    3e30:	9b c2       	rjmp	.+1334   	; 0x4368 <vfprintf+0x6e4>
    3e32:	97 fe       	sbrs	r9, 7
    3e34:	10 c0       	rjmp	.+32     	; 0x3e56 <vfprintf+0x1d2>
    3e36:	4c 0c       	add	r4, r12
    3e38:	fc 85       	ldd	r31, Y+12	; 0x0c
    3e3a:	f4 ff       	sbrs	r31, 4
    3e3c:	04 c0       	rjmp	.+8      	; 0x3e46 <vfprintf+0x1c2>
    3e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    3e40:	81 33       	cpi	r24, 0x31	; 49
    3e42:	09 f4       	brne	.+2      	; 0x3e46 <vfprintf+0x1c2>
    3e44:	4a 94       	dec	r4
    3e46:	14 14       	cp	r1, r4
    3e48:	74 f5       	brge	.+92     	; 0x3ea6 <vfprintf+0x222>
    3e4a:	28 e0       	ldi	r18, 0x08	; 8
    3e4c:	24 15       	cp	r18, r4
    3e4e:	78 f5       	brcc	.+94     	; 0x3eae <vfprintf+0x22a>
    3e50:	88 e0       	ldi	r24, 0x08	; 8
    3e52:	48 2e       	mov	r4, r24
    3e54:	2c c0       	rjmp	.+88     	; 0x3eae <vfprintf+0x22a>
    3e56:	96 fc       	sbrc	r9, 6
    3e58:	2a c0       	rjmp	.+84     	; 0x3eae <vfprintf+0x22a>
    3e5a:	81 2f       	mov	r24, r17
    3e5c:	90 e0       	ldi	r25, 0x00	; 0
    3e5e:	8c 15       	cp	r24, r12
    3e60:	9d 05       	cpc	r25, r13
    3e62:	9c f0       	brlt	.+38     	; 0x3e8a <vfprintf+0x206>
    3e64:	3c ef       	ldi	r19, 0xFC	; 252
    3e66:	c3 16       	cp	r12, r19
    3e68:	3f ef       	ldi	r19, 0xFF	; 255
    3e6a:	d3 06       	cpc	r13, r19
    3e6c:	74 f0       	brlt	.+28     	; 0x3e8a <vfprintf+0x206>
    3e6e:	89 2d       	mov	r24, r9
    3e70:	80 68       	ori	r24, 0x80	; 128
    3e72:	98 2e       	mov	r9, r24
    3e74:	0a c0       	rjmp	.+20     	; 0x3e8a <vfprintf+0x206>
    3e76:	e2 e0       	ldi	r30, 0x02	; 2
    3e78:	f0 e0       	ldi	r31, 0x00	; 0
    3e7a:	ec 0f       	add	r30, r28
    3e7c:	fd 1f       	adc	r31, r29
    3e7e:	e1 0f       	add	r30, r17
    3e80:	f1 1d       	adc	r31, r1
    3e82:	80 81       	ld	r24, Z
    3e84:	80 33       	cpi	r24, 0x30	; 48
    3e86:	19 f4       	brne	.+6      	; 0x3e8e <vfprintf+0x20a>
    3e88:	11 50       	subi	r17, 0x01	; 1
    3e8a:	11 11       	cpse	r17, r1
    3e8c:	f4 cf       	rjmp	.-24     	; 0x3e76 <vfprintf+0x1f2>
    3e8e:	97 fe       	sbrs	r9, 7
    3e90:	0e c0       	rjmp	.+28     	; 0x3eae <vfprintf+0x22a>
    3e92:	44 24       	eor	r4, r4
    3e94:	43 94       	inc	r4
    3e96:	41 0e       	add	r4, r17
    3e98:	81 2f       	mov	r24, r17
    3e9a:	90 e0       	ldi	r25, 0x00	; 0
    3e9c:	c8 16       	cp	r12, r24
    3e9e:	d9 06       	cpc	r13, r25
    3ea0:	2c f4       	brge	.+10     	; 0x3eac <vfprintf+0x228>
    3ea2:	1c 19       	sub	r17, r12
    3ea4:	04 c0       	rjmp	.+8      	; 0x3eae <vfprintf+0x22a>
    3ea6:	44 24       	eor	r4, r4
    3ea8:	43 94       	inc	r4
    3eaa:	01 c0       	rjmp	.+2      	; 0x3eae <vfprintf+0x22a>
    3eac:	10 e0       	ldi	r17, 0x00	; 0
    3eae:	97 fe       	sbrs	r9, 7
    3eb0:	06 c0       	rjmp	.+12     	; 0x3ebe <vfprintf+0x23a>
    3eb2:	1c 14       	cp	r1, r12
    3eb4:	1d 04       	cpc	r1, r13
    3eb6:	34 f4       	brge	.+12     	; 0x3ec4 <vfprintf+0x240>
    3eb8:	c6 01       	movw	r24, r12
    3eba:	01 96       	adiw	r24, 0x01	; 1
    3ebc:	05 c0       	rjmp	.+10     	; 0x3ec8 <vfprintf+0x244>
    3ebe:	85 e0       	ldi	r24, 0x05	; 5
    3ec0:	90 e0       	ldi	r25, 0x00	; 0
    3ec2:	02 c0       	rjmp	.+4      	; 0x3ec8 <vfprintf+0x244>
    3ec4:	81 e0       	ldi	r24, 0x01	; 1
    3ec6:	90 e0       	ldi	r25, 0x00	; 0
    3ec8:	01 11       	cpse	r16, r1
    3eca:	01 96       	adiw	r24, 0x01	; 1
    3ecc:	11 23       	and	r17, r17
    3ece:	31 f0       	breq	.+12     	; 0x3edc <vfprintf+0x258>
    3ed0:	21 2f       	mov	r18, r17
    3ed2:	30 e0       	ldi	r19, 0x00	; 0
    3ed4:	2f 5f       	subi	r18, 0xFF	; 255
    3ed6:	3f 4f       	sbci	r19, 0xFF	; 255
    3ed8:	82 0f       	add	r24, r18
    3eda:	93 1f       	adc	r25, r19
    3edc:	25 2d       	mov	r18, r5
    3ede:	30 e0       	ldi	r19, 0x00	; 0
    3ee0:	82 17       	cp	r24, r18
    3ee2:	93 07       	cpc	r25, r19
    3ee4:	14 f4       	brge	.+4      	; 0x3eea <vfprintf+0x266>
    3ee6:	58 1a       	sub	r5, r24
    3ee8:	01 c0       	rjmp	.+2      	; 0x3eec <vfprintf+0x268>
    3eea:	51 2c       	mov	r5, r1
    3eec:	89 2d       	mov	r24, r9
    3eee:	89 70       	andi	r24, 0x09	; 9
    3ef0:	49 f4       	brne	.+18     	; 0x3f04 <vfprintf+0x280>
    3ef2:	55 20       	and	r5, r5
    3ef4:	39 f0       	breq	.+14     	; 0x3f04 <vfprintf+0x280>
    3ef6:	b7 01       	movw	r22, r14
    3ef8:	80 e2       	ldi	r24, 0x20	; 32
    3efa:	90 e0       	ldi	r25, 0x00	; 0
    3efc:	0e 94 2b 23 	call	0x4656	; 0x4656 <fputc>
    3f00:	5a 94       	dec	r5
    3f02:	f7 cf       	rjmp	.-18     	; 0x3ef2 <vfprintf+0x26e>
    3f04:	00 23       	and	r16, r16
    3f06:	29 f0       	breq	.+10     	; 0x3f12 <vfprintf+0x28e>
    3f08:	b7 01       	movw	r22, r14
    3f0a:	80 2f       	mov	r24, r16
    3f0c:	90 e0       	ldi	r25, 0x00	; 0
    3f0e:	0e 94 2b 23 	call	0x4656	; 0x4656 <fputc>
    3f12:	93 fc       	sbrc	r9, 3
    3f14:	09 c0       	rjmp	.+18     	; 0x3f28 <vfprintf+0x2a4>
    3f16:	55 20       	and	r5, r5
    3f18:	39 f0       	breq	.+14     	; 0x3f28 <vfprintf+0x2a4>
    3f1a:	b7 01       	movw	r22, r14
    3f1c:	80 e3       	ldi	r24, 0x30	; 48
    3f1e:	90 e0       	ldi	r25, 0x00	; 0
    3f20:	0e 94 2b 23 	call	0x4656	; 0x4656 <fputc>
    3f24:	5a 94       	dec	r5
    3f26:	f7 cf       	rjmp	.-18     	; 0x3f16 <vfprintf+0x292>
    3f28:	97 fe       	sbrs	r9, 7
    3f2a:	4c c0       	rjmp	.+152    	; 0x3fc4 <vfprintf+0x340>
    3f2c:	46 01       	movw	r8, r12
    3f2e:	d7 fe       	sbrs	r13, 7
    3f30:	02 c0       	rjmp	.+4      	; 0x3f36 <vfprintf+0x2b2>
    3f32:	81 2c       	mov	r8, r1
    3f34:	91 2c       	mov	r9, r1
    3f36:	c6 01       	movw	r24, r12
    3f38:	88 19       	sub	r24, r8
    3f3a:	99 09       	sbc	r25, r9
    3f3c:	f3 01       	movw	r30, r6
    3f3e:	e8 0f       	add	r30, r24
    3f40:	f9 1f       	adc	r31, r25
    3f42:	fe 87       	std	Y+14, r31	; 0x0e
    3f44:	ed 87       	std	Y+13, r30	; 0x0d
    3f46:	96 01       	movw	r18, r12
    3f48:	24 19       	sub	r18, r4
    3f4a:	31 09       	sbc	r19, r1
    3f4c:	38 8b       	std	Y+16, r19	; 0x10
    3f4e:	2f 87       	std	Y+15, r18	; 0x0f
    3f50:	01 2f       	mov	r16, r17
    3f52:	10 e0       	ldi	r17, 0x00	; 0
    3f54:	11 95       	neg	r17
    3f56:	01 95       	neg	r16
    3f58:	11 09       	sbc	r17, r1
    3f5a:	3f ef       	ldi	r19, 0xFF	; 255
    3f5c:	83 16       	cp	r8, r19
    3f5e:	93 06       	cpc	r9, r19
    3f60:	29 f4       	brne	.+10     	; 0x3f6c <vfprintf+0x2e8>
    3f62:	b7 01       	movw	r22, r14
    3f64:	8e e2       	ldi	r24, 0x2E	; 46
    3f66:	90 e0       	ldi	r25, 0x00	; 0
    3f68:	0e 94 2b 23 	call	0x4656	; 0x4656 <fputc>
    3f6c:	c8 14       	cp	r12, r8
    3f6e:	d9 04       	cpc	r13, r9
    3f70:	4c f0       	brlt	.+18     	; 0x3f84 <vfprintf+0x300>
    3f72:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f74:	98 89       	ldd	r25, Y+16	; 0x10
    3f76:	88 15       	cp	r24, r8
    3f78:	99 05       	cpc	r25, r9
    3f7a:	24 f4       	brge	.+8      	; 0x3f84 <vfprintf+0x300>
    3f7c:	ed 85       	ldd	r30, Y+13	; 0x0d
    3f7e:	fe 85       	ldd	r31, Y+14	; 0x0e
    3f80:	81 81       	ldd	r24, Z+1	; 0x01
    3f82:	01 c0       	rjmp	.+2      	; 0x3f86 <vfprintf+0x302>
    3f84:	80 e3       	ldi	r24, 0x30	; 48
    3f86:	f1 e0       	ldi	r31, 0x01	; 1
    3f88:	8f 1a       	sub	r8, r31
    3f8a:	91 08       	sbc	r9, r1
    3f8c:	2d 85       	ldd	r18, Y+13	; 0x0d
    3f8e:	3e 85       	ldd	r19, Y+14	; 0x0e
    3f90:	2f 5f       	subi	r18, 0xFF	; 255
    3f92:	3f 4f       	sbci	r19, 0xFF	; 255
    3f94:	3e 87       	std	Y+14, r19	; 0x0e
    3f96:	2d 87       	std	Y+13, r18	; 0x0d
    3f98:	80 16       	cp	r8, r16
    3f9a:	91 06       	cpc	r9, r17
    3f9c:	2c f0       	brlt	.+10     	; 0x3fa8 <vfprintf+0x324>
    3f9e:	b7 01       	movw	r22, r14
    3fa0:	90 e0       	ldi	r25, 0x00	; 0
    3fa2:	0e 94 2b 23 	call	0x4656	; 0x4656 <fputc>
    3fa6:	d9 cf       	rjmp	.-78     	; 0x3f5a <vfprintf+0x2d6>
    3fa8:	c8 14       	cp	r12, r8
    3faa:	d9 04       	cpc	r13, r9
    3fac:	41 f4       	brne	.+16     	; 0x3fbe <vfprintf+0x33a>
    3fae:	9a 81       	ldd	r25, Y+2	; 0x02
    3fb0:	96 33       	cpi	r25, 0x36	; 54
    3fb2:	20 f4       	brcc	.+8      	; 0x3fbc <vfprintf+0x338>
    3fb4:	95 33       	cpi	r25, 0x35	; 53
    3fb6:	19 f4       	brne	.+6      	; 0x3fbe <vfprintf+0x33a>
    3fb8:	3c 85       	ldd	r19, Y+12	; 0x0c
    3fba:	34 ff       	sbrs	r19, 4
    3fbc:	81 e3       	ldi	r24, 0x31	; 49
    3fbe:	b7 01       	movw	r22, r14
    3fc0:	90 e0       	ldi	r25, 0x00	; 0
    3fc2:	4e c0       	rjmp	.+156    	; 0x4060 <vfprintf+0x3dc>
    3fc4:	8a 81       	ldd	r24, Y+2	; 0x02
    3fc6:	81 33       	cpi	r24, 0x31	; 49
    3fc8:	19 f0       	breq	.+6      	; 0x3fd0 <vfprintf+0x34c>
    3fca:	9c 85       	ldd	r25, Y+12	; 0x0c
    3fcc:	9f 7e       	andi	r25, 0xEF	; 239
    3fce:	9c 87       	std	Y+12, r25	; 0x0c
    3fd0:	b7 01       	movw	r22, r14
    3fd2:	90 e0       	ldi	r25, 0x00	; 0
    3fd4:	0e 94 2b 23 	call	0x4656	; 0x4656 <fputc>
    3fd8:	11 11       	cpse	r17, r1
    3fda:	05 c0       	rjmp	.+10     	; 0x3fe6 <vfprintf+0x362>
    3fdc:	94 fc       	sbrc	r9, 4
    3fde:	18 c0       	rjmp	.+48     	; 0x4010 <vfprintf+0x38c>
    3fe0:	85 e6       	ldi	r24, 0x65	; 101
    3fe2:	90 e0       	ldi	r25, 0x00	; 0
    3fe4:	17 c0       	rjmp	.+46     	; 0x4014 <vfprintf+0x390>
    3fe6:	b7 01       	movw	r22, r14
    3fe8:	8e e2       	ldi	r24, 0x2E	; 46
    3fea:	90 e0       	ldi	r25, 0x00	; 0
    3fec:	0e 94 2b 23 	call	0x4656	; 0x4656 <fputc>
    3ff0:	1e 5f       	subi	r17, 0xFE	; 254
    3ff2:	82 e0       	ldi	r24, 0x02	; 2
    3ff4:	01 e0       	ldi	r16, 0x01	; 1
    3ff6:	08 0f       	add	r16, r24
    3ff8:	f3 01       	movw	r30, r6
    3ffa:	e8 0f       	add	r30, r24
    3ffc:	f1 1d       	adc	r31, r1
    3ffe:	80 81       	ld	r24, Z
    4000:	b7 01       	movw	r22, r14
    4002:	90 e0       	ldi	r25, 0x00	; 0
    4004:	0e 94 2b 23 	call	0x4656	; 0x4656 <fputc>
    4008:	80 2f       	mov	r24, r16
    400a:	01 13       	cpse	r16, r17
    400c:	f3 cf       	rjmp	.-26     	; 0x3ff4 <vfprintf+0x370>
    400e:	e6 cf       	rjmp	.-52     	; 0x3fdc <vfprintf+0x358>
    4010:	85 e4       	ldi	r24, 0x45	; 69
    4012:	90 e0       	ldi	r25, 0x00	; 0
    4014:	b7 01       	movw	r22, r14
    4016:	0e 94 2b 23 	call	0x4656	; 0x4656 <fputc>
    401a:	d7 fc       	sbrc	r13, 7
    401c:	06 c0       	rjmp	.+12     	; 0x402a <vfprintf+0x3a6>
    401e:	c1 14       	cp	r12, r1
    4020:	d1 04       	cpc	r13, r1
    4022:	41 f4       	brne	.+16     	; 0x4034 <vfprintf+0x3b0>
    4024:	ec 85       	ldd	r30, Y+12	; 0x0c
    4026:	e4 ff       	sbrs	r30, 4
    4028:	05 c0       	rjmp	.+10     	; 0x4034 <vfprintf+0x3b0>
    402a:	d1 94       	neg	r13
    402c:	c1 94       	neg	r12
    402e:	d1 08       	sbc	r13, r1
    4030:	8d e2       	ldi	r24, 0x2D	; 45
    4032:	01 c0       	rjmp	.+2      	; 0x4036 <vfprintf+0x3b2>
    4034:	8b e2       	ldi	r24, 0x2B	; 43
    4036:	b7 01       	movw	r22, r14
    4038:	90 e0       	ldi	r25, 0x00	; 0
    403a:	0e 94 2b 23 	call	0x4656	; 0x4656 <fputc>
    403e:	80 e3       	ldi	r24, 0x30	; 48
    4040:	2a e0       	ldi	r18, 0x0A	; 10
    4042:	c2 16       	cp	r12, r18
    4044:	d1 04       	cpc	r13, r1
    4046:	2c f0       	brlt	.+10     	; 0x4052 <vfprintf+0x3ce>
    4048:	8f 5f       	subi	r24, 0xFF	; 255
    404a:	fa e0       	ldi	r31, 0x0A	; 10
    404c:	cf 1a       	sub	r12, r31
    404e:	d1 08       	sbc	r13, r1
    4050:	f7 cf       	rjmp	.-18     	; 0x4040 <vfprintf+0x3bc>
    4052:	b7 01       	movw	r22, r14
    4054:	90 e0       	ldi	r25, 0x00	; 0
    4056:	0e 94 2b 23 	call	0x4656	; 0x4656 <fputc>
    405a:	b7 01       	movw	r22, r14
    405c:	c6 01       	movw	r24, r12
    405e:	c0 96       	adiw	r24, 0x30	; 48
    4060:	0e 94 2b 23 	call	0x4656	; 0x4656 <fputc>
    4064:	54 c1       	rjmp	.+680    	; 0x430e <vfprintf+0x68a>
    4066:	83 36       	cpi	r24, 0x63	; 99
    4068:	31 f0       	breq	.+12     	; 0x4076 <vfprintf+0x3f2>
    406a:	83 37       	cpi	r24, 0x73	; 115
    406c:	79 f0       	breq	.+30     	; 0x408c <vfprintf+0x408>
    406e:	83 35       	cpi	r24, 0x53	; 83
    4070:	09 f0       	breq	.+2      	; 0x4074 <vfprintf+0x3f0>
    4072:	56 c0       	rjmp	.+172    	; 0x4120 <vfprintf+0x49c>
    4074:	20 c0       	rjmp	.+64     	; 0x40b6 <vfprintf+0x432>
    4076:	56 01       	movw	r10, r12
    4078:	32 e0       	ldi	r19, 0x02	; 2
    407a:	a3 0e       	add	r10, r19
    407c:	b1 1c       	adc	r11, r1
    407e:	f6 01       	movw	r30, r12
    4080:	80 81       	ld	r24, Z
    4082:	89 83       	std	Y+1, r24	; 0x01
    4084:	01 e0       	ldi	r16, 0x01	; 1
    4086:	10 e0       	ldi	r17, 0x00	; 0
    4088:	63 01       	movw	r12, r6
    408a:	12 c0       	rjmp	.+36     	; 0x40b0 <vfprintf+0x42c>
    408c:	56 01       	movw	r10, r12
    408e:	f2 e0       	ldi	r31, 0x02	; 2
    4090:	af 0e       	add	r10, r31
    4092:	b1 1c       	adc	r11, r1
    4094:	f6 01       	movw	r30, r12
    4096:	c0 80       	ld	r12, Z
    4098:	d1 80       	ldd	r13, Z+1	; 0x01
    409a:	96 fe       	sbrs	r9, 6
    409c:	03 c0       	rjmp	.+6      	; 0x40a4 <vfprintf+0x420>
    409e:	61 2f       	mov	r22, r17
    40a0:	70 e0       	ldi	r23, 0x00	; 0
    40a2:	02 c0       	rjmp	.+4      	; 0x40a8 <vfprintf+0x424>
    40a4:	6f ef       	ldi	r22, 0xFF	; 255
    40a6:	7f ef       	ldi	r23, 0xFF	; 255
    40a8:	c6 01       	movw	r24, r12
    40aa:	0e 94 20 23 	call	0x4640	; 0x4640 <strnlen>
    40ae:	8c 01       	movw	r16, r24
    40b0:	f9 2d       	mov	r31, r9
    40b2:	ff 77       	andi	r31, 0x7F	; 127
    40b4:	14 c0       	rjmp	.+40     	; 0x40de <vfprintf+0x45a>
    40b6:	56 01       	movw	r10, r12
    40b8:	22 e0       	ldi	r18, 0x02	; 2
    40ba:	a2 0e       	add	r10, r18
    40bc:	b1 1c       	adc	r11, r1
    40be:	f6 01       	movw	r30, r12
    40c0:	c0 80       	ld	r12, Z
    40c2:	d1 80       	ldd	r13, Z+1	; 0x01
    40c4:	96 fe       	sbrs	r9, 6
    40c6:	03 c0       	rjmp	.+6      	; 0x40ce <vfprintf+0x44a>
    40c8:	61 2f       	mov	r22, r17
    40ca:	70 e0       	ldi	r23, 0x00	; 0
    40cc:	02 c0       	rjmp	.+4      	; 0x40d2 <vfprintf+0x44e>
    40ce:	6f ef       	ldi	r22, 0xFF	; 255
    40d0:	7f ef       	ldi	r23, 0xFF	; 255
    40d2:	c6 01       	movw	r24, r12
    40d4:	0e 94 15 23 	call	0x462a	; 0x462a <strnlen_P>
    40d8:	8c 01       	movw	r16, r24
    40da:	f9 2d       	mov	r31, r9
    40dc:	f0 68       	ori	r31, 0x80	; 128
    40de:	9f 2e       	mov	r9, r31
    40e0:	f3 fd       	sbrc	r31, 3
    40e2:	1a c0       	rjmp	.+52     	; 0x4118 <vfprintf+0x494>
    40e4:	85 2d       	mov	r24, r5
    40e6:	90 e0       	ldi	r25, 0x00	; 0
    40e8:	08 17       	cp	r16, r24
    40ea:	19 07       	cpc	r17, r25
    40ec:	a8 f4       	brcc	.+42     	; 0x4118 <vfprintf+0x494>
    40ee:	b7 01       	movw	r22, r14
    40f0:	80 e2       	ldi	r24, 0x20	; 32
    40f2:	90 e0       	ldi	r25, 0x00	; 0
    40f4:	0e 94 2b 23 	call	0x4656	; 0x4656 <fputc>
    40f8:	5a 94       	dec	r5
    40fa:	f4 cf       	rjmp	.-24     	; 0x40e4 <vfprintf+0x460>
    40fc:	f6 01       	movw	r30, r12
    40fe:	97 fc       	sbrc	r9, 7
    4100:	85 91       	lpm	r24, Z+
    4102:	97 fe       	sbrs	r9, 7
    4104:	81 91       	ld	r24, Z+
    4106:	6f 01       	movw	r12, r30
    4108:	b7 01       	movw	r22, r14
    410a:	90 e0       	ldi	r25, 0x00	; 0
    410c:	0e 94 2b 23 	call	0x4656	; 0x4656 <fputc>
    4110:	51 10       	cpse	r5, r1
    4112:	5a 94       	dec	r5
    4114:	01 50       	subi	r16, 0x01	; 1
    4116:	11 09       	sbc	r17, r1
    4118:	01 15       	cp	r16, r1
    411a:	11 05       	cpc	r17, r1
    411c:	79 f7       	brne	.-34     	; 0x40fc <vfprintf+0x478>
    411e:	f7 c0       	rjmp	.+494    	; 0x430e <vfprintf+0x68a>
    4120:	84 36       	cpi	r24, 0x64	; 100
    4122:	11 f0       	breq	.+4      	; 0x4128 <vfprintf+0x4a4>
    4124:	89 36       	cpi	r24, 0x69	; 105
    4126:	61 f5       	brne	.+88     	; 0x4180 <vfprintf+0x4fc>
    4128:	56 01       	movw	r10, r12
    412a:	97 fe       	sbrs	r9, 7
    412c:	09 c0       	rjmp	.+18     	; 0x4140 <vfprintf+0x4bc>
    412e:	24 e0       	ldi	r18, 0x04	; 4
    4130:	a2 0e       	add	r10, r18
    4132:	b1 1c       	adc	r11, r1
    4134:	f6 01       	movw	r30, r12
    4136:	60 81       	ld	r22, Z
    4138:	71 81       	ldd	r23, Z+1	; 0x01
    413a:	82 81       	ldd	r24, Z+2	; 0x02
    413c:	93 81       	ldd	r25, Z+3	; 0x03
    413e:	0a c0       	rjmp	.+20     	; 0x4154 <vfprintf+0x4d0>
    4140:	f2 e0       	ldi	r31, 0x02	; 2
    4142:	af 0e       	add	r10, r31
    4144:	b1 1c       	adc	r11, r1
    4146:	f6 01       	movw	r30, r12
    4148:	60 81       	ld	r22, Z
    414a:	71 81       	ldd	r23, Z+1	; 0x01
    414c:	07 2e       	mov	r0, r23
    414e:	00 0c       	add	r0, r0
    4150:	88 0b       	sbc	r24, r24
    4152:	99 0b       	sbc	r25, r25
    4154:	f9 2d       	mov	r31, r9
    4156:	ff 76       	andi	r31, 0x6F	; 111
    4158:	9f 2e       	mov	r9, r31
    415a:	97 ff       	sbrs	r25, 7
    415c:	09 c0       	rjmp	.+18     	; 0x4170 <vfprintf+0x4ec>
    415e:	90 95       	com	r25
    4160:	80 95       	com	r24
    4162:	70 95       	com	r23
    4164:	61 95       	neg	r22
    4166:	7f 4f       	sbci	r23, 0xFF	; 255
    4168:	8f 4f       	sbci	r24, 0xFF	; 255
    416a:	9f 4f       	sbci	r25, 0xFF	; 255
    416c:	f0 68       	ori	r31, 0x80	; 128
    416e:	9f 2e       	mov	r9, r31
    4170:	2a e0       	ldi	r18, 0x0A	; 10
    4172:	30 e0       	ldi	r19, 0x00	; 0
    4174:	a3 01       	movw	r20, r6
    4176:	0e 94 67 23 	call	0x46ce	; 0x46ce <__ultoa_invert>
    417a:	c8 2e       	mov	r12, r24
    417c:	c6 18       	sub	r12, r6
    417e:	3f c0       	rjmp	.+126    	; 0x41fe <vfprintf+0x57a>
    4180:	09 2d       	mov	r16, r9
    4182:	85 37       	cpi	r24, 0x75	; 117
    4184:	21 f4       	brne	.+8      	; 0x418e <vfprintf+0x50a>
    4186:	0f 7e       	andi	r16, 0xEF	; 239
    4188:	2a e0       	ldi	r18, 0x0A	; 10
    418a:	30 e0       	ldi	r19, 0x00	; 0
    418c:	1d c0       	rjmp	.+58     	; 0x41c8 <vfprintf+0x544>
    418e:	09 7f       	andi	r16, 0xF9	; 249
    4190:	8f 36       	cpi	r24, 0x6F	; 111
    4192:	91 f0       	breq	.+36     	; 0x41b8 <vfprintf+0x534>
    4194:	18 f4       	brcc	.+6      	; 0x419c <vfprintf+0x518>
    4196:	88 35       	cpi	r24, 0x58	; 88
    4198:	59 f0       	breq	.+22     	; 0x41b0 <vfprintf+0x52c>
    419a:	c3 c0       	rjmp	.+390    	; 0x4322 <vfprintf+0x69e>
    419c:	80 37       	cpi	r24, 0x70	; 112
    419e:	19 f0       	breq	.+6      	; 0x41a6 <vfprintf+0x522>
    41a0:	88 37       	cpi	r24, 0x78	; 120
    41a2:	11 f0       	breq	.+4      	; 0x41a8 <vfprintf+0x524>
    41a4:	be c0       	rjmp	.+380    	; 0x4322 <vfprintf+0x69e>
    41a6:	00 61       	ori	r16, 0x10	; 16
    41a8:	04 ff       	sbrs	r16, 4
    41aa:	09 c0       	rjmp	.+18     	; 0x41be <vfprintf+0x53a>
    41ac:	04 60       	ori	r16, 0x04	; 4
    41ae:	07 c0       	rjmp	.+14     	; 0x41be <vfprintf+0x53a>
    41b0:	94 fe       	sbrs	r9, 4
    41b2:	08 c0       	rjmp	.+16     	; 0x41c4 <vfprintf+0x540>
    41b4:	06 60       	ori	r16, 0x06	; 6
    41b6:	06 c0       	rjmp	.+12     	; 0x41c4 <vfprintf+0x540>
    41b8:	28 e0       	ldi	r18, 0x08	; 8
    41ba:	30 e0       	ldi	r19, 0x00	; 0
    41bc:	05 c0       	rjmp	.+10     	; 0x41c8 <vfprintf+0x544>
    41be:	20 e1       	ldi	r18, 0x10	; 16
    41c0:	30 e0       	ldi	r19, 0x00	; 0
    41c2:	02 c0       	rjmp	.+4      	; 0x41c8 <vfprintf+0x544>
    41c4:	20 e1       	ldi	r18, 0x10	; 16
    41c6:	32 e0       	ldi	r19, 0x02	; 2
    41c8:	56 01       	movw	r10, r12
    41ca:	07 ff       	sbrs	r16, 7
    41cc:	09 c0       	rjmp	.+18     	; 0x41e0 <vfprintf+0x55c>
    41ce:	84 e0       	ldi	r24, 0x04	; 4
    41d0:	a8 0e       	add	r10, r24
    41d2:	b1 1c       	adc	r11, r1
    41d4:	f6 01       	movw	r30, r12
    41d6:	60 81       	ld	r22, Z
    41d8:	71 81       	ldd	r23, Z+1	; 0x01
    41da:	82 81       	ldd	r24, Z+2	; 0x02
    41dc:	93 81       	ldd	r25, Z+3	; 0x03
    41de:	08 c0       	rjmp	.+16     	; 0x41f0 <vfprintf+0x56c>
    41e0:	f2 e0       	ldi	r31, 0x02	; 2
    41e2:	af 0e       	add	r10, r31
    41e4:	b1 1c       	adc	r11, r1
    41e6:	f6 01       	movw	r30, r12
    41e8:	60 81       	ld	r22, Z
    41ea:	71 81       	ldd	r23, Z+1	; 0x01
    41ec:	80 e0       	ldi	r24, 0x00	; 0
    41ee:	90 e0       	ldi	r25, 0x00	; 0
    41f0:	a3 01       	movw	r20, r6
    41f2:	0e 94 67 23 	call	0x46ce	; 0x46ce <__ultoa_invert>
    41f6:	c8 2e       	mov	r12, r24
    41f8:	c6 18       	sub	r12, r6
    41fa:	0f 77       	andi	r16, 0x7F	; 127
    41fc:	90 2e       	mov	r9, r16
    41fe:	96 fe       	sbrs	r9, 6
    4200:	0b c0       	rjmp	.+22     	; 0x4218 <vfprintf+0x594>
    4202:	09 2d       	mov	r16, r9
    4204:	0e 7f       	andi	r16, 0xFE	; 254
    4206:	c1 16       	cp	r12, r17
    4208:	50 f4       	brcc	.+20     	; 0x421e <vfprintf+0x59a>
    420a:	94 fe       	sbrs	r9, 4
    420c:	0a c0       	rjmp	.+20     	; 0x4222 <vfprintf+0x59e>
    420e:	92 fc       	sbrc	r9, 2
    4210:	08 c0       	rjmp	.+16     	; 0x4222 <vfprintf+0x59e>
    4212:	09 2d       	mov	r16, r9
    4214:	0e 7e       	andi	r16, 0xEE	; 238
    4216:	05 c0       	rjmp	.+10     	; 0x4222 <vfprintf+0x59e>
    4218:	dc 2c       	mov	r13, r12
    421a:	09 2d       	mov	r16, r9
    421c:	03 c0       	rjmp	.+6      	; 0x4224 <vfprintf+0x5a0>
    421e:	dc 2c       	mov	r13, r12
    4220:	01 c0       	rjmp	.+2      	; 0x4224 <vfprintf+0x5a0>
    4222:	d1 2e       	mov	r13, r17
    4224:	04 ff       	sbrs	r16, 4
    4226:	0d c0       	rjmp	.+26     	; 0x4242 <vfprintf+0x5be>
    4228:	fe 01       	movw	r30, r28
    422a:	ec 0d       	add	r30, r12
    422c:	f1 1d       	adc	r31, r1
    422e:	80 81       	ld	r24, Z
    4230:	80 33       	cpi	r24, 0x30	; 48
    4232:	11 f4       	brne	.+4      	; 0x4238 <vfprintf+0x5b4>
    4234:	09 7e       	andi	r16, 0xE9	; 233
    4236:	09 c0       	rjmp	.+18     	; 0x424a <vfprintf+0x5c6>
    4238:	02 ff       	sbrs	r16, 2
    423a:	06 c0       	rjmp	.+12     	; 0x4248 <vfprintf+0x5c4>
    423c:	d3 94       	inc	r13
    423e:	d3 94       	inc	r13
    4240:	04 c0       	rjmp	.+8      	; 0x424a <vfprintf+0x5c6>
    4242:	80 2f       	mov	r24, r16
    4244:	86 78       	andi	r24, 0x86	; 134
    4246:	09 f0       	breq	.+2      	; 0x424a <vfprintf+0x5c6>
    4248:	d3 94       	inc	r13
    424a:	03 fd       	sbrc	r16, 3
    424c:	11 c0       	rjmp	.+34     	; 0x4270 <vfprintf+0x5ec>
    424e:	00 ff       	sbrs	r16, 0
    4250:	06 c0       	rjmp	.+12     	; 0x425e <vfprintf+0x5da>
    4252:	1c 2d       	mov	r17, r12
    4254:	d5 14       	cp	r13, r5
    4256:	80 f4       	brcc	.+32     	; 0x4278 <vfprintf+0x5f4>
    4258:	15 0d       	add	r17, r5
    425a:	1d 19       	sub	r17, r13
    425c:	0d c0       	rjmp	.+26     	; 0x4278 <vfprintf+0x5f4>
    425e:	d5 14       	cp	r13, r5
    4260:	58 f4       	brcc	.+22     	; 0x4278 <vfprintf+0x5f4>
    4262:	b7 01       	movw	r22, r14
    4264:	80 e2       	ldi	r24, 0x20	; 32
    4266:	90 e0       	ldi	r25, 0x00	; 0
    4268:	0e 94 2b 23 	call	0x4656	; 0x4656 <fputc>
    426c:	d3 94       	inc	r13
    426e:	f7 cf       	rjmp	.-18     	; 0x425e <vfprintf+0x5da>
    4270:	d5 14       	cp	r13, r5
    4272:	10 f4       	brcc	.+4      	; 0x4278 <vfprintf+0x5f4>
    4274:	5d 18       	sub	r5, r13
    4276:	01 c0       	rjmp	.+2      	; 0x427a <vfprintf+0x5f6>
    4278:	51 2c       	mov	r5, r1
    427a:	04 ff       	sbrs	r16, 4
    427c:	10 c0       	rjmp	.+32     	; 0x429e <vfprintf+0x61a>
    427e:	b7 01       	movw	r22, r14
    4280:	80 e3       	ldi	r24, 0x30	; 48
    4282:	90 e0       	ldi	r25, 0x00	; 0
    4284:	0e 94 2b 23 	call	0x4656	; 0x4656 <fputc>
    4288:	02 ff       	sbrs	r16, 2
    428a:	17 c0       	rjmp	.+46     	; 0x42ba <vfprintf+0x636>
    428c:	01 fd       	sbrc	r16, 1
    428e:	03 c0       	rjmp	.+6      	; 0x4296 <vfprintf+0x612>
    4290:	88 e7       	ldi	r24, 0x78	; 120
    4292:	90 e0       	ldi	r25, 0x00	; 0
    4294:	02 c0       	rjmp	.+4      	; 0x429a <vfprintf+0x616>
    4296:	88 e5       	ldi	r24, 0x58	; 88
    4298:	90 e0       	ldi	r25, 0x00	; 0
    429a:	b7 01       	movw	r22, r14
    429c:	0c c0       	rjmp	.+24     	; 0x42b6 <vfprintf+0x632>
    429e:	80 2f       	mov	r24, r16
    42a0:	86 78       	andi	r24, 0x86	; 134
    42a2:	59 f0       	breq	.+22     	; 0x42ba <vfprintf+0x636>
    42a4:	01 ff       	sbrs	r16, 1
    42a6:	02 c0       	rjmp	.+4      	; 0x42ac <vfprintf+0x628>
    42a8:	8b e2       	ldi	r24, 0x2B	; 43
    42aa:	01 c0       	rjmp	.+2      	; 0x42ae <vfprintf+0x62a>
    42ac:	80 e2       	ldi	r24, 0x20	; 32
    42ae:	07 fd       	sbrc	r16, 7
    42b0:	8d e2       	ldi	r24, 0x2D	; 45
    42b2:	b7 01       	movw	r22, r14
    42b4:	90 e0       	ldi	r25, 0x00	; 0
    42b6:	0e 94 2b 23 	call	0x4656	; 0x4656 <fputc>
    42ba:	c1 16       	cp	r12, r17
    42bc:	38 f4       	brcc	.+14     	; 0x42cc <vfprintf+0x648>
    42be:	b7 01       	movw	r22, r14
    42c0:	80 e3       	ldi	r24, 0x30	; 48
    42c2:	90 e0       	ldi	r25, 0x00	; 0
    42c4:	0e 94 2b 23 	call	0x4656	; 0x4656 <fputc>
    42c8:	11 50       	subi	r17, 0x01	; 1
    42ca:	f7 cf       	rjmp	.-18     	; 0x42ba <vfprintf+0x636>
    42cc:	ca 94       	dec	r12
    42ce:	f3 01       	movw	r30, r6
    42d0:	ec 0d       	add	r30, r12
    42d2:	f1 1d       	adc	r31, r1
    42d4:	80 81       	ld	r24, Z
    42d6:	b7 01       	movw	r22, r14
    42d8:	90 e0       	ldi	r25, 0x00	; 0
    42da:	0e 94 2b 23 	call	0x4656	; 0x4656 <fputc>
    42de:	c1 10       	cpse	r12, r1
    42e0:	f5 cf       	rjmp	.-22     	; 0x42cc <vfprintf+0x648>
    42e2:	15 c0       	rjmp	.+42     	; 0x430e <vfprintf+0x68a>
    42e4:	f4 e0       	ldi	r31, 0x04	; 4
    42e6:	f5 15       	cp	r31, r5
    42e8:	60 f5       	brcc	.+88     	; 0x4342 <vfprintf+0x6be>
    42ea:	84 e0       	ldi	r24, 0x04	; 4
    42ec:	58 1a       	sub	r5, r24
    42ee:	93 fe       	sbrs	r9, 3
    42f0:	1f c0       	rjmp	.+62     	; 0x4330 <vfprintf+0x6ac>
    42f2:	01 11       	cpse	r16, r1
    42f4:	27 c0       	rjmp	.+78     	; 0x4344 <vfprintf+0x6c0>
    42f6:	2c 85       	ldd	r18, Y+12	; 0x0c
    42f8:	23 ff       	sbrs	r18, 3
    42fa:	2a c0       	rjmp	.+84     	; 0x4350 <vfprintf+0x6cc>
    42fc:	04 e6       	ldi	r16, 0x64	; 100
    42fe:	12 e0       	ldi	r17, 0x02	; 2
    4300:	39 2d       	mov	r19, r9
    4302:	30 71       	andi	r19, 0x10	; 16
    4304:	93 2e       	mov	r9, r19
    4306:	f8 01       	movw	r30, r16
    4308:	84 91       	lpm	r24, Z
    430a:	81 11       	cpse	r24, r1
    430c:	24 c0       	rjmp	.+72     	; 0x4356 <vfprintf+0x6d2>
    430e:	55 20       	and	r5, r5
    4310:	09 f4       	brne	.+2      	; 0x4314 <vfprintf+0x690>
    4312:	e4 cc       	rjmp	.-1592   	; 0x3cdc <vfprintf+0x58>
    4314:	b7 01       	movw	r22, r14
    4316:	80 e2       	ldi	r24, 0x20	; 32
    4318:	90 e0       	ldi	r25, 0x00	; 0
    431a:	0e 94 2b 23 	call	0x4656	; 0x4656 <fputc>
    431e:	5a 94       	dec	r5
    4320:	f6 cf       	rjmp	.-20     	; 0x430e <vfprintf+0x68a>
    4322:	f7 01       	movw	r30, r14
    4324:	86 81       	ldd	r24, Z+6	; 0x06
    4326:	97 81       	ldd	r25, Z+7	; 0x07
    4328:	26 c0       	rjmp	.+76     	; 0x4376 <vfprintf+0x6f2>
    432a:	8f ef       	ldi	r24, 0xFF	; 255
    432c:	9f ef       	ldi	r25, 0xFF	; 255
    432e:	23 c0       	rjmp	.+70     	; 0x4376 <vfprintf+0x6f2>
    4330:	b7 01       	movw	r22, r14
    4332:	80 e2       	ldi	r24, 0x20	; 32
    4334:	90 e0       	ldi	r25, 0x00	; 0
    4336:	0e 94 2b 23 	call	0x4656	; 0x4656 <fputc>
    433a:	5a 94       	dec	r5
    433c:	51 10       	cpse	r5, r1
    433e:	f8 cf       	rjmp	.-16     	; 0x4330 <vfprintf+0x6ac>
    4340:	d8 cf       	rjmp	.-80     	; 0x42f2 <vfprintf+0x66e>
    4342:	51 2c       	mov	r5, r1
    4344:	b7 01       	movw	r22, r14
    4346:	80 2f       	mov	r24, r16
    4348:	90 e0       	ldi	r25, 0x00	; 0
    434a:	0e 94 2b 23 	call	0x4656	; 0x4656 <fputc>
    434e:	d3 cf       	rjmp	.-90     	; 0x42f6 <vfprintf+0x672>
    4350:	08 e6       	ldi	r16, 0x68	; 104
    4352:	12 e0       	ldi	r17, 0x02	; 2
    4354:	d5 cf       	rjmp	.-86     	; 0x4300 <vfprintf+0x67c>
    4356:	91 10       	cpse	r9, r1
    4358:	80 52       	subi	r24, 0x20	; 32
    435a:	b7 01       	movw	r22, r14
    435c:	90 e0       	ldi	r25, 0x00	; 0
    435e:	0e 94 2b 23 	call	0x4656	; 0x4656 <fputc>
    4362:	0f 5f       	subi	r16, 0xFF	; 255
    4364:	1f 4f       	sbci	r17, 0xFF	; 255
    4366:	cf cf       	rjmp	.-98     	; 0x4306 <vfprintf+0x682>
    4368:	23 e0       	ldi	r18, 0x03	; 3
    436a:	25 15       	cp	r18, r5
    436c:	10 f4       	brcc	.+4      	; 0x4372 <vfprintf+0x6ee>
    436e:	83 e0       	ldi	r24, 0x03	; 3
    4370:	bd cf       	rjmp	.-134    	; 0x42ec <vfprintf+0x668>
    4372:	51 2c       	mov	r5, r1
    4374:	c0 cf       	rjmp	.-128    	; 0x42f6 <vfprintf+0x672>
    4376:	60 96       	adiw	r28, 0x10	; 16
    4378:	e2 e1       	ldi	r30, 0x12	; 18
    437a:	0c 94 22 22 	jmp	0x4444	; 0x4444 <__epilogue_restores__>

0000437e <__udivmodsi4>:
    437e:	a1 e2       	ldi	r26, 0x21	; 33
    4380:	1a 2e       	mov	r1, r26
    4382:	aa 1b       	sub	r26, r26
    4384:	bb 1b       	sub	r27, r27
    4386:	fd 01       	movw	r30, r26
    4388:	0d c0       	rjmp	.+26     	; 0x43a4 <__udivmodsi4_ep>

0000438a <__udivmodsi4_loop>:
    438a:	aa 1f       	adc	r26, r26
    438c:	bb 1f       	adc	r27, r27
    438e:	ee 1f       	adc	r30, r30
    4390:	ff 1f       	adc	r31, r31
    4392:	a2 17       	cp	r26, r18
    4394:	b3 07       	cpc	r27, r19
    4396:	e4 07       	cpc	r30, r20
    4398:	f5 07       	cpc	r31, r21
    439a:	20 f0       	brcs	.+8      	; 0x43a4 <__udivmodsi4_ep>
    439c:	a2 1b       	sub	r26, r18
    439e:	b3 0b       	sbc	r27, r19
    43a0:	e4 0b       	sbc	r30, r20
    43a2:	f5 0b       	sbc	r31, r21

000043a4 <__udivmodsi4_ep>:
    43a4:	66 1f       	adc	r22, r22
    43a6:	77 1f       	adc	r23, r23
    43a8:	88 1f       	adc	r24, r24
    43aa:	99 1f       	adc	r25, r25
    43ac:	1a 94       	dec	r1
    43ae:	69 f7       	brne	.-38     	; 0x438a <__udivmodsi4_loop>
    43b0:	60 95       	com	r22
    43b2:	70 95       	com	r23
    43b4:	80 95       	com	r24
    43b6:	90 95       	com	r25
    43b8:	9b 01       	movw	r18, r22
    43ba:	ac 01       	movw	r20, r24
    43bc:	bd 01       	movw	r22, r26
    43be:	cf 01       	movw	r24, r30
    43c0:	08 95       	ret

000043c2 <__divmodsi4>:
    43c2:	05 2e       	mov	r0, r21
    43c4:	97 fb       	bst	r25, 7
    43c6:	1e f4       	brtc	.+6      	; 0x43ce <__divmodsi4+0xc>
    43c8:	00 94       	com	r0
    43ca:	0e 94 f8 21 	call	0x43f0	; 0x43f0 <__negsi2>
    43ce:	57 fd       	sbrc	r21, 7
    43d0:	07 d0       	rcall	.+14     	; 0x43e0 <__divmodsi4_neg2>
    43d2:	0e 94 bf 21 	call	0x437e	; 0x437e <__udivmodsi4>
    43d6:	07 fc       	sbrc	r0, 7
    43d8:	03 d0       	rcall	.+6      	; 0x43e0 <__divmodsi4_neg2>
    43da:	4e f4       	brtc	.+18     	; 0x43ee <__divmodsi4_exit>
    43dc:	0c 94 f8 21 	jmp	0x43f0	; 0x43f0 <__negsi2>

000043e0 <__divmodsi4_neg2>:
    43e0:	50 95       	com	r21
    43e2:	40 95       	com	r20
    43e4:	30 95       	com	r19
    43e6:	21 95       	neg	r18
    43e8:	3f 4f       	sbci	r19, 0xFF	; 255
    43ea:	4f 4f       	sbci	r20, 0xFF	; 255
    43ec:	5f 4f       	sbci	r21, 0xFF	; 255

000043ee <__divmodsi4_exit>:
    43ee:	08 95       	ret

000043f0 <__negsi2>:
    43f0:	90 95       	com	r25
    43f2:	80 95       	com	r24
    43f4:	70 95       	com	r23
    43f6:	61 95       	neg	r22
    43f8:	7f 4f       	sbci	r23, 0xFF	; 255
    43fa:	8f 4f       	sbci	r24, 0xFF	; 255
    43fc:	9f 4f       	sbci	r25, 0xFF	; 255
    43fe:	08 95       	ret

00004400 <__tablejump2__>:
    4400:	ee 0f       	add	r30, r30
    4402:	ff 1f       	adc	r31, r31
    4404:	05 90       	lpm	r0, Z+
    4406:	f4 91       	lpm	r31, Z
    4408:	e0 2d       	mov	r30, r0
    440a:	09 94       	ijmp

0000440c <__prologue_saves__>:
    440c:	2f 92       	push	r2
    440e:	3f 92       	push	r3
    4410:	4f 92       	push	r4
    4412:	5f 92       	push	r5
    4414:	6f 92       	push	r6
    4416:	7f 92       	push	r7
    4418:	8f 92       	push	r8
    441a:	9f 92       	push	r9
    441c:	af 92       	push	r10
    441e:	bf 92       	push	r11
    4420:	cf 92       	push	r12
    4422:	df 92       	push	r13
    4424:	ef 92       	push	r14
    4426:	ff 92       	push	r15
    4428:	0f 93       	push	r16
    442a:	1f 93       	push	r17
    442c:	cf 93       	push	r28
    442e:	df 93       	push	r29
    4430:	cd b7       	in	r28, 0x3d	; 61
    4432:	de b7       	in	r29, 0x3e	; 62
    4434:	ca 1b       	sub	r28, r26
    4436:	db 0b       	sbc	r29, r27
    4438:	0f b6       	in	r0, 0x3f	; 63
    443a:	f8 94       	cli
    443c:	de bf       	out	0x3e, r29	; 62
    443e:	0f be       	out	0x3f, r0	; 63
    4440:	cd bf       	out	0x3d, r28	; 61
    4442:	09 94       	ijmp

00004444 <__epilogue_restores__>:
    4444:	2a 88       	ldd	r2, Y+18	; 0x12
    4446:	39 88       	ldd	r3, Y+17	; 0x11
    4448:	48 88       	ldd	r4, Y+16	; 0x10
    444a:	5f 84       	ldd	r5, Y+15	; 0x0f
    444c:	6e 84       	ldd	r6, Y+14	; 0x0e
    444e:	7d 84       	ldd	r7, Y+13	; 0x0d
    4450:	8c 84       	ldd	r8, Y+12	; 0x0c
    4452:	9b 84       	ldd	r9, Y+11	; 0x0b
    4454:	aa 84       	ldd	r10, Y+10	; 0x0a
    4456:	b9 84       	ldd	r11, Y+9	; 0x09
    4458:	c8 84       	ldd	r12, Y+8	; 0x08
    445a:	df 80       	ldd	r13, Y+7	; 0x07
    445c:	ee 80       	ldd	r14, Y+6	; 0x06
    445e:	fd 80       	ldd	r15, Y+5	; 0x05
    4460:	0c 81       	ldd	r16, Y+4	; 0x04
    4462:	1b 81       	ldd	r17, Y+3	; 0x03
    4464:	aa 81       	ldd	r26, Y+2	; 0x02
    4466:	b9 81       	ldd	r27, Y+1	; 0x01
    4468:	ce 0f       	add	r28, r30
    446a:	d1 1d       	adc	r29, r1
    446c:	0f b6       	in	r0, 0x3f	; 63
    446e:	f8 94       	cli
    4470:	de bf       	out	0x3e, r29	; 62
    4472:	0f be       	out	0x3f, r0	; 63
    4474:	cd bf       	out	0x3d, r28	; 61
    4476:	ed 01       	movw	r28, r26
    4478:	08 95       	ret

0000447a <__ftoa_engine>:
    447a:	28 30       	cpi	r18, 0x08	; 8
    447c:	08 f0       	brcs	.+2      	; 0x4480 <__ftoa_engine+0x6>
    447e:	27 e0       	ldi	r18, 0x07	; 7
    4480:	33 27       	eor	r19, r19
    4482:	da 01       	movw	r26, r20
    4484:	99 0f       	add	r25, r25
    4486:	31 1d       	adc	r19, r1
    4488:	87 fd       	sbrc	r24, 7
    448a:	91 60       	ori	r25, 0x01	; 1
    448c:	00 96       	adiw	r24, 0x00	; 0
    448e:	61 05       	cpc	r22, r1
    4490:	71 05       	cpc	r23, r1
    4492:	39 f4       	brne	.+14     	; 0x44a2 <__ftoa_engine+0x28>
    4494:	32 60       	ori	r19, 0x02	; 2
    4496:	2e 5f       	subi	r18, 0xFE	; 254
    4498:	3d 93       	st	X+, r19
    449a:	30 e3       	ldi	r19, 0x30	; 48
    449c:	2a 95       	dec	r18
    449e:	e1 f7       	brne	.-8      	; 0x4498 <__ftoa_engine+0x1e>
    44a0:	08 95       	ret
    44a2:	9f 3f       	cpi	r25, 0xFF	; 255
    44a4:	30 f0       	brcs	.+12     	; 0x44b2 <__ftoa_engine+0x38>
    44a6:	80 38       	cpi	r24, 0x80	; 128
    44a8:	71 05       	cpc	r23, r1
    44aa:	61 05       	cpc	r22, r1
    44ac:	09 f0       	breq	.+2      	; 0x44b0 <__ftoa_engine+0x36>
    44ae:	3c 5f       	subi	r19, 0xFC	; 252
    44b0:	3c 5f       	subi	r19, 0xFC	; 252
    44b2:	3d 93       	st	X+, r19
    44b4:	91 30       	cpi	r25, 0x01	; 1
    44b6:	08 f0       	brcs	.+2      	; 0x44ba <__ftoa_engine+0x40>
    44b8:	80 68       	ori	r24, 0x80	; 128
    44ba:	91 1d       	adc	r25, r1
    44bc:	df 93       	push	r29
    44be:	cf 93       	push	r28
    44c0:	1f 93       	push	r17
    44c2:	0f 93       	push	r16
    44c4:	ff 92       	push	r15
    44c6:	ef 92       	push	r14
    44c8:	19 2f       	mov	r17, r25
    44ca:	98 7f       	andi	r25, 0xF8	; 248
    44cc:	96 95       	lsr	r25
    44ce:	e9 2f       	mov	r30, r25
    44d0:	96 95       	lsr	r25
    44d2:	96 95       	lsr	r25
    44d4:	e9 0f       	add	r30, r25
    44d6:	ff 27       	eor	r31, r31
    44d8:	ea 53       	subi	r30, 0x3A	; 58
    44da:	fd 4f       	sbci	r31, 0xFD	; 253
    44dc:	99 27       	eor	r25, r25
    44de:	33 27       	eor	r19, r19
    44e0:	ee 24       	eor	r14, r14
    44e2:	ff 24       	eor	r15, r15
    44e4:	a7 01       	movw	r20, r14
    44e6:	e7 01       	movw	r28, r14
    44e8:	05 90       	lpm	r0, Z+
    44ea:	08 94       	sec
    44ec:	07 94       	ror	r0
    44ee:	28 f4       	brcc	.+10     	; 0x44fa <__ftoa_engine+0x80>
    44f0:	36 0f       	add	r19, r22
    44f2:	e7 1e       	adc	r14, r23
    44f4:	f8 1e       	adc	r15, r24
    44f6:	49 1f       	adc	r20, r25
    44f8:	51 1d       	adc	r21, r1
    44fa:	66 0f       	add	r22, r22
    44fc:	77 1f       	adc	r23, r23
    44fe:	88 1f       	adc	r24, r24
    4500:	99 1f       	adc	r25, r25
    4502:	06 94       	lsr	r0
    4504:	a1 f7       	brne	.-24     	; 0x44ee <__ftoa_engine+0x74>
    4506:	05 90       	lpm	r0, Z+
    4508:	07 94       	ror	r0
    450a:	28 f4       	brcc	.+10     	; 0x4516 <__ftoa_engine+0x9c>
    450c:	e7 0e       	add	r14, r23
    450e:	f8 1e       	adc	r15, r24
    4510:	49 1f       	adc	r20, r25
    4512:	56 1f       	adc	r21, r22
    4514:	c1 1d       	adc	r28, r1
    4516:	77 0f       	add	r23, r23
    4518:	88 1f       	adc	r24, r24
    451a:	99 1f       	adc	r25, r25
    451c:	66 1f       	adc	r22, r22
    451e:	06 94       	lsr	r0
    4520:	a1 f7       	brne	.-24     	; 0x450a <__ftoa_engine+0x90>
    4522:	05 90       	lpm	r0, Z+
    4524:	07 94       	ror	r0
    4526:	28 f4       	brcc	.+10     	; 0x4532 <__ftoa_engine+0xb8>
    4528:	f8 0e       	add	r15, r24
    452a:	49 1f       	adc	r20, r25
    452c:	56 1f       	adc	r21, r22
    452e:	c7 1f       	adc	r28, r23
    4530:	d1 1d       	adc	r29, r1
    4532:	88 0f       	add	r24, r24
    4534:	99 1f       	adc	r25, r25
    4536:	66 1f       	adc	r22, r22
    4538:	77 1f       	adc	r23, r23
    453a:	06 94       	lsr	r0
    453c:	a1 f7       	brne	.-24     	; 0x4526 <__ftoa_engine+0xac>
    453e:	05 90       	lpm	r0, Z+
    4540:	07 94       	ror	r0
    4542:	20 f4       	brcc	.+8      	; 0x454c <__ftoa_engine+0xd2>
    4544:	49 0f       	add	r20, r25
    4546:	56 1f       	adc	r21, r22
    4548:	c7 1f       	adc	r28, r23
    454a:	d8 1f       	adc	r29, r24
    454c:	99 0f       	add	r25, r25
    454e:	66 1f       	adc	r22, r22
    4550:	77 1f       	adc	r23, r23
    4552:	88 1f       	adc	r24, r24
    4554:	06 94       	lsr	r0
    4556:	a9 f7       	brne	.-22     	; 0x4542 <__ftoa_engine+0xc8>
    4558:	84 91       	lpm	r24, Z
    455a:	10 95       	com	r17
    455c:	17 70       	andi	r17, 0x07	; 7
    455e:	41 f0       	breq	.+16     	; 0x4570 <__ftoa_engine+0xf6>
    4560:	d6 95       	lsr	r29
    4562:	c7 95       	ror	r28
    4564:	57 95       	ror	r21
    4566:	47 95       	ror	r20
    4568:	f7 94       	ror	r15
    456a:	e7 94       	ror	r14
    456c:	1a 95       	dec	r17
    456e:	c1 f7       	brne	.-16     	; 0x4560 <__ftoa_engine+0xe6>
    4570:	ec e6       	ldi	r30, 0x6C	; 108
    4572:	f2 e0       	ldi	r31, 0x02	; 2
    4574:	68 94       	set
    4576:	15 90       	lpm	r1, Z+
    4578:	15 91       	lpm	r17, Z+
    457a:	35 91       	lpm	r19, Z+
    457c:	65 91       	lpm	r22, Z+
    457e:	95 91       	lpm	r25, Z+
    4580:	05 90       	lpm	r0, Z+
    4582:	7f e2       	ldi	r23, 0x2F	; 47
    4584:	73 95       	inc	r23
    4586:	e1 18       	sub	r14, r1
    4588:	f1 0a       	sbc	r15, r17
    458a:	43 0b       	sbc	r20, r19
    458c:	56 0b       	sbc	r21, r22
    458e:	c9 0b       	sbc	r28, r25
    4590:	d0 09       	sbc	r29, r0
    4592:	c0 f7       	brcc	.-16     	; 0x4584 <__ftoa_engine+0x10a>
    4594:	e1 0c       	add	r14, r1
    4596:	f1 1e       	adc	r15, r17
    4598:	43 1f       	adc	r20, r19
    459a:	56 1f       	adc	r21, r22
    459c:	c9 1f       	adc	r28, r25
    459e:	d0 1d       	adc	r29, r0
    45a0:	7e f4       	brtc	.+30     	; 0x45c0 <__ftoa_engine+0x146>
    45a2:	70 33       	cpi	r23, 0x30	; 48
    45a4:	11 f4       	brne	.+4      	; 0x45aa <__ftoa_engine+0x130>
    45a6:	8a 95       	dec	r24
    45a8:	e6 cf       	rjmp	.-52     	; 0x4576 <__ftoa_engine+0xfc>
    45aa:	e8 94       	clt
    45ac:	01 50       	subi	r16, 0x01	; 1
    45ae:	30 f0       	brcs	.+12     	; 0x45bc <__ftoa_engine+0x142>
    45b0:	08 0f       	add	r16, r24
    45b2:	0a f4       	brpl	.+2      	; 0x45b6 <__ftoa_engine+0x13c>
    45b4:	00 27       	eor	r16, r16
    45b6:	02 17       	cp	r16, r18
    45b8:	08 f4       	brcc	.+2      	; 0x45bc <__ftoa_engine+0x142>
    45ba:	20 2f       	mov	r18, r16
    45bc:	23 95       	inc	r18
    45be:	02 2f       	mov	r16, r18
    45c0:	7a 33       	cpi	r23, 0x3A	; 58
    45c2:	28 f0       	brcs	.+10     	; 0x45ce <__ftoa_engine+0x154>
    45c4:	79 e3       	ldi	r23, 0x39	; 57
    45c6:	7d 93       	st	X+, r23
    45c8:	2a 95       	dec	r18
    45ca:	e9 f7       	brne	.-6      	; 0x45c6 <__ftoa_engine+0x14c>
    45cc:	10 c0       	rjmp	.+32     	; 0x45ee <__ftoa_engine+0x174>
    45ce:	7d 93       	st	X+, r23
    45d0:	2a 95       	dec	r18
    45d2:	89 f6       	brne	.-94     	; 0x4576 <__ftoa_engine+0xfc>
    45d4:	06 94       	lsr	r0
    45d6:	97 95       	ror	r25
    45d8:	67 95       	ror	r22
    45da:	37 95       	ror	r19
    45dc:	17 95       	ror	r17
    45de:	17 94       	ror	r1
    45e0:	e1 18       	sub	r14, r1
    45e2:	f1 0a       	sbc	r15, r17
    45e4:	43 0b       	sbc	r20, r19
    45e6:	56 0b       	sbc	r21, r22
    45e8:	c9 0b       	sbc	r28, r25
    45ea:	d0 09       	sbc	r29, r0
    45ec:	98 f0       	brcs	.+38     	; 0x4614 <__ftoa_engine+0x19a>
    45ee:	23 95       	inc	r18
    45f0:	7e 91       	ld	r23, -X
    45f2:	73 95       	inc	r23
    45f4:	7a 33       	cpi	r23, 0x3A	; 58
    45f6:	08 f0       	brcs	.+2      	; 0x45fa <__ftoa_engine+0x180>
    45f8:	70 e3       	ldi	r23, 0x30	; 48
    45fa:	7c 93       	st	X, r23
    45fc:	20 13       	cpse	r18, r16
    45fe:	b8 f7       	brcc	.-18     	; 0x45ee <__ftoa_engine+0x174>
    4600:	7e 91       	ld	r23, -X
    4602:	70 61       	ori	r23, 0x10	; 16
    4604:	7d 93       	st	X+, r23
    4606:	30 f0       	brcs	.+12     	; 0x4614 <__ftoa_engine+0x19a>
    4608:	83 95       	inc	r24
    460a:	71 e3       	ldi	r23, 0x31	; 49
    460c:	7d 93       	st	X+, r23
    460e:	70 e3       	ldi	r23, 0x30	; 48
    4610:	2a 95       	dec	r18
    4612:	e1 f7       	brne	.-8      	; 0x460c <__ftoa_engine+0x192>
    4614:	11 24       	eor	r1, r1
    4616:	ef 90       	pop	r14
    4618:	ff 90       	pop	r15
    461a:	0f 91       	pop	r16
    461c:	1f 91       	pop	r17
    461e:	cf 91       	pop	r28
    4620:	df 91       	pop	r29
    4622:	99 27       	eor	r25, r25
    4624:	87 fd       	sbrc	r24, 7
    4626:	90 95       	com	r25
    4628:	08 95       	ret

0000462a <strnlen_P>:
    462a:	fc 01       	movw	r30, r24
    462c:	05 90       	lpm	r0, Z+
    462e:	61 50       	subi	r22, 0x01	; 1
    4630:	70 40       	sbci	r23, 0x00	; 0
    4632:	01 10       	cpse	r0, r1
    4634:	d8 f7       	brcc	.-10     	; 0x462c <strnlen_P+0x2>
    4636:	80 95       	com	r24
    4638:	90 95       	com	r25
    463a:	8e 0f       	add	r24, r30
    463c:	9f 1f       	adc	r25, r31
    463e:	08 95       	ret

00004640 <strnlen>:
    4640:	fc 01       	movw	r30, r24
    4642:	61 50       	subi	r22, 0x01	; 1
    4644:	70 40       	sbci	r23, 0x00	; 0
    4646:	01 90       	ld	r0, Z+
    4648:	01 10       	cpse	r0, r1
    464a:	d8 f7       	brcc	.-10     	; 0x4642 <strnlen+0x2>
    464c:	80 95       	com	r24
    464e:	90 95       	com	r25
    4650:	8e 0f       	add	r24, r30
    4652:	9f 1f       	adc	r25, r31
    4654:	08 95       	ret

00004656 <fputc>:
    4656:	0f 93       	push	r16
    4658:	1f 93       	push	r17
    465a:	cf 93       	push	r28
    465c:	df 93       	push	r29
    465e:	fb 01       	movw	r30, r22
    4660:	23 81       	ldd	r18, Z+3	; 0x03
    4662:	21 fd       	sbrc	r18, 1
    4664:	03 c0       	rjmp	.+6      	; 0x466c <fputc+0x16>
    4666:	8f ef       	ldi	r24, 0xFF	; 255
    4668:	9f ef       	ldi	r25, 0xFF	; 255
    466a:	2c c0       	rjmp	.+88     	; 0x46c4 <fputc+0x6e>
    466c:	22 ff       	sbrs	r18, 2
    466e:	16 c0       	rjmp	.+44     	; 0x469c <fputc+0x46>
    4670:	46 81       	ldd	r20, Z+6	; 0x06
    4672:	57 81       	ldd	r21, Z+7	; 0x07
    4674:	24 81       	ldd	r18, Z+4	; 0x04
    4676:	35 81       	ldd	r19, Z+5	; 0x05
    4678:	42 17       	cp	r20, r18
    467a:	53 07       	cpc	r21, r19
    467c:	44 f4       	brge	.+16     	; 0x468e <fputc+0x38>
    467e:	a0 81       	ld	r26, Z
    4680:	b1 81       	ldd	r27, Z+1	; 0x01
    4682:	9d 01       	movw	r18, r26
    4684:	2f 5f       	subi	r18, 0xFF	; 255
    4686:	3f 4f       	sbci	r19, 0xFF	; 255
    4688:	31 83       	std	Z+1, r19	; 0x01
    468a:	20 83       	st	Z, r18
    468c:	8c 93       	st	X, r24
    468e:	26 81       	ldd	r18, Z+6	; 0x06
    4690:	37 81       	ldd	r19, Z+7	; 0x07
    4692:	2f 5f       	subi	r18, 0xFF	; 255
    4694:	3f 4f       	sbci	r19, 0xFF	; 255
    4696:	37 83       	std	Z+7, r19	; 0x07
    4698:	26 83       	std	Z+6, r18	; 0x06
    469a:	14 c0       	rjmp	.+40     	; 0x46c4 <fputc+0x6e>
    469c:	8b 01       	movw	r16, r22
    469e:	ec 01       	movw	r28, r24
    46a0:	fb 01       	movw	r30, r22
    46a2:	00 84       	ldd	r0, Z+8	; 0x08
    46a4:	f1 85       	ldd	r31, Z+9	; 0x09
    46a6:	e0 2d       	mov	r30, r0
    46a8:	09 95       	icall
    46aa:	89 2b       	or	r24, r25
    46ac:	e1 f6       	brne	.-72     	; 0x4666 <fputc+0x10>
    46ae:	d8 01       	movw	r26, r16
    46b0:	16 96       	adiw	r26, 0x06	; 6
    46b2:	8d 91       	ld	r24, X+
    46b4:	9c 91       	ld	r25, X
    46b6:	17 97       	sbiw	r26, 0x07	; 7
    46b8:	01 96       	adiw	r24, 0x01	; 1
    46ba:	17 96       	adiw	r26, 0x07	; 7
    46bc:	9c 93       	st	X, r25
    46be:	8e 93       	st	-X, r24
    46c0:	16 97       	sbiw	r26, 0x06	; 6
    46c2:	ce 01       	movw	r24, r28
    46c4:	df 91       	pop	r29
    46c6:	cf 91       	pop	r28
    46c8:	1f 91       	pop	r17
    46ca:	0f 91       	pop	r16
    46cc:	08 95       	ret

000046ce <__ultoa_invert>:
    46ce:	fa 01       	movw	r30, r20
    46d0:	aa 27       	eor	r26, r26
    46d2:	28 30       	cpi	r18, 0x08	; 8
    46d4:	51 f1       	breq	.+84     	; 0x472a <__ultoa_invert+0x5c>
    46d6:	20 31       	cpi	r18, 0x10	; 16
    46d8:	81 f1       	breq	.+96     	; 0x473a <__ultoa_invert+0x6c>
    46da:	e8 94       	clt
    46dc:	6f 93       	push	r22
    46de:	6e 7f       	andi	r22, 0xFE	; 254
    46e0:	6e 5f       	subi	r22, 0xFE	; 254
    46e2:	7f 4f       	sbci	r23, 0xFF	; 255
    46e4:	8f 4f       	sbci	r24, 0xFF	; 255
    46e6:	9f 4f       	sbci	r25, 0xFF	; 255
    46e8:	af 4f       	sbci	r26, 0xFF	; 255
    46ea:	b1 e0       	ldi	r27, 0x01	; 1
    46ec:	3e d0       	rcall	.+124    	; 0x476a <__ultoa_invert+0x9c>
    46ee:	b4 e0       	ldi	r27, 0x04	; 4
    46f0:	3c d0       	rcall	.+120    	; 0x476a <__ultoa_invert+0x9c>
    46f2:	67 0f       	add	r22, r23
    46f4:	78 1f       	adc	r23, r24
    46f6:	89 1f       	adc	r24, r25
    46f8:	9a 1f       	adc	r25, r26
    46fa:	a1 1d       	adc	r26, r1
    46fc:	68 0f       	add	r22, r24
    46fe:	79 1f       	adc	r23, r25
    4700:	8a 1f       	adc	r24, r26
    4702:	91 1d       	adc	r25, r1
    4704:	a1 1d       	adc	r26, r1
    4706:	6a 0f       	add	r22, r26
    4708:	71 1d       	adc	r23, r1
    470a:	81 1d       	adc	r24, r1
    470c:	91 1d       	adc	r25, r1
    470e:	a1 1d       	adc	r26, r1
    4710:	20 d0       	rcall	.+64     	; 0x4752 <__ultoa_invert+0x84>
    4712:	09 f4       	brne	.+2      	; 0x4716 <__ultoa_invert+0x48>
    4714:	68 94       	set
    4716:	3f 91       	pop	r19
    4718:	2a e0       	ldi	r18, 0x0A	; 10
    471a:	26 9f       	mul	r18, r22
    471c:	11 24       	eor	r1, r1
    471e:	30 19       	sub	r19, r0
    4720:	30 5d       	subi	r19, 0xD0	; 208
    4722:	31 93       	st	Z+, r19
    4724:	de f6       	brtc	.-74     	; 0x46dc <__ultoa_invert+0xe>
    4726:	cf 01       	movw	r24, r30
    4728:	08 95       	ret
    472a:	46 2f       	mov	r20, r22
    472c:	47 70       	andi	r20, 0x07	; 7
    472e:	40 5d       	subi	r20, 0xD0	; 208
    4730:	41 93       	st	Z+, r20
    4732:	b3 e0       	ldi	r27, 0x03	; 3
    4734:	0f d0       	rcall	.+30     	; 0x4754 <__ultoa_invert+0x86>
    4736:	c9 f7       	brne	.-14     	; 0x472a <__ultoa_invert+0x5c>
    4738:	f6 cf       	rjmp	.-20     	; 0x4726 <__ultoa_invert+0x58>
    473a:	46 2f       	mov	r20, r22
    473c:	4f 70       	andi	r20, 0x0F	; 15
    473e:	40 5d       	subi	r20, 0xD0	; 208
    4740:	4a 33       	cpi	r20, 0x3A	; 58
    4742:	18 f0       	brcs	.+6      	; 0x474a <__ultoa_invert+0x7c>
    4744:	49 5d       	subi	r20, 0xD9	; 217
    4746:	31 fd       	sbrc	r19, 1
    4748:	40 52       	subi	r20, 0x20	; 32
    474a:	41 93       	st	Z+, r20
    474c:	02 d0       	rcall	.+4      	; 0x4752 <__ultoa_invert+0x84>
    474e:	a9 f7       	brne	.-22     	; 0x473a <__ultoa_invert+0x6c>
    4750:	ea cf       	rjmp	.-44     	; 0x4726 <__ultoa_invert+0x58>
    4752:	b4 e0       	ldi	r27, 0x04	; 4
    4754:	a6 95       	lsr	r26
    4756:	97 95       	ror	r25
    4758:	87 95       	ror	r24
    475a:	77 95       	ror	r23
    475c:	67 95       	ror	r22
    475e:	ba 95       	dec	r27
    4760:	c9 f7       	brne	.-14     	; 0x4754 <__ultoa_invert+0x86>
    4762:	00 97       	sbiw	r24, 0x00	; 0
    4764:	61 05       	cpc	r22, r1
    4766:	71 05       	cpc	r23, r1
    4768:	08 95       	ret
    476a:	9b 01       	movw	r18, r22
    476c:	ac 01       	movw	r20, r24
    476e:	0a 2e       	mov	r0, r26
    4770:	06 94       	lsr	r0
    4772:	57 95       	ror	r21
    4774:	47 95       	ror	r20
    4776:	37 95       	ror	r19
    4778:	27 95       	ror	r18
    477a:	ba 95       	dec	r27
    477c:	c9 f7       	brne	.-14     	; 0x4770 <__ultoa_invert+0xa2>
    477e:	62 0f       	add	r22, r18
    4780:	73 1f       	adc	r23, r19
    4782:	84 1f       	adc	r24, r20
    4784:	95 1f       	adc	r25, r21
    4786:	a0 1d       	adc	r26, r0
    4788:	08 95       	ret

0000478a <eeprom_read_word>:
    478a:	a8 e1       	ldi	r26, 0x18	; 24
    478c:	b0 e0       	ldi	r27, 0x00	; 0
    478e:	42 e0       	ldi	r20, 0x02	; 2
    4790:	50 e0       	ldi	r21, 0x00	; 0
    4792:	0c 94 d2 23 	jmp	0x47a4	; 0x47a4 <eeprom_read_blraw>

00004796 <eeprom_write_word>:
    4796:	0e 94 e0 23 	call	0x47c0	; 0x47c0 <eeprom_write_byte>
    479a:	27 2f       	mov	r18, r23
    479c:	0c 94 e1 23 	jmp	0x47c2	; 0x47c2 <eeprom_write_r18>

000047a0 <eeprom_read_block>:
    47a0:	dc 01       	movw	r26, r24
    47a2:	cb 01       	movw	r24, r22

000047a4 <eeprom_read_blraw>:
    47a4:	fc 01       	movw	r30, r24
    47a6:	f9 99       	sbic	0x1f, 1	; 31
    47a8:	fe cf       	rjmp	.-4      	; 0x47a6 <eeprom_read_blraw+0x2>
    47aa:	06 c0       	rjmp	.+12     	; 0x47b8 <eeprom_read_blraw+0x14>
    47ac:	f2 bd       	out	0x22, r31	; 34
    47ae:	e1 bd       	out	0x21, r30	; 33
    47b0:	f8 9a       	sbi	0x1f, 0	; 31
    47b2:	31 96       	adiw	r30, 0x01	; 1
    47b4:	00 b4       	in	r0, 0x20	; 32
    47b6:	0d 92       	st	X+, r0
    47b8:	41 50       	subi	r20, 0x01	; 1
    47ba:	50 40       	sbci	r21, 0x00	; 0
    47bc:	b8 f7       	brcc	.-18     	; 0x47ac <eeprom_read_blraw+0x8>
    47be:	08 95       	ret

000047c0 <eeprom_write_byte>:
    47c0:	26 2f       	mov	r18, r22

000047c2 <eeprom_write_r18>:
    47c2:	f9 99       	sbic	0x1f, 1	; 31
    47c4:	fe cf       	rjmp	.-4      	; 0x47c2 <eeprom_write_r18>
    47c6:	1f ba       	out	0x1f, r1	; 31
    47c8:	92 bd       	out	0x22, r25	; 34
    47ca:	81 bd       	out	0x21, r24	; 33
    47cc:	20 bd       	out	0x20, r18	; 32
    47ce:	0f b6       	in	r0, 0x3f	; 63
    47d0:	f8 94       	cli
    47d2:	fa 9a       	sbi	0x1f, 2	; 31
    47d4:	f9 9a       	sbi	0x1f, 1	; 31
    47d6:	0f be       	out	0x3f, r0	; 63
    47d8:	01 96       	adiw	r24, 0x01	; 1
    47da:	08 95       	ret

000047dc <_exit>:
    47dc:	f8 94       	cli

000047de <__stop_program>:
    47de:	ff cf       	rjmp	.-2      	; 0x47de <__stop_program>
